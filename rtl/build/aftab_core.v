/* Generated by Yosys 0.44+4 (git sha1 77b2ae2e3, clang++ 14.0.0-1ubuntu1.1 -fPIC -O3) */

module aftab_aau_32(clk, rst, sync_rst, ain, bin, startmultaau, startdivideaau, signedsigned, signedunsigned, unsignedunsigned, resaau1, resaau2, completeaau, dividedbyzeroflag);
  wire _000_;
  wire [32:0] _001_;
  wire _002_;
  wire [32:0] _003_;
  wire [31:0] _004_;
  wire [31:0] _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire [31:0] _011_;
  wire [31:0] _012_;
  wire [31:0] _013_;
  wire [31:0] _014_;
  wire [31:0] _015_;
  wire [31:0] _016_;
  wire [31:0] _017_;
  wire [31:0] _018_;
  reg [1:0] _019_;
  wire [1:0] _020_;
  wire _021_;
  wire [1:0] _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire [5:0] _028_;
  wire _029_;
  wire _030_;
  wire [5:0] _031_;
  wire [5:0] _032_;
  (* unused_bits = "0 5" *)
  wire [5:0] _033_;
  wire _034_;
  wire [31:0] _035_;
  reg [32:0] _036_;
  (* unused_bits = "32" *)
  wire [32:0] _037_;
  reg _038_;
  reg [31:0] _039_;
  wire [31:0] _040_;
  wire _041_;
  wire [31:0] _042_;
  wire _043_;
  reg [32:0] _044_;
  wire [32:0] _045_;
  wire [32:0] _046_;
  reg [1:0] _047_;
  wire [1:0] _048_;
  wire _049_;
  wire _050_;
  wire [1:0] _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  reg [5:0] _059_;
  wire _060_;
  wire _061_;
  wire [5:0] _062_;
  wire [5:0] _063_;
  (* unused_bits = "5" *)
  wire [5:0] _064_;
  wire _065_;
  wire [32:0] _066_;
  wire [33:0] _067_;
  reg [32:0] _068_;
  wire [32:0] _069_;
  reg [33:0] _070_;
  wire [33:0] _071_;
  (* unused_bits = "0" *)
  wire [33:0] _072_;
  reg [32:0] _073_;
  wire [32:0] _074_;
  input [31:0] ain;
  wire [31:0] ain;
  input [31:0] bin;
  wire [31:0] bin;
  input clk;
  wire clk;
  output completeaau;
  wire completeaau;
  output dividedbyzeroflag;
  wire dividedbyzeroflag;
  (* hdlname = "division clk" *)
  wire \division.clk ;
  (* hdlname = "division ddin" *)
  wire [31:0] \division.ddin ;
  (* hdlname = "division dividedbyzeroflag" *)
  wire \division.dividedbyzeroflag ;
  (* hdlname = "division dividend" *)
  wire [31:0] \division.dividend ;
  (* hdlname = "division divisor" *)
  wire [31:0] \division.divisor ;
  (* hdlname = "division divisorzero" *)
  wire \division.divisorzero ;
  (* hdlname = "division donesdiv" *)
  wire \division.donesdiv ;
  (* hdlname = "division drin" *)
  wire [31:0] \division.drin ;
  (* hdlname = "division endd" *)
  wire \division.endd ;
  (* hdlname = "division endr" *)
  wire \division.endr ;
  (* hdlname = "division enq" *)
  wire \division.enq ;
  (* hdlname = "division enr" *)
  wire \division.enr ;
  (* hdlname = "division qout" *)
  wire [31:0] \division.qout ;
  (* hdlname = "division qp" *)
  wire [31:0] \division.qp ;
  (* hdlname = "division remout" *)
  wire [31:0] \division.remout ;
  (* hdlname = "division remp" *)
  wire [32:0] \division.remp ;
  (* hdlname = "division rst" *)
  wire \division.rst ;
  (* hdlname = "division safestart" *)
  wire \division.safestart ;
  (* hdlname = "division signedunsignedbar" *)
  wire \division.signedunsignedbar ;
  (* hdlname = "division startsdiv" *)
  wire \division.startsdiv ;
  (* hdlname = "division sync_rst" *)
  wire \division.sync_rst ;
  (* hdlname = "division tcldividend ain" *)
  wire [31:0] \division.tcldividend.ain ;
  (* hdlname = "division tcldividend ainp" *)
  wire [31:0] \division.tcldividend.ainp ;
  (* hdlname = "division tcldividend aout" *)
  wire [31:0] \division.tcldividend.aout ;
  (* hdlname = "division tcldividend en" *)
  wire \division.tcldividend.en ;
  (* hdlname = "division tcldivisor ain" *)
  wire [31:0] \division.tcldivisor.ain ;
  (* hdlname = "division tcldivisor ainp" *)
  wire [31:0] \division.tcldivisor.ainp ;
  (* hdlname = "division tcldivisor aout" *)
  wire [31:0] \division.tcldivisor.aout ;
  (* hdlname = "division tcldivisor en" *)
  wire \division.tcldivisor.en ;
  (* hdlname = "division tclq ain" *)
  wire [31:0] \division.tclq.ain ;
  (* hdlname = "division tclq ainp" *)
  wire [31:0] \division.tclq.ainp ;
  (* hdlname = "division tclq aout" *)
  wire [31:0] \division.tclq.aout ;
  (* hdlname = "division tclq en" *)
  wire \division.tclq.en ;
  (* hdlname = "division tclrem ain" *)
  wire [31:0] \division.tclrem.ain ;
  (* hdlname = "division tclrem ainp" *)
  wire [31:0] \division.tclrem.ainp ;
  (* hdlname = "division tclrem aout" *)
  wire [31:0] \division.tclrem.aout ;
  (* hdlname = "division tclrem en" *)
  wire \division.tclrem.en ;
  (* hdlname = "division unsigneddiv clk" *)
  wire \division.unsigneddiv.clk ;
  (* hdlname = "division unsigneddiv controllerdiv clk" *)
  wire \division.unsigneddiv.controllerdiv.clk ;
  (* hdlname = "division unsigneddiv controllerdiv cocnt" *)
  wire \division.unsigneddiv.controllerdiv.cocnt ;
  (* hdlname = "division unsigneddiv controllerdiv counter clk" *)
  wire \division.unsigneddiv.controllerdiv.counter.clk ;
  (* hdlname = "division unsigneddiv controllerdiv counter cocnt" *)
  wire \division.unsigneddiv.controllerdiv.counter.cocnt ;
  (* hdlname = "division unsigneddiv controllerdiv counter cocntp" *)
  wire \division.unsigneddiv.controllerdiv.counter.cocntp ;
  (* hdlname = "division unsigneddiv controllerdiv counter inccnt" *)
  wire \division.unsigneddiv.controllerdiv.counter.inccnt ;
  (* hdlname = "division unsigneddiv controllerdiv counter initcnt" *)
  wire \division.unsigneddiv.controllerdiv.counter.initcnt ;
  (* hdlname = "division unsigneddiv controllerdiv counter initvalue" *)
  wire [5:0] \division.unsigneddiv.controllerdiv.counter.initvalue ;
  (* hdlname = "division unsigneddiv controllerdiv counter outcnt" *)
  wire [5:0] \division.unsigneddiv.controllerdiv.counter.outcnt ;
  (* hdlname = "division unsigneddiv controllerdiv counter rst" *)
  wire \division.unsigneddiv.controllerdiv.counter.rst ;
  (* hdlname = "division unsigneddiv controllerdiv counter temp" *)
  wire [5:0] \division.unsigneddiv.controllerdiv.counter.temp ;
  (* hdlname = "division unsigneddiv controllerdiv counter zerocnt" *)
  wire \division.unsigneddiv.controllerdiv.counter.zerocnt ;
  (* hdlname = "division unsigneddiv controllerdiv donediv" *)
  wire \division.unsigneddiv.controllerdiv.donediv ;
  (* hdlname = "division unsigneddiv controllerdiv inccnt" *)
  wire \division.unsigneddiv.controllerdiv.inccnt ;
  (* hdlname = "division unsigneddiv controllerdiv initcnt" *)
  wire \division.unsigneddiv.controllerdiv.initcnt ;
  (* hdlname = "division unsigneddiv controllerdiv ldregm" *)
  wire \division.unsigneddiv.controllerdiv.ldregm ;
  (* hdlname = "division unsigneddiv controllerdiv ldregq" *)
  wire \division.unsigneddiv.controllerdiv.ldregq ;
  (* hdlname = "division unsigneddiv controllerdiv ldregr" *)
  wire \division.unsigneddiv.controllerdiv.ldregr ;
  (* hdlname = "division unsigneddiv controllerdiv nstate" *)
  wire [1:0] \division.unsigneddiv.controllerdiv.nstate ;
  (* hdlname = "division unsigneddiv controllerdiv pstate" *)
  wire [1:0] \division.unsigneddiv.controllerdiv.pstate ;
  (* hdlname = "division unsigneddiv controllerdiv qq0" *)
  wire \division.unsigneddiv.controllerdiv.qq0 ;
  (* hdlname = "division unsigneddiv controllerdiv r33" *)
  wire \division.unsigneddiv.controllerdiv.r33 ;
  (* hdlname = "division unsigneddiv controllerdiv rst" *)
  wire \division.unsigneddiv.controllerdiv.rst ;
  (* hdlname = "division unsigneddiv controllerdiv seldividend" *)
  wire \division.unsigneddiv.controllerdiv.seldividend ;
  (* hdlname = "division unsigneddiv controllerdiv selline1" *)
  wire \division.unsigneddiv.controllerdiv.selline1 ;
  (* hdlname = "division unsigneddiv controllerdiv shlregq" *)
  wire \division.unsigneddiv.controllerdiv.shlregq ;
  (* hdlname = "division unsigneddiv controllerdiv shlregr" *)
  wire \division.unsigneddiv.controllerdiv.shlregr ;
  (* hdlname = "division unsigneddiv controllerdiv shrregq" *)
  wire \division.unsigneddiv.controllerdiv.shrregq ;
  (* hdlname = "division unsigneddiv controllerdiv shrregr" *)
  wire \division.unsigneddiv.controllerdiv.shrregr ;
  (* hdlname = "division unsigneddiv controllerdiv startdiv" *)
  wire \division.unsigneddiv.controllerdiv.startdiv ;
  (* hdlname = "division unsigneddiv controllerdiv sync_rst" *)
  wire \division.unsigneddiv.controllerdiv.sync_rst ;
  (* hdlname = "division unsigneddiv controllerdiv zerocnt" *)
  wire \division.unsigneddiv.controllerdiv.zerocnt ;
  (* hdlname = "division unsigneddiv controllerdiv zeroregm" *)
  wire \division.unsigneddiv.controllerdiv.zeroregm ;
  (* hdlname = "division unsigneddiv controllerdiv zeroregq" *)
  wire \division.unsigneddiv.controllerdiv.zeroregq ;
  (* hdlname = "division unsigneddiv controllerdiv zeroregr" *)
  wire \division.unsigneddiv.controllerdiv.zeroregr ;
  (* hdlname = "division unsigneddiv datapathdiv addresult" *)
  wire [32:0] \division.unsigneddiv.datapathdiv.addresult ;
  (* hdlname = "division unsigneddiv datapathdiv clk" *)
  wire \division.unsigneddiv.datapathdiv.clk ;
  (* hdlname = "division unsigneddiv datapathdiv dividend" *)
  wire [31:0] \division.unsigneddiv.datapathdiv.dividend ;
  (* hdlname = "division unsigneddiv datapathdiv divisor" *)
  wire [31:0] \division.unsigneddiv.datapathdiv.divisor ;
  (* hdlname = "division unsigneddiv datapathdiv divisorp" *)
  wire [32:0] \division.unsigneddiv.datapathdiv.divisorp ;
  (* hdlname = "division unsigneddiv datapathdiv ldregm" *)
  wire \division.unsigneddiv.datapathdiv.ldregm ;
  (* hdlname = "division unsigneddiv datapathdiv ldregq" *)
  wire \division.unsigneddiv.datapathdiv.ldregq ;
  (* hdlname = "division unsigneddiv datapathdiv ldregr" *)
  wire \division.unsigneddiv.datapathdiv.ldregr ;
  (* hdlname = "division unsigneddiv datapathdiv leftbitoutq" *)
  wire \division.unsigneddiv.datapathdiv.leftbitoutq ;
  (* hdlname = "division unsigneddiv datapathdiv line1" *)
  wire [31:0] \division.unsigneddiv.datapathdiv.line1 ;
  (* hdlname = "division unsigneddiv datapathdiv m" *)
  wire [32:0] \division.unsigneddiv.datapathdiv.m ;
  (* hdlname = "division unsigneddiv datapathdiv mux33b a" *)
  wire [31:0] \division.unsigneddiv.datapathdiv.mux33b.a ;
  (* hdlname = "division unsigneddiv datapathdiv mux33b b" *)
  wire [31:0] \division.unsigneddiv.datapathdiv.mux33b.b ;
  (* hdlname = "division unsigneddiv datapathdiv mux33b s0" *)
  wire \division.unsigneddiv.datapathdiv.mux33b.s0 ;
  (* hdlname = "division unsigneddiv datapathdiv mux33b s1" *)
  wire \division.unsigneddiv.datapathdiv.mux33b.s1 ;
  (* hdlname = "division unsigneddiv datapathdiv mux33b w" *)
  wire [31:0] \division.unsigneddiv.datapathdiv.mux33b.w ;
  (* hdlname = "division unsigneddiv datapathdiv mux34b a" *)
  wire [32:0] \division.unsigneddiv.datapathdiv.mux34b.a ;
  (* hdlname = "division unsigneddiv datapathdiv mux34b b" *)
  wire [32:0] \division.unsigneddiv.datapathdiv.mux34b.b ;
  (* hdlname = "division unsigneddiv datapathdiv mux34b s0" *)
  wire \division.unsigneddiv.datapathdiv.mux34b.s0 ;
  (* hdlname = "division unsigneddiv datapathdiv mux34b s1" *)
  wire \division.unsigneddiv.datapathdiv.mux34b.s1 ;
  (* hdlname = "division unsigneddiv datapathdiv mux34b w" *)
  wire [32:0] \division.unsigneddiv.datapathdiv.mux34b.w ;
  (* hdlname = "division unsigneddiv datapathdiv outmux1" *)
  wire [31:0] \division.unsigneddiv.datapathdiv.outmux1 ;
  (* hdlname = "division unsigneddiv datapathdiv q" *)
  wire [31:0] \division.unsigneddiv.datapathdiv.q ;
  (* hdlname = "division unsigneddiv datapathdiv qprev" *)
  wire [31:0] \division.unsigneddiv.datapathdiv.qprev ;
  (* hdlname = "division unsigneddiv datapathdiv qq0" *)
  wire \division.unsigneddiv.datapathdiv.qq0 ;
  (* hdlname = "division unsigneddiv datapathdiv r33" *)
  wire \division.unsigneddiv.datapathdiv.r33 ;
  (* hdlname = "division unsigneddiv datapathdiv regm clk" *)
  wire \division.unsigneddiv.datapathdiv.regm.clk ;
  (* hdlname = "division unsigneddiv datapathdiv regm inreg" *)
  wire [32:0] \division.unsigneddiv.datapathdiv.regm.inreg ;
  (* hdlname = "division unsigneddiv datapathdiv regm load" *)
  wire \division.unsigneddiv.datapathdiv.regm.load ;
  (* hdlname = "division unsigneddiv datapathdiv regm outreg" *)
  wire [32:0] \division.unsigneddiv.datapathdiv.regm.outreg ;
  (* hdlname = "division unsigneddiv datapathdiv regm rst" *)
  wire \division.unsigneddiv.datapathdiv.regm.rst ;
  (* hdlname = "division unsigneddiv datapathdiv regm zero" *)
  wire \division.unsigneddiv.datapathdiv.regm.zero ;
  (* hdlname = "division unsigneddiv datapathdiv remainder" *)
  wire [32:0] \division.unsigneddiv.datapathdiv.remainder ;
  (* hdlname = "division unsigneddiv datapathdiv rprev" *)
  wire [32:0] \division.unsigneddiv.datapathdiv.rprev ;
  (* hdlname = "division unsigneddiv datapathdiv rst" *)
  wire \division.unsigneddiv.datapathdiv.rst ;
  (* hdlname = "division unsigneddiv datapathdiv seldividend" *)
  wire \division.unsigneddiv.datapathdiv.seldividend ;
  (* hdlname = "division unsigneddiv datapathdiv selline1" *)
  wire \division.unsigneddiv.datapathdiv.selline1 ;
  (* hdlname = "division unsigneddiv datapathdiv shlregq" *)
  wire \division.unsigneddiv.datapathdiv.shlregq ;
  (* hdlname = "division unsigneddiv datapathdiv shlregr" *)
  wire \division.unsigneddiv.datapathdiv.shlregr ;
  (* hdlname = "division unsigneddiv datapathdiv shregq 6866.outreg_t" *)
  wire [31:0] \division.unsigneddiv.datapathdiv.shregq.6866.outreg_t ;
  (* hdlname = "division unsigneddiv datapathdiv shregq 6866.seroutp" *)
  wire \division.unsigneddiv.datapathdiv.shregq.6866.seroutp ;
  (* hdlname = "division unsigneddiv datapathdiv shregq clk" *)
  wire \division.unsigneddiv.datapathdiv.shregq.clk ;
  (* hdlname = "division unsigneddiv datapathdiv shregq inreg" *)
  wire [31:0] \division.unsigneddiv.datapathdiv.shregq.inreg ;
  (* hdlname = "division unsigneddiv datapathdiv shregq load" *)
  wire \division.unsigneddiv.datapathdiv.shregq.load ;
  (* hdlname = "division unsigneddiv datapathdiv shregq outreg" *)
  wire [31:0] \division.unsigneddiv.datapathdiv.shregq.outreg ;
  (* hdlname = "division unsigneddiv datapathdiv shregq rst" *)
  wire \division.unsigneddiv.datapathdiv.shregq.rst ;
  (* hdlname = "division unsigneddiv datapathdiv shregq serin" *)
  wire \division.unsigneddiv.datapathdiv.shregq.serin ;
  (* hdlname = "division unsigneddiv datapathdiv shregq serout" *)
  wire \division.unsigneddiv.datapathdiv.shregq.serout ;
  (* hdlname = "division unsigneddiv datapathdiv shregq shiftl" *)
  wire \division.unsigneddiv.datapathdiv.shregq.shiftl ;
  (* hdlname = "division unsigneddiv datapathdiv shregq shiftr" *)
  wire \division.unsigneddiv.datapathdiv.shregq.shiftr ;
  (* hdlname = "division unsigneddiv datapathdiv shregq zero" *)
  wire \division.unsigneddiv.datapathdiv.shregq.zero ;
  (* hdlname = "division unsigneddiv datapathdiv shregr 6833.outreg_t" *)
  wire [32:0] \division.unsigneddiv.datapathdiv.shregr.6833.outreg_t ;
  (* hdlname = "division unsigneddiv datapathdiv shregr clk" *)
  wire \division.unsigneddiv.datapathdiv.shregr.clk ;
  (* hdlname = "division unsigneddiv datapathdiv shregr inreg" *)
  wire [32:0] \division.unsigneddiv.datapathdiv.shregr.inreg ;
  (* hdlname = "division unsigneddiv datapathdiv shregr load" *)
  wire \division.unsigneddiv.datapathdiv.shregr.load ;
  (* hdlname = "division unsigneddiv datapathdiv shregr outreg" *)
  wire [32:0] \division.unsigneddiv.datapathdiv.shregr.outreg ;
  (* hdlname = "division unsigneddiv datapathdiv shregr rst" *)
  wire \division.unsigneddiv.datapathdiv.shregr.rst ;
  (* hdlname = "division unsigneddiv datapathdiv shregr serin" *)
  wire \division.unsigneddiv.datapathdiv.shregr.serin ;
  (* hdlname = "division unsigneddiv datapathdiv shregr shiftl" *)
  wire \division.unsigneddiv.datapathdiv.shregr.shiftl ;
  (* hdlname = "division unsigneddiv datapathdiv shregr shiftr" *)
  wire \division.unsigneddiv.datapathdiv.shregr.shiftr ;
  (* hdlname = "division unsigneddiv datapathdiv shregr zero" *)
  wire \division.unsigneddiv.datapathdiv.shregr.zero ;
  (* hdlname = "division unsigneddiv datapathdiv shrregq" *)
  wire \division.unsigneddiv.datapathdiv.shrregq ;
  (* hdlname = "division unsigneddiv datapathdiv shrregr" *)
  wire \division.unsigneddiv.datapathdiv.shrregr ;
  (* hdlname = "division unsigneddiv datapathdiv smux" *)
  wire \division.unsigneddiv.datapathdiv.smux ;
  (* hdlname = "division unsigneddiv datapathdiv sub" *)
  wire [32:0] \division.unsigneddiv.datapathdiv.sub ;
  (* hdlname = "division unsigneddiv datapathdiv zeroregm" *)
  wire \division.unsigneddiv.datapathdiv.zeroregm ;
  (* hdlname = "division unsigneddiv datapathdiv zeroregq" *)
  wire \division.unsigneddiv.datapathdiv.zeroregq ;
  (* hdlname = "division unsigneddiv datapathdiv zeroregr" *)
  wire \division.unsigneddiv.datapathdiv.zeroregr ;
  (* hdlname = "division unsigneddiv dividend" *)
  wire [31:0] \division.unsigneddiv.dividend ;
  (* hdlname = "division unsigneddiv divisor" *)
  wire [31:0] \division.unsigneddiv.divisor ;
  (* hdlname = "division unsigneddiv donediv" *)
  wire \division.unsigneddiv.donediv ;
  (* hdlname = "division unsigneddiv ldregm" *)
  wire \division.unsigneddiv.ldregm ;
  (* hdlname = "division unsigneddiv ldregq" *)
  wire \division.unsigneddiv.ldregq ;
  (* hdlname = "division unsigneddiv ldregr" *)
  wire \division.unsigneddiv.ldregr ;
  (* hdlname = "division unsigneddiv q" *)
  wire [31:0] \division.unsigneddiv.q ;
  (* hdlname = "division unsigneddiv qq0" *)
  wire \division.unsigneddiv.qq0 ;
  (* hdlname = "division unsigneddiv r33" *)
  wire \division.unsigneddiv.r33 ;
  (* hdlname = "division unsigneddiv remainder" *)
  wire [32:0] \division.unsigneddiv.remainder ;
  (* hdlname = "division unsigneddiv rst" *)
  wire \division.unsigneddiv.rst ;
  (* hdlname = "division unsigneddiv seldividend" *)
  wire \division.unsigneddiv.seldividend ;
  (* hdlname = "division unsigneddiv selline1" *)
  wire \division.unsigneddiv.selline1 ;
  (* hdlname = "division unsigneddiv shlregq" *)
  wire \division.unsigneddiv.shlregq ;
  (* hdlname = "division unsigneddiv shlregr" *)
  wire \division.unsigneddiv.shlregr ;
  (* hdlname = "division unsigneddiv shrregq" *)
  wire \division.unsigneddiv.shrregq ;
  (* hdlname = "division unsigneddiv shrregr" *)
  wire \division.unsigneddiv.shrregr ;
  (* hdlname = "division unsigneddiv startdiv" *)
  wire \division.unsigneddiv.startdiv ;
  (* hdlname = "division unsigneddiv sync_rst" *)
  wire \division.unsigneddiv.sync_rst ;
  (* hdlname = "division unsigneddiv zeroregm" *)
  wire \division.unsigneddiv.zeroregm ;
  (* hdlname = "division unsigneddiv zeroregq" *)
  wire \division.unsigneddiv.zeroregq ;
  (* hdlname = "division unsigneddiv zeroregr" *)
  wire \division.unsigneddiv.zeroregr ;
  wire donediv;
  wire donemult;
  wire [32:0] in1mult;
  wire [32:0] in2mult;
  (* hdlname = "multiplication clk" *)
  wire \multiplication.clk ;
  (* hdlname = "multiplication controller clk" *)
  wire \multiplication.controller.clk ;
  (* hdlname = "multiplication controller cnt_en" *)
  wire \multiplication.controller.cnt_en ;
  (* hdlname = "multiplication controller cnt_rst" *)
  wire \multiplication.controller.cnt_rst ;
  (* hdlname = "multiplication controller co" *)
  wire \multiplication.controller.co ;
  (* hdlname = "multiplication controller counter clk" *)
  wire \multiplication.controller.counter.clk ;
  (* hdlname = "multiplication controller counter cocnt" *)
  wire \multiplication.controller.counter.cocnt ;
  (* hdlname = "multiplication controller counter cocntp" *)
  wire \multiplication.controller.counter.cocntp ;
  (* hdlname = "multiplication controller counter inccnt" *)
  wire \multiplication.controller.counter.inccnt ;
  (* hdlname = "multiplication controller counter initcnt" *)
  wire \multiplication.controller.counter.initcnt ;
  (* hdlname = "multiplication controller counter initvalue" *)
  wire [5:0] \multiplication.controller.counter.initvalue ;
  (* hdlname = "multiplication controller counter outcnt" *)
  wire [5:0] \multiplication.controller.counter.outcnt ;
  (* hdlname = "multiplication controller counter rst" *)
  wire \multiplication.controller.counter.rst ;
  (* hdlname = "multiplication controller counter temp" *)
  wire [5:0] \multiplication.controller.counter.temp ;
  (* hdlname = "multiplication controller counter zerocnt" *)
  wire \multiplication.controller.counter.zerocnt ;
  (* hdlname = "multiplication controller done" *)
  wire \multiplication.controller.done ;
  (* hdlname = "multiplication controller initcnt" *)
  wire \multiplication.controller.initcnt ;
  (* hdlname = "multiplication controller ldm" *)
  wire \multiplication.controller.ldm ;
  (* hdlname = "multiplication controller ldmr" *)
  wire \multiplication.controller.ldmr ;
  (* hdlname = "multiplication controller ldp" *)
  wire \multiplication.controller.ldp ;
  (* hdlname = "multiplication controller nstate" *)
  wire [1:0] \multiplication.controller.nstate ;
  (* hdlname = "multiplication controller op" *)
  wire [1:0] \multiplication.controller.op ;
  (* hdlname = "multiplication controller pstate" *)
  wire [1:0] \multiplication.controller.pstate ;
  (* hdlname = "multiplication controller rst" *)
  wire \multiplication.controller.rst ;
  (* hdlname = "multiplication controller sel" *)
  wire \multiplication.controller.sel ;
  (* hdlname = "multiplication controller shrmr" *)
  wire \multiplication.controller.shrmr ;
  (* hdlname = "multiplication controller startbooth" *)
  wire \multiplication.controller.startbooth ;
  (* hdlname = "multiplication controller subsel" *)
  wire \multiplication.controller.subsel ;
  (* hdlname = "multiplication controller sync_rst" *)
  wire \multiplication.controller.sync_rst ;
  (* hdlname = "multiplication controller zerop" *)
  wire \multiplication.controller.zerop ;
  (* hdlname = "multiplication datapath addsub a" *)
  wire [32:0] \multiplication.datapath.addsub.a ;
  (* hdlname = "multiplication datapath addsub add a" *)
  wire [32:0] \multiplication.datapath.addsub.add.a ;
  (* hdlname = "multiplication datapath addsub add add" *)
  (* unused_bits = "33" *)
  wire [33:0] \multiplication.datapath.addsub.add.add ;
  (* hdlname = "multiplication datapath addsub add addresult" *)
  wire [32:0] \multiplication.datapath.addsub.add.addresult ;
  (* hdlname = "multiplication datapath addsub add b" *)
  wire [32:0] \multiplication.datapath.addsub.add.b ;
  (* hdlname = "multiplication datapath addsub add carryout" *)
  (* unused_bits = "0" *)
  wire \multiplication.datapath.addsub.add.carryout ;
  (* hdlname = "multiplication datapath addsub add cin" *)
  wire \multiplication.datapath.addsub.add.cin ;
  (* hdlname = "multiplication datapath addsub addsubresult" *)
  wire [32:0] \multiplication.datapath.addsub.addsubresult ;
  (* hdlname = "multiplication datapath addsub b" *)
  wire [32:0] \multiplication.datapath.addsub.b ;
  (* hdlname = "multiplication datapath addsub bsel" *)
  wire [32:0] \multiplication.datapath.addsub.bsel ;
  (* hdlname = "multiplication datapath addsub cout" *)
  (* unused_bits = "0" *)
  wire \multiplication.datapath.addsub.cout ;
  (* hdlname = "multiplication datapath addsub outres" *)
  wire [32:0] \multiplication.datapath.addsub.outres ;
  (* hdlname = "multiplication datapath addsub pass" *)
  wire \multiplication.datapath.addsub.pass ;
  (* hdlname = "multiplication datapath addsub subsel" *)
  wire \multiplication.datapath.addsub.subsel ;
  (* hdlname = "multiplication datapath clk" *)
  wire \multiplication.datapath.clk ;
  (* hdlname = "multiplication datapath ldm" *)
  wire \multiplication.datapath.ldm ;
  (* hdlname = "multiplication datapath ldmr" *)
  wire \multiplication.datapath.ldmr ;
  (* hdlname = "multiplication datapath ldp" *)
  wire \multiplication.datapath.ldp ;
  (* hdlname = "multiplication datapath m" *)
  wire [32:0] \multiplication.datapath.m ;
  (* hdlname = "multiplication datapath mr" *)
  wire [32:0] \multiplication.datapath.mr ;
  (* hdlname = "multiplication datapath mreg clk" *)
  wire \multiplication.datapath.mreg.clk ;
  (* hdlname = "multiplication datapath mreg inreg" *)
  wire [32:0] \multiplication.datapath.mreg.inreg ;
  (* hdlname = "multiplication datapath mreg load" *)
  wire \multiplication.datapath.mreg.load ;
  (* hdlname = "multiplication datapath mreg outreg" *)
  wire [32:0] \multiplication.datapath.mreg.outreg ;
  (* hdlname = "multiplication datapath mreg rst" *)
  wire \multiplication.datapath.mreg.rst ;
  (* hdlname = "multiplication datapath mreg zero" *)
  wire \multiplication.datapath.mreg.zero ;
  (* hdlname = "multiplication datapath mrreg 6594.outreg_t" *)
  wire [33:0] \multiplication.datapath.mrreg.6594.outreg_t ;
  (* hdlname = "multiplication datapath mrreg clk" *)
  wire \multiplication.datapath.mrreg.clk ;
  (* hdlname = "multiplication datapath mrreg inreg" *)
  wire [33:0] \multiplication.datapath.mrreg.inreg ;
  (* hdlname = "multiplication datapath mrreg load" *)
  wire \multiplication.datapath.mrreg.load ;
  (* hdlname = "multiplication datapath mrreg outreg" *)
  wire [33:0] \multiplication.datapath.mrreg.outreg ;
  (* hdlname = "multiplication datapath mrreg rst" *)
  wire \multiplication.datapath.mrreg.rst ;
  (* hdlname = "multiplication datapath mrreg serin" *)
  wire \multiplication.datapath.mrreg.serin ;
  (* hdlname = "multiplication datapath mrreg shiftl" *)
  wire \multiplication.datapath.mrreg.shiftl ;
  (* hdlname = "multiplication datapath mrreg shiftr" *)
  wire \multiplication.datapath.mrreg.shiftr ;
  (* hdlname = "multiplication datapath mrreg zero" *)
  wire \multiplication.datapath.mrreg.zero ;
  (* hdlname = "multiplication datapath op" *)
  wire [1:0] \multiplication.datapath.op ;
  (* hdlname = "multiplication datapath outm" *)
  wire [32:0] \multiplication.datapath.outm ;
  (* hdlname = "multiplication datapath outmr" *)
  wire [33:0] \multiplication.datapath.outmr ;
  (* hdlname = "multiplication datapath p" *)
  wire [65:0] \multiplication.datapath.p ;
  (* hdlname = "multiplication datapath pin" *)
  wire [32:0] \multiplication.datapath.pin ;
  (* hdlname = "multiplication datapath pout" *)
  wire [32:0] \multiplication.datapath.pout ;
  (* hdlname = "multiplication datapath preg clk" *)
  wire \multiplication.datapath.preg.clk ;
  (* hdlname = "multiplication datapath preg inreg" *)
  wire [32:0] \multiplication.datapath.preg.inreg ;
  (* hdlname = "multiplication datapath preg load" *)
  wire \multiplication.datapath.preg.load ;
  (* hdlname = "multiplication datapath preg outreg" *)
  wire [32:0] \multiplication.datapath.preg.outreg ;
  (* hdlname = "multiplication datapath preg rst" *)
  wire \multiplication.datapath.preg.rst ;
  (* hdlname = "multiplication datapath preg zero" *)
  wire \multiplication.datapath.preg.zero ;
  (* hdlname = "multiplication datapath result" *)
  wire [32:0] \multiplication.datapath.result ;
  (* hdlname = "multiplication datapath rst" *)
  wire \multiplication.datapath.rst ;
  (* hdlname = "multiplication datapath seimr" *)
  wire \multiplication.datapath.seimr ;
  (* hdlname = "multiplication datapath sel" *)
  wire \multiplication.datapath.sel ;
  (* hdlname = "multiplication datapath shmr" *)
  wire [33:0] \multiplication.datapath.shmr ;
  (* hdlname = "multiplication datapath shrmr" *)
  wire \multiplication.datapath.shrmr ;
  (* hdlname = "multiplication datapath subsel" *)
  wire \multiplication.datapath.subsel ;
  (* hdlname = "multiplication datapath zerop" *)
  wire \multiplication.datapath.zerop ;
  (* hdlname = "multiplication donebooth" *)
  wire \multiplication.donebooth ;
  (* hdlname = "multiplication ldm" *)
  wire \multiplication.ldm ;
  (* hdlname = "multiplication ldmr" *)
  wire \multiplication.ldmr ;
  (* hdlname = "multiplication ldp" *)
  wire \multiplication.ldp ;
  (* hdlname = "multiplication m" *)
  wire [32:0] \multiplication.m ;
  (* hdlname = "multiplication mr" *)
  wire [32:0] \multiplication.mr ;
  (* hdlname = "multiplication op" *)
  wire [1:0] \multiplication.op ;
  (* hdlname = "multiplication p" *)
  wire [65:0] \multiplication.p ;
  (* hdlname = "multiplication rst" *)
  wire \multiplication.rst ;
  (* hdlname = "multiplication sel" *)
  wire \multiplication.sel ;
  (* hdlname = "multiplication shrmr" *)
  wire \multiplication.shrmr ;
  (* hdlname = "multiplication startbooth" *)
  wire \multiplication.startbooth ;
  (* hdlname = "multiplication subsel" *)
  wire \multiplication.subsel ;
  (* hdlname = "multiplication sync_rst" *)
  wire \multiplication.sync_rst ;
  (* hdlname = "multiplication zerop" *)
  wire \multiplication.zerop ;
  wire [31:0] quotient;
  wire [31:0] remainder;
  output [31:0] resaau1;
  wire [31:0] resaau1;
  output [31:0] resaau2;
  wire [31:0] resaau2;
  wire [65:0] resmult;
  wire [31:0] resmulth;
  wire [31:0] resmultl;
  input rst;
  wire rst;
  input signedsigned;
  wire signedsigned;
  input signedunsigned;
  wire signedunsigned;
  wire signedunsignedbardiv;
  input startdivideaau;
  wire startdivideaau;
  input startmultaau;
  wire startmultaau;
  input sync_rst;
  wire sync_rst;
  input unsignedunsigned;
  wire unsignedunsigned;
  always @(posedge clk)
    if (_006_) _059_[5] <= 1'h0;
    else _059_[5] <= _063_[5];
  always @(posedge clk)
    if (rst) _059_[4:0] <= 5'h00;
    else _059_[4:0] <= _064_[4:0];
  reg [1:0] _077_;
  always @(posedge clk)
    if (_007_) _077_ <= 2'h0;
    else _077_ <= { _032_[5], _032_[0] };
  assign { _028_[5], _028_[0] } = _077_;
  reg [3:0] _078_;
  always @(posedge clk)
    if (rst) _078_ <= 4'h0;
    else _078_ <= _033_[4:1];
  assign _028_[4:1] = _078_;
  always @(posedge clk)
    if (_006_) _070_[0] <= 1'h0;
    else _070_[0] <= _071_[0];
  always @(posedge clk)
    if (rst) _070_[33:1] <= 33'h000000000;
    else _070_[33:1] <= _072_[33:1];
  always @(posedge clk)
    if (_007_) _036_[32] <= 1'h0;
    else _036_[32] <= \division.unsigneddiv.datapathdiv.m [32];
  always @(posedge clk)
    if (rst) _036_[31:0] <= 32'd0;
    else _036_[31:0] <= _037_[31:0];
  assign _006_ = | { \multiplication.controller.counter.initcnt , rst };
  assign _007_ = | { \division.unsigneddiv.controllerdiv.counter.initcnt , rst };
  assign \division.unsigneddiv.controllerdiv.pstate  = rst ? 2'h0 : _019_;
  always @(posedge clk)
    if (_026_) _019_ <= 2'h0;
    else _019_ <= \division.unsigneddiv.controllerdiv.nstate ;
  assign _026_ = | { sync_rst, rst };
  assign _027_ = | { _024_, _021_ };
  assign \division.unsigneddiv.controllerdiv.counter.temp  = rst ? 6'h00 : _028_;
  assign \division.unsigneddiv.datapathdiv.m  = rst ? 33'h000000000 : _036_;
  assign \division.unsigneddiv.datapathdiv.shregq.6866.seroutp  = rst ? 1'h0 : _038_;
  assign \division.tclq.ain  = rst ? 32'd0 : _039_;
  always @(posedge clk)
    if (rst) _039_ <= 32'd0;
    else _039_ <= _042_;
  assign \division.unsigneddiv.datapathdiv.rprev  = rst ? 33'h000000000 : _044_;
  always @(posedge clk)
    if (_007_) _044_ <= 33'h000000000;
    else _044_ <= _046_;
  assign \multiplication.controller.pstate  = rst ? 2'h1 : _047_;
  always @(posedge clk)
    if (_026_) _047_ <= 2'h1;
    else _047_ <= \multiplication.controller.nstate ;
  assign \multiplication.controller.counter.temp  = rst ? 6'h00 : _059_;
  assign \multiplication.datapath.addsub.b  = rst ? 33'h000000000 : _068_;
  always @(posedge clk)
    if (rst) _068_ <= 33'h000000000;
    else _068_ <= _069_;
  assign \multiplication.datapath.mrreg.6594.outreg_t  = rst ? 34'h000000000 : _070_;
  assign \multiplication.datapath.addsub.add.a  = rst ? 33'h000000000 : _073_;
  always @(posedge clk)
    if (_006_) _073_ <= 33'h000000000;
    else _073_ <= _074_;
  assign completeaau = donemult | \division.unsigneddiv.controllerdiv.donediv ;
  assign in1mult = unsignedunsigned ? { 1'h0, ain } : _001_;
  assign _000_ = signedsigned | signedunsigned;
  assign _001_ = _000_ ? { ain[31], ain } : 33'h000000000;
  assign _002_ = unsignedunsigned | signedunsigned;
  assign in2mult = _002_ ? { 1'h0, bin } : _003_;
  assign _003_ = signedsigned ? { bin[31], bin } : 33'h000000000;
  assign \division.signedunsignedbar  = signedsigned ? 1'h1 : 1'h0;
  assign resaau1 = donemult ? { \multiplication.datapath.addsub.add.a [30:0], \multiplication.datapath.mrreg.6594.outreg_t [33] } : _004_;
  assign _004_ = \division.unsigneddiv.controllerdiv.donediv  ? \division.tclq.aout  : 32'd0;
  assign resaau2 = donemult ? \multiplication.datapath.mrreg.6594.outreg_t [32:1] : _005_;
  assign _005_ = \division.unsigneddiv.controllerdiv.donediv  ? \division.tclrem.aout  : 32'd0;
  assign _008_ = ! (* hdlname = "division 5942" *) bin;
  assign \division.divisorzero  = _008_ ? (* hdlname = "division 5943" *) 1'h1 : 1'h0;
  assign \division.dividedbyzeroflag  = startdivideaau & (* hdlname = "division 5945" *) \division.divisorzero ;
  assign _009_ = ~ (* hdlname = "division 5946" *) \division.divisorzero ;
  assign \division.safestart  = _009_ & (* hdlname = "division 5947" *) startdivideaau;
  assign \division.endr  = bin[31] & (* hdlname = "division 5951" *) \division.signedunsignedbar ;
  assign _010_ = ain[31] ^ (* hdlname = "division 5954" *) bin[31];
  assign \division.enq  = _010_ & (* hdlname = "division 5955" *) \division.signedunsignedbar ;
  assign \division.endd  = ain[31] & (* hdlname = "division 5957" *) \division.signedunsignedbar ;
  assign _011_ = ~ (* hdlname = "division tcldividend 6514" *) ain;
  assign \division.tcldividend.ainp  = \division.endd  ? (* hdlname = "division tcldividend 6515" *) _011_ : ain;
  assign _012_ = \division.tcldividend.ainp  + (* hdlname = "division tcldividend 6517" *) 32'd1;
  assign \division.tcldividend.aout  = \division.endd  ? (* hdlname = "division tcldividend 6518" *) _012_ : \division.tcldividend.ainp ;
  assign _013_ = ~ (* hdlname = "division tcldivisor 6514" *) bin;
  assign \division.tcldivisor.ainp  = \division.endr  ? (* hdlname = "division tcldivisor 6515" *) _013_ : bin;
  assign _014_ = \division.tcldivisor.ainp  + (* hdlname = "division tcldivisor 6517" *) 32'd1;
  assign \division.tcldivisor.aout  = \division.endr  ? (* hdlname = "division tcldivisor 6518" *) _014_ : \division.tcldivisor.ainp ;
  assign _015_ = ~ (* hdlname = "division tclq 6514" *) \division.tclq.ain ;
  assign \division.tclq.ainp  = \division.enq  ? (* hdlname = "division tclq 6515" *) _015_ : \division.tclq.ain ;
  assign _016_ = \division.tclq.ainp  + (* hdlname = "division tclq 6517" *) 32'd1;
  assign \division.tclq.aout  = \division.enq  ? (* hdlname = "division tclq 6518" *) _016_ : \division.tclq.ainp ;
  assign _017_ = ~ (* hdlname = "division tclrem 6514" *) \division.unsigneddiv.datapathdiv.rprev [31:0];
  assign \division.tclrem.ainp  = \division.endd  ? (* hdlname = "division tclrem 6515" *) _017_ : \division.unsigneddiv.datapathdiv.rprev [31:0];
  assign _018_ = \division.tclrem.ainp  + (* hdlname = "division tclrem 6517" *) 32'd1;
  assign \division.tclrem.aout  = \division.endd  ? (* hdlname = "division tclrem 6518" *) _018_ : \division.tclrem.ainp ;
  assign \division.unsigneddiv.controllerdiv.qq0  = ~ (* hdlname = "division unsigneddiv controllerdiv 6693" *) \division.unsigneddiv.datapathdiv.sub [32];
  assign _020_ = \division.safestart  ? (* hdlname = "division unsigneddiv controllerdiv 6698" *) 2'h1 : 2'h0;
  assign _022_ = \division.unsigneddiv.controllerdiv.cocnt  ? (* hdlname = "division unsigneddiv controllerdiv 6703" *) 2'h0 : 2'h2;
  function [1:0] \division.unsigneddiv.controllerdiv.6711 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* hdlname = "division unsigneddiv controllerdiv 6711" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \division.unsigneddiv.controllerdiv.6711  = b[1:0];
      3'b?1?:
        \division.unsigneddiv.controllerdiv.6711  = b[3:2];
      3'b1??:
        \division.unsigneddiv.controllerdiv.6711  = b[5:4];
      default:
        \division.unsigneddiv.controllerdiv.6711  = a;
    endcase
  endfunction
  assign \division.unsigneddiv.controllerdiv.nstate  = \division.unsigneddiv.controllerdiv.6711 (2'hx, { 2'h1, _022_, _020_ }, { _024_, _023_, _021_ });
  assign _021_ = ! (* hdlname = "division unsigneddiv controllerdiv 6717" *) \division.unsigneddiv.controllerdiv.pstate ;
  assign _025_ = \division.unsigneddiv.controllerdiv.cocnt  ? (* hdlname = "division unsigneddiv controllerdiv 6720" *) 1'h1 : 1'h0;
  assign _023_ = \division.unsigneddiv.controllerdiv.pstate  == (* hdlname = "division unsigneddiv controllerdiv 6722" *) 2'h1;
  assign _024_ = \division.unsigneddiv.controllerdiv.pstate  == (* hdlname = "division unsigneddiv controllerdiv 6724" *) 2'h2;
  assign \division.unsigneddiv.controllerdiv.donediv  = _023_ ? (* hdlname = "division unsigneddiv controllerdiv 6729" *) _025_ : 1'h0;
  assign \division.unsigneddiv.controllerdiv.shlregq  = _023_ ? (* hdlname = "division unsigneddiv controllerdiv 6769" *) 1'h1 : 1'h0;
  assign \division.unsigneddiv.controllerdiv.ldregq  = _027_ ? (* hdlname = "division unsigneddiv controllerdiv 6775" *) 1'h1 : 1'h0;
  assign \division.unsigneddiv.controllerdiv.counter.inccnt  = _024_ ? (* hdlname = "division unsigneddiv controllerdiv 6799" *) 1'h1 : 1'h0;
  assign \division.unsigneddiv.controllerdiv.counter.initcnt  = _021_ ? (* hdlname = "division unsigneddiv controllerdiv 6805" *) 1'h1 : 1'h0;
  assign _029_ = ~ (* hdlname = "division unsigneddiv controllerdiv counter 6638" *) \division.unsigneddiv.controllerdiv.cocnt ;
  assign _030_ = _029_ & (* hdlname = "division unsigneddiv controllerdiv counter 6639" *) \division.unsigneddiv.controllerdiv.counter.inccnt ;
  assign _031_ = \division.unsigneddiv.controllerdiv.counter.temp  + (* hdlname = "division unsigneddiv controllerdiv counter 6641" *) 6'h01;
  assign _032_ = _030_ ? (* hdlname = "division unsigneddiv controllerdiv counter 6642" *) _031_ : \division.unsigneddiv.controllerdiv.counter.temp ;
  assign _033_ = \division.unsigneddiv.controllerdiv.counter.initcnt  ? (* hdlname = "division unsigneddiv controllerdiv counter 6643" *) 6'h1e : _032_;
  assign _034_ = \division.unsigneddiv.controllerdiv.counter.temp  == (* hdlname = "division unsigneddiv controllerdiv counter 6652" *) 6'h3f;
  assign \division.unsigneddiv.controllerdiv.cocnt  = _034_ ? (* hdlname = "division unsigneddiv controllerdiv counter 6653" *) 1'h1 : 1'h0;
  assign { \division.unsigneddiv.datapathdiv.sub [32], \division.unsigneddiv.datapathdiv.mux34b.a [31:0] } = \division.unsigneddiv.datapathdiv.rprev  - (* hdlname = "division unsigneddiv datapathdiv 6667" *) \division.unsigneddiv.datapathdiv.m ;
  assign _035_ = \division.unsigneddiv.controllerdiv.counter.inccnt  ? (* hdlname = "division unsigneddiv datapathdiv mux33b 4834" *) { \division.tclq.ain [31:1], \division.unsigneddiv.controllerdiv.qq0  } : 32'd0;
  assign \division.unsigneddiv.datapathdiv.mux33b.w  = \division.unsigneddiv.controllerdiv.counter.initcnt  ? (* hdlname = "division unsigneddiv datapathdiv mux33b 4835" *) \division.tcldividend.aout  : _035_;
  assign \division.unsigneddiv.datapathdiv.mux34b.w  = \division.unsigneddiv.datapathdiv.sub [32] ? (* hdlname = "division unsigneddiv datapathdiv mux34b 6902" *) \division.unsigneddiv.datapathdiv.rprev  : { 1'h0, \division.unsigneddiv.datapathdiv.mux34b.a [31:0] };
  assign _037_ = \division.unsigneddiv.controllerdiv.counter.initcnt  ? (* hdlname = "division unsigneddiv datapathdiv regm 6584" *) { 1'h0, \division.tcldivisor.aout  } : \division.unsigneddiv.datapathdiv.m ;
  assign _040_ = \division.unsigneddiv.controllerdiv.shlregq  ? (* hdlname = "division unsigneddiv datapathdiv shregq 6879" *) { \division.tclq.ain [30:0], 1'h0 } : \division.tclq.ain ;
  assign _041_ = \division.unsigneddiv.controllerdiv.shlregq  ? (* hdlname = "division unsigneddiv datapathdiv shregq 6880" *) \division.tclq.ain [31] : \division.unsigneddiv.datapathdiv.shregq.6866.seroutp ;
  assign _042_ = \division.unsigneddiv.controllerdiv.ldregq  ? (* hdlname = "division unsigneddiv datapathdiv shregq 6881" *) \division.unsigneddiv.datapathdiv.mux33b.w  : _040_;
  assign _043_ = \division.unsigneddiv.controllerdiv.ldregq  ? (* hdlname = "division unsigneddiv datapathdiv shregq 6882" *) \division.unsigneddiv.datapathdiv.shregq.6866.seroutp  : _041_;
  (* hdlname = "division unsigneddiv datapathdiv shregq 6896" *)
  always @(posedge clk)
    if (rst) _038_ <= 1'h0;
    else _038_ <= _043_;
  assign _045_ = \division.unsigneddiv.controllerdiv.shlregq  ? (* hdlname = "division unsigneddiv datapathdiv shregr 6846" *) { \division.unsigneddiv.datapathdiv.rprev [31:0], \division.unsigneddiv.datapathdiv.shregq.6866.seroutp  } : \division.unsigneddiv.datapathdiv.rprev ;
  assign _046_ = \division.unsigneddiv.controllerdiv.counter.inccnt  ? (* hdlname = "division unsigneddiv datapathdiv shregr 6848" *) \division.unsigneddiv.datapathdiv.mux34b.w  : _045_;
  assign _048_ = startmultaau ? (* hdlname = "multiplication controller 6407" *) 2'h2 : 2'h1;
  assign _049_ = \multiplication.controller.pstate  == (* hdlname = "multiplication controller 6409" *) 2'h1;
  assign _051_ = \multiplication.controller.co  ? (* hdlname = "multiplication controller 6415" *) 2'h0 : 2'h3;
  function [1:0] \multiplication.controller.6424 ;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    (* hdlname = "multiplication controller 6424" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        \multiplication.controller.6424  = b[1:0];
      4'b??1?:
        \multiplication.controller.6424  = b[3:2];
      4'b?1??:
        \multiplication.controller.6424  = b[5:4];
      4'b1???:
        \multiplication.controller.6424  = b[7:6];
      default:
        \multiplication.controller.6424  = a;
    endcase
  endfunction
  assign \multiplication.controller.nstate  = \multiplication.controller.6424 (2'h0, { 2'h1, _051_, 2'h3, _048_ }, { _053_, _052_, _050_, _049_ });
  assign _053_ = ! (* hdlname = "multiplication controller 6430" *) \multiplication.controller.pstate ;
  assign _050_ = \multiplication.controller.pstate  == (* hdlname = "multiplication controller 6432" *) 2'h2;
  assign _054_ = \multiplication.datapath.mrreg.6594.outreg_t [1:0] == (* hdlname = "multiplication controller 6434" *) 2'h2;
  assign _055_ = \multiplication.datapath.mrreg.6594.outreg_t [1:0] == (* hdlname = "multiplication controller 6436" *) 2'h1;
  assign _056_ = _055_ ? (* hdlname = "multiplication controller 6439" *) 1'h1 : 1'h0;
  assign _057_ = _054_ ? (* hdlname = "multiplication controller 6441" *) 1'h1 : _056_;
  assign _058_ = _054_ ? (* hdlname = "multiplication controller 6444" *) 1'h1 : 1'h0;
  assign _052_ = \multiplication.controller.pstate  == (* hdlname = "multiplication controller 6446" *) 2'h3;
  assign \multiplication.controller.sel  = _052_ ? (* hdlname = "multiplication controller 6475" *) _057_ : 1'h0;
  assign \multiplication.controller.subsel  = _052_ ? (* hdlname = "multiplication controller 6479" *) _058_ : 1'h0;
  assign donemult = _053_ ? (* hdlname = "multiplication controller 6484" *) 1'h1 : 1'h0;
  assign \multiplication.controller.cnt_en  = _052_ ? (* hdlname = "multiplication controller 6489" *) 1'h1 : 1'h0;
  assign \multiplication.controller.counter.initcnt  = _050_ ? (* hdlname = "multiplication controller 6498" *) 1'h1 : 1'h0;
  assign _060_ = ~ (* hdlname = "multiplication controller counter 6638" *) \multiplication.controller.co ;
  assign _061_ = _060_ & (* hdlname = "multiplication controller counter 6639" *) \multiplication.controller.cnt_en ;
  assign _062_ = \multiplication.controller.counter.temp  + (* hdlname = "multiplication controller counter 6641" *) 6'h01;
  assign _063_ = _061_ ? (* hdlname = "multiplication controller counter 6642" *) _062_ : \multiplication.controller.counter.temp ;
  assign _064_ = \multiplication.controller.counter.initcnt  ? (* hdlname = "multiplication controller counter 6643" *) 6'h1f : _063_;
  assign _065_ = \multiplication.controller.counter.temp  == (* hdlname = "multiplication controller counter 6652" *) 6'h3f;
  assign \multiplication.controller.co  = _065_ ? (* hdlname = "multiplication controller counter 6653" *) 1'h1 : 1'h0;
  assign \multiplication.datapath.pin  = \multiplication.controller.sel  ? (* hdlname = "multiplication datapath 6385" *) { \multiplication.datapath.addsub.add.add [32], \multiplication.datapath.addsub.add.add [32:1] } : { \multiplication.datapath.addsub.add.a [32], \multiplication.datapath.addsub.add.a [32:1] };
  assign \multiplication.datapath.mrreg.serin  = \multiplication.controller.sel  ? (* hdlname = "multiplication datapath 6390" *) \multiplication.datapath.addsub.add.add [0] : \multiplication.datapath.addsub.add.a [0];
  assign _066_ = ~ (* hdlname = "multiplication datapath addsub 6627" *) \multiplication.datapath.addsub.b ;
  assign \multiplication.datapath.addsub.add.b  = \multiplication.controller.subsel  ? (* hdlname = "multiplication datapath addsub 6628" *) _066_ : \multiplication.datapath.addsub.b ;
  assign _067_ = { 1'h0, \multiplication.datapath.addsub.add.a  } + (* hdlname = "multiplication datapath addsub add 6824" *) { 1'h0, \multiplication.datapath.addsub.add.b  };
  assign \multiplication.datapath.addsub.add.add  = _067_ + (* hdlname = "multiplication datapath addsub add 6828" *) { 33'h000000000, \multiplication.controller.subsel  };
  assign _069_ = \multiplication.controller.counter.initcnt  ? (* hdlname = "multiplication datapath mreg 6584" *) in1mult : \multiplication.datapath.addsub.b ;
  assign _071_ = \multiplication.controller.cnt_en  ? (* hdlname = "multiplication datapath mrreg 6605" *) { \multiplication.datapath.mrreg.serin , \multiplication.datapath.mrreg.6594.outreg_t [33:1] } : \multiplication.datapath.mrreg.6594.outreg_t ;
  assign _072_ = \multiplication.controller.counter.initcnt  ? (* hdlname = "multiplication datapath mrreg 6609" *) { in2mult, 1'h0 } : _071_;
  assign _074_ = \multiplication.controller.cnt_en  ? (* hdlname = "multiplication datapath preg 6584" *) \multiplication.datapath.pin  : \multiplication.datapath.addsub.add.a ;
  assign dividedbyzeroflag = \division.dividedbyzeroflag ;
  assign \division.clk  = clk;
  assign \division.ddin  = \division.tcldividend.aout ;
  assign \division.dividend  = ain;
  assign \division.divisor  = bin;
  assign \division.donesdiv  = \division.unsigneddiv.controllerdiv.donediv ;
  assign \division.drin  = \division.tcldivisor.aout ;
  assign \division.enr  = \division.endd ;
  assign \division.qout  = \division.tclq.aout ;
  assign \division.qp  = \division.tclq.ain ;
  assign \division.remout  = \division.tclrem.aout ;
  assign \division.remp  = \division.unsigneddiv.datapathdiv.rprev ;
  assign \division.rst  = rst;
  assign \division.startsdiv  = startdivideaau;
  assign \division.sync_rst  = sync_rst;
  assign \division.tcldividend.ain  = ain;
  assign \division.tcldividend.en  = \division.endd ;
  assign \division.tcldivisor.ain  = bin;
  assign \division.tcldivisor.en  = \division.endr ;
  assign \division.tclq.en  = \division.enq ;
  assign \division.tclrem.ain  = \division.unsigneddiv.datapathdiv.rprev [31:0];
  assign \division.tclrem.en  = \division.endd ;
  assign \division.unsigneddiv.clk  = clk;
  assign \division.unsigneddiv.controllerdiv.clk  = clk;
  assign \division.unsigneddiv.controllerdiv.counter.clk  = clk;
  assign \division.unsigneddiv.controllerdiv.counter.cocnt  = \division.unsigneddiv.controllerdiv.cocnt ;
  assign \division.unsigneddiv.controllerdiv.counter.cocntp  = \division.unsigneddiv.controllerdiv.cocnt ;
  assign \division.unsigneddiv.controllerdiv.counter.initvalue  = 6'h1e;
  assign \division.unsigneddiv.controllerdiv.counter.outcnt  = \division.unsigneddiv.controllerdiv.counter.temp ;
  assign \division.unsigneddiv.controllerdiv.counter.rst  = rst;
  assign \division.unsigneddiv.controllerdiv.counter.zerocnt  = 1'h0;
  assign \division.unsigneddiv.controllerdiv.inccnt  = \division.unsigneddiv.controllerdiv.counter.inccnt ;
  assign \division.unsigneddiv.controllerdiv.initcnt  = \division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \division.unsigneddiv.controllerdiv.ldregm  = \division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \division.unsigneddiv.controllerdiv.ldregr  = \division.unsigneddiv.controllerdiv.counter.inccnt ;
  assign \division.unsigneddiv.controllerdiv.r33  = \division.unsigneddiv.datapathdiv.sub [32];
  assign \division.unsigneddiv.controllerdiv.rst  = rst;
  assign \division.unsigneddiv.controllerdiv.seldividend  = \division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \division.unsigneddiv.controllerdiv.selline1  = \division.unsigneddiv.controllerdiv.counter.inccnt ;
  assign \division.unsigneddiv.controllerdiv.shlregr  = \division.unsigneddiv.controllerdiv.shlregq ;
  assign \division.unsigneddiv.controllerdiv.shrregq  = 1'h0;
  assign \division.unsigneddiv.controllerdiv.shrregr  = 1'h0;
  assign \division.unsigneddiv.controllerdiv.startdiv  = \division.safestart ;
  assign \division.unsigneddiv.controllerdiv.sync_rst  = sync_rst;
  assign \division.unsigneddiv.controllerdiv.zerocnt  = 1'h0;
  assign \division.unsigneddiv.controllerdiv.zeroregm  = 1'h0;
  assign \division.unsigneddiv.controllerdiv.zeroregq  = 1'h0;
  assign \division.unsigneddiv.controllerdiv.zeroregr  = \division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \division.unsigneddiv.datapathdiv.addresult  = \division.unsigneddiv.datapathdiv.mux34b.w ;
  assign \division.unsigneddiv.datapathdiv.clk  = clk;
  assign \division.unsigneddiv.datapathdiv.dividend  = \division.tcldividend.aout ;
  assign \division.unsigneddiv.datapathdiv.divisor  = \division.tcldivisor.aout ;
  assign \division.unsigneddiv.datapathdiv.divisorp  = { 1'h0, \division.tcldivisor.aout  };
  assign \division.unsigneddiv.datapathdiv.ldregm  = \division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \division.unsigneddiv.datapathdiv.ldregq  = \division.unsigneddiv.controllerdiv.ldregq ;
  assign \division.unsigneddiv.datapathdiv.ldregr  = \division.unsigneddiv.controllerdiv.counter.inccnt ;
  assign \division.unsigneddiv.datapathdiv.leftbitoutq  = \division.unsigneddiv.datapathdiv.shregq.6866.seroutp ;
  assign \division.unsigneddiv.datapathdiv.line1  = { \division.tclq.ain [31:1], \division.unsigneddiv.controllerdiv.qq0  };
  assign \division.unsigneddiv.datapathdiv.mux33b.a  = \division.tcldividend.aout ;
  assign \division.unsigneddiv.datapathdiv.mux33b.b  = { \division.tclq.ain [31:1], \division.unsigneddiv.controllerdiv.qq0  };
  assign \division.unsigneddiv.datapathdiv.mux33b.s0  = \division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \division.unsigneddiv.datapathdiv.mux33b.s1  = \division.unsigneddiv.controllerdiv.counter.inccnt ;
  assign \division.unsigneddiv.datapathdiv.mux34b.a [32] = \division.unsigneddiv.datapathdiv.sub [32];
  assign \division.unsigneddiv.datapathdiv.mux34b.b  = \division.unsigneddiv.datapathdiv.rprev ;
  assign \division.unsigneddiv.datapathdiv.mux34b.s0  = \division.unsigneddiv.controllerdiv.qq0 ;
  assign \division.unsigneddiv.datapathdiv.mux34b.s1  = \division.unsigneddiv.datapathdiv.sub [32];
  assign \division.unsigneddiv.datapathdiv.outmux1  = \division.unsigneddiv.datapathdiv.mux33b.w ;
  assign \division.unsigneddiv.datapathdiv.q  = \division.tclq.ain ;
  assign \division.unsigneddiv.datapathdiv.qprev  = \division.tclq.ain ;
  assign \division.unsigneddiv.datapathdiv.qq0  = \division.unsigneddiv.controllerdiv.qq0 ;
  assign \division.unsigneddiv.datapathdiv.r33  = \division.unsigneddiv.datapathdiv.sub [32];
  assign \division.unsigneddiv.datapathdiv.regm.clk  = clk;
  assign \division.unsigneddiv.datapathdiv.regm.inreg  = { 1'h0, \division.tcldivisor.aout  };
  assign \division.unsigneddiv.datapathdiv.regm.load  = \division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \division.unsigneddiv.datapathdiv.regm.outreg  = \division.unsigneddiv.datapathdiv.m ;
  assign \division.unsigneddiv.datapathdiv.regm.rst  = rst;
  assign \division.unsigneddiv.datapathdiv.regm.zero  = 1'h0;
  assign \division.unsigneddiv.datapathdiv.remainder  = \division.unsigneddiv.datapathdiv.rprev ;
  assign \division.unsigneddiv.datapathdiv.rst  = rst;
  assign \division.unsigneddiv.datapathdiv.seldividend  = \division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \division.unsigneddiv.datapathdiv.selline1  = \division.unsigneddiv.controllerdiv.counter.inccnt ;
  assign \division.unsigneddiv.datapathdiv.shlregq  = \division.unsigneddiv.controllerdiv.shlregq ;
  assign \division.unsigneddiv.datapathdiv.shlregr  = \division.unsigneddiv.controllerdiv.shlregq ;
  assign \division.unsigneddiv.datapathdiv.shregq.6866.outreg_t  = \division.tclq.ain ;
  assign \division.unsigneddiv.datapathdiv.shregq.clk  = clk;
  assign \division.unsigneddiv.datapathdiv.shregq.inreg  = \division.unsigneddiv.datapathdiv.mux33b.w ;
  assign \division.unsigneddiv.datapathdiv.shregq.load  = \division.unsigneddiv.controllerdiv.ldregq ;
  assign \division.unsigneddiv.datapathdiv.shregq.outreg  = \division.tclq.ain ;
  assign \division.unsigneddiv.datapathdiv.shregq.rst  = rst;
  assign \division.unsigneddiv.datapathdiv.shregq.serin  = 1'h0;
  assign \division.unsigneddiv.datapathdiv.shregq.serout  = \division.unsigneddiv.datapathdiv.shregq.6866.seroutp ;
  assign \division.unsigneddiv.datapathdiv.shregq.shiftl  = \division.unsigneddiv.controllerdiv.shlregq ;
  assign \division.unsigneddiv.datapathdiv.shregq.shiftr  = 1'h0;
  assign \division.unsigneddiv.datapathdiv.shregq.zero  = 1'h0;
  assign \division.unsigneddiv.datapathdiv.shregr.6833.outreg_t  = \division.unsigneddiv.datapathdiv.rprev ;
  assign \division.unsigneddiv.datapathdiv.shregr.clk  = clk;
  assign \division.unsigneddiv.datapathdiv.shregr.inreg  = \division.unsigneddiv.datapathdiv.mux34b.w ;
  assign \division.unsigneddiv.datapathdiv.shregr.load  = \division.unsigneddiv.controllerdiv.counter.inccnt ;
  assign \division.unsigneddiv.datapathdiv.shregr.outreg  = \division.unsigneddiv.datapathdiv.rprev ;
  assign \division.unsigneddiv.datapathdiv.shregr.rst  = rst;
  assign \division.unsigneddiv.datapathdiv.shregr.serin  = \division.unsigneddiv.datapathdiv.shregq.6866.seroutp ;
  assign \division.unsigneddiv.datapathdiv.shregr.shiftl  = \division.unsigneddiv.controllerdiv.shlregq ;
  assign \division.unsigneddiv.datapathdiv.shregr.shiftr  = 1'h0;
  assign \division.unsigneddiv.datapathdiv.shregr.zero  = \division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \division.unsigneddiv.datapathdiv.shrregq  = 1'h0;
  assign \division.unsigneddiv.datapathdiv.shrregr  = 1'h0;
  assign \division.unsigneddiv.datapathdiv.smux  = \division.unsigneddiv.controllerdiv.qq0 ;
  assign \division.unsigneddiv.datapathdiv.sub [31:0] = \division.unsigneddiv.datapathdiv.mux34b.a [31:0];
  assign \division.unsigneddiv.datapathdiv.zeroregm  = 1'h0;
  assign \division.unsigneddiv.datapathdiv.zeroregq  = 1'h0;
  assign \division.unsigneddiv.datapathdiv.zeroregr  = \division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \division.unsigneddiv.dividend  = \division.tcldividend.aout ;
  assign \division.unsigneddiv.divisor  = \division.tcldivisor.aout ;
  assign \division.unsigneddiv.donediv  = \division.unsigneddiv.controllerdiv.donediv ;
  assign \division.unsigneddiv.ldregm  = \division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \division.unsigneddiv.ldregq  = \division.unsigneddiv.controllerdiv.ldregq ;
  assign \division.unsigneddiv.ldregr  = \division.unsigneddiv.controllerdiv.counter.inccnt ;
  assign \division.unsigneddiv.q  = \division.tclq.ain ;
  assign \division.unsigneddiv.qq0  = \division.unsigneddiv.controllerdiv.qq0 ;
  assign \division.unsigneddiv.r33  = \division.unsigneddiv.datapathdiv.sub [32];
  assign \division.unsigneddiv.remainder  = \division.unsigneddiv.datapathdiv.rprev ;
  assign \division.unsigneddiv.rst  = rst;
  assign \division.unsigneddiv.seldividend  = \division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \division.unsigneddiv.selline1  = \division.unsigneddiv.controllerdiv.counter.inccnt ;
  assign \division.unsigneddiv.shlregq  = \division.unsigneddiv.controllerdiv.shlregq ;
  assign \division.unsigneddiv.shlregr  = \division.unsigneddiv.controllerdiv.shlregq ;
  assign \division.unsigneddiv.shrregq  = 1'h0;
  assign \division.unsigneddiv.shrregr  = 1'h0;
  assign \division.unsigneddiv.startdiv  = \division.safestart ;
  assign \division.unsigneddiv.sync_rst  = sync_rst;
  assign \division.unsigneddiv.zeroregm  = 1'h0;
  assign \division.unsigneddiv.zeroregq  = 1'h0;
  assign \division.unsigneddiv.zeroregr  = \division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign donediv = \division.unsigneddiv.controllerdiv.donediv ;
  assign \multiplication.clk  = clk;
  assign \multiplication.controller.clk  = clk;
  assign \multiplication.controller.cnt_rst  = 1'h0;
  assign \multiplication.controller.counter.clk  = clk;
  assign \multiplication.controller.counter.cocnt  = \multiplication.controller.co ;
  assign \multiplication.controller.counter.cocntp  = \multiplication.controller.co ;
  assign \multiplication.controller.counter.inccnt  = \multiplication.controller.cnt_en ;
  assign \multiplication.controller.counter.initvalue  = 6'h1f;
  assign \multiplication.controller.counter.outcnt  = \multiplication.controller.counter.temp ;
  assign \multiplication.controller.counter.rst  = rst;
  assign \multiplication.controller.counter.zerocnt  = 1'h0;
  assign \multiplication.controller.done  = donemult;
  assign \multiplication.controller.initcnt  = \multiplication.controller.counter.initcnt ;
  assign \multiplication.controller.ldm  = \multiplication.controller.counter.initcnt ;
  assign \multiplication.controller.ldmr  = \multiplication.controller.counter.initcnt ;
  assign \multiplication.controller.ldp  = \multiplication.controller.cnt_en ;
  assign \multiplication.controller.op  = \multiplication.datapath.mrreg.6594.outreg_t [1:0];
  assign \multiplication.controller.rst  = rst;
  assign \multiplication.controller.shrmr  = \multiplication.controller.cnt_en ;
  assign \multiplication.controller.startbooth  = startmultaau;
  assign \multiplication.controller.sync_rst  = sync_rst;
  assign \multiplication.controller.zerop  = \multiplication.controller.counter.initcnt ;
  assign \multiplication.datapath.addsub.a  = \multiplication.datapath.addsub.add.a ;
  assign \multiplication.datapath.addsub.add.addresult  = \multiplication.datapath.addsub.add.add [32:0];
  assign \multiplication.datapath.addsub.add.carryout  = \multiplication.datapath.addsub.add.add [33];
  assign \multiplication.datapath.addsub.add.cin  = \multiplication.controller.subsel ;
  assign \multiplication.datapath.addsub.addsubresult  = \multiplication.datapath.addsub.add.add [32:0];
  assign \multiplication.datapath.addsub.bsel  = \multiplication.datapath.addsub.add.b ;
  assign \multiplication.datapath.addsub.cout  = \multiplication.datapath.addsub.add.add [33];
  assign \multiplication.datapath.addsub.outres  = \multiplication.datapath.addsub.add.add [32:0];
  assign \multiplication.datapath.addsub.pass  = 1'h0;
  assign \multiplication.datapath.addsub.subsel  = \multiplication.controller.subsel ;
  assign \multiplication.datapath.clk  = clk;
  assign \multiplication.datapath.ldm  = \multiplication.controller.counter.initcnt ;
  assign \multiplication.datapath.ldmr  = \multiplication.controller.counter.initcnt ;
  assign \multiplication.datapath.ldp  = \multiplication.controller.cnt_en ;
  assign \multiplication.datapath.m  = in1mult;
  assign \multiplication.datapath.mr  = in2mult;
  assign \multiplication.datapath.mreg.clk  = clk;
  assign \multiplication.datapath.mreg.inreg  = in1mult;
  assign \multiplication.datapath.mreg.load  = \multiplication.controller.counter.initcnt ;
  assign \multiplication.datapath.mreg.outreg  = \multiplication.datapath.addsub.b ;
  assign \multiplication.datapath.mreg.rst  = rst;
  assign \multiplication.datapath.mreg.zero  = 1'h0;
  assign \multiplication.datapath.mrreg.clk  = clk;
  assign \multiplication.datapath.mrreg.inreg  = { in2mult, 1'h0 };
  assign \multiplication.datapath.mrreg.load  = \multiplication.controller.counter.initcnt ;
  assign \multiplication.datapath.mrreg.outreg  = \multiplication.datapath.mrreg.6594.outreg_t ;
  assign \multiplication.datapath.mrreg.rst  = rst;
  assign \multiplication.datapath.mrreg.shiftl  = 1'h0;
  assign \multiplication.datapath.mrreg.shiftr  = \multiplication.controller.cnt_en ;
  assign \multiplication.datapath.mrreg.zero  = 1'h0;
  assign \multiplication.datapath.op  = \multiplication.datapath.mrreg.6594.outreg_t [1:0];
  assign \multiplication.datapath.outm  = \multiplication.datapath.addsub.b ;
  assign \multiplication.datapath.outmr  = \multiplication.datapath.mrreg.6594.outreg_t ;
  assign \multiplication.datapath.p  = { \multiplication.datapath.addsub.add.a , \multiplication.datapath.mrreg.6594.outreg_t [33:1] };
  assign \multiplication.datapath.pout  = \multiplication.datapath.addsub.add.a ;
  assign \multiplication.datapath.preg.clk  = clk;
  assign \multiplication.datapath.preg.inreg  = \multiplication.datapath.pin ;
  assign \multiplication.datapath.preg.load  = \multiplication.controller.cnt_en ;
  assign \multiplication.datapath.preg.outreg  = \multiplication.datapath.addsub.add.a ;
  assign \multiplication.datapath.preg.rst  = rst;
  assign \multiplication.datapath.preg.zero  = \multiplication.controller.counter.initcnt ;
  assign \multiplication.datapath.result  = \multiplication.datapath.addsub.add.add [32:0];
  assign \multiplication.datapath.rst  = rst;
  assign \multiplication.datapath.seimr  = \multiplication.datapath.mrreg.serin ;
  assign \multiplication.datapath.sel  = \multiplication.controller.sel ;
  assign \multiplication.datapath.shmr  = { in2mult, 1'h0 };
  assign \multiplication.datapath.shrmr  = \multiplication.controller.cnt_en ;
  assign \multiplication.datapath.subsel  = \multiplication.controller.subsel ;
  assign \multiplication.datapath.zerop  = \multiplication.controller.counter.initcnt ;
  assign \multiplication.donebooth  = donemult;
  assign \multiplication.ldm  = \multiplication.controller.counter.initcnt ;
  assign \multiplication.ldmr  = \multiplication.controller.counter.initcnt ;
  assign \multiplication.ldp  = \multiplication.controller.cnt_en ;
  assign \multiplication.m  = in1mult;
  assign \multiplication.mr  = in2mult;
  assign \multiplication.op  = \multiplication.datapath.mrreg.6594.outreg_t [1:0];
  assign \multiplication.p  = { \multiplication.datapath.addsub.add.a , \multiplication.datapath.mrreg.6594.outreg_t [33:1] };
  assign \multiplication.rst  = rst;
  assign \multiplication.sel  = \multiplication.controller.sel ;
  assign \multiplication.shrmr  = \multiplication.controller.cnt_en ;
  assign \multiplication.startbooth  = startmultaau;
  assign \multiplication.subsel  = \multiplication.controller.subsel ;
  assign \multiplication.sync_rst  = sync_rst;
  assign \multiplication.zerop  = \multiplication.controller.counter.initcnt ;
  assign quotient = \division.tclq.aout ;
  assign remainder = \division.tclrem.aout ;
  assign resmult = { \multiplication.datapath.addsub.add.a , \multiplication.datapath.mrreg.6594.outreg_t [33:1] };
  assign resmulth = { \multiplication.datapath.addsub.add.a [30:0], \multiplication.datapath.mrreg.6594.outreg_t [33] };
  assign resmultl = \multiplication.datapath.mrreg.6594.outreg_t [32:1];
  assign signedunsignedbardiv = \division.signedunsignedbar ;
endmodule

module aftab_adder_32(cin, a, b, addresult, carryout);
  wire [32:0] _0_;
  input [31:0] a;
  wire [31:0] a;
  wire [32:0] add;
  output [31:0] addresult;
  wire [31:0] addresult;
  input [31:0] b;
  wire [31:0] b;
  output carryout;
  wire carryout;
  input cin;
  wire cin;
  assign _0_ = { 1'h0, a } + { 1'h0, b };
  assign add = _0_ + { 32'h00000000, cin };
  assign addresult = add[31:0];
  assign carryout = add[32];
endmodule

module aftab_adder_33(cin, a, b, addresult, carryout);
  wire [33:0] _0_;
  input [32:0] a;
  wire [32:0] a;
  wire [33:0] add;
  output [32:0] addresult;
  wire [32:0] addresult;
  input [32:0] b;
  wire [32:0] b;
  output carryout;
  wire carryout;
  input cin;
  wire cin;
  assign _0_ = { 1'h0, a } + { 1'h0, b };
  assign add = _0_ + { 33'h000000000, cin };
  assign addresult = add[32:0];
  assign carryout = add[33];
endmodule

module aftab_adder_subtractor_32(a, b, subsel, pass, cout, outres);
  wire [31:0] _0_;
  wire [32:0] _1_;
  input [31:0] a;
  wire [31:0] a;
  (* hdlname = "add a" *)
  wire [31:0] \add.a ;
  (* hdlname = "add add" *)
  wire [32:0] \add.add ;
  (* hdlname = "add addresult" *)
  wire [31:0] \add.addresult ;
  (* hdlname = "add b" *)
  wire [31:0] \add.b ;
  (* hdlname = "add carryout" *)
  wire \add.carryout ;
  (* hdlname = "add cin" *)
  wire \add.cin ;
  wire [31:0] addsubresult;
  input [31:0] b;
  wire [31:0] b;
  wire [31:0] bsel;
  output cout;
  wire cout;
  output [31:0] outres;
  wire [31:0] outres;
  input pass;
  wire pass;
  input subsel;
  wire subsel;
  assign _0_ = ~ b;
  assign \add.b  = subsel ? _0_ : b;
  assign outres = pass ? b : \add.add [31:0];
  assign _1_ = { 1'h0, a } + (* hdlname = "add 4081" *) { 1'h0, \add.b  };
  assign \add.add  = _1_ + (* hdlname = "add 4085" *) { 32'h00000000, subsel };
  assign \add.a  = a;
  assign \add.addresult  = \add.add [31:0];
  assign \add.carryout  = \add.add [32];
  assign \add.cin  = subsel;
  assign addsubresult = \add.add [31:0];
  assign bsel = \add.b ;
  assign cout = \add.add [32];
endmodule

module aftab_adder_subtractor_33(a, b, subsel, pass, cout, outres);
  wire [32:0] _0_;
  wire [33:0] _1_;
  input [32:0] a;
  wire [32:0] a;
  (* hdlname = "add a" *)
  wire [32:0] \add.a ;
  (* hdlname = "add add" *)
  wire [33:0] \add.add ;
  (* hdlname = "add addresult" *)
  wire [32:0] \add.addresult ;
  (* hdlname = "add b" *)
  wire [32:0] \add.b ;
  (* hdlname = "add carryout" *)
  wire \add.carryout ;
  (* hdlname = "add cin" *)
  wire \add.cin ;
  wire [32:0] addsubresult;
  input [32:0] b;
  wire [32:0] b;
  wire [32:0] bsel;
  output cout;
  wire cout;
  output [32:0] outres;
  wire [32:0] outres;
  input pass;
  wire pass;
  input subsel;
  wire subsel;
  assign _0_ = ~ b;
  assign \add.b  = subsel ? _0_ : b;
  assign outres = pass ? b : \add.add [32:0];
  assign _1_ = { 1'h0, a } + (* hdlname = "add 6824" *) { 1'h0, \add.b  };
  assign \add.add  = _1_ + (* hdlname = "add 6828" *) { 33'h000000000, subsel };
  assign \add.a  = a;
  assign \add.addresult  = \add.add [32:0];
  assign \add.carryout  = \add.add [33];
  assign \add.cin  = subsel;
  assign addsubresult = \add.add [32:0];
  assign bsel = \add.b ;
  assign cout = \add.add [33];
endmodule

module aftab_barrel_shifter_32(shin, nsh, selsh, shout);
  wire _0_;
  wire [31:0] _1_;
  wire _2_;
  wire [31:0] _3_;
  wire _4_;
  wire [31:0] _5_;
  wire [31:0] _6_;
  input [4:0] nsh;
  wire [4:0] nsh;
  input [1:0] selsh;
  wire [1:0] selsh;
  input [31:0] shin;
  wire [31:0] shin;
  output [31:0] shout;
  wire [31:0] shout;
  assign _0_ = ! selsh;
  assign _1_ = shin << { 27'h0000000, nsh };
  assign _2_ = selsh == 2'h2;
  assign _4_ = selsh == 2'h3;
  assign _3_ = shin >> { 27'h0000000, nsh };
  assign _5_ = _4_ ? _3_ : 32'd0;
  assign _6_ = _2_ ? _3_ : _5_;
  assign shout = _0_ ? _1_ : _6_;
endmodule

module aftab_booth_multiplier_33(clk, rst, sync_rst, startbooth, m, mr, p, donebooth);
  wire _00_;
  reg [1:0] _01_;
  wire [1:0] _02_;
  wire _03_;
  wire _04_;
  wire [1:0] _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  reg [5:0] _14_;
  wire _15_;
  wire _16_;
  wire [5:0] _17_;
  wire [5:0] _18_;
  (* unused_bits = "5" *)
  wire [5:0] _19_;
  wire _20_;
  wire [32:0] _21_;
  wire [33:0] _22_;
  reg [32:0] _23_;
  wire [32:0] _24_;
  reg [33:0] _25_;
  wire [33:0] _26_;
  (* unused_bits = "0" *)
  wire [33:0] _27_;
  reg [32:0] _28_;
  wire [32:0] _29_;
  input clk;
  wire clk;
  (* hdlname = "controller clk" *)
  wire \controller.clk ;
  (* hdlname = "controller cnt_en" *)
  wire \controller.cnt_en ;
  (* hdlname = "controller cnt_rst" *)
  wire \controller.cnt_rst ;
  (* hdlname = "controller co" *)
  wire \controller.co ;
  (* hdlname = "controller counter clk" *)
  wire \controller.counter.clk ;
  (* hdlname = "controller counter cocnt" *)
  wire \controller.counter.cocnt ;
  (* hdlname = "controller counter cocntp" *)
  wire \controller.counter.cocntp ;
  (* hdlname = "controller counter inccnt" *)
  wire \controller.counter.inccnt ;
  (* hdlname = "controller counter initcnt" *)
  wire \controller.counter.initcnt ;
  (* hdlname = "controller counter initvalue" *)
  wire [5:0] \controller.counter.initvalue ;
  (* hdlname = "controller counter outcnt" *)
  wire [5:0] \controller.counter.outcnt ;
  (* hdlname = "controller counter rst" *)
  wire \controller.counter.rst ;
  (* hdlname = "controller counter temp" *)
  wire [5:0] \controller.counter.temp ;
  (* hdlname = "controller counter zerocnt" *)
  wire \controller.counter.zerocnt ;
  (* hdlname = "controller done" *)
  wire \controller.done ;
  (* hdlname = "controller initcnt" *)
  wire \controller.initcnt ;
  (* hdlname = "controller ldm" *)
  wire \controller.ldm ;
  (* hdlname = "controller ldmr" *)
  wire \controller.ldmr ;
  (* hdlname = "controller ldp" *)
  wire \controller.ldp ;
  (* hdlname = "controller nstate" *)
  wire [1:0] \controller.nstate ;
  (* hdlname = "controller op" *)
  wire [1:0] \controller.op ;
  (* hdlname = "controller pstate" *)
  wire [1:0] \controller.pstate ;
  (* hdlname = "controller rst" *)
  wire \controller.rst ;
  (* hdlname = "controller sel" *)
  wire \controller.sel ;
  (* hdlname = "controller shrmr" *)
  wire \controller.shrmr ;
  (* hdlname = "controller startbooth" *)
  wire \controller.startbooth ;
  (* hdlname = "controller subsel" *)
  wire \controller.subsel ;
  (* hdlname = "controller sync_rst" *)
  wire \controller.sync_rst ;
  (* hdlname = "controller zerop" *)
  wire \controller.zerop ;
  (* hdlname = "datapath addsub a" *)
  wire [32:0] \datapath.addsub.a ;
  (* hdlname = "datapath addsub add a" *)
  wire [32:0] \datapath.addsub.add.a ;
  (* hdlname = "datapath addsub add add" *)
  (* unused_bits = "33" *)
  wire [33:0] \datapath.addsub.add.add ;
  (* hdlname = "datapath addsub add addresult" *)
  wire [32:0] \datapath.addsub.add.addresult ;
  (* hdlname = "datapath addsub add b" *)
  wire [32:0] \datapath.addsub.add.b ;
  (* hdlname = "datapath addsub add carryout" *)
  (* unused_bits = "0" *)
  wire \datapath.addsub.add.carryout ;
  (* hdlname = "datapath addsub add cin" *)
  wire \datapath.addsub.add.cin ;
  (* hdlname = "datapath addsub addsubresult" *)
  wire [32:0] \datapath.addsub.addsubresult ;
  (* hdlname = "datapath addsub b" *)
  wire [32:0] \datapath.addsub.b ;
  (* hdlname = "datapath addsub bsel" *)
  wire [32:0] \datapath.addsub.bsel ;
  (* hdlname = "datapath addsub cout" *)
  (* unused_bits = "0" *)
  wire \datapath.addsub.cout ;
  (* hdlname = "datapath addsub outres" *)
  wire [32:0] \datapath.addsub.outres ;
  (* hdlname = "datapath addsub pass" *)
  wire \datapath.addsub.pass ;
  (* hdlname = "datapath addsub subsel" *)
  wire \datapath.addsub.subsel ;
  (* hdlname = "datapath clk" *)
  wire \datapath.clk ;
  (* hdlname = "datapath ldm" *)
  wire \datapath.ldm ;
  (* hdlname = "datapath ldmr" *)
  wire \datapath.ldmr ;
  (* hdlname = "datapath ldp" *)
  wire \datapath.ldp ;
  (* hdlname = "datapath m" *)
  wire [32:0] \datapath.m ;
  (* hdlname = "datapath mr" *)
  wire [32:0] \datapath.mr ;
  (* hdlname = "datapath mreg clk" *)
  wire \datapath.mreg.clk ;
  (* hdlname = "datapath mreg inreg" *)
  wire [32:0] \datapath.mreg.inreg ;
  (* hdlname = "datapath mreg load" *)
  wire \datapath.mreg.load ;
  (* hdlname = "datapath mreg outreg" *)
  wire [32:0] \datapath.mreg.outreg ;
  (* hdlname = "datapath mreg rst" *)
  wire \datapath.mreg.rst ;
  (* hdlname = "datapath mreg zero" *)
  wire \datapath.mreg.zero ;
  (* hdlname = "datapath mrreg 6594.outreg_t" *)
  wire [33:0] \datapath.mrreg.6594.outreg_t ;
  (* hdlname = "datapath mrreg clk" *)
  wire \datapath.mrreg.clk ;
  (* hdlname = "datapath mrreg inreg" *)
  wire [33:0] \datapath.mrreg.inreg ;
  (* hdlname = "datapath mrreg load" *)
  wire \datapath.mrreg.load ;
  (* hdlname = "datapath mrreg outreg" *)
  wire [33:0] \datapath.mrreg.outreg ;
  (* hdlname = "datapath mrreg rst" *)
  wire \datapath.mrreg.rst ;
  (* hdlname = "datapath mrreg serin" *)
  wire \datapath.mrreg.serin ;
  (* hdlname = "datapath mrreg shiftl" *)
  wire \datapath.mrreg.shiftl ;
  (* hdlname = "datapath mrreg shiftr" *)
  wire \datapath.mrreg.shiftr ;
  (* hdlname = "datapath mrreg zero" *)
  wire \datapath.mrreg.zero ;
  (* hdlname = "datapath op" *)
  wire [1:0] \datapath.op ;
  (* hdlname = "datapath outm" *)
  wire [32:0] \datapath.outm ;
  (* hdlname = "datapath outmr" *)
  wire [33:0] \datapath.outmr ;
  (* hdlname = "datapath p" *)
  wire [65:0] \datapath.p ;
  (* hdlname = "datapath pin" *)
  wire [32:0] \datapath.pin ;
  (* hdlname = "datapath pout" *)
  wire [32:0] \datapath.pout ;
  (* hdlname = "datapath preg clk" *)
  wire \datapath.preg.clk ;
  (* hdlname = "datapath preg inreg" *)
  wire [32:0] \datapath.preg.inreg ;
  (* hdlname = "datapath preg load" *)
  wire \datapath.preg.load ;
  (* hdlname = "datapath preg outreg" *)
  wire [32:0] \datapath.preg.outreg ;
  (* hdlname = "datapath preg rst" *)
  wire \datapath.preg.rst ;
  (* hdlname = "datapath preg zero" *)
  wire \datapath.preg.zero ;
  (* hdlname = "datapath result" *)
  wire [32:0] \datapath.result ;
  (* hdlname = "datapath rst" *)
  wire \datapath.rst ;
  (* hdlname = "datapath seimr" *)
  wire \datapath.seimr ;
  (* hdlname = "datapath sel" *)
  wire \datapath.sel ;
  (* hdlname = "datapath shmr" *)
  wire [33:0] \datapath.shmr ;
  (* hdlname = "datapath shrmr" *)
  wire \datapath.shrmr ;
  (* hdlname = "datapath subsel" *)
  wire \datapath.subsel ;
  (* hdlname = "datapath zerop" *)
  wire \datapath.zerop ;
  output donebooth;
  wire donebooth;
  wire ldm;
  wire ldmr;
  wire ldp;
  input [32:0] m;
  wire [32:0] m;
  input [32:0] mr;
  wire [32:0] mr;
  wire [1:0] op;
  output [65:0] p;
  wire [65:0] p;
  input rst;
  wire rst;
  wire sel;
  wire shrmr;
  input startbooth;
  wire startbooth;
  wire subsel;
  input sync_rst;
  wire sync_rst;
  wire zerop;
  always @(posedge clk)
    if (_00_) _14_[5] <= 1'h0;
    else _14_[5] <= _18_[5];
  always @(posedge clk)
    if (rst) _14_[4:0] <= 5'h00;
    else _14_[4:0] <= _19_[4:0];
  always @(posedge clk)
    if (_00_) _25_[0] <= 1'h0;
    else _25_[0] <= _26_[0];
  always @(posedge clk)
    if (rst) _25_[33:1] <= 33'h000000000;
    else _25_[33:1] <= _27_[33:1];
  assign _00_ = | { \controller.counter.initcnt , rst };
  assign \controller.pstate  = rst ? 2'h1 : _01_;
  always @(posedge clk)
    if (_13_) _01_ <= 2'h1;
    else _01_ <= \controller.nstate ;
  assign _13_ = | { sync_rst, rst };
  assign \controller.counter.temp  = rst ? 6'h00 : _14_;
  assign \datapath.addsub.b  = rst ? 33'h000000000 : _23_;
  always @(posedge clk)
    if (rst) _23_ <= 33'h000000000;
    else _23_ <= _24_;
  assign \datapath.mrreg.6594.outreg_t  = rst ? 34'h000000000 : _25_;
  assign \datapath.addsub.add.a  = rst ? 33'h000000000 : _28_;
  always @(posedge clk)
    if (_00_) _28_ <= 33'h000000000;
    else _28_ <= _29_;
  assign _02_ = startbooth ? (* hdlname = "controller 6407" *) 2'h2 : 2'h1;
  assign _03_ = \controller.pstate  == (* hdlname = "controller 6409" *) 2'h1;
  assign _05_ = \controller.co  ? (* hdlname = "controller 6415" *) 2'h0 : 2'h3;
  function [1:0] \controller.6424 ;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    (* hdlname = "controller 6424" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        \controller.6424  = b[1:0];
      4'b??1?:
        \controller.6424  = b[3:2];
      4'b?1??:
        \controller.6424  = b[5:4];
      4'b1???:
        \controller.6424  = b[7:6];
      default:
        \controller.6424  = a;
    endcase
  endfunction
  assign \controller.nstate  = \controller.6424 (2'h0, { 2'h1, _05_, 2'h3, _02_ }, { _07_, _06_, _04_, _03_ });
  assign _07_ = ! (* hdlname = "controller 6430" *) \controller.pstate ;
  assign _04_ = \controller.pstate  == (* hdlname = "controller 6432" *) 2'h2;
  assign _08_ = \datapath.mrreg.6594.outreg_t [1:0] == (* hdlname = "controller 6434" *) 2'h2;
  assign _09_ = \datapath.mrreg.6594.outreg_t [1:0] == (* hdlname = "controller 6436" *) 2'h1;
  assign _10_ = _09_ ? (* hdlname = "controller 6439" *) 1'h1 : 1'h0;
  assign _11_ = _08_ ? (* hdlname = "controller 6441" *) 1'h1 : _10_;
  assign _12_ = _08_ ? (* hdlname = "controller 6444" *) 1'h1 : 1'h0;
  assign _06_ = \controller.pstate  == (* hdlname = "controller 6446" *) 2'h3;
  assign \controller.sel  = _06_ ? (* hdlname = "controller 6475" *) _11_ : 1'h0;
  assign \controller.subsel  = _06_ ? (* hdlname = "controller 6479" *) _12_ : 1'h0;
  assign \controller.done  = _07_ ? (* hdlname = "controller 6484" *) 1'h1 : 1'h0;
  assign \controller.cnt_en  = _06_ ? (* hdlname = "controller 6489" *) 1'h1 : 1'h0;
  assign \controller.counter.initcnt  = _04_ ? (* hdlname = "controller 6498" *) 1'h1 : 1'h0;
  assign _15_ = ~ (* hdlname = "controller counter 6638" *) \controller.co ;
  assign _16_ = _15_ & (* hdlname = "controller counter 6639" *) \controller.cnt_en ;
  assign _17_ = \controller.counter.temp  + (* hdlname = "controller counter 6641" *) 6'h01;
  assign _18_ = _16_ ? (* hdlname = "controller counter 6642" *) _17_ : \controller.counter.temp ;
  assign _19_ = \controller.counter.initcnt  ? (* hdlname = "controller counter 6643" *) 6'h1f : _18_;
  assign _20_ = \controller.counter.temp  == (* hdlname = "controller counter 6652" *) 6'h3f;
  assign \controller.co  = _20_ ? (* hdlname = "controller counter 6653" *) 1'h1 : 1'h0;
  assign \datapath.pin  = \controller.sel  ? (* hdlname = "datapath 6385" *) { \datapath.addsub.add.add [32], \datapath.addsub.add.add [32:1] } : { \datapath.addsub.add.a [32], \datapath.addsub.add.a [32:1] };
  assign \datapath.mrreg.serin  = \controller.sel  ? (* hdlname = "datapath 6390" *) \datapath.addsub.add.add [0] : \datapath.addsub.add.a [0];
  assign _21_ = ~ (* hdlname = "datapath addsub 6627" *) \datapath.addsub.b ;
  assign \datapath.addsub.add.b  = \controller.subsel  ? (* hdlname = "datapath addsub 6628" *) _21_ : \datapath.addsub.b ;
  assign _22_ = { 1'h0, \datapath.addsub.add.a  } + (* hdlname = "datapath addsub add 6824" *) { 1'h0, \datapath.addsub.add.b  };
  assign \datapath.addsub.add.add  = _22_ + (* hdlname = "datapath addsub add 6828" *) { 33'h000000000, \controller.subsel  };
  assign _24_ = \controller.counter.initcnt  ? (* hdlname = "datapath mreg 6584" *) m : \datapath.addsub.b ;
  assign _26_ = \controller.cnt_en  ? (* hdlname = "datapath mrreg 6605" *) { \datapath.mrreg.serin , \datapath.mrreg.6594.outreg_t [33:1] } : \datapath.mrreg.6594.outreg_t ;
  assign _27_ = \controller.counter.initcnt  ? (* hdlname = "datapath mrreg 6609" *) { mr, 1'h0 } : _26_;
  assign _29_ = \controller.cnt_en  ? (* hdlname = "datapath preg 6584" *) \datapath.pin  : \datapath.addsub.add.a ;
  assign \controller.clk  = clk;
  assign \controller.cnt_rst  = 1'h0;
  assign \controller.counter.clk  = clk;
  assign \controller.counter.cocnt  = \controller.co ;
  assign \controller.counter.cocntp  = \controller.co ;
  assign \controller.counter.inccnt  = \controller.cnt_en ;
  assign \controller.counter.initvalue  = 6'h1f;
  assign \controller.counter.outcnt  = \controller.counter.temp ;
  assign \controller.counter.rst  = rst;
  assign \controller.counter.zerocnt  = 1'h0;
  assign \controller.initcnt  = \controller.counter.initcnt ;
  assign \controller.ldm  = \controller.counter.initcnt ;
  assign \controller.ldmr  = \controller.counter.initcnt ;
  assign \controller.ldp  = \controller.cnt_en ;
  assign \controller.op  = \datapath.mrreg.6594.outreg_t [1:0];
  assign \controller.rst  = rst;
  assign \controller.shrmr  = \controller.cnt_en ;
  assign \controller.startbooth  = startbooth;
  assign \controller.sync_rst  = sync_rst;
  assign \controller.zerop  = \controller.counter.initcnt ;
  assign \datapath.addsub.a  = \datapath.addsub.add.a ;
  assign \datapath.addsub.add.addresult  = \datapath.addsub.add.add [32:0];
  assign \datapath.addsub.add.carryout  = \datapath.addsub.add.add [33];
  assign \datapath.addsub.add.cin  = \controller.subsel ;
  assign \datapath.addsub.addsubresult  = \datapath.addsub.add.add [32:0];
  assign \datapath.addsub.bsel  = \datapath.addsub.add.b ;
  assign \datapath.addsub.cout  = \datapath.addsub.add.add [33];
  assign \datapath.addsub.outres  = \datapath.addsub.add.add [32:0];
  assign \datapath.addsub.pass  = 1'h0;
  assign \datapath.addsub.subsel  = \controller.subsel ;
  assign \datapath.clk  = clk;
  assign \datapath.ldm  = \controller.counter.initcnt ;
  assign \datapath.ldmr  = \controller.counter.initcnt ;
  assign \datapath.ldp  = \controller.cnt_en ;
  assign \datapath.m  = m;
  assign \datapath.mr  = mr;
  assign \datapath.mreg.clk  = clk;
  assign \datapath.mreg.inreg  = m;
  assign \datapath.mreg.load  = \controller.counter.initcnt ;
  assign \datapath.mreg.outreg  = \datapath.addsub.b ;
  assign \datapath.mreg.rst  = rst;
  assign \datapath.mreg.zero  = 1'h0;
  assign \datapath.mrreg.clk  = clk;
  assign \datapath.mrreg.inreg  = { mr, 1'h0 };
  assign \datapath.mrreg.load  = \controller.counter.initcnt ;
  assign \datapath.mrreg.outreg  = \datapath.mrreg.6594.outreg_t ;
  assign \datapath.mrreg.rst  = rst;
  assign \datapath.mrreg.shiftl  = 1'h0;
  assign \datapath.mrreg.shiftr  = \controller.cnt_en ;
  assign \datapath.mrreg.zero  = 1'h0;
  assign \datapath.op  = \datapath.mrreg.6594.outreg_t [1:0];
  assign \datapath.outm  = \datapath.addsub.b ;
  assign \datapath.outmr  = \datapath.mrreg.6594.outreg_t ;
  assign \datapath.p  = { \datapath.addsub.add.a , \datapath.mrreg.6594.outreg_t [33:1] };
  assign \datapath.pout  = \datapath.addsub.add.a ;
  assign \datapath.preg.clk  = clk;
  assign \datapath.preg.inreg  = \datapath.pin ;
  assign \datapath.preg.load  = \controller.cnt_en ;
  assign \datapath.preg.outreg  = \datapath.addsub.add.a ;
  assign \datapath.preg.rst  = rst;
  assign \datapath.preg.zero  = \controller.counter.initcnt ;
  assign \datapath.result  = \datapath.addsub.add.add [32:0];
  assign \datapath.rst  = rst;
  assign \datapath.seimr  = \datapath.mrreg.serin ;
  assign \datapath.sel  = \controller.sel ;
  assign \datapath.shmr  = { mr, 1'h0 };
  assign \datapath.shrmr  = \controller.cnt_en ;
  assign \datapath.subsel  = \controller.subsel ;
  assign \datapath.zerop  = \controller.counter.initcnt ;
  assign donebooth = \controller.done ;
  assign ldm = \controller.counter.initcnt ;
  assign ldmr = \controller.counter.initcnt ;
  assign ldp = \controller.cnt_en ;
  assign op = \datapath.mrreg.6594.outreg_t [1:0];
  assign p = { \datapath.addsub.add.a , \datapath.mrreg.6594.outreg_t [33:1] };
  assign sel = \controller.sel ;
  assign shrmr = \controller.cnt_en ;
  assign subsel = \controller.subsel ;
  assign zerop = \controller.counter.initcnt ;
endmodule

module aftab_booth_multiplier_controller_33_6(clk, rst, sync_rst, startbooth, op, shrmr, ldmr, ldm, ldp, zerop, sel, subsel, done);
  reg [1:0] _00_;
  wire [1:0] _01_;
  wire _02_;
  wire _03_;
  wire [1:0] _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  reg [5:0] _14_;
  wire _15_;
  wire _16_;
  wire [5:0] _17_;
  wire [5:0] _18_;
  (* unused_bits = "5" *)
  wire [5:0] _19_;
  wire _20_;
  input clk;
  wire clk;
  wire cnt_en;
  wire cnt_rst;
  wire co;
  (* hdlname = "counter clk" *)
  wire \counter.clk ;
  (* hdlname = "counter cocnt" *)
  wire \counter.cocnt ;
  (* hdlname = "counter cocntp" *)
  wire \counter.cocntp ;
  (* hdlname = "counter inccnt" *)
  wire \counter.inccnt ;
  (* hdlname = "counter initcnt" *)
  wire \counter.initcnt ;
  (* hdlname = "counter initvalue" *)
  wire [5:0] \counter.initvalue ;
  (* hdlname = "counter outcnt" *)
  wire [5:0] \counter.outcnt ;
  (* hdlname = "counter rst" *)
  wire \counter.rst ;
  (* hdlname = "counter temp" *)
  wire [5:0] \counter.temp ;
  (* hdlname = "counter zerocnt" *)
  wire \counter.zerocnt ;
  output done;
  wire done;
  wire initcnt;
  output ldm;
  wire ldm;
  output ldmr;
  wire ldmr;
  output ldp;
  wire ldp;
  wire [1:0] nstate;
  input [1:0] op;
  wire [1:0] op;
  wire [1:0] pstate;
  input rst;
  wire rst;
  output sel;
  wire sel;
  output shrmr;
  wire shrmr;
  input startbooth;
  wire startbooth;
  output subsel;
  wire subsel;
  input sync_rst;
  wire sync_rst;
  output zerop;
  wire zerop;
  assign pstate = rst ? 2'h1 : _00_;
  always @(posedge clk)
    if (_12_) _00_ <= 2'h1;
    else _00_ <= nstate;
  always @(posedge clk)
    if (_13_) _14_[5] <= 1'h0;
    else _14_[5] <= _18_[5];
  always @(posedge clk)
    if (rst) _14_[4:0] <= 5'h00;
    else _14_[4:0] <= _19_[4:0];
  assign _12_ = | { sync_rst, rst };
  assign _13_ = | { \counter.initcnt , rst };
  assign \counter.temp  = rst ? 6'h00 : _14_;
  assign _01_ = startbooth ? 2'h2 : 2'h1;
  assign _02_ = pstate == 2'h1;
  assign _04_ = co ? 2'h0 : 2'h3;
  function [1:0] \6424 ;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \6424  = b[1:0];
      4'b??1?:
        \6424  = b[3:2];
      4'b?1??:
        \6424  = b[5:4];
      4'b1???:
        \6424  = b[7:6];
      default:
        \6424  = a;
    endcase
  endfunction
  assign nstate = \6424 (2'h0, { 2'h1, _04_, 2'h3, _01_ }, { _06_, _05_, _03_, _02_ });
  assign _06_ = ! pstate;
  assign _03_ = pstate == 2'h2;
  assign _07_ = op == 2'h2;
  assign _08_ = op == 2'h1;
  assign _09_ = _08_ ? 1'h1 : 1'h0;
  assign _10_ = _07_ ? 1'h1 : _09_;
  assign _11_ = _07_ ? 1'h1 : 1'h0;
  assign _05_ = pstate == 2'h3;
  assign sel = _05_ ? _10_ : 1'h0;
  assign subsel = _05_ ? _11_ : 1'h0;
  assign done = _06_ ? 1'h1 : 1'h0;
  assign cnt_en = _05_ ? 1'h1 : 1'h0;
  assign \counter.initcnt  = _03_ ? 1'h1 : 1'h0;
  assign _15_ = ~ (* hdlname = "counter 6638" *) co;
  assign _16_ = _15_ & (* hdlname = "counter 6639" *) cnt_en;
  assign _17_ = \counter.temp  + (* hdlname = "counter 6641" *) 6'h01;
  assign _18_ = _16_ ? (* hdlname = "counter 6642" *) _17_ : \counter.temp ;
  assign _19_ = \counter.initcnt  ? (* hdlname = "counter 6643" *) 6'h1f : _18_;
  assign _20_ = \counter.temp  == (* hdlname = "counter 6652" *) 6'h3f;
  assign co = _20_ ? (* hdlname = "counter 6653" *) 1'h1 : 1'h0;
  assign cnt_rst = 1'h0;
  assign \counter.clk  = clk;
  assign \counter.cocnt  = co;
  assign \counter.cocntp  = co;
  assign \counter.inccnt  = cnt_en;
  assign \counter.initvalue  = 6'h1f;
  assign \counter.outcnt  = \counter.temp ;
  assign \counter.rst  = rst;
  assign \counter.zerocnt  = 1'h0;
  assign initcnt = \counter.initcnt ;
  assign ldm = \counter.initcnt ;
  assign ldmr = \counter.initcnt ;
  assign ldp = cnt_en;
  assign shrmr = cnt_en;
  assign zerop = \counter.initcnt ;
endmodule

module aftab_booth_multiplier_datapath_33(clk, rst, shrmr, ldmr, ldm, ldp, zerop, sel, subsel, m, mr, p, op);
  wire _00_;
  wire [32:0] _01_;
  wire [33:0] _02_;
  reg [32:0] _03_;
  wire [32:0] _04_;
  reg [33:0] _05_;
  wire [33:0] _06_;
  (* unused_bits = "0" *)
  wire [33:0] _07_;
  reg [32:0] _08_;
  wire [32:0] _09_;
  wire _10_;
  (* hdlname = "addsub a" *)
  wire [32:0] \addsub.a ;
  (* hdlname = "addsub add a" *)
  wire [32:0] \addsub.add.a ;
  (* hdlname = "addsub add add" *)
  (* unused_bits = "33" *)
  wire [33:0] \addsub.add.add ;
  (* hdlname = "addsub add addresult" *)
  wire [32:0] \addsub.add.addresult ;
  (* hdlname = "addsub add b" *)
  wire [32:0] \addsub.add.b ;
  (* hdlname = "addsub add carryout" *)
  (* unused_bits = "0" *)
  wire \addsub.add.carryout ;
  (* hdlname = "addsub add cin" *)
  wire \addsub.add.cin ;
  (* hdlname = "addsub addsubresult" *)
  wire [32:0] \addsub.addsubresult ;
  (* hdlname = "addsub b" *)
  wire [32:0] \addsub.b ;
  (* hdlname = "addsub bsel" *)
  wire [32:0] \addsub.bsel ;
  (* hdlname = "addsub cout" *)
  (* unused_bits = "0" *)
  wire \addsub.cout ;
  (* hdlname = "addsub outres" *)
  wire [32:0] \addsub.outres ;
  (* hdlname = "addsub pass" *)
  wire \addsub.pass ;
  (* hdlname = "addsub subsel" *)
  wire \addsub.subsel ;
  input clk;
  wire clk;
  input ldm;
  wire ldm;
  input ldmr;
  wire ldmr;
  input ldp;
  wire ldp;
  input [32:0] m;
  wire [32:0] m;
  input [32:0] mr;
  wire [32:0] mr;
  (* hdlname = "mreg clk" *)
  wire \mreg.clk ;
  (* hdlname = "mreg inreg" *)
  wire [32:0] \mreg.inreg ;
  (* hdlname = "mreg load" *)
  wire \mreg.load ;
  (* hdlname = "mreg outreg" *)
  wire [32:0] \mreg.outreg ;
  (* hdlname = "mreg rst" *)
  wire \mreg.rst ;
  (* hdlname = "mreg zero" *)
  wire \mreg.zero ;
  (* hdlname = "mrreg 6594.outreg_t" *)
  wire [33:0] \mrreg.6594.outreg_t ;
  (* hdlname = "mrreg clk" *)
  wire \mrreg.clk ;
  (* hdlname = "mrreg inreg" *)
  wire [33:0] \mrreg.inreg ;
  (* hdlname = "mrreg load" *)
  wire \mrreg.load ;
  (* hdlname = "mrreg outreg" *)
  wire [33:0] \mrreg.outreg ;
  (* hdlname = "mrreg rst" *)
  wire \mrreg.rst ;
  (* hdlname = "mrreg serin" *)
  wire \mrreg.serin ;
  (* hdlname = "mrreg shiftl" *)
  wire \mrreg.shiftl ;
  (* hdlname = "mrreg shiftr" *)
  wire \mrreg.shiftr ;
  (* hdlname = "mrreg zero" *)
  wire \mrreg.zero ;
  output [1:0] op;
  wire [1:0] op;
  wire [32:0] outm;
  wire [33:0] outmr;
  output [65:0] p;
  wire [65:0] p;
  wire [32:0] pin;
  wire [32:0] pout;
  (* hdlname = "preg clk" *)
  wire \preg.clk ;
  (* hdlname = "preg inreg" *)
  wire [32:0] \preg.inreg ;
  (* hdlname = "preg load" *)
  wire \preg.load ;
  (* hdlname = "preg outreg" *)
  wire [32:0] \preg.outreg ;
  (* hdlname = "preg rst" *)
  wire \preg.rst ;
  (* hdlname = "preg zero" *)
  wire \preg.zero ;
  wire [32:0] result;
  input rst;
  wire rst;
  wire seimr;
  input sel;
  wire sel;
  wire [33:0] shmr;
  input shrmr;
  wire shrmr;
  input subsel;
  wire subsel;
  input zerop;
  wire zerop;
  always @(posedge clk)
    if (_00_) _05_[0] <= 1'h0;
    else _05_[0] <= _06_[0];
  always @(posedge clk)
    if (rst) _05_[33:1] <= 33'h000000000;
    else _05_[33:1] <= _07_[33:1];
  assign _00_ = | { ldmr, rst };
  assign \addsub.b  = rst ? 33'h000000000 : _03_;
  always @(posedge clk)
    if (rst) _03_ <= 33'h000000000;
    else _03_ <= _04_;
  assign \mrreg.6594.outreg_t  = rst ? 34'h000000000 : _05_;
  assign \addsub.add.a  = rst ? 33'h000000000 : _08_;
  always @(posedge clk)
    if (_10_) _08_ <= 33'h000000000;
    else _08_ <= _09_;
  assign _10_ = | { zerop, rst };
  assign pin = sel ? { \addsub.add.add [32], \addsub.add.add [32:1] } : { \addsub.add.a [32], \addsub.add.a [32:1] };
  assign \mrreg.serin  = sel ? \addsub.add.add [0] : \addsub.add.a [0];
  assign _01_ = ~ (* hdlname = "addsub 6627" *) \addsub.b ;
  assign \addsub.add.b  = subsel ? (* hdlname = "addsub 6628" *) _01_ : \addsub.b ;
  assign _02_ = { 1'h0, \addsub.add.a  } + (* hdlname = "addsub add 6824" *) { 1'h0, \addsub.add.b  };
  assign \addsub.add.add  = _02_ + (* hdlname = "addsub add 6828" *) { 33'h000000000, subsel };
  assign _04_ = ldm ? (* hdlname = "mreg 6584" *) m : \addsub.b ;
  assign _06_ = shrmr ? (* hdlname = "mrreg 6605" *) { \mrreg.serin , \mrreg.6594.outreg_t [33:1] } : \mrreg.6594.outreg_t ;
  assign _07_ = ldmr ? (* hdlname = "mrreg 6609" *) { mr, 1'h0 } : _06_;
  assign _09_ = ldp ? (* hdlname = "preg 6584" *) pin : \addsub.add.a ;
  assign \addsub.a  = \addsub.add.a ;
  assign \addsub.add.addresult  = \addsub.add.add [32:0];
  assign \addsub.add.carryout  = \addsub.add.add [33];
  assign \addsub.add.cin  = subsel;
  assign \addsub.addsubresult  = \addsub.add.add [32:0];
  assign \addsub.bsel  = \addsub.add.b ;
  assign \addsub.cout  = \addsub.add.add [33];
  assign \addsub.outres  = \addsub.add.add [32:0];
  assign \addsub.pass  = 1'h0;
  assign \addsub.subsel  = subsel;
  assign \mreg.clk  = clk;
  assign \mreg.inreg  = m;
  assign \mreg.load  = ldm;
  assign \mreg.outreg  = \addsub.b ;
  assign \mreg.rst  = rst;
  assign \mreg.zero  = 1'h0;
  assign \mrreg.clk  = clk;
  assign \mrreg.inreg  = { mr, 1'h0 };
  assign \mrreg.load  = ldmr;
  assign \mrreg.outreg  = \mrreg.6594.outreg_t ;
  assign \mrreg.rst  = rst;
  assign \mrreg.shiftl  = 1'h0;
  assign \mrreg.shiftr  = shrmr;
  assign \mrreg.zero  = 1'h0;
  assign op = \mrreg.6594.outreg_t [1:0];
  assign outm = \addsub.b ;
  assign outmr = \mrreg.6594.outreg_t ;
  assign p = { \addsub.add.a , \mrreg.6594.outreg_t [33:1] };
  assign pout = \addsub.add.a ;
  assign \preg.clk  = clk;
  assign \preg.inreg  = pin;
  assign \preg.load  = ldp;
  assign \preg.outreg  = \addsub.add.a ;
  assign \preg.rst  = rst;
  assign \preg.zero  = zerop;
  assign result = \addsub.add.add [32:0];
  assign seimr = \mrreg.serin ;
  assign shmr = { mr, 1'h0 };
endmodule

module aftab_comparator_32(ain, bin, comparesignedunsignedbar, lt, eq, gt);
  wire _0_;
  wire _1_;
  wire _2_;
  input [31:0] ain;
  wire [31:0] ain;
  wire [31:0] ainp;
  input [31:0] bin;
  wire [31:0] bin;
  wire [31:0] binp;
  input comparesignedunsignedbar;
  wire comparesignedunsignedbar;
  output eq;
  wire eq;
  output gt;
  wire gt;
  output lt;
  wire lt;
  assign ainp[31] = ain[31] ^ comparesignedunsignedbar;
  assign binp[31] = bin[31] ^ comparesignedunsignedbar;
  assign _0_ = { ainp[31], ain[30:0] } == { binp[31], bin[30:0] };
  assign eq = _0_ ? 1'h1 : 1'h0;
  assign _1_ = { ainp[31], ain[30:0] } > { binp[31], bin[30:0] };
  assign gt = _1_ ? 1'h1 : 1'h0;
  assign _2_ = { ainp[31], ain[30:0] } < { binp[31], bin[30:0] };
  assign lt = _2_ ? 1'h1 : 1'h0;
  assign ainp[30:0] = ain[30:0];
  assign binp[30:0] = bin[30:0];
endmodule

module aftab_controller_32(clk, rst, completeddawu, completeddaru1, completeddaru2, completedaau, is_aau_used, instructiondone, hazard_solved, is_store_in_mem, is_load_in_mem, branch_taken, dec_valid, ex_valid, m_valid, wb_valid, wb_ret_from_epc, wb_iscsrinstruction, wb_validaccesscsr, ir, wb_func3
, wb_mreturetbar, interruptraise, exceptionraise, validaccesscsr, readonlycsr, mirror, ldmiereg, ldmieuiefield, delegationmode, previousprv, modetvec, hazex, hazm, writeregfile, setzeroorone, comparedsignedunsignedbar, selpc, seljl, selbsu, selllu, selasu
, selaau, selp1, selp2, selimm, ldbytesigned, ldhalfsigned, load, selshift, addsubbar, pass, selauipc, muxcode, sellogic, startdawu, startdaru, startmultiplyaau, startdivideaau, signedsigned, signedunsigned, unsignedunsigned, selaal
, selaah, nbytes, selcsr, selimmcsr, selp1csr, selreadwritecsr, clrcsr, setcsr, writerb_inst, checkmisaligneddawu, selcsraddrfrominst, forced_rb_read, inst_type, ret_from_epc, selalu, selpc4, selmem, cmp_selaluop2, cmp_selop2, iscsrinstruction, csr_from_wb
, ecallflag, illegalinstrflag, mipcclddisable, selccmip_csr, selcause_csr, selpc_csr, seltval_csr, selmedeleg_csr, selmideleg_csr, ldvaluecsr, ldcntcsr, dncntcsr, upcntcsr, lddelegation, ldmachine, lduser, loadmiereg, loadmieuiefield, mirrorusercu, writeregbank, selromaddress
, selmepc_csr, selinterruptaddressdirect, selinterruptaddressvectored, machinestatusalterationprecsr, userstatusalterationprecsr, machinestatusalterationpostcsr, userstatusalterationpostcsr, zerocntcsr, instructiondonecsr, gi2d_en, gi2d_rst, d2e_en, d2e_rst, e2m_en, e2m_rst, m2wb_en, m2wb_rst);
  reg [4:0] _000_;
  reg _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire [2:0] _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire [1:0] _069_;
  wire [11:0] _070_;
  wire [2:0] _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire [1:0] _077_;
  wire [11:0] _078_;
  wire [1:0] _079_;
  wire [2:0] _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire [1:0] _089_;
  wire [11:0] _090_;
  wire [1:0] _091_;
  wire [2:0] _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire [1:0] _102_;
  wire _103_;
  wire [11:0] _104_;
  wire [1:0] _105_;
  wire [2:0] _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire [1:0] _117_;
  wire _118_;
  wire [11:0] _119_;
  wire [1:0] _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire [2:0] _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire _138_;
  wire _139_;
  wire _140_;
  wire _141_;
  wire _142_;
  wire _143_;
  wire _144_;
  wire _145_;
  wire _146_;
  wire [2:0] _147_;
  wire _148_;
  wire _149_;
  wire _150_;
  wire _151_;
  wire [2:0] _152_;
  wire _153_;
  wire _154_;
  wire _155_;
  wire _156_;
  wire _157_;
  wire _158_;
  wire [2:0] _159_;
  wire _160_;
  wire _161_;
  wire _162_;
  wire _163_;
  wire _164_;
  wire _165_;
  wire _166_;
  wire [11:0] _167_;
  wire _168_;
  wire _169_;
  wire [2:0] _170_;
  wire _171_;
  wire _172_;
  wire _173_;
  wire _174_;
  wire _175_;
  wire _176_;
  wire _177_;
  wire _178_;
  wire _179_;
  wire _180_;
  wire [11:0] _181_;
  wire _182_;
  wire _183_;
  wire [2:0] _184_;
  wire _185_;
  wire _186_;
  wire _187_;
  wire _188_;
  wire _189_;
  wire _190_;
  wire _191_;
  wire _192_;
  wire _193_;
  wire _194_;
  wire _195_;
  wire [11:0] _196_;
  wire _197_;
  wire _198_;
  wire [2:0] _199_;
  wire _200_;
  wire _201_;
  wire _202_;
  wire _203_;
  wire _204_;
  wire _205_;
  wire _206_;
  wire _207_;
  wire _208_;
  wire _209_;
  wire _210_;
  wire _211_;
  wire _212_;
  wire [11:0] _213_;
  wire _214_;
  wire _215_;
  wire [2:0] _216_;
  wire _217_;
  wire _218_;
  wire _219_;
  wire _220_;
  wire _221_;
  wire _222_;
  wire _223_;
  wire _224_;
  wire _225_;
  wire _226_;
  wire _227_;
  wire _228_;
  wire _229_;
  wire _230_;
  wire _231_;
  wire _232_;
  wire _233_;
  wire [1:0] _234_;
  wire _235_;
  wire _236_;
  wire _237_;
  wire [11:0] _238_;
  wire [1:0] _239_;
  wire _240_;
  wire _241_;
  wire [2:0] _242_;
  wire _243_;
  wire _244_;
  wire _245_;
  wire _246_;
  wire _247_;
  wire _248_;
  wire _249_;
  wire _250_;
  wire _251_;
  wire _252_;
  wire _253_;
  wire _254_;
  wire _255_;
  wire _256_;
  wire _257_;
  wire _258_;
  wire _259_;
  wire _260_;
  wire [1:0] _261_;
  wire _262_;
  wire _263_;
  wire _264_;
  wire [11:0] _265_;
  wire [1:0] _266_;
  wire _267_;
  wire _268_;
  wire _269_;
  wire _270_;
  wire _271_;
  wire _272_;
  wire _273_;
  wire _274_;
  wire _275_;
  wire [2:0] _276_;
  wire _277_;
  wire _278_;
  wire _279_;
  wire _280_;
  wire _281_;
  wire _282_;
  wire _283_;
  wire _284_;
  wire _285_;
  wire _286_;
  wire _287_;
  wire _288_;
  wire _289_;
  wire _290_;
  wire _291_;
  wire _292_;
  wire _293_;
  wire _294_;
  wire [1:0] _295_;
  wire _296_;
  wire _297_;
  wire _298_;
  wire [11:0] _299_;
  wire [1:0] _300_;
  wire _301_;
  wire _302_;
  wire _303_;
  wire _304_;
  wire _305_;
  wire _306_;
  wire _307_;
  wire _308_;
  wire [1:0] _309_;
  wire _310_;
  wire _311_;
  wire [2:0] _312_;
  wire _313_;
  wire _314_;
  wire _315_;
  wire _316_;
  wire _317_;
  wire _318_;
  wire _319_;
  wire _320_;
  wire _321_;
  wire _322_;
  wire _323_;
  wire _324_;
  wire _325_;
  wire _326_;
  wire _327_;
  wire _328_;
  wire _329_;
  wire _330_;
  wire _331_;
  wire _332_;
  wire _333_;
  wire _334_;
  wire _335_;
  wire _336_;
  wire _337_;
  wire _338_;
  wire _339_;
  wire _340_;
  wire _341_;
  wire _342_;
  wire _343_;
  wire _344_;
  wire _345_;
  wire _346_;
  wire _347_;
  wire _348_;
  wire _349_;
  wire _350_;
  wire _351_;
  wire _352_;
  wire _353_;
  wire _354_;
  wire _355_;
  wire _356_;
  wire _357_;
  wire _358_;
  wire [2:0] _359_;
  wire _360_;
  wire _361_;
  wire _362_;
  wire _363_;
  wire _364_;
  wire _365_;
  wire [2:0] _366_;
  wire _367_;
  wire _368_;
  wire _369_;
  wire _370_;
  wire _371_;
  wire _372_;
  wire _373_;
  wire _374_;
  wire _375_;
  wire _376_;
  wire _377_;
  wire _378_;
  wire _379_;
  wire _380_;
  wire _381_;
  wire _382_;
  wire _383_;
  wire _384_;
  wire _385_;
  wire _386_;
  wire _387_;
  wire _388_;
  wire _389_;
  wire _390_;
  wire _391_;
  wire _392_;
  wire _393_;
  wire _394_;
  wire _395_;
  wire _396_;
  wire _397_;
  wire _398_;
  wire _399_;
  wire _400_;
  wire _401_;
  wire _402_;
  wire _403_;
  wire _404_;
  wire _405_;
  wire _406_;
  wire _407_;
  wire _408_;
  wire _409_;
  wire [4:0] _410_;
  wire [4:0] _411_;
  wire [4:0] _412_;
  wire [4:0] _413_;
  wire [4:0] _414_;
  wire [4:0] _415_;
  wire _416_;
  wire _417_;
  wire _418_;
  wire _419_;
  wire [4:0] _420_;
  wire _421_;
  wire [4:0] _422_;
  wire [4:0] _423_;
  wire [4:0] _424_;
  wire [4:0] _425_;
  wire [4:0] _426_;
  wire _427_;
  wire _428_;
  wire _429_;
  wire _430_;
  wire _431_;
  wire _432_;
  wire _433_;
  wire _434_;
  wire _435_;
  wire _436_;
  wire _437_;
  wire _438_;
  wire _439_;
  wire _440_;
  wire _441_;
  wire _442_;
  wire _443_;
  wire _444_;
  wire _445_;
  wire _446_;
  wire _447_;
  wire _448_;
  wire _449_;
  wire _450_;
  wire _451_;
  wire _452_;
  wire _453_;
  wire _454_;
  wire _455_;
  wire _456_;
  wire _457_;
  wire _458_;
  wire _459_;
  wire _460_;
  wire _461_;
  wire _462_;
  wire _463_;
  wire _464_;
  wire _465_;
  wire _466_;
  wire _467_;
  wire _468_;
  wire _469_;
  wire _470_;
  wire _471_;
  wire _472_;
  wire _473_;
  wire _474_;
  wire _475_;
  wire _476_;
  wire _477_;
  wire _478_;
  wire _479_;
  wire _480_;
  wire _481_;
  wire _482_;
  wire _483_;
  wire _484_;
  wire _485_;
  output addsubbar;
  wire addsubbar;
  input branch_taken;
  wire branch_taken;
  output checkmisaligneddawu;
  wire checkmisaligneddawu;
  input clk;
  wire clk;
  output clrcsr;
  wire clrcsr;
  output cmp_selaluop2;
  wire cmp_selaluop2;
  output cmp_selop2;
  wire cmp_selop2;
  output comparedsignedunsignedbar;
  wire comparedsignedunsignedbar;
  input completedaau;
  wire completedaau;
  input completeddaru1;
  wire completeddaru1;
  input completeddaru2;
  wire completeddaru2;
  input completeddawu;
  wire completeddawu;
  output csr_from_wb;
  wire csr_from_wb;
  wire csr_n_state;
  wire csr_p_state;
  output d2e_en;
  wire d2e_en;
  wire d2e_en_temp;
  output d2e_rst;
  wire d2e_rst;
  input dec_valid;
  wire dec_valid;
  input [1:0] delegationmode;
  wire [1:0] delegationmode;
  output dncntcsr;
  wire dncntcsr;
  output e2m_en;
  wire e2m_en;
  wire e2m_en_temp;
  output e2m_rst;
  wire e2m_rst;
  output ecallflag;
  wire ecallflag;
  input ex_valid;
  wire ex_valid;
  input exceptionraise;
  wire exceptionraise;
  output forced_rb_read;
  wire forced_rb_read;
  wire [11:0] func12;
  wire [2:0] func3;
  wire [6:0] func7;
  output gi2d_en;
  wire gi2d_en;
  wire gi2d_en_temp;
  output gi2d_rst;
  wire gi2d_rst;
  input hazard_solved;
  wire hazard_solved;
  input hazex;
  wire hazex;
  input hazm;
  wire hazm;
  output illegalinstrflag;
  wire illegalinstrflag;
  output [2:0] inst_type;
  wire [2:0] inst_type;
  input instructiondone;
  wire instructiondone;
  output instructiondonecsr;
  wire instructiondonecsr;
  input interruptraise;
  wire interruptraise;
  input [31:0] ir;
  wire [31:0] ir;
  input is_aau_used;
  wire is_aau_used;
  input is_load_in_mem;
  wire is_load_in_mem;
  input is_store_in_mem;
  wire is_store_in_mem;
  output iscsrinstruction;
  wire iscsrinstruction;
  output ldbytesigned;
  wire ldbytesigned;
  output ldcntcsr;
  wire ldcntcsr;
  output lddelegation;
  wire lddelegation;
  output ldhalfsigned;
  wire ldhalfsigned;
  output ldmachine;
  wire ldmachine;
  input ldmiereg;
  wire ldmiereg;
  input ldmieuiefield;
  wire ldmieuiefield;
  output lduser;
  wire lduser;
  output [2:0] ldvaluecsr;
  wire [2:0] ldvaluecsr;
  output load;
  wire load;
  output loadmiereg;
  wire loadmiereg;
  output loadmieuiefield;
  wire loadmieuiefield;
  wire loadmieuiefield_csr;
  wire loadmieuiefield_exint;
  output m2wb_en;
  wire m2wb_en;
  wire m2wb_en_temp;
  output m2wb_rst;
  wire m2wb_rst;
  input m_valid;
  wire m_valid;
  output machinestatusalterationpostcsr;
  wire machinestatusalterationpostcsr;
  output machinestatusalterationprecsr;
  wire machinestatusalterationprecsr;
  output mipcclddisable;
  wire mipcclddisable;
  input mirror;
  wire mirror;
  output mirrorusercu;
  wire mirrorusercu;
  wire mirrorusercu_exint;
  wire mirrorusercu_inst;
  input [1:0] modetvec;
  wire [1:0] modetvec;
  wire mretoruretbar;
  output [11:0] muxcode;
  wire [11:0] muxcode;
  wire [4:0] n_state;
  output [1:0] nbytes;
  wire [1:0] nbytes;
  wire [6:0] opcode;
  wire [4:0] p_state;
  output pass;
  wire pass;
  input [1:0] previousprv;
  wire [1:0] previousprv;
  input readonlycsr;
  wire readonlycsr;
  output ret_from_epc;
  wire ret_from_epc;
  input rst;
  wire rst;
  output selaah;
  wire selaah;
  output selaal;
  wire selaal;
  output selaau;
  wire selaau;
  output selalu;
  wire selalu;
  output selasu;
  wire selasu;
  output selauipc;
  wire selauipc;
  output selbsu;
  wire selbsu;
  output selcause_csr;
  wire selcause_csr;
  output selccmip_csr;
  wire selccmip_csr;
  output selcsr;
  wire selcsr;
  output selcsraddrfrominst;
  wire selcsraddrfrominst;
  output selimm;
  wire selimm;
  output selimmcsr;
  wire selimmcsr;
  output selinterruptaddressdirect;
  wire selinterruptaddressdirect;
  output selinterruptaddressvectored;
  wire selinterruptaddressvectored;
  output seljl;
  wire seljl;
  output selllu;
  wire selllu;
  output [1:0] sellogic;
  wire [1:0] sellogic;
  output selmedeleg_csr;
  wire selmedeleg_csr;
  output selmem;
  wire selmem;
  output selmepc_csr;
  wire selmepc_csr;
  output selmideleg_csr;
  wire selmideleg_csr;
  output selp1;
  wire selp1;
  output selp1csr;
  wire selp1csr;
  output selp2;
  wire selp2;
  output selpc;
  wire selpc;
  output selpc4;
  wire selpc4;
  output selpc_csr;
  wire selpc_csr;
  output selreadwritecsr;
  wire selreadwritecsr;
  output selromaddress;
  wire selromaddress;
  output [1:0] selshift;
  wire [1:0] selshift;
  output seltval_csr;
  wire seltval_csr;
  output setcsr;
  wire setcsr;
  output setzeroorone;
  wire setzeroorone;
  output signedsigned;
  wire signedsigned;
  output signedunsigned;
  wire signedunsigned;
  output startdaru;
  wire startdaru;
  output startdawu;
  wire startdawu;
  output startdivideaau;
  wire startdivideaau;
  output startmultiplyaau;
  wire startmultiplyaau;
  output unsignedunsigned;
  wire unsignedunsigned;
  output upcntcsr;
  wire upcntcsr;
  output userstatusalterationpostcsr;
  wire userstatusalterationpostcsr;
  output userstatusalterationprecsr;
  wire userstatusalterationprecsr;
  input validaccesscsr;
  wire validaccesscsr;
  input [2:0] wb_func3;
  wire [2:0] wb_func3;
  input wb_iscsrinstruction;
  wire wb_iscsrinstruction;
  input wb_mreturetbar;
  wire wb_mreturetbar;
  input wb_ret_from_epc;
  wire wb_ret_from_epc;
  input wb_valid;
  wire wb_valid;
  input wb_validaccesscsr;
  wire wb_validaccesscsr;
  output writerb_inst;
  wire writerb_inst;
  output writeregbank;
  wire writeregbank;
  wire writeregbank_csr;
  wire writeregbank_exint;
  output writeregfile;
  wire writeregfile;
  output zerocntcsr;
  wire zerocntcsr;
  assign p_state = rst ? 5'h00 : _000_;
  assign csr_p_state = rst ? 1'h0 : _001_;
  assign _444_ = | { _408_, _391_, _390_, _386_, _385_, _379_, _372_, _014_, _012_, _011_ };
  assign _445_ = | { _396_, _395_, _388_, _387_, _378_, _377_, _376_, _375_, _374_ };
  assign _446_ = | { _408_, _395_, _391_, _387_, _386_, _375_, _372_, _014_, _012_, _011_ };
  assign _447_ = | { _385_, _379_, _378_, _377_, _374_ };
  assign _448_ = | { _396_, _388_, _376_ };
  assign _450_ = | { _395_, _391_, _390_, _387_, _386_, _385_, _379_, _378_, _377_, _376_, _375_, _374_, _372_, _014_, _012_, _011_ };
  assign _451_ = | { _396_, _388_ };
  assign _452_ = | { _395_, _391_, _390_, _388_, _387_, _386_, _385_, _379_, _378_, _377_, _376_, _375_, _374_, _372_, _014_, _012_, _011_ };
  assign _453_ = | { _408_, _395_, _391_, _390_, _388_, _387_, _386_, _379_, _378_, _377_, _376_, _375_, _374_, _372_, _014_, _012_, _011_ };
  assign _454_ = | { _396_, _385_ };
  assign _455_ = | { _408_, _395_, _391_, _390_, _388_, _387_, _386_, _385_, _379_, _378_, _377_, _376_, _375_, _374_, _372_ };
  assign _456_ = | { _408_, _396_, _391_, _390_, _388_, _386_, _385_, _379_, _378_, _377_, _376_, _375_, _374_, _372_, _014_, _012_, _011_ };
  assign _457_ = | { _395_, _387_ };
  assign _458_ = | { _408_, _391_, _390_, _388_, _387_, _386_, _385_, _379_, _378_, _377_, _376_, _375_, _374_, _372_, _014_, _012_, _011_ };
  assign _459_ = | { _396_, _395_ };
  assign _460_ = | { _408_, _396_, _395_, _391_, _390_, _386_, _385_, _379_, _378_, _377_, _376_, _375_, _374_, _372_, _014_, _012_, _011_ };
  assign _461_ = | { _388_, _387_ };
  assign _462_ = | { _408_, _396_, _395_, _391_, _390_, _388_, _387_, _386_, _379_, _378_, _377_, _376_, _375_, _374_, _372_, _014_, _012_, _011_ };
  assign _463_ = | { _408_, _396_, _395_, _390_, _388_, _387_, _386_, _385_, _379_, _378_, _377_, _376_, _375_, _374_, _372_, _014_, _012_, _011_ };
  assign _464_ = | { _408_, _372_, _014_, _012_, _011_ };
  assign _465_ = | { _396_, _395_, _391_, _390_, _388_, _387_, _386_, _385_, _379_, _378_, _377_, _376_, _375_, _374_ };
  assign _466_ = | { _408_, _396_, _391_, _390_, _387_, _386_, _379_, _378_, _377_, _376_, _375_, _374_, _372_, _014_, _012_, _011_ };
  assign _467_ = | { _388_, _385_ };
  assign _468_ = | { _408_, _396_, _395_, _391_, _390_, _388_, _387_, _386_, _385_, _379_, _378_, _377_, _376_, _375_, _374_, _014_, _012_, _011_ };
  assign _469_ = | { _408_, _396_, _395_, _391_, _390_, _388_, _387_, _386_, _379_, _375_, _374_, _372_, _014_, _012_, _011_ };
  assign _470_ = | { _385_, _378_, _377_, _376_ };
  assign _472_ = | { _390_, _374_ };
  assign _471_ = | { _408_, _396_, _395_, _391_, _388_, _387_, _386_, _385_, _379_, _378_, _377_, _376_, _375_, _372_ };
  assign _473_ = | { _408_, _396_, _395_, _391_, _390_, _388_, _387_, _386_, _385_, _379_, _378_, _377_, _376_, _375_, _374_ };
  assign _474_ = | { _408_, _396_, _395_, _391_, _390_, _388_, _387_, _386_, _385_, _379_, _378_, _377_, _376_, _375_, _372_, _014_, _012_, _011_ };
  assign _475_ = | { _408_, _396_, _395_, _391_, _390_, _388_, _387_, _386_, _385_, _379_, _377_, _376_, _375_, _374_, _372_, _014_, _012_, _011_ };
  assign _476_ = | { _408_, _396_, _395_, _391_, _390_, _388_, _387_, _386_, _385_, _379_, _378_, _376_, _375_, _374_, _372_, _014_, _012_, _011_ };
  assign _477_ = | { _408_, _396_, _395_, _391_, _390_, _388_, _387_, _386_, _385_, _379_, _378_, _377_, _374_, _372_, _014_, _012_, _011_ };
  assign _478_ = | { _376_, _375_ };
  assign _479_ = | { _388_, _387_, _386_, _385_, _379_, _378_, _377_, _376_, _375_, _374_, _372_ };
  assign _480_ = | { _408_, _396_, _395_, _391_, _390_ };
  assign _449_ = | { _408_, _396_, _395_, _391_, _390_, _388_, _387_, _386_, _385_, _379_, _378_, _377_, _376_, _375_, _374_, _372_ };
  assign _482_ = | { _408_, _014_, _012_, _011_ };
  assign _483_ = | { _396_, _395_, _391_, _390_, _388_, _387_, _386_, _385_, _379_, _378_, _377_, _376_, _375_, _374_, _372_ };
  assign _484_ = | { _376_, _374_ };
  assign _485_ = | { _014_, _012_ };
  assign _481_ = | { _014_, _012_, _011_ };
  assign _410_ = hazm ? 5'h11 : 5'h00;
  assign _411_ = hazex ? 5'h10 : _410_;
  assign _412_ = branch_taken ? 5'h00 : _411_;
  assign _413_ = _409_ ? 5'h01 : _412_;
  assign _414_ = _347_ ? 5'h0c : _413_;
  assign _415_ = interruptraise ? 5'h03 : 5'h02;
  assign _416_ = ~ completeddawu;
  assign _417_ = _416_ & is_store_in_mem;
  assign _418_ = ~ exceptionraise;
  assign _419_ = _418_ & _417_;
  assign _420_ = _419_ ? 5'h12 : 5'h00;
  assign _422_ = _421_ ? 5'h00 : 5'h10;
  assign _423_ = _409_ ? 5'h01 : _422_;
  assign _409_ = interruptraise | exceptionraise;
  assign _421_ = hazard_solved | branch_taken;
  assign _424_ = _421_ ? 5'h00 : 5'h11;
  assign _425_ = _409_ ? 5'h01 : _424_;
  assign _426_ = completeddawu ? 5'h00 : 5'h12;
  function [4:0] \2198 ;
    input [4:0] a;
    input [84:0] b;
    input [16:0] s;
    (* parallel_case *)
    casez (s)
      17'b????????????????1:
        \2198  = b[4:0];
      17'b???????????????1?:
        \2198  = b[9:5];
      17'b??????????????1??:
        \2198  = b[14:10];
      17'b?????????????1???:
        \2198  = b[19:15];
      17'b????????????1????:
        \2198  = b[24:20];
      17'b???????????1?????:
        \2198  = b[29:25];
      17'b??????????1??????:
        \2198  = b[34:30];
      17'b?????????1???????:
        \2198  = b[39:35];
      17'b????????1????????:
        \2198  = b[44:40];
      17'b???????1?????????:
        \2198  = b[49:45];
      17'b??????1??????????:
        \2198  = b[54:50];
      17'b?????1???????????:
        \2198  = b[59:55];
      17'b????1????????????:
        \2198  = b[64:60];
      17'b???1?????????????:
        \2198  = b[69:65];
      17'b??1??????????????:
        \2198  = b[74:70];
      17'b?1???????????????:
        \2198  = b[79:75];
      17'b1????????????????:
        \2198  = b[84:80];
      default:
        \2198  = a;
    endcase
  endfunction
  assign n_state = \2198 (5'h00, { _426_, _425_, _423_, 15'h3dcd, _420_, 40'h41ccb52485, _415_, _414_ }, { _408_, _014_, _012_, _395_, _391_, _390_, _388_, _387_, _386_, _385_, _379_, _378_, _377_, _375_, _484_, _372_, _011_ });
  assign _429_ = _007_ & _428_;
  assign _430_ = wb_func3[2] & _428_;
  assign _431_ = _008_ & _428_;
  assign _432_ = _009_ & _428_;
  assign _427_ = ~ readonlycsr;
  assign _428_ = wb_validaccesscsr & _427_;
  assign _433_ = _010_ & _428_;
  assign _434_ = ldmiereg & wb_validaccesscsr;
  assign _435_ = ldmieuiefield & wb_validaccesscsr;
  assign _436_ = mirror ? 1'h0 : 1'h1;
  assign _437_ = _003_ ? 1'h1 : 1'h0;
  assign _438_ = wb_iscsrinstruction ? _430_ : 1'h0;
  assign _439_ = wb_iscsrinstruction ? _429_ : 1'h0;
  assign _440_ = wb_iscsrinstruction ? _431_ : 1'h0;
  assign _441_ = wb_iscsrinstruction ? _433_ : 1'h0;
  assign _442_ = wb_iscsrinstruction ? _432_ : 1'h0;
  assign _443_ = wb_iscsrinstruction ? _434_ : 1'h0;
  assign _002_ = wb_iscsrinstruction ? _436_ : 1'h0;
  assign _003_ = mirror & wb_iscsrinstruction;
  assign _004_ = wb_iscsrinstruction ? _428_ : 1'h0;
  assign _005_ = wb_iscsrinstruction ? _435_ : 1'h0;
  assign _006_ = ~ csr_p_state;
  assign _007_ = ~ wb_func3[2];
  assign _008_ = ~ wb_func3[1];
  assign _009_ = ~ wb_func3[0];
  assign _010_ = wb_func3[1] & wb_func3[0];
  function [0:0] \2274 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \2274  = b[0:0];
      2'b1?:
        \2274  = b[1:1];
      default:
        \2274  = a;
    endcase
  endfunction
  assign selimmcsr = \2274 (1'hx, { wb_func3[2], _438_ }, { csr_p_state, _006_ });
  function [0:0] \2277 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \2277  = b[0:0];
      2'b1?:
        \2277  = b[1:1];
      default:
        \2277  = a;
    endcase
  endfunction
  assign selp1csr = \2277 (1'hx, { _007_, _439_ }, { csr_p_state, _006_ });
  function [0:0] \2280 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \2280  = b[0:0];
      2'b1?:
        \2280  = b[1:1];
      default:
        \2280  = a;
    endcase
  endfunction
  assign selreadwritecsr = \2280 (1'hx, { _008_, _440_ }, { csr_p_state, _006_ });
  function [0:0] \2283 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \2283  = b[0:0];
      2'b1?:
        \2283  = b[1:1];
      default:
        \2283  = a;
    endcase
  endfunction
  assign clrcsr = \2283 (1'hx, { _010_, _441_ }, { csr_p_state, _006_ });
  function [0:0] \2286 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \2286  = b[0:0];
      2'b1?:
        \2286  = b[1:1];
      default:
        \2286  = a;
    endcase
  endfunction
  assign setcsr = \2286 (1'hx, { _009_, _442_ }, { csr_p_state, _006_ });
  function [0:0] \2290 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \2290  = b[0:0];
      2'b1?:
        \2290  = b[1:1];
      default:
        \2290  = a;
    endcase
  endfunction
  assign loadmiereg = \2290 (1'hx, { 1'h0, _443_ }, { csr_p_state, _006_ });
  function [0:0] \2294 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \2294  = b[0:0];
      2'b1?:
        \2294  = b[1:1];
      default:
        \2294  = a;
    endcase
  endfunction
  assign instructiondonecsr = \2294 (1'hx, { 1'h1, _002_ }, { csr_p_state, _006_ });
  function [0:0] \2298 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \2298  = b[0:0];
      2'b1?:
        \2298  = b[1:1];
      default:
        \2298  = a;
    endcase
  endfunction
  assign csr_n_state = \2298 (1'hx, { 1'h0, _437_ }, { csr_p_state, _006_ });
  function [0:0] \2302 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \2302  = b[0:0];
      2'b1?:
        \2302  = b[1:1];
      default:
        \2302  = a;
    endcase
  endfunction
  assign mirrorusercu_inst = \2302 (1'hx, 2'h2, { csr_p_state, _006_ });
  function [0:0] \2306 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \2306  = b[0:0];
      2'b1?:
        \2306  = b[1:1];
      default:
        \2306  = a;
    endcase
  endfunction
  assign writeregbank_csr = \2306 (1'hx, { 1'h1, _004_ }, { csr_p_state, _006_ });
  function [0:0] \2310 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \2310  = b[0:0];
      2'b1?:
        \2310  = b[1:1];
      default:
        \2310  = a;
    endcase
  endfunction
  assign loadmieuiefield_csr = \2310 (1'hx, { 1'h0, _005_ }, { csr_p_state, _006_ });
  assign mirrorusercu = _015_ ? mirrorusercu_inst : mirrorusercu_exint;
  assign writeregbank = _015_ ? writeregbank_csr : writeregbank_exint;
  assign _013_ = _011_ | _012_;
  assign _015_ = _013_ | _014_;
  assign loadmieuiefield = _015_ ? loadmieuiefield_csr : loadmieuiefield_exint;
  assign _016_ = ir[6:0] == 7'h03;
  assign _022_ = _020_ & _021_;
  assign _020_ = _018_ & _019_;
  assign _023_ = _020_ & ir[12];
  assign _024_ = ir[14] | ir[13];
  assign _025_ = ir[6:0] == 7'h23;
  assign _026_ = ir[6:0] == 7'h33;
  assign _031_ = _030_ ? 1'h1 : 1'h0;
  assign _032_ = _029_ ? 1'h1 : 1'h0;
  assign _033_ = _029_ ? 1'h0 : _031_;
  assign _034_ = _028_ ? 1'h1 : 1'h0;
  assign _035_ = _028_ ? 1'h0 : _032_;
  assign _036_ = _028_ ? 1'h0 : _033_;
  assign _037_ = _027_ ? 1'h1 : _034_;
  assign _038_ = _027_ ? 1'h0 : _035_;
  assign _039_ = _027_ ? 1'h0 : _036_;
  assign _027_ = ! ir[13:12];
  assign _029_ = ir[13:12] == 2'h2;
  assign _040_ = _027_ | _029_;
  assign _028_ = ir[13:12] == 2'h1;
  assign _030_ = ir[13:12] == 2'h3;
  assign _041_ = _028_ | _030_;
  assign _042_ = _041_ ? 1'h1 : 1'h0;
  assign _043_ = _040_ ? 1'h1 : 1'h0;
  assign _044_ = _040_ ? 1'h0 : _042_;
  assign _045_ = ir[14] ? _043_ : _037_;
  assign _046_ = ir[14] ? 1'h0 : _038_;
  assign _047_ = ir[14] ? _044_ : _039_;
  assign _018_ = ~ ir[14];
  assign _048_ = ~ _017_;
  assign _017_ = ir[13] | ir[12];
  assign _049_ = ir[14] ? ir[13] : _048_;
  assign _050_ = ir[14] ? _019_ : _017_;
  assign _109_ = ir[25] ? 1'h0 : _095_;
  assign _111_ = ir[25] ? 1'h0 : _097_;
  assign _112_ = ir[25] ? 1'h0 : _098_;
  assign _113_ = ir[25] ? 1'h0 : _099_;
  assign _114_ = ir[25] ? 1'h1 : 1'h0;
  assign _110_ = ir[25] ? 1'h1 : _096_;
  assign _115_ = ir[25] ? 1'h1 : _100_;
  assign _116_ = ir[25] ? 1'h0 : _101_;
  assign _117_ = ir[25] ? 2'h0 : _102_;
  assign _118_ = ir[25] ? 1'h0 : _103_;
  assign _119_ = ir[25] ? 12'h000 : _104_;
  assign _120_ = ir[25] ? 2'h0 : _105_;
  assign _121_ = ir[25] ? _018_ : 1'h0;
  assign _122_ = ir[25] ? ir[14] : 1'h0;
  assign _123_ = ir[25] ? _045_ : 1'h0;
  assign _124_ = ir[25] ? _046_ : 1'h0;
  assign _125_ = ir[25] ? _047_ : 1'h0;
  assign _126_ = ir[25] ? _049_ : 1'h0;
  assign _127_ = ir[25] ? _050_ : 1'h0;
  assign _128_ = ir[25] ? 3'h0 : _106_;
  assign _107_ = ir[25] ? 1'h1 : _093_;
  assign _108_ = ir[25] ? 1'h0 : _094_;
  assign _129_ = ir[6:0] == 7'h13;
  assign _054_ = ir[30] & ir[5];
  assign _055_ = ir[14:12] == 3'h2;
  assign _056_ = ir[14:12] == 3'h3;
  assign _057_ = _055_ | _056_;
  assign _021_ = ~ ir[12];
  assign _058_ = ir[14:12] == 3'h4;
  assign _059_ = ir[14:12] == 3'h6;
  assign _060_ = _058_ | _059_;
  assign _061_ = ir[14:12] == 3'h7;
  assign _062_ = _060_ | _061_;
  assign _063_ = ir[14:12] == 3'h1;
  assign _064_ = ir[14:12] == 3'h5;
  assign _065_ = _063_ | _064_;
  assign _052_ = ir[5] ? 3'h0 : 3'h1;
  assign _067_ = _065_ ? ir[5] : 1'h0;
  assign _068_ = _065_ ? _053_ : 1'h0;
  assign _069_ = _065_ ? { ir[14], ir[30] } : 2'h0;
  assign _070_ = _065_ ? 12'h4c9 : 12'h000;
  assign _071_ = _065_ ? _052_ : 3'h0;
  assign _066_ = _065_ ? 1'h1 : 1'h0;
  assign _073_ = _062_ ? 1'h0 : _066_;
  assign _074_ = _062_ ? 1'h1 : 1'h0;
  assign _075_ = _062_ ? ir[5] : _067_;
  assign _076_ = _062_ ? _053_ : _068_;
  assign _077_ = _062_ ? 2'h0 : _069_;
  assign _078_ = _062_ ? 12'h4c9 : _070_;
  assign _079_ = _062_ ? ir[13:12] : 2'h0;
  assign _080_ = _062_ ? _052_ : _071_;
  assign _072_ = _062_ ? 1'h1 : _066_;
  assign _083_ = _057_ ? _021_ : 1'h0;
  assign _085_ = _057_ ? 1'h0 : _073_;
  assign _086_ = _057_ ? 1'h0 : _074_;
  assign _084_ = _057_ ? 1'h1 : _072_;
  assign _087_ = _057_ ? ir[5] : _075_;
  assign _088_ = _057_ ? _053_ : _076_;
  assign _089_ = _057_ ? 2'h0 : _077_;
  assign _090_ = _057_ ? 12'h4c9 : _078_;
  assign _091_ = _057_ ? 2'h0 : _079_;
  assign _092_ = _057_ ? _052_ : _080_;
  assign _081_ = _057_ ? 1'h0 : _072_;
  assign _082_ = _057_ ? 1'h1 : 1'h0;
  assign _095_ = _051_ ? 1'h0 : _083_;
  assign _097_ = _051_ ? 1'h0 : _085_;
  assign _098_ = _051_ ? 1'h0 : _086_;
  assign _099_ = _051_ ? 1'h1 : 1'h0;
  assign _096_ = _051_ ? 1'h1 : _084_;
  assign _100_ = _051_ ? ir[5] : _087_;
  assign _101_ = _051_ ? _053_ : _088_;
  assign _102_ = _051_ ? 2'h0 : _089_;
  assign _103_ = _051_ ? _054_ : 1'h0;
  assign _104_ = _051_ ? 12'h4c9 : _090_;
  assign _105_ = _051_ ? 2'h0 : _091_;
  assign _106_ = _051_ ? _052_ : _092_;
  assign _093_ = _051_ ? 1'h1 : _081_;
  assign _094_ = _051_ ? 1'h0 : _082_;
  assign _130_ = ir[6:0] == 7'h6f;
  assign _131_ = ir[6:0] == 7'h67;
  assign _132_ = ir[6:0] == 7'h63;
  assign _019_ = ~ ir[13];
  assign _133_ = ir[6:0] == 7'h37;
  assign _134_ = ir[6:0] == 7'h17;
  assign _135_ = _133_ | _134_;
  assign _053_ = ~ ir[5];
  assign _136_ = ir[6:0] == 7'h73;
  assign _051_ = ! ir[14:12];
  assign _137_ = ! ir[31:20];
  assign _138_ = _137_ & _051_;
  assign _139_ = | ir[14:12];
  assign _140_ = ir[31:20] != 12'h302;
  assign _141_ = ir[31:20] != 12'h002;
  assign _142_ = _141_ & _140_;
  assign _143_ = _139_ | _142_;
  assign _144_ = ~ validaccesscsr;
  assign _146_ = _143_ ? validaccesscsr : 1'h0;
  assign _147_ = _143_ ? 3'h1 : 3'h2;
  assign _148_ = _143_ ? 1'h0 : 1'h1;
  assign _145_ = _143_ ? 1'h1 : 1'h0;
  assign _149_ = _143_ ? _144_ : 1'h0;
  assign _151_ = _138_ ? 1'h0 : _146_;
  assign _152_ = _138_ ? 3'h1 : _147_;
  assign _153_ = _138_ ? 1'h0 : _148_;
  assign _150_ = _138_ ? 1'h0 : _145_;
  assign _154_ = _138_ ? 1'h1 : 1'h0;
  assign _155_ = _138_ ? 1'h0 : _149_;
  assign _156_ = dec_valid ? 1'h1 : 1'h0;
  assign _158_ = _136_ ? _151_ : 1'h0;
  assign _159_ = _136_ ? _152_ : 3'h0;
  assign _160_ = _136_ ? _153_ : 1'h0;
  assign _157_ = _136_ ? _150_ : 1'h0;
  assign _161_ = _136_ ? _154_ : 1'h0;
  assign _162_ = _136_ ? _155_ : _156_;
  assign _164_ = _135_ ? 1'h1 : 1'h0;
  assign _165_ = _135_ ? ir[5] : 1'h0;
  assign _166_ = _135_ ? _053_ : 1'h0;
  assign _167_ = _135_ ? 12'h824 : 12'h000;
  assign _168_ = _135_ ? 1'h0 : _158_;
  assign _170_ = _135_ ? 3'h3 : _159_;
  assign _171_ = _135_ ? 1'h0 : _160_;
  assign _163_ = _135_ ? 1'h1 : _157_;
  assign _169_ = _135_ ? 1'h0 : _157_;
  assign _172_ = _135_ ? 1'h0 : _161_;
  assign _173_ = _135_ ? 1'h0 : _162_;
  assign _175_ = _132_ ? _019_ : 1'h0;
  assign _177_ = _132_ ? 1'h0 : _164_;
  assign _178_ = _132_ ? 1'h1 : _164_;
  assign _179_ = _132_ ? 1'h0 : _165_;
  assign _180_ = _132_ ? 1'h0 : _166_;
  assign _181_ = _132_ ? 12'h554 : _167_;
  assign _182_ = _132_ ? 1'h0 : _168_;
  assign _184_ = _132_ ? 3'h4 : _170_;
  assign _185_ = _132_ ? 1'h0 : _171_;
  assign _174_ = _132_ ? 1'h0 : _163_;
  assign _176_ = _132_ ? 1'h1 : 1'h0;
  assign _183_ = _132_ ? 1'h0 : _169_;
  assign _186_ = _132_ ? 1'h0 : _172_;
  assign _187_ = _132_ ? 1'h0 : _173_;
  assign _188_ = _131_ ? 1'h1 : _174_;
  assign _189_ = _131_ ? 1'h0 : _175_;
  assign _191_ = _131_ ? 1'h1 : _177_;
  assign _193_ = _131_ ? 1'h1 : _176_;
  assign _192_ = _131_ ? 1'h1 : _178_;
  assign _194_ = _131_ ? 1'h0 : _179_;
  assign _195_ = _131_ ? 1'h0 : _180_;
  assign _196_ = _131_ ? 12'h4c9 : _181_;
  assign _197_ = _131_ ? 1'h0 : _182_;
  assign _199_ = _131_ ? 3'h5 : _184_;
  assign _200_ = _131_ ? 1'h0 : _185_;
  assign _201_ = _131_ ? 1'h0 : _174_;
  assign _202_ = _131_ ? 1'h1 : 1'h0;
  assign _190_ = _131_ ? 1'h0 : _176_;
  assign _198_ = _131_ ? 1'h0 : _183_;
  assign _203_ = _131_ ? 1'h0 : _186_;
  assign _204_ = _131_ ? 1'h0 : _187_;
  assign _205_ = _130_ ? 1'h1 : _188_;
  assign _206_ = _130_ ? 1'h0 : _189_;
  assign _207_ = _130_ ? 1'h1 : _190_;
  assign _208_ = _130_ ? 1'h0 : _191_;
  assign _210_ = _130_ ? 1'h0 : _193_;
  assign _209_ = _130_ ? 1'h1 : _192_;
  assign _211_ = _130_ ? 1'h0 : _194_;
  assign _212_ = _130_ ? 1'h0 : _195_;
  assign _213_ = _130_ ? 12'ha4c : _196_;
  assign _214_ = _130_ ? 1'h0 : _197_;
  assign _216_ = _130_ ? 3'h5 : _199_;
  assign _217_ = _130_ ? 1'h0 : _200_;
  assign _218_ = _130_ ? 1'h0 : _201_;
  assign _219_ = _130_ ? 1'h1 : _202_;
  assign _220_ = _130_ ? 1'h0 : _190_;
  assign _215_ = _130_ ? 1'h0 : _198_;
  assign _221_ = _130_ ? 1'h0 : _203_;
  assign _222_ = _130_ ? 1'h0 : _204_;
  assign _223_ = _129_ ? _093_ : _205_;
  assign _225_ = _129_ ? _095_ : _206_;
  assign _226_ = _129_ ? 1'h0 : _207_;
  assign _227_ = _129_ ? _096_ : _208_;
  assign _228_ = _129_ ? _097_ : 1'h0;
  assign _229_ = _129_ ? _098_ : 1'h0;
  assign _230_ = _129_ ? _099_ : _209_;
  assign _231_ = _129_ ? _096_ : _210_;
  assign _232_ = _129_ ? _100_ : 1'h0;
  assign _233_ = _129_ ? _101_ : _209_;
  assign _234_ = _129_ ? _102_ : 2'h0;
  assign _235_ = _129_ ? _103_ : 1'h0;
  assign _236_ = _129_ ? 1'h0 : _211_;
  assign _237_ = _129_ ? 1'h0 : _212_;
  assign _238_ = _129_ ? _104_ : _213_;
  assign _239_ = _129_ ? _105_ : 2'h0;
  assign _240_ = _129_ ? 1'h0 : _214_;
  assign _242_ = _129_ ? _106_ : _216_;
  assign _243_ = _129_ ? 1'h0 : _217_;
  assign _244_ = _129_ ? _093_ : _218_;
  assign _245_ = _129_ ? 1'h0 : _219_;
  assign _224_ = _129_ ? _094_ : 1'h0;
  assign _246_ = _129_ ? 1'h0 : _220_;
  assign _241_ = _129_ ? 1'h0 : _215_;
  assign _247_ = _129_ ? 1'h0 : _221_;
  assign _248_ = _129_ ? 1'h0 : _222_;
  assign _249_ = _026_ ? _107_ : _223_;
  assign _251_ = _026_ ? _109_ : _225_;
  assign _252_ = _026_ ? 1'h0 : _226_;
  assign _253_ = _026_ ? _110_ : _227_;
  assign _254_ = _026_ ? _111_ : _228_;
  assign _255_ = _026_ ? _112_ : _229_;
  assign _256_ = _026_ ? _113_ : _230_;
  assign _257_ = _026_ ? _114_ : 1'h0;
  assign _258_ = _026_ ? _110_ : _231_;
  assign _259_ = _026_ ? _115_ : _232_;
  assign _260_ = _026_ ? _116_ : _233_;
  assign _261_ = _026_ ? _117_ : _234_;
  assign _262_ = _026_ ? _118_ : _235_;
  assign _263_ = _026_ ? 1'h0 : _236_;
  assign _264_ = _026_ ? 1'h0 : _237_;
  assign _265_ = _026_ ? _119_ : _238_;
  assign _266_ = _026_ ? _120_ : _239_;
  assign _267_ = _026_ ? _121_ : 1'h0;
  assign _268_ = _026_ ? _122_ : 1'h0;
  assign _269_ = _026_ ? _123_ : 1'h0;
  assign _270_ = _026_ ? _124_ : 1'h0;
  assign _271_ = _026_ ? _125_ : 1'h0;
  assign _272_ = _026_ ? _126_ : 1'h0;
  assign _273_ = _026_ ? _127_ : 1'h0;
  assign _274_ = _026_ ? 1'h0 : _240_;
  assign _276_ = _026_ ? _128_ : _242_;
  assign _277_ = _026_ ? 1'h0 : _243_;
  assign _278_ = _026_ ? _107_ : _244_;
  assign _279_ = _026_ ? 1'h0 : _245_;
  assign _250_ = _026_ ? _108_ : _224_;
  assign _280_ = _026_ ? 1'h0 : _246_;
  assign _275_ = _026_ ? 1'h0 : _241_;
  assign _281_ = _026_ ? 1'h0 : _247_;
  assign _282_ = _026_ ? 1'h0 : _248_;
  assign _283_ = _025_ ? 1'h0 : _249_;
  assign _285_ = _025_ ? 1'h0 : _251_;
  assign _286_ = _025_ ? 1'h0 : _252_;
  assign _287_ = _025_ ? 1'h1 : _253_;
  assign _288_ = _025_ ? 1'h0 : _254_;
  assign _289_ = _025_ ? 1'h0 : _255_;
  assign _290_ = _025_ ? 1'h1 : _256_;
  assign _291_ = _025_ ? 1'h0 : _257_;
  assign _292_ = _025_ ? 1'h1 : _258_;
  assign _293_ = _025_ ? 1'h0 : _259_;
  assign _294_ = _025_ ? 1'h1 : _260_;
  assign _295_ = _025_ ? 2'h0 : _261_;
  assign _296_ = _025_ ? 1'h0 : _262_;
  assign _297_ = _025_ ? 1'h0 : _263_;
  assign _298_ = _025_ ? 1'h0 : _264_;
  assign _299_ = _025_ ? 12'h4d2 : _265_;
  assign _300_ = _025_ ? 2'h0 : _266_;
  assign _302_ = _025_ ? 1'h0 : _267_;
  assign _303_ = _025_ ? 1'h0 : _268_;
  assign _304_ = _025_ ? 1'h0 : _269_;
  assign _305_ = _025_ ? 1'h0 : _270_;
  assign _306_ = _025_ ? 1'h0 : _271_;
  assign _307_ = _025_ ? 1'h0 : _272_;
  assign _308_ = _025_ ? 1'h0 : _273_;
  assign _309_ = _025_ ? { ir[13], _017_ } : 2'h0;
  assign _310_ = _025_ ? 1'h0 : _274_;
  assign _301_ = _025_ ? 1'h1 : 1'h0;
  assign _312_ = _025_ ? 3'h2 : _276_;
  assign _313_ = _025_ ? 1'h0 : _277_;
  assign _314_ = _025_ ? 1'h0 : _278_;
  assign _315_ = _025_ ? 1'h0 : _279_;
  assign _284_ = _025_ ? 1'h0 : _250_;
  assign _316_ = _025_ ? 1'h0 : _280_;
  assign _311_ = _025_ ? 1'h0 : _275_;
  assign _317_ = _025_ ? 1'h0 : _281_;
  assign _318_ = _025_ ? 1'h0 : _282_;
  assign writeregfile = _016_ ? 1'h1 : _283_;
  assign cmp_selaluop2 = _016_ ? 1'h0 : _284_;
  assign comparedsignedunsignedbar = _016_ ? 1'h0 : _285_;
  assign selpc = _016_ ? 1'h0 : _286_;
  assign seljl = _016_ ? 1'h1 : _287_;
  assign selbsu = _016_ ? 1'h0 : _288_;
  assign selllu = _016_ ? 1'h0 : _289_;
  assign selasu = _016_ ? 1'h1 : _290_;
  assign selaau = _016_ ? 1'h0 : _291_;
  assign selp1 = _016_ ? 1'h1 : _292_;
  assign selp2 = _016_ ? 1'h0 : _293_;
  assign selimm = _016_ ? 1'h1 : _294_;
  assign ldbytesigned = _016_ ? _022_ : 1'h0;
  assign ldhalfsigned = _016_ ? _023_ : 1'h0;
  assign load = _016_ ? _024_ : 1'h0;
  assign selshift = _016_ ? 2'h0 : _295_;
  assign addsubbar = _016_ ? 1'h0 : _296_;
  assign pass = _016_ ? 1'h0 : _297_;
  assign selauipc = _016_ ? 1'h0 : _298_;
  assign muxcode = _016_ ? 12'h4c9 : _299_;
  assign sellogic = _016_ ? 2'h0 : _300_;
  assign startmultiplyaau = _016_ ? 1'h0 : _302_;
  assign startdivideaau = _016_ ? 1'h0 : _303_;
  assign signedsigned = _016_ ? 1'h0 : _304_;
  assign signedunsigned = _016_ ? 1'h0 : _305_;
  assign unsignedunsigned = _016_ ? 1'h0 : _306_;
  assign selaal = _016_ ? 1'h0 : _307_;
  assign selaah = _016_ ? 1'h0 : _308_;
  assign nbytes = _016_ ? { ir[13], _017_ } : _309_;
  assign selcsr = _016_ ? 1'h0 : _310_;
  assign checkmisaligneddawu = _016_ ? 1'h0 : _301_;
  assign inst_type = _016_ ? 3'h1 : _312_;
  assign ret_from_epc = _016_ ? 1'h0 : _313_;
  assign selalu = _016_ ? 1'h0 : _314_;
  assign selpc4 = _016_ ? 1'h0 : _315_;
  assign selmem = _016_ ? 1'h1 : 1'h0;
  assign cmp_selop2 = _016_ ? 1'h0 : _316_;
  assign iscsrinstruction = _016_ ? 1'h0 : _311_;
  assign ecallflag = _016_ ? 1'h0 : _317_;
  assign illegalinstrflag = _016_ ? 1'h0 : _318_;
  assign _319_ = ~ dec_valid;
  assign _320_ = d2e_en_temp | _319_;
  assign _321_ = completeddaru1 & _320_;
  assign _322_ = _321_ ? 1'h1 : 1'h0;
  assign _323_ = ~ ex_valid;
  assign _324_ = e2m_en_temp | _323_;
  assign _325_ = dec_valid & _324_;
  assign _326_ = _325_ ? 1'h1 : 1'h0;
  assign _327_ = ~ m_valid;
  assign _328_ = m2wb_en_temp | _327_;
  assign _329_ = ex_valid & _328_;
  assign _330_ = ~ is_aau_used;
  assign _331_ = _330_ | completedaau;
  assign _332_ = _331_ & _329_;
  assign _333_ = _332_ ? 1'h1 : 1'h0;
  assign _334_ = is_store_in_mem & completeddawu;
  assign _335_ = is_load_in_mem & completeddaru2;
  assign _336_ = _334_ | _335_;
  assign _337_ = ~ is_store_in_mem;
  assign _338_ = ~ is_load_in_mem;
  assign _339_ = _338_ & _337_;
  assign _340_ = _336_ | _339_;
  assign _341_ = _340_ & instructiondone;
  assign _342_ = m_valid & _341_;
  assign _343_ = _342_ ? 1'h1 : 1'h0;
  assign _344_ = instructiondone ? 1'h1 : 1'h0;
  assign _345_ = branch_taken ? 1'h1 : 1'h0;
  assign _346_ = branch_taken ? _344_ : 1'h0;
  assign _348_ = hazm ? 1'h0 : _322_;
  assign _349_ = hazm ? 1'h0 : _326_;
  assign _350_ = hazex ? 1'h0 : _348_;
  assign _351_ = hazex ? 1'h0 : _349_;
  assign _352_ = interruptraise ? 1'h1 : 1'h0;
  assign _353_ = interruptraise ? 1'h0 : _350_;
  assign _354_ = interruptraise ? 1'h0 : _351_;
  assign _355_ = interruptraise ? 1'h0 : _333_;
  assign _356_ = interruptraise ? 1'h0 : _343_;
  assign _359_ = exceptionraise ? 3'h7 : 3'h0;
  assign _358_ = exceptionraise ? 1'h1 : 1'h0;
  assign _357_ = exceptionraise ? 1'h0 : _352_;
  assign _360_ = exceptionraise ? 1'h0 : _353_;
  assign _361_ = exceptionraise ? 1'h0 : _354_;
  assign _362_ = exceptionraise ? 1'h0 : _355_;
  assign _363_ = exceptionraise ? 1'h0 : _356_;
  assign _365_ = _347_ ? 1'h0 : _358_;
  assign _366_ = _347_ ? 3'h2 : _359_;
  assign _367_ = _347_ ? 1'h1 : _358_;
  assign _364_ = _347_ ? 1'h0 : _357_;
  assign _368_ = _347_ ? 1'h0 : _360_;
  assign _369_ = _347_ ? 1'h0 : _361_;
  assign _370_ = _347_ ? 1'h0 : _362_;
  assign _371_ = _347_ ? 1'h0 : _363_;
  assign _011_ = ! p_state;
  assign _372_ = p_state == 5'h01;
  assign _374_ = p_state == 5'h02;
  assign _375_ = p_state == 5'h03;
  assign _376_ = p_state == 5'h04;
  assign _377_ = p_state == 5'h05;
  assign _378_ = p_state == 5'h09;
  assign _379_ = p_state == 5'h0a;
  assign _380_ = ! modetvec;
  assign _381_ = modetvec == 2'h1;
  assign _382_ = _381_ ? 1'h1 : 1'h0;
  assign _383_ = _380_ ? 1'h1 : 1'h0;
  assign _384_ = _380_ ? 1'h0 : _382_;
  assign _385_ = p_state == 5'h0b;
  assign _386_ = p_state == 5'h06;
  assign _387_ = p_state == 5'h07;
  assign _373_ = ~ delegationmode[0];
  assign _388_ = p_state == 5'h08;
  assign _390_ = p_state == 5'h0c;
  assign _391_ = p_state == 5'h0d;
  assign _392_ = ~ previousprv[0];
  assign _393_ = wb_mreturetbar ? previousprv[0] : 1'h0;
  assign _394_ = wb_mreturetbar ? _392_ : 1'h1;
  assign _395_ = p_state == 5'h0e;
  assign _389_ = ~ wb_mreturetbar;
  assign _396_ = p_state == 5'h0f;
  assign _397_ = hazard_solved ? _322_ : 1'h0;
  assign _398_ = hazard_solved ? _326_ : 1'h0;
  assign _399_ = interruptraise ? 1'h0 : _397_;
  assign _400_ = interruptraise ? 1'h0 : _398_;
  assign _012_ = p_state == 5'h10;
  assign _347_ = wb_valid & wb_ret_from_epc;
  assign _401_ = exceptionraise ? 1'h0 : _399_;
  assign _402_ = exceptionraise ? 1'h0 : _400_;
  assign _403_ = _347_ ? 1'h0 : _401_;
  assign _404_ = _347_ ? 1'h0 : _402_;
  assign _014_ = p_state == 5'h11;
  assign _405_ = completeddawu ? 1'h1 : _345_;
  assign _406_ = completeddawu ? 1'h1 : _346_;
  assign _407_ = completeddawu ? 1'h1 : 1'h0;
  assign _408_ = p_state == 5'h12;
  function [0:0] \3782 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \3782  = b[0:0];
      2'b1?:
        \3782  = b[1:1];
      default:
        \3782  = a;
    endcase
  endfunction
  assign forced_rb_read = \3782 (1'hx, 2'h2, { _483_, _482_ });
  function [0:0] \3802 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \3802  = b[0:0];
      2'b1?:
        \3802  = b[1:1];
      default:
        \3802  = a;
    endcase
  endfunction
  assign csr_from_wb = \3802 (1'hx, 2'h2, { _449_, _481_ });
  function [0:0] \3817 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \3817  = b[0:0];
      3'b?1?:
        \3817  = b[1:1];
      3'b1??:
        \3817  = b[2:2];
      default:
        \3817  = a;
    endcase
  endfunction
  assign mipcclddisable = \3817 (1'hx, { 2'h1, _364_ }, { _480_, _479_, _481_ });
  function [0:0] \3823 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \3823  = b[0:0];
      2'b1?:
        \3823  = b[1:1];
      default:
        \3823  = a;
    endcase
  endfunction
  assign selccmip_csr = \3823 (1'hx, 2'h2, { _478_, _477_ });
  function [0:0] \3828 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \3828  = b[0:0];
      2'b1?:
        \3828  = b[1:1];
      default:
        \3828  = a;
    endcase
  endfunction
  assign selcause_csr = \3828 (1'hx, 2'h2, { _377_, _476_ });
  function [0:0] \3833 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \3833  = b[0:0];
      2'b1?:
        \3833  = b[1:1];
      default:
        \3833  = a;
    endcase
  endfunction
  assign selpc_csr = \3833 (1'hx, 2'h2, { _378_, _475_ });
  function [0:0] \3838 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \3838  = b[0:0];
      2'b1?:
        \3838  = b[1:1];
      default:
        \3838  = a;
    endcase
  endfunction
  assign seltval_csr = \3838 (1'hx, 2'h2, { _374_, _474_ });
  function [0:0] \3842 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \3842  = b[0:0];
      3'b?1?:
        \3842  = b[1:1];
      3'b1??:
        \3842  = b[2:2];
      default:
        \3842  = a;
    endcase
  endfunction
  assign selmedeleg_csr = \3842 (1'hx, { 1'h0, exceptionraise, _365_ }, { _473_, _372_, _481_ });
  function [0:0] \3846 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \3846  = b[0:0];
      3'b?1?:
        \3846  = b[1:1];
      3'b1??:
        \3846  = b[2:2];
      default:
        \3846  = a;
    endcase
  endfunction
  assign selmideleg_csr = \3846 (1'hx, { 1'h0, interruptraise, _364_ }, { _473_, _372_, _481_ });
  function [2:0] \3852 ;
    input [2:0] a;
    input [11:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \3852  = b[2:0];
      4'b??1?:
        \3852  = b[5:3];
      4'b?1??:
        \3852  = b[8:6];
      4'b1???:
        \3852  = b[11:9];
      default:
        \3852  = a;
    endcase
  endfunction
  assign ldvaluecsr = \3852 (3'hx, { 9'h108, _366_ }, { _390_, _374_, _471_, _481_ });
  function [0:0] \3858 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \3858  = b[0:0];
      3'b?1?:
        \3858  = b[1:1];
      3'b1??:
        \3858  = b[2:2];
      default:
        \3858  = a;
    endcase
  endfunction
  assign ldcntcsr = \3858 (1'hx, { 2'h2, _367_ }, { _472_, _471_, _481_ });
  function [0:0] \3866 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \3866  = b[0:0];
      2'b1?:
        \3866  = b[1:1];
      default:
        \3866  = a;
    endcase
  endfunction
  assign upcntcsr = \3866 (1'hx, 2'h2, { _470_, _469_ });
  function [0:0] \3871 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \3871  = b[0:0];
      2'b1?:
        \3871  = b[1:1];
      default:
        \3871  = a;
    endcase
  endfunction
  assign lddelegation = \3871 (1'hx, 2'h2, { _372_, _468_ });
  function [0:0] \3875 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \3875  = b[0:0];
      3'b?1?:
        \3875  = b[1:1];
      3'b1??:
        \3875  = b[2:2];
      default:
        \3875  = a;
    endcase
  endfunction
  assign ldmachine = \3875 (1'hx, { _393_, delegationmode[0], 1'h0 }, { _395_, _467_, _466_ });
  function [0:0] \3879 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \3879  = b[0:0];
      3'b?1?:
        \3879  = b[1:1];
      3'b1??:
        \3879  = b[2:2];
      default:
        \3879  = a;
    endcase
  endfunction
  assign lduser = \3879 (1'hx, { _394_, _373_, 1'h0 }, { _395_, _467_, _466_ });
  function [0:0] \3897 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \3897  = b[0:0];
      2'b1?:
        \3897  = b[1:1];
      default:
        \3897  = a;
    endcase
  endfunction
  assign selromaddress = \3897 (1'hx, 2'h2, { _465_, _464_ });
  function [0:0] \3902 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \3902  = b[0:0];
      2'b1?:
        \3902  = b[1:1];
      default:
        \3902  = a;
    endcase
  endfunction
  assign selmepc_csr = \3902 (1'hx, 2'h2, { _391_, _463_ });
  function [0:0] \3906 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \3906  = b[0:0];
      2'b1?:
        \3906  = b[1:1];
      default:
        \3906  = a;
    endcase
  endfunction
  assign selinterruptaddressdirect = \3906 (1'hx, { _383_, 1'h0 }, { _385_, _462_ });
  function [0:0] \3910 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \3910  = b[0:0];
      2'b1?:
        \3910  = b[1:1];
      default:
        \3910  = a;
    endcase
  endfunction
  assign selinterruptaddressvectored = \3910 (1'hx, { _384_, 1'h0 }, { _385_, _462_ });
  function [0:0] \3914 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \3914  = b[0:0];
      2'b1?:
        \3914  = b[1:1];
      default:
        \3914  = a;
    endcase
  endfunction
  assign machinestatusalterationprecsr = \3914 (1'hx, { delegationmode[0], 1'h0 }, { _461_, _460_ });
  function [0:0] \3918 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \3918  = b[0:0];
      2'b1?:
        \3918  = b[1:1];
      default:
        \3918  = a;
    endcase
  endfunction
  assign userstatusalterationprecsr = \3918 (1'hx, { _373_, 1'h0 }, { _461_, _460_ });
  function [0:0] \3922 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \3922  = b[0:0];
      2'b1?:
        \3922  = b[1:1];
      default:
        \3922  = a;
    endcase
  endfunction
  assign machinestatusalterationpostcsr = \3922 (1'hx, { wb_mreturetbar, 1'h0 }, { _459_, _458_ });
  function [0:0] \3926 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \3926  = b[0:0];
      2'b1?:
        \3926  = b[1:1];
      default:
        \3926  = a;
    endcase
  endfunction
  assign userstatusalterationpostcsr = \3926 (1'hx, { _389_, 1'h0 }, { _459_, _458_ });
  function [0:0] \3931 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \3931  = b[0:0];
      3'b?1?:
        \3931  = b[1:1];
      3'b1??:
        \3931  = b[2:2];
      default:
        \3931  = a;
    endcase
  endfunction
  assign zerocntcsr = \3931 (1'hx, { 2'h2, _364_ }, { _396_, _455_, _481_ });
  function [0:0] \3936 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \3936  = b[0:0];
      2'b1?:
        \3936  = b[1:1];
      default:
        \3936  = a;
    endcase
  endfunction
  assign gi2d_rst = \3936 (1'hx, { 1'h1, _345_ }, { _454_, _453_ });
  function [0:0] \3939 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \3939  = b[0:0];
      3'b?1?:
        \3939  = b[1:1];
      3'b1??:
        \3939  = b[2:2];
      default:
        \3939  = a;
    endcase
  endfunction
  assign d2e_rst = \3939 (1'hx, { _405_, 1'h1, _345_ }, { _408_, _396_, _452_ });
  function [0:0] \3942 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \3942  = b[0:0];
      3'b?1?:
        \3942  = b[1:1];
      3'b1??:
        \3942  = b[2:2];
      default:
        \3942  = a;
    endcase
  endfunction
  assign e2m_rst = \3942 (1'hx, { _406_, 1'h1, _346_ }, { _408_, _396_, _452_ });
  function [0:0] \3947 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \3947  = b[0:0];
      3'b?1?:
        \3947  = b[1:1];
      3'b1??:
        \3947  = b[2:2];
      default:
        \3947  = a;
    endcase
  endfunction
  assign m2wb_rst = \3947 (1'hx, { _407_, 2'h2 }, { _408_, _451_, _450_ });
  function [0:0] \3966 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \3966  = b[0:0];
      3'b?1?:
        \3966  = b[1:1];
      3'b1??:
        \3966  = b[2:2];
      default:
        \3966  = a;
    endcase
  endfunction
  assign gi2d_en = \3966 (1'hx, { _403_, 1'h0, _368_ }, { _485_, _449_, _011_ });
  function [0:0] \3984 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \3984  = b[0:0];
      3'b?1?:
        \3984  = b[1:1];
      3'b1??:
        \3984  = b[2:2];
      default:
        \3984  = a;
    endcase
  endfunction
  assign d2e_en_temp = \3984 (1'hx, { _404_, 1'h0, _369_ }, { _485_, _449_, _011_ });
  function [0:0] \4002 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \4002  = b[0:0];
      2'b1?:
        \4002  = b[1:1];
      default:
        \4002  = a;
    endcase
  endfunction
  assign e2m_en_temp = \4002 (1'hx, { 1'h0, _370_ }, { _449_, _481_ });
  function [0:0] \4020 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \4020  = b[0:0];
      2'b1?:
        \4020  = b[1:1];
      default:
        \4020  = a;
    endcase
  endfunction
  assign m2wb_en_temp = \4020 (1'hx, { 1'h0, _371_ }, { _449_, _481_ });
  function [0:0] \4031 ;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \4031  = b[0:0];
      4'b??1?:
        \4031  = b[1:1];
      4'b?1??:
        \4031  = b[2:2];
      4'b1???:
        \4031  = b[3:3];
      default:
        \4031  = a;
    endcase
  endfunction
  assign mirrorusercu_exint = \4031 (1'hx, { _389_, 1'h1, _373_, 1'h0 }, { _390_, _448_, _447_, _446_ });
  function [0:0] \4044 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \4044  = b[0:0];
      2'b1?:
        \4044  = b[1:1];
      default:
        \4044  = a;
    endcase
  endfunction
  assign writeregbank_exint = \4044 (1'hx, 2'h2, { _445_, _444_ });
  function [0:0] \4048 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \4048  = b[0:0];
      2'b1?:
        \4048  = b[1:1];
      default:
        \4048  = a;
    endcase
  endfunction
  assign loadmieuiefield_exint = \4048 (1'hx, { ldmieuiefield, 1'h0 }, { _457_, _456_ });
  always @(posedge clk)
    if (rst) _000_ <= 5'h00;
    else _000_ <= n_state;
  always @(posedge clk)
    if (rst) _001_ <= 1'h0;
    else _001_ <= csr_n_state;
  assign d2e_en = d2e_en_temp;
  assign dncntcsr = 1'h0;
  assign e2m_en = e2m_en_temp;
  assign func12 = ir[31:20];
  assign func3 = ir[14:12];
  assign func7 = ir[31:25];
  assign gi2d_en_temp = gi2d_en;
  assign m2wb_en = m2wb_en_temp;
  assign mretoruretbar = wb_mreturetbar;
  assign opcode = ir[6:0];
  assign selcsraddrfrominst = iscsrinstruction;
  assign setzeroorone = cmp_selaluop2;
  assign startdaru = selmem;
  assign startdawu = checkmisaligneddawu;
  assign writerb_inst = 1'h0;
endmodule

module aftab_core(clk, rst, memReady1, memReady2, memDataOut1, memDataOut2, machineExternalInterrupt, machineTimerInterrupt, machineSoftwareInterrupt, userExternalInterrupt, userTimerInterrupt, userSoftwareInterrupt, platformInterruptSignals, memDataIn2, memRead1, memRead2, memWrite, memAddr1, memAddr2, bytesPort1, bytesPort2
, interruptProcessing);
  wire _0000_;
  wire _0001_;
  wire _0002_;
  wire _0003_;
  wire _0004_;
  wire _0005_;
  wire _0006_;
  wire _0007_;
  wire _0008_;
  reg [4:0] _0009_;
  reg _0010_;
  wire _0011_;
  wire _0012_;
  wire _0013_;
  wire _0014_;
  wire _0015_;
  wire _0016_;
  wire _0017_;
  wire _0018_;
  wire _0019_;
  wire _0020_;
  wire _0021_;
  wire _0022_;
  wire _0023_;
  wire _0024_;
  wire _0025_;
  wire _0026_;
  wire _0027_;
  wire _0028_;
  wire _0029_;
  wire _0030_;
  wire _0031_;
  wire _0032_;
  wire _0033_;
  wire _0034_;
  wire _0035_;
  wire _0036_;
  wire _0037_;
  wire _0038_;
  wire _0039_;
  wire _0040_;
  wire _0041_;
  wire _0042_;
  wire _0043_;
  wire _0044_;
  wire _0045_;
  wire _0046_;
  wire _0047_;
  wire _0048_;
  wire _0049_;
  wire _0050_;
  wire _0051_;
  wire _0052_;
  wire _0053_;
  wire _0054_;
  wire _0055_;
  wire _0056_;
  wire _0057_;
  wire _0058_;
  wire _0059_;
  wire _0060_;
  wire [2:0] _0061_;
  wire _0062_;
  wire _0063_;
  wire _0064_;
  wire _0065_;
  wire _0066_;
  wire _0067_;
  wire _0068_;
  wire _0069_;
  wire _0070_;
  wire _0071_;
  wire _0072_;
  wire _0073_;
  wire _0074_;
  wire _0075_;
  wire _0076_;
  wire _0077_;
  wire [1:0] _0078_;
  wire [11:0] _0079_;
  wire [2:0] _0080_;
  wire _0081_;
  wire _0082_;
  wire _0083_;
  wire _0084_;
  wire _0085_;
  wire [1:0] _0086_;
  wire [11:0] _0087_;
  wire [1:0] _0088_;
  wire [2:0] _0089_;
  wire _0090_;
  wire _0091_;
  wire _0092_;
  wire _0093_;
  wire _0094_;
  wire _0095_;
  wire _0096_;
  wire _0097_;
  wire [1:0] _0098_;
  wire [11:0] _0099_;
  wire [1:0] _0100_;
  wire [2:0] _0101_;
  wire _0102_;
  wire _0103_;
  wire _0104_;
  wire _0105_;
  wire _0106_;
  wire _0107_;
  wire _0108_;
  wire _0109_;
  wire _0110_;
  wire [1:0] _0111_;
  wire _0112_;
  wire [11:0] _0113_;
  wire [1:0] _0114_;
  wire [2:0] _0115_;
  wire _0116_;
  wire _0117_;
  wire _0118_;
  wire _0119_;
  wire _0120_;
  wire _0121_;
  wire _0122_;
  wire _0123_;
  wire _0124_;
  wire _0125_;
  wire [1:0] _0126_;
  wire _0127_;
  wire [11:0] _0128_;
  wire [1:0] _0129_;
  wire _0130_;
  wire _0131_;
  wire _0132_;
  wire _0133_;
  wire _0134_;
  wire _0135_;
  wire _0136_;
  wire [2:0] _0137_;
  wire _0138_;
  wire _0139_;
  wire _0140_;
  wire _0141_;
  wire _0142_;
  wire _0143_;
  wire _0144_;
  wire _0145_;
  wire _0146_;
  wire _0147_;
  wire _0148_;
  wire _0149_;
  wire _0150_;
  wire _0151_;
  wire _0152_;
  wire _0153_;
  wire _0154_;
  wire _0155_;
  wire [2:0] _0156_;
  wire _0157_;
  wire _0158_;
  wire _0159_;
  wire _0160_;
  wire [2:0] _0161_;
  wire _0162_;
  wire _0163_;
  wire _0164_;
  wire _0165_;
  wire _0166_;
  wire _0167_;
  wire [2:0] _0168_;
  wire _0169_;
  wire _0170_;
  wire _0171_;
  wire _0172_;
  wire _0173_;
  wire _0174_;
  wire _0175_;
  wire [11:0] _0176_;
  wire _0177_;
  wire _0178_;
  wire [2:0] _0179_;
  wire _0180_;
  wire _0181_;
  wire _0182_;
  wire _0183_;
  wire _0184_;
  wire _0185_;
  wire _0186_;
  wire _0187_;
  wire _0188_;
  wire _0189_;
  wire [11:0] _0190_;
  wire _0191_;
  wire _0192_;
  wire [2:0] _0193_;
  wire _0194_;
  wire _0195_;
  wire _0196_;
  wire _0197_;
  wire _0198_;
  wire _0199_;
  wire _0200_;
  wire _0201_;
  wire _0202_;
  wire _0203_;
  wire _0204_;
  wire [11:0] _0205_;
  wire _0206_;
  wire _0207_;
  wire [2:0] _0208_;
  wire _0209_;
  wire _0210_;
  wire _0211_;
  wire _0212_;
  wire _0213_;
  wire _0214_;
  wire _0215_;
  wire _0216_;
  wire _0217_;
  wire _0218_;
  wire _0219_;
  wire _0220_;
  wire _0221_;
  wire [11:0] _0222_;
  wire _0223_;
  wire _0224_;
  wire [2:0] _0225_;
  wire _0226_;
  wire _0227_;
  wire _0228_;
  wire _0229_;
  wire _0230_;
  wire _0231_;
  wire _0232_;
  wire _0233_;
  wire _0234_;
  wire _0235_;
  wire _0236_;
  wire _0237_;
  wire _0238_;
  wire _0239_;
  wire _0240_;
  wire _0241_;
  wire _0242_;
  wire [1:0] _0243_;
  wire _0244_;
  wire _0245_;
  wire _0246_;
  wire [11:0] _0247_;
  wire [1:0] _0248_;
  wire _0249_;
  wire _0250_;
  wire [2:0] _0251_;
  wire _0252_;
  wire _0253_;
  wire _0254_;
  wire _0255_;
  wire _0256_;
  wire _0257_;
  wire _0258_;
  wire _0259_;
  wire _0260_;
  wire _0261_;
  wire _0262_;
  wire _0263_;
  wire _0264_;
  wire _0265_;
  wire _0266_;
  wire _0267_;
  wire _0268_;
  wire _0269_;
  wire [1:0] _0270_;
  wire _0271_;
  wire _0272_;
  wire _0273_;
  wire [11:0] _0274_;
  wire [1:0] _0275_;
  wire _0276_;
  wire _0277_;
  wire _0278_;
  wire _0279_;
  wire _0280_;
  wire _0281_;
  wire _0282_;
  wire _0283_;
  wire _0284_;
  wire [2:0] _0285_;
  wire _0286_;
  wire _0287_;
  wire _0288_;
  wire _0289_;
  wire _0290_;
  wire _0291_;
  wire _0292_;
  wire _0293_;
  wire _0294_;
  wire _0295_;
  wire _0296_;
  wire _0297_;
  wire _0298_;
  wire _0299_;
  wire _0300_;
  wire _0301_;
  wire _0302_;
  wire _0303_;
  wire [1:0] _0304_;
  wire _0305_;
  wire _0306_;
  wire _0307_;
  wire [11:0] _0308_;
  wire [1:0] _0309_;
  wire _0310_;
  wire _0311_;
  wire _0312_;
  wire _0313_;
  wire _0314_;
  wire _0315_;
  wire _0316_;
  wire _0317_;
  wire [1:0] _0318_;
  wire _0319_;
  wire _0320_;
  wire [2:0] _0321_;
  wire _0322_;
  wire _0323_;
  wire _0324_;
  wire _0325_;
  wire _0326_;
  wire _0327_;
  wire _0328_;
  wire _0329_;
  wire _0330_;
  wire _0331_;
  wire _0332_;
  wire _0333_;
  wire _0334_;
  wire _0335_;
  wire _0336_;
  wire _0337_;
  wire _0338_;
  wire _0339_;
  wire _0340_;
  wire _0341_;
  wire _0342_;
  wire _0343_;
  wire _0344_;
  wire _0345_;
  wire _0346_;
  wire _0347_;
  wire _0348_;
  wire _0349_;
  wire _0350_;
  wire _0351_;
  wire _0352_;
  wire _0353_;
  wire _0354_;
  wire _0355_;
  wire _0356_;
  wire _0357_;
  wire _0358_;
  wire _0359_;
  wire _0360_;
  wire _0361_;
  wire _0362_;
  wire _0363_;
  wire _0364_;
  wire _0365_;
  wire _0366_;
  wire _0367_;
  wire [2:0] _0368_;
  wire _0369_;
  wire _0370_;
  wire _0371_;
  wire _0372_;
  wire _0373_;
  wire _0374_;
  wire [2:0] _0375_;
  wire _0376_;
  wire _0377_;
  wire _0378_;
  wire _0379_;
  wire _0380_;
  wire _0381_;
  wire _0382_;
  wire _0383_;
  wire _0384_;
  wire _0385_;
  wire _0386_;
  wire _0387_;
  wire _0388_;
  wire _0389_;
  wire _0390_;
  wire _0391_;
  wire _0392_;
  wire _0393_;
  wire _0394_;
  wire _0395_;
  wire _0396_;
  wire _0397_;
  wire _0398_;
  wire _0399_;
  wire _0400_;
  wire _0401_;
  wire _0402_;
  wire _0403_;
  wire _0404_;
  wire _0405_;
  wire _0406_;
  wire _0407_;
  wire _0408_;
  wire _0409_;
  wire _0410_;
  wire _0411_;
  wire _0412_;
  wire _0413_;
  wire _0414_;
  wire _0415_;
  wire _0416_;
  wire _0417_;
  wire _0418_;
  wire [4:0] _0419_;
  wire [4:0] _0420_;
  wire [4:0] _0421_;
  wire [4:0] _0422_;
  wire [4:0] _0423_;
  wire [4:0] _0424_;
  wire _0425_;
  wire _0426_;
  wire _0427_;
  wire _0428_;
  wire [4:0] _0429_;
  wire _0430_;
  wire [4:0] _0431_;
  wire [4:0] _0432_;
  wire [4:0] _0433_;
  wire [4:0] _0434_;
  wire [4:0] _0435_;
  wire _0436_;
  wire _0437_;
  wire _0438_;
  wire _0439_;
  wire _0440_;
  wire _0441_;
  wire _0442_;
  wire _0443_;
  wire _0444_;
  wire _0445_;
  wire _0446_;
  wire _0447_;
  wire _0448_;
  wire _0449_;
  wire _0450_;
  wire _0451_;
  wire _0452_;
  wire _0453_;
  wire _0454_;
  wire _0455_;
  wire _0456_;
  wire _0457_;
  wire _0458_;
  wire _0459_;
  wire _0460_;
  wire _0461_;
  wire _0462_;
  wire _0463_;
  wire _0464_;
  wire _0465_;
  wire _0466_;
  wire _0467_;
  wire _0468_;
  wire _0469_;
  wire _0470_;
  wire _0471_;
  wire _0472_;
  wire _0473_;
  wire _0474_;
  wire _0475_;
  wire _0476_;
  wire _0477_;
  wire _0478_;
  wire _0479_;
  wire _0480_;
  wire _0481_;
  wire _0482_;
  wire _0483_;
  wire _0484_;
  wire _0485_;
  wire _0486_;
  wire _0487_;
  wire _0488_;
  wire _0489_;
  wire _0490_;
  wire _0491_;
  wire _0492_;
  wire _0493_;
  reg _0494_;
  reg _0495_;
  reg _0496_;
  reg [1:0] _0497_;
  (* unused_bits = "2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 49 50 51 52 57 58 60 61 62 63" *)
  wire [63:0] _0498_;
  reg [2:0] _0499_;
  reg _0500_;
  reg [63:0] _0501_;
  reg _0502_;
  reg _0503_;
  reg [31:0] _0504_;
  reg [31:0] _0505_;
  reg [31:0] _0506_;
  reg _0507_;
  reg _0508_;
  wire [63:0] _0509_;
  reg _0510_;
  reg _0511_;
  reg _0512_;
  reg _0513_;
  reg _0514_;
  reg [31:0] _0515_;
  reg [31:0] _0516_;
  reg [31:0] _0517_;
  reg [31:0] _0518_;
  reg _0519_;
  reg _0520_;
  reg [2:0] _0521_;
  reg [31:0] _0522_;
  reg [31:0] _0523_;
  reg [2:0] _0524_;
  reg [31:0] _0525_;
  reg _0526_;
  reg _0527_;
  reg _0528_;
  reg _0529_;
  reg _0530_;
  reg [31:0] _0531_;
  reg [31:0] _0532_;
  reg [31:0] _0533_;
  reg _0534_;
  reg [31:0] _0535_;
  reg [31:0] _0536_;
  reg [31:0] _0537_;
  reg _0538_;
  reg [31:0] _0539_;
  reg _0540_;
  reg _0541_;
  reg _0542_;
  reg [31:0] _0543_;
  reg [31:0] _0544_;
  reg [31:0] _0545_;
  reg [31:0] _0546_;
  reg [31:0] _0547_;
  reg _0548_;
  reg _0549_;
  reg [31:0] _0550_;
  reg _0551_;
  reg _0552_;
  reg [31:0] _0553_;
  reg _0554_;
  reg _0555_;
  reg [31:0] _0556_;
  reg [31:0] _0557_;
  wire _0558_;
  wire _0559_;
  wire _0560_;
  wire [31:0] _0561_;
  wire [31:0] _0562_;
  wire [31:0] _0563_;
  wire _0564_;
  wire _0565_;
  wire _0566_;
  wire _0567_;
  wire _0568_;
  wire _0569_;
  wire _0570_;
  wire _0571_;
  wire _0572_;
  wire _0573_;
  wire _0574_;
  wire _0575_;
  wire _0576_;
  wire _0577_;
  wire _0578_;
  wire _0579_;
  wire _0580_;
  wire [4:0] _0581_;
  wire _0582_;
  wire [4:0] _0583_;
  wire [11:0] _0584_;
  wire _0585_;
  wire _0586_;
  wire _0587_;
  wire [4:0] _0588_;
  wire _0589_;
  wire _0590_;
  wire _0591_;
  wire [4:0] _0592_;
  wire _0593_;
  wire [4:0] _0594_;
  wire _0595_;
  wire [4:0] _0596_;
  wire _0597_;
  wire [4:0] _0598_;
  wire [4:0] _0599_;
  wire _0600_;
  wire _0601_;
  wire [4:0] _0602_;
  wire [4:0] _0603_;
  wire _0604_;
  wire _0605_;
  wire [4:0] _0606_;
  wire [4:0] _0607_;
  wire [11:0] _0608_;
  wire _0609_;
  wire _0610_;
  wire _0611_;
  wire _0612_;
  wire _0613_;
  wire _0614_;
  wire _0615_;
  wire _0616_;
  wire _0617_;
  wire _0618_;
  wire _0619_;
  wire _0620_;
  wire _0621_;
  wire _0622_;
  wire [11:0] _0623_;
  wire _0624_;
  wire _0625_;
  wire _0626_;
  wire _0627_;
  wire _0628_;
  wire _0629_;
  wire [4:0] _0630_;
  wire _0631_;
  wire [4:0] _0632_;
  wire _0633_;
  wire [4:0] _0634_;
  wire _0635_;
  wire [4:0] _0636_;
  wire _0637_;
  wire [4:0] _0638_;
  wire [11:0] _0639_;
  wire _0640_;
  wire _0641_;
  wire _0642_;
  wire _0643_;
  wire _0644_;
  wire _0645_;
  wire _0646_;
  wire _0647_;
  wire _0648_;
  wire _0649_;
  wire _0650_;
  wire _0651_;
  wire _0652_;
  wire _0653_;
  wire _0654_;
  wire _0655_;
  wire _0656_;
  wire _0657_;
  wire _0658_;
  wire _0659_;
  wire _0660_;
  wire _0661_;
  wire _0662_;
  wire _0663_;
  wire _0664_;
  wire _0665_;
  wire _0666_;
  wire _0667_;
  wire _0668_;
  wire _0669_;
  wire _0670_;
  wire _0671_;
  wire _0672_;
  wire _0673_;
  wire _0674_;
  wire _0675_;
  wire _0676_;
  wire _0677_;
  wire _0678_;
  wire _0679_;
  wire [31:0] _0680_;
  wire [31:0] _0681_;
  wire [31:0] _0682_;
  wire [31:0] _0683_;
  wire [31:0] _0684_;
  wire _0685_;
  wire _0686_;
  wire _0687_;
  wire _0688_;
  wire _0689_;
  wire _0690_;
  wire _0691_;
  wire _0692_;
  wire _0693_;
  wire _0694_;
  wire _0695_;
  wire _0696_;
  wire _0697_;
  wire _0698_;
  wire _0699_;
  wire _0700_;
  wire _0701_;
  wire _0702_;
  wire _0703_;
  wire _0704_;
  wire _0705_;
  wire _0706_;
  wire _0707_;
  wire _0708_;
  wire _0709_;
  wire _0710_;
  wire _0711_;
  wire _0712_;
  wire _0713_;
  wire _0714_;
  wire _0715_;
  wire _0716_;
  wire _0717_;
  wire _0718_;
  wire _0719_;
  wire _0720_;
  wire _0721_;
  wire _0722_;
  wire _0723_;
  wire _0724_;
  wire _0725_;
  wire _0726_;
  wire _0727_;
  wire _0728_;
  wire _0729_;
  wire _0730_;
  wire _0731_;
  wire _0732_;
  wire _0733_;
  wire [31:0] _0734_;
  wire [31:0] _0735_;
  wire [31:0] _0736_;
  wire [11:0] _0737_;
  wire [11:0] _0738_;
  wire [11:0] _0739_;
  wire _0740_;
  wire _0741_;
  wire _0742_;
  wire _0743_;
  wire _0744_;
  wire _0745_;
  wire _0746_;
  wire _0747_;
  wire _0748_;
  wire _0749_;
  wire _0750_;
  wire _0751_;
  wire _0752_;
  wire _0753_;
  wire [11:0] _0754_;
  wire _0755_;
  wire _0756_;
  wire _0757_;
  wire _0758_;
  wire _0759_;
  wire _0760_;
  wire [4:0] _0761_;
  wire _0762_;
  wire [4:0] _0763_;
  wire _0764_;
  wire [4:0] _0765_;
  wire _0766_;
  wire [4:0] _0767_;
  wire _0768_;
  wire [4:0] _0769_;
  wire _0770_;
  wire [11:0] _0771_;
  wire _0772_;
  wire _0773_;
  wire _0774_;
  wire _0775_;
  wire _0776_;
  wire _0777_;
  wire _0778_;
  wire _0779_;
  wire _0780_;
  wire _0781_;
  wire _0782_;
  wire _0783_;
  wire _0784_;
  wire _0785_;
  wire _0786_;
  wire _0787_;
  wire _0788_;
  wire _0789_;
  wire _0790_;
  wire _0791_;
  wire _0792_;
  wire _0793_;
  wire _0794_;
  wire _0795_;
  wire _0796_;
  wire _0797_;
  wire _0798_;
  wire _0799_;
  wire _0800_;
  wire _0801_;
  wire _0802_;
  wire _0803_;
  wire _0804_;
  wire _0805_;
  wire [11:0] _0806_;
  wire _0807_;
  wire _0808_;
  wire _0809_;
  wire _0810_;
  wire _0811_;
  wire _0812_;
  wire [4:0] _0813_;
  wire _0814_;
  wire [4:0] _0815_;
  wire _0816_;
  wire [4:0] _0817_;
  wire _0818_;
  wire [4:0] _0819_;
  wire _0820_;
  wire [4:0] _0821_;
  wire _0822_;
  wire [11:0] _0823_;
  wire _0824_;
  wire _0825_;
  wire _0826_;
  wire _0827_;
  wire _0828_;
  wire _0829_;
  wire _0830_;
  wire _0831_;
  wire _0832_;
  wire _0833_;
  wire _0834_;
  wire _0835_;
  wire _0836_;
  wire _0837_;
  wire _0838_;
  wire _0839_;
  wire _0840_;
  wire _0841_;
  wire _0842_;
  wire _0843_;
  wire _0844_;
  wire _0845_;
  wire _0846_;
  wire _0847_;
  wire [31:0] _0848_;
  wire _0849_;
  wire [31:0] _0850_;
  wire [31:0] _0851_;
  wire _0852_;
  wire _0853_;
  wire [31:0] _0854_;
  wire [31:0] _0855_;
  wire [31:0] _0856_;
  wire [31:0] _0857_;
  wire [31:0] _0858_;
  wire [31:0] _0859_;
  wire [2:0] _0860_;
  wire [31:0] _0861_;
  wire [31:0] _0862_;
  wire _0863_;
  wire _0864_;
  wire _0865_;
  wire _0866_;
  (* unused_bits = "46" *)
  wire [63:0] _0867_;
  wire _0868_;
  wire [31:0] _0869_;
  wire _0870_;
  wire _0871_;
  wire _0872_;
  wire [31:0] _0873_;
  wire _0874_;
  wire [31:0] _0875_;
  wire [31:0] _0876_;
  wire [2:0] _0877_;
  wire _0878_;
  wire _0879_;
  wire _0880_;
  wire [31:0] _0881_;
  wire [31:0] _0882_;
  wire [31:0] _0883_;
  wire _0884_;
  wire _0885_;
  wire [63:0] _0886_;
  wire _0887_;
  wire _0888_;
  wire _0889_;
  wire _0890_;
  wire [31:0] _0891_;
  wire [31:0] _0892_;
  wire [31:0] _0893_;
  wire [31:0] _0894_;
  wire _0895_;
  wire [31:0] _0896_;
  wire [31:0] _0897_;
  wire _0898_;
  wire _0899_;
  wire _0900_;
  wire _0901_;
  wire _0902_;
  wire [31:0] _0903_;
  wire [2:0] _0904_;
  (* unused_bits = "2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 49 50 51 52 57 58 60 61 62 63" *)
  wire [63:0] _0905_;
  wire _0906_;
  wire _0907_;
  wire [1:0] _0908_;
  wire _0909_;
  wire _0910_;
  wire _0911_;
  wire _0912_;
  wire [1:0] _0913_;
  wire _0914_;
  wire _0915_;
  wire _0916_;
  wire [1:0] _0917_;
  wire _0918_;
  wire [1:0] _0919_;
  wire [1:0] _0920_;
  wire _0921_;
  wire [1:0] _0922_;
  wire _0923_;
  wire _0924_;
  wire _0925_;
  wire _0926_;
  wire _0927_;
  wire _0928_;
  wire _0929_;
  wire _0930_;
  wire [31:0] _0931_;
  wire _0932_;
  wire _0933_;
  wire _0934_;
  wire _0935_;
  wire _0936_;
  wire _0937_;
  wire _0938_;
  wire _0939_;
  wire _0940_;
  wire _0941_;
  wire _0942_;
  wire _0943_;
  wire [32:0] _0944_;
  wire _0945_;
  wire [32:0] _0946_;
  wire [31:0] _0947_;
  wire [31:0] _0948_;
  wire _0949_;
  wire _0950_;
  wire _0951_;
  wire [31:0] _0952_;
  wire [31:0] _0953_;
  wire [31:0] _0954_;
  wire [31:0] _0955_;
  wire [31:0] _0956_;
  wire [31:0] _0957_;
  wire [31:0] _0958_;
  wire [31:0] _0959_;
  reg [1:0] _0960_;
  wire [1:0] _0961_;
  wire _0962_;
  wire [1:0] _0963_;
  wire _0964_;
  wire _0965_;
  wire _0966_;
  wire _0967_;
  wire [5:0] _0968_;
  wire _0969_;
  wire _0970_;
  wire [5:0] _0971_;
  wire [5:0] _0972_;
  (* unused_bits = "0 5" *)
  wire [5:0] _0973_;
  wire _0974_;
  wire [31:0] _0975_;
  reg [32:0] _0976_;
  (* unused_bits = "32" *)
  wire [32:0] _0977_;
  reg _0978_;
  reg [31:0] _0979_;
  wire [31:0] _0980_;
  wire _0981_;
  wire [31:0] _0982_;
  wire _0983_;
  reg [32:0] _0984_;
  wire [32:0] _0985_;
  wire [32:0] _0986_;
  reg [1:0] _0987_;
  wire [1:0] _0988_;
  wire _0989_;
  wire _0990_;
  wire [1:0] _0991_;
  wire _0992_;
  wire _0993_;
  wire _0994_;
  wire _0995_;
  wire _0996_;
  wire _0997_;
  wire _0998_;
  reg [5:0] _0999_;
  wire _1000_;
  wire _1001_;
  wire [5:0] _1002_;
  wire [5:0] _1003_;
  (* unused_bits = "5" *)
  wire [5:0] _1004_;
  wire _1005_;
  wire [32:0] _1006_;
  wire [33:0] _1007_;
  reg [32:0] _1008_;
  wire [32:0] _1009_;
  reg [33:0] _1010_;
  wire [33:0] _1011_;
  (* unused_bits = "0" *)
  wire [33:0] _1012_;
  reg [32:0] _1013_;
  wire [32:0] _1014_;
  wire [32:0] _1015_;
  wire _1016_;
  wire [31:0] _1017_;
  wire _1018_;
  wire [31:0] _1019_;
  wire _1020_;
  wire [31:0] _1021_;
  wire [31:0] _1022_;
  wire _1023_;
  wire _1024_;
  wire _1025_;
  wire _1026_;
  wire _1027_;
  wire _1028_;
  wire _1029_;
  wire _1030_;
  wire _1031_;
  wire _1032_;
  wire _1033_;
  wire _1034_;
  wire _1035_;
  wire _1036_;
  wire _1037_;
  wire _1038_;
  wire _1039_;
  wire _1040_;
  wire _1041_;
  wire _1042_;
  wire _1043_;
  wire _1044_;
  wire _1045_;
  wire _1046_;
  wire _1047_;
  wire _1048_;
  wire _1049_;
  wire _1050_;
  wire _1051_;
  wire _1052_;
  wire _1053_;
  wire _1054_;
  wire _1055_;
  wire _1056_;
  wire _1057_;
  wire _1058_;
  wire _1059_;
  wire _1060_;
  wire _1061_;
  wire _1062_;
  wire [2:0] _1063_;
  wire _1064_;
  wire [2:0] _1065_;
  wire [2:0] _1066_;
  wire _1067_;
  wire [2:0] _1068_;
  wire _1069_;
  wire [2:0] _1070_;
  wire _1071_;
  wire [2:0] _1072_;
  wire [2:0] _1073_;
  reg [2:0] _1074_;
  wire _1075_;
  wire _1076_;
  wire [2:0] _1077_;
  wire [2:0] _1078_;
  wire [2:0] _1079_;
  wire _1080_;
  wire [31:0] _1081_;
  wire [31:0] _1082_;
  wire [31:0] _1083_;
  wire [31:0] _1084_;
  wire [31:0] _1085_;
  wire [31:0] _1086_;
  wire [31:0] _1087_;
  wire [31:0] _1088_;
  wire [31:0] _1089_;
  wire [31:0] _1090_;
  wire [31:0] _1091_;
  wire _1092_;
  wire _1093_;
  wire _1094_;
  wire [31:0] _1095_;
  reg [1:0] _1096_;
  wire [1:0] _1097_;
  wire _1098_;
  wire _1099_;
  wire _1100_;
  wire [1:0] _1101_;
  wire [1:0] _1102_;
  wire _1103_;
  wire _1104_;
  wire _1105_;
  wire _1106_;
  wire _1107_;
  wire _1108_;
  wire _1109_;
  wire _1110_;
  reg [31:0] _1111_;
  wire [31:0] _1112_;
  reg _1113_;
  wire _1114_;
  wire _1115_;
  wire _1116_;
  wire _1117_;
  wire _1118_;
  wire [3:0] _1119_;
  wire _1120_;
  wire _1121_;
  wire _1122_;
  wire _1123_;
  reg [1:0] _1124_;
  wire [1:0] _1125_;
  reg [15:0] _1126_;
  wire [15:0] _1127_;
  reg [15:0] _1128_;
  wire [15:0] _1129_;
  reg [1:0] _1130_;
  wire [1:0] _1131_;
  wire _1132_;
  wire _1133_;
  wire [1:0] _1134_;
  wire _1135_;
  wire _1136_;
  wire _1137_;
  wire _1138_;
  wire _1139_;
  reg [31:0] _1140_;
  wire [31:0] _1141_;
  reg _1142_;
  wire _1143_;
  wire _1144_;
  wire _1145_;
  wire _1146_;
  wire _1147_;
  wire [3:0] _1148_;
  reg [1:0] _1149_;
  wire [1:0] _1150_;
  reg [15:0] _1151_;
  wire [15:0] _1152_;
  reg [15:0] _1153_;
  wire [15:0] _1154_;
  reg _1155_;
  wire _1156_;
  wire _1157_;
  wire _1158_;
  wire _1159_;
  wire _1160_;
  wire _1161_;
  wire _1162_;
  wire _1163_;
  wire _1164_;
  reg [31:0] _1165_;
  wire [31:0] _1166_;
  reg _1167_;
  wire _1168_;
  wire _1169_;
  wire _1170_;
  wire _1171_;
  reg [1:0] _1172_;
  wire [1:0] _1173_;
  reg [15:0] _1174_;
  wire [15:0] _1175_;
  reg [15:0] _1176_;
  wire [15:0] _1177_;
  wire _1178_;
  wire [3:0] _1179_;
  wire _1180_;
  wire _1181_;
  wire _1182_;
  wire [7:0] _1183_;
  wire [10:0] _1184_;
  (* unused_bits = "1" *)
  wire [1:0] _1185_;
  reg [1:0] _1186_;
  wire [1:0] _1187_;
  wire _1188_;
  wire _1189_;
  wire _1190_;
  wire _1191_;
  wire _1192_;
  wire _1193_;
  wire _1194_;
  wire _1195_;
  wire _1196_;
  wire _1197_;
  wire _1198_;
  wire _1199_;
  wire _1200_;
  wire _1201_;
  wire _1202_;
  wire _1203_;
  wire _1204_;
  wire _1205_;
  wire _1206_;
  wire _1207_;
  wire _1208_;
  wire _1209_;
  wire _1210_;
  wire _1211_;
  wire _1212_;
  wire _1213_;
  wire _1214_;
  wire _1215_;
  wire _1216_;
  wire _1217_;
  wire _1218_;
  wire _1219_;
  wire _1220_;
  wire _1221_;
  wire [31:0] _1222_;
  wire [31:0] _1223_;
  wire [31:0] _1224_;
  wire [31:0] _1225_;
  wire [31:0] _1226_;
  wire [31:0] _1227_;
  wire [31:0] _1228_;
  wire [31:0] _1229_;
  wire [31:0] _1230_;
  wire [31:0] _1231_;
  wire [31:0] _1232_;
  wire [31:0] _1233_;
  wire [31:0] _1234_;
  wire [31:0] _1235_;
  wire [31:0] _1236_;
  wire [31:0] _1237_;
  wire [31:0] _1238_;
  wire [31:0] _1239_;
  wire [31:0] _1240_;
  wire [31:0] _1241_;
  wire [31:0] _1242_;
  wire [31:0] _1243_;
  wire [31:0] _1244_;
  wire [31:0] _1245_;
  wire [31:0] _1246_;
  wire [31:0] _1247_;
  wire _1248_;
  wire _1249_;
  wire _1250_;
  wire _1251_;
  wire _1252_;
  wire _1253_;
  wire _1254_;
  wire _1255_;
  wire [1:0] _1256_;
  wire [1:0] _1257_;
  wire [1:0] _1258_;
  wire [1:0] _1259_;
  wire _1260_;
  wire _1261_;
  wire _1262_;
  wire _1263_;
  wire _1264_;
  wire _1265_;
  wire [1:0] _1266_;
  wire [1:0] _1267_;
  wire [1:0] _1268_;
  wire [1:0] _1269_;
  (* unused_bits = "1" *)
  wire [1:0] _1270_;
  wire _1271_;
  wire [31:0] _1272_;
  (* unused_bits = "1 2 5 6 9 10 12 13 14 15" *)
  wire [31:0] _1273_;
  wire [31:0] _1274_;
  wire _1275_;
  wire [31:0] _1276_;
  wire _1277_;
  wire [31:0] _1278_;
  wire _1279_;
  wire [31:0] _1280_;
  wire [31:0] _1281_;
  wire [31:0] _1282_;
  wire [31:0] _1283_;
  reg [31:0] _1284_;
  wire _1285_;
  wire _1286_;
  wire _1287_;
  wire _1288_;
  wire _1289_;
  wire _1290_;
  reg [1023:0] _1291_;
  wire [31:0] _1292_;
  wire [31:0] _1293_;
  wire [31:0] _1294_;
  wire [31:0] _1295_;
  wire [31:0] _1296_;
  wire [31:0] _1297_;
  wire [31:0] _1298_;
  wire [31:0] _1299_;
  wire [31:0] _1300_;
  wire [31:0] _1301_;
  wire [31:0] _1302_;
  wire [31:0] _1303_;
  wire [31:0] _1304_;
  wire [31:0] _1305_;
  wire [31:0] _1306_;
  wire [31:0] _1307_;
  wire [31:0] _1308_;
  wire [31:0] _1309_;
  wire [31:0] _1310_;
  wire [31:0] _1311_;
  wire [4:0] _1312_;
  wire [4:0] _1313_;
  wire [1023:0] _1314_;
  wire [31:0] _1315_;
  wire [31:0] _1316_;
  wire [31:0] _1317_;
  wire [31:0] _1318_;
  wire [31:0] _1319_;
  wire [31:0] _1320_;
  wire [31:0] _1321_;
  wire [31:0] _1322_;
  wire [31:0] _1323_;
  wire [31:0] _1324_;
  wire _1325_;
  wire _1326_;
  wire _1327_;
  wire _1328_;
  wire _1329_;
  wire _1330_;
  wire _1331_;
  wire _1332_;
  wire _1333_;
  wire _1334_;
  wire _1335_;
  wire _1336_;
  wire _1337_;
  wire _1338_;
  wire _1339_;
  wire _1340_;
  wire _1341_;
  wire _1342_;
  wire _1343_;
  wire _1344_;
  wire _1345_;
  wire _1346_;
  wire _1347_;
  wire _1348_;
  wire _1349_;
  wire _1350_;
  wire _1351_;
  wire _1352_;
  wire _1353_;
  wire _1354_;
  wire _1355_;
  wire _1356_;
  wire _1357_;
  wire _1358_;
  wire _1359_;
  wire _1360_;
  wire _1361_;
  wire _1362_;
  wire _1363_;
  wire _1364_;
  wire _1365_;
  wire _1366_;
  wire _1367_;
  wire _1368_;
  wire _1369_;
  wire _1370_;
  wire _1371_;
  wire _1372_;
  wire _1373_;
  wire _1374_;
  wire _1375_;
  wire _1376_;
  wire _1377_;
  wire _1378_;
  wire _1379_;
  wire _1380_;
  wire _1381_;
  wire _1382_;
  wire _1383_;
  wire _1384_;
  wire _1385_;
  wire _1386_;
  wire _1387_;
  wire _1388_;
  wire _1389_;
  wire [31:0] _1390_;
  wire [31:0] _1391_;
  wire [31:0] _1392_;
  wire [31:0] _1393_;
  wire [31:0] _1394_;
  wire [31:0] _1395_;
  wire [31:0] _1396_;
  wire [31:0] _1397_;
  wire [31:0] _1398_;
  wire [31:0] _1399_;
  wire [31:0] _1400_;
  wire [31:0] _1401_;
  wire [31:0] _1402_;
  wire [31:0] _1403_;
  wire [31:0] _1404_;
  wire [31:0] _1405_;
  wire [31:0] _1406_;
  wire [31:0] _1407_;
  wire [31:0] _1408_;
  wire [31:0] _1409_;
  wire [31:0] _1410_;
  wire [31:0] _1411_;
  wire [31:0] _1412_;
  wire [31:0] _1413_;
  wire [31:0] _1414_;
  wire [31:0] _1415_;
  wire [31:0] _1416_;
  wire [31:0] _1417_;
  wire [31:0] _1418_;
  wire [31:0] _1419_;
  wire [31:0] _1420_;
  wire [31:0] _1421_;
  (* unused_bits = "1 2 5 6 9 10 12 13 14 15" *)
  wire [31:0] _1422_;
  (* unused_bits = "1 2 5 6 9 10 12 13 14 15" *)
  wire [31:0] _1423_;
  reg _1424_;
  wire _1425_;
  reg _1426_;
  wire _1427_;
  reg [1023:0] _1428_;
  wire [31:0] _1429_;
  wire [31:0] _1430_;
  wire [31:0] _1431_;
  wire [31:0] _1432_;
  wire [31:0] _1433_;
  wire [31:0] _1434_;
  wire [31:0] _1435_;
  wire [31:0] _1436_;
  wire [31:0] _1437_;
  wire [31:0] _1438_;
  wire [31:0] _1439_;
  wire [31:0] _1440_;
  wire [31:0] _1441_;
  wire [31:0] _1442_;
  wire [31:0] _1443_;
  wire [31:0] _1444_;
  wire [31:0] _1445_;
  wire [31:0] _1446_;
  wire [31:0] _1447_;
  wire [31:0] _1448_;
  wire [31:0] _1449_;
  wire [31:0] _1450_;
  wire [31:0] _1451_;
  wire [31:0] _1452_;
  wire [31:0] _1453_;
  wire [31:0] _1454_;
  wire [31:0] _1455_;
  wire [31:0] _1456_;
  wire [31:0] _1457_;
  wire [31:0] _1458_;
  wire [31:0] _1459_;
  wire [31:0] _1460_;
  wire [31:0] _1461_;
  wire [31:0] _1462_;
  wire [31:0] _1463_;
  wire [31:0] _1464_;
  wire [31:0] _1465_;
  wire [31:0] _1466_;
  wire [31:0] _1467_;
  wire [31:0] _1468_;
  wire [4:0] _1469_;
  wire _1470_;
  wire [4:0] _1471_;
  wire _1472_;
  wire _1473_;
  wire [4:0] _1474_;
  wire [1023:0] _1475_;
  wire [1023:0] _1476_;
  wire [1023:0] _1477_;
  wire [1023:0] _1478_;
  wire [31:0] _1479_;
  wire [31:0] _1480_;
  wire [31:0] _1481_;
  wire [31:0] _1482_;
  wire [31:0] _1483_;
  wire [31:0] _1484_;
  wire [31:0] _1485_;
  wire [31:0] _1486_;
  wire [31:0] _1487_;
  wire [31:0] _1488_;
  wire [31:0] _1489_;
  wire [31:0] _1490_;
  wire [31:0] _1491_;
  wire [31:0] _1492_;
  wire [31:0] _1493_;
  wire [31:0] _1494_;
  wire [31:0] _1495_;
  wire [31:0] _1496_;
  wire [31:0] _1497_;
  wire [31:0] _1498_;
  wire [31:0] _1499_;
  wire [31:0] _1500_;
  wire _1501_;
  wire _1502_;
  wire _1503_;
  wire _1504_;
  wire _1505_;
  wire _1506_;
  wire _1507_;
  wire _1508_;
  wire _1509_;
  wire _1510_;
  wire _1511_;
  wire _1512_;
  wire _1513_;
  wire _1514_;
  wire _1515_;
  wire _1516_;
  wire _1517_;
  wire _1518_;
  wire _1519_;
  wire _1520_;
  wire _1521_;
  wire _1522_;
  wire _1523_;
  wire _1524_;
  wire _1525_;
  wire _1526_;
  wire _1527_;
  wire _1528_;
  wire _1529_;
  wire _1530_;
  wire _1531_;
  wire _1532_;
  wire _1533_;
  wire _1534_;
  wire _1535_;
  wire _1536_;
  wire _1537_;
  wire _1538_;
  wire _1539_;
  wire _1540_;
  wire _1541_;
  wire _1542_;
  wire _1543_;
  wire _1544_;
  wire _1545_;
  wire _1546_;
  wire _1547_;
  wire _1548_;
  wire _1549_;
  wire _1550_;
  wire _1551_;
  wire _1552_;
  wire _1553_;
  wire _1554_;
  wire _1555_;
  wire _1556_;
  wire _1557_;
  wire _1558_;
  wire _1559_;
  wire _1560_;
  wire _1561_;
  wire _1562_;
  wire _1563_;
  wire _1564_;
  wire _1565_;
  wire [31:0] _1566_;
  wire [31:0] _1567_;
  wire [31:0] _1568_;
  wire [31:0] _1569_;
  wire [31:0] _1570_;
  wire [31:0] _1571_;
  wire [31:0] _1572_;
  wire [31:0] _1573_;
  wire [31:0] _1574_;
  wire [31:0] _1575_;
  wire [31:0] _1576_;
  wire [31:0] _1577_;
  wire [31:0] _1578_;
  wire [31:0] _1579_;
  wire [31:0] _1580_;
  wire [31:0] _1581_;
  wire [31:0] _1582_;
  wire [31:0] _1583_;
  wire [31:0] _1584_;
  wire [31:0] _1585_;
  wire [31:0] _1586_;
  wire [31:0] _1587_;
  wire [31:0] _1588_;
  wire [31:0] _1589_;
  wire [31:0] _1590_;
  wire [31:0] _1591_;
  wire [31:0] _1592_;
  wire [31:0] _1593_;
  wire [31:0] _1594_;
  wire [31:0] _1595_;
  wire [31:0] _1596_;
  wire [31:0] _1597_;
  wire [31:0] _1598_;
  wire [31:0] _1599_;
  wire [31:0] _1600_;
  wire [31:0] _1601_;
  wire [31:0] _1602_;
  wire [31:0] _1603_;
  wire [31:0] _1604_;
  wire [31:0] _1605_;
  wire [31:0] _1606_;
  wire [31:0] _1607_;
  wire [31:0] _1608_;
  wire [31:0] _1609_;
  wire [31:0] _1610_;
  wire [31:0] _1611_;
  wire [31:0] _1612_;
  wire [31:0] _1613_;
  wire [31:0] _1614_;
  wire [31:0] _1615_;
  wire [31:0] _1616_;
  wire [31:0] _1617_;
  wire [31:0] _1618_;
  wire [31:0] _1619_;
  wire [31:0] _1620_;
  wire [31:0] _1621_;
  wire [31:0] _1622_;
  wire [31:0] _1623_;
  wire [31:0] _1624_;
  wire [31:0] _1625_;
  wire [31:0] _1626_;
  wire [31:0] _1627_;
  wire [31:0] _1628_;
  wire [31:0] _1629_;
  wire [31:0] _1630_;
  wire [31:0] _1631_;
  wire [31:0] _1632_;
  wire [31:0] _1633_;
  wire [31:0] _1634_;
  wire [31:0] _1635_;
  wire [31:0] _1636_;
  wire [31:0] _1637_;
  wire [31:0] _1638_;
  wire [31:0] _1639_;
  wire [31:0] _1640_;
  wire [31:0] _1641_;
  wire [31:0] _1642_;
  wire [31:0] _1643_;
  wire [31:0] _1644_;
  wire [31:0] _1645_;
  wire [31:0] _1646_;
  wire [31:0] _1647_;
  wire [31:0] _1648_;
  wire [31:0] _1649_;
  wire [31:0] _1650_;
  wire [31:0] _1651_;
  wire [31:0] _1652_;
  wire [31:0] _1653_;
  wire [31:0] _1654_;
  wire [31:0] _1655_;
  wire [31:0] _1656_;
  wire [31:0] _1657_;
  wire [31:0] _1658_;
  wire [31:0] _1659_;
  wire [31:0] _1660_;
  wire [31:0] _1661_;
  reg [31:0] _1662_;
  wire [31:0] _1663_;
  wire [31:0] _1664_;
  wire [31:0] _1665_;
  wire addsubbar;
  wire branch_taken;
  output bytesPort1;
  wire bytesPort1;
  output bytesPort2;
  wire bytesPort2;
  wire checkmisaligneddawu;
  input clk;
  wire clk;
  wire clrcsr;
  wire cmp_selaluop2;
  wire cmp_selop2;
  wire comparedsignedunsignedbar;
  wire completedaau;
  wire completeddaru1;
  wire completeddaru2;
  wire completeddawu;
  (* hdlname = "controlleraftab addsubbar" *)
  wire \controlleraftab.addsubbar ;
  (* hdlname = "controlleraftab branch_taken" *)
  wire \controlleraftab.branch_taken ;
  (* hdlname = "controlleraftab checkmisaligneddawu" *)
  wire \controlleraftab.checkmisaligneddawu ;
  (* hdlname = "controlleraftab clk" *)
  wire \controlleraftab.clk ;
  (* hdlname = "controlleraftab clrcsr" *)
  wire \controlleraftab.clrcsr ;
  (* hdlname = "controlleraftab cmp_selaluop2" *)
  wire \controlleraftab.cmp_selaluop2 ;
  (* hdlname = "controlleraftab cmp_selop2" *)
  wire \controlleraftab.cmp_selop2 ;
  (* hdlname = "controlleraftab comparedsignedunsignedbar" *)
  wire \controlleraftab.comparedsignedunsignedbar ;
  (* hdlname = "controlleraftab completedaau" *)
  wire \controlleraftab.completedaau ;
  (* hdlname = "controlleraftab completeddaru1" *)
  wire \controlleraftab.completeddaru1 ;
  (* hdlname = "controlleraftab completeddaru2" *)
  wire \controlleraftab.completeddaru2 ;
  (* hdlname = "controlleraftab completeddawu" *)
  wire \controlleraftab.completeddawu ;
  (* hdlname = "controlleraftab csr_from_wb" *)
  wire \controlleraftab.csr_from_wb ;
  (* hdlname = "controlleraftab csr_n_state" *)
  wire \controlleraftab.csr_n_state ;
  (* hdlname = "controlleraftab csr_p_state" *)
  wire \controlleraftab.csr_p_state ;
  (* hdlname = "controlleraftab d2e_en" *)
  wire \controlleraftab.d2e_en ;
  (* hdlname = "controlleraftab d2e_en_temp" *)
  wire \controlleraftab.d2e_en_temp ;
  (* hdlname = "controlleraftab d2e_rst" *)
  wire \controlleraftab.d2e_rst ;
  (* hdlname = "controlleraftab dec_valid" *)
  wire \controlleraftab.dec_valid ;
  (* hdlname = "controlleraftab delegationmode" *)
  wire [1:0] \controlleraftab.delegationmode ;
  (* hdlname = "controlleraftab dncntcsr" *)
  wire \controlleraftab.dncntcsr ;
  (* hdlname = "controlleraftab e2m_en" *)
  wire \controlleraftab.e2m_en ;
  (* hdlname = "controlleraftab e2m_en_temp" *)
  wire \controlleraftab.e2m_en_temp ;
  (* hdlname = "controlleraftab e2m_rst" *)
  wire \controlleraftab.e2m_rst ;
  (* hdlname = "controlleraftab ecallflag" *)
  wire \controlleraftab.ecallflag ;
  (* hdlname = "controlleraftab ex_valid" *)
  wire \controlleraftab.ex_valid ;
  (* hdlname = "controlleraftab exceptionraise" *)
  wire \controlleraftab.exceptionraise ;
  (* hdlname = "controlleraftab forced_rb_read" *)
  wire \controlleraftab.forced_rb_read ;
  (* hdlname = "controlleraftab func12" *)
  wire [11:0] \controlleraftab.func12 ;
  (* hdlname = "controlleraftab func3" *)
  wire [2:0] \controlleraftab.func3 ;
  (* hdlname = "controlleraftab func7" *)
  wire [6:0] \controlleraftab.func7 ;
  (* hdlname = "controlleraftab gi2d_en" *)
  wire \controlleraftab.gi2d_en ;
  (* hdlname = "controlleraftab gi2d_en_temp" *)
  wire \controlleraftab.gi2d_en_temp ;
  (* hdlname = "controlleraftab gi2d_rst" *)
  wire \controlleraftab.gi2d_rst ;
  (* hdlname = "controlleraftab hazard_solved" *)
  wire \controlleraftab.hazard_solved ;
  (* hdlname = "controlleraftab hazex" *)
  wire \controlleraftab.hazex ;
  (* hdlname = "controlleraftab hazm" *)
  wire \controlleraftab.hazm ;
  (* hdlname = "controlleraftab illegalinstrflag" *)
  wire \controlleraftab.illegalinstrflag ;
  (* hdlname = "controlleraftab inst_type" *)
  wire [2:0] \controlleraftab.inst_type ;
  (* hdlname = "controlleraftab instructiondone" *)
  wire \controlleraftab.instructiondone ;
  (* hdlname = "controlleraftab instructiondonecsr" *)
  wire \controlleraftab.instructiondonecsr ;
  (* hdlname = "controlleraftab interruptraise" *)
  wire \controlleraftab.interruptraise ;
  (* hdlname = "controlleraftab ir" *)
  wire [31:0] \controlleraftab.ir ;
  (* hdlname = "controlleraftab is_aau_used" *)
  wire \controlleraftab.is_aau_used ;
  (* hdlname = "controlleraftab is_load_in_mem" *)
  wire \controlleraftab.is_load_in_mem ;
  (* hdlname = "controlleraftab is_store_in_mem" *)
  wire \controlleraftab.is_store_in_mem ;
  (* hdlname = "controlleraftab iscsrinstruction" *)
  wire \controlleraftab.iscsrinstruction ;
  (* hdlname = "controlleraftab ldbytesigned" *)
  wire \controlleraftab.ldbytesigned ;
  (* hdlname = "controlleraftab ldcntcsr" *)
  wire \controlleraftab.ldcntcsr ;
  (* hdlname = "controlleraftab lddelegation" *)
  wire \controlleraftab.lddelegation ;
  (* hdlname = "controlleraftab ldhalfsigned" *)
  wire \controlleraftab.ldhalfsigned ;
  (* hdlname = "controlleraftab ldmachine" *)
  wire \controlleraftab.ldmachine ;
  (* hdlname = "controlleraftab ldmiereg" *)
  wire \controlleraftab.ldmiereg ;
  (* hdlname = "controlleraftab ldmieuiefield" *)
  wire \controlleraftab.ldmieuiefield ;
  (* hdlname = "controlleraftab lduser" *)
  wire \controlleraftab.lduser ;
  (* hdlname = "controlleraftab ldvaluecsr" *)
  wire [2:0] \controlleraftab.ldvaluecsr ;
  (* hdlname = "controlleraftab load" *)
  wire \controlleraftab.load ;
  (* hdlname = "controlleraftab loadmiereg" *)
  wire \controlleraftab.loadmiereg ;
  (* hdlname = "controlleraftab loadmieuiefield" *)
  wire \controlleraftab.loadmieuiefield ;
  (* hdlname = "controlleraftab loadmieuiefield_csr" *)
  wire \controlleraftab.loadmieuiefield_csr ;
  (* hdlname = "controlleraftab loadmieuiefield_exint" *)
  wire \controlleraftab.loadmieuiefield_exint ;
  (* hdlname = "controlleraftab m2wb_en" *)
  wire \controlleraftab.m2wb_en ;
  (* hdlname = "controlleraftab m2wb_en_temp" *)
  wire \controlleraftab.m2wb_en_temp ;
  (* hdlname = "controlleraftab m2wb_rst" *)
  wire \controlleraftab.m2wb_rst ;
  (* hdlname = "controlleraftab m_valid" *)
  wire \controlleraftab.m_valid ;
  (* hdlname = "controlleraftab machinestatusalterationpostcsr" *)
  wire \controlleraftab.machinestatusalterationpostcsr ;
  (* hdlname = "controlleraftab machinestatusalterationprecsr" *)
  wire \controlleraftab.machinestatusalterationprecsr ;
  (* hdlname = "controlleraftab mipcclddisable" *)
  wire \controlleraftab.mipcclddisable ;
  (* hdlname = "controlleraftab mirror" *)
  wire \controlleraftab.mirror ;
  (* hdlname = "controlleraftab mirrorusercu" *)
  wire \controlleraftab.mirrorusercu ;
  (* hdlname = "controlleraftab mirrorusercu_exint" *)
  wire \controlleraftab.mirrorusercu_exint ;
  (* hdlname = "controlleraftab mirrorusercu_inst" *)
  wire \controlleraftab.mirrorusercu_inst ;
  (* hdlname = "controlleraftab modetvec" *)
  wire [1:0] \controlleraftab.modetvec ;
  (* hdlname = "controlleraftab mretoruretbar" *)
  wire \controlleraftab.mretoruretbar ;
  (* hdlname = "controlleraftab muxcode" *)
  wire [11:0] \controlleraftab.muxcode ;
  (* hdlname = "controlleraftab n_state" *)
  wire [4:0] \controlleraftab.n_state ;
  (* hdlname = "controlleraftab nbytes" *)
  wire [1:0] \controlleraftab.nbytes ;
  (* hdlname = "controlleraftab opcode" *)
  wire [6:0] \controlleraftab.opcode ;
  (* hdlname = "controlleraftab p_state" *)
  wire [4:0] \controlleraftab.p_state ;
  (* hdlname = "controlleraftab pass" *)
  wire \controlleraftab.pass ;
  (* hdlname = "controlleraftab previousprv" *)
  wire [1:0] \controlleraftab.previousprv ;
  (* hdlname = "controlleraftab readonlycsr" *)
  wire \controlleraftab.readonlycsr ;
  (* hdlname = "controlleraftab ret_from_epc" *)
  wire \controlleraftab.ret_from_epc ;
  (* hdlname = "controlleraftab rst" *)
  wire \controlleraftab.rst ;
  (* hdlname = "controlleraftab selaah" *)
  wire \controlleraftab.selaah ;
  (* hdlname = "controlleraftab selaal" *)
  wire \controlleraftab.selaal ;
  (* hdlname = "controlleraftab selaau" *)
  wire \controlleraftab.selaau ;
  (* hdlname = "controlleraftab selalu" *)
  wire \controlleraftab.selalu ;
  (* hdlname = "controlleraftab selasu" *)
  wire \controlleraftab.selasu ;
  (* hdlname = "controlleraftab selauipc" *)
  wire \controlleraftab.selauipc ;
  (* hdlname = "controlleraftab selbsu" *)
  wire \controlleraftab.selbsu ;
  (* hdlname = "controlleraftab selcause_csr" *)
  wire \controlleraftab.selcause_csr ;
  (* hdlname = "controlleraftab selccmip_csr" *)
  wire \controlleraftab.selccmip_csr ;
  (* hdlname = "controlleraftab selcsr" *)
  wire \controlleraftab.selcsr ;
  (* hdlname = "controlleraftab selcsraddrfrominst" *)
  wire \controlleraftab.selcsraddrfrominst ;
  (* hdlname = "controlleraftab selimm" *)
  wire \controlleraftab.selimm ;
  (* hdlname = "controlleraftab selimmcsr" *)
  wire \controlleraftab.selimmcsr ;
  (* hdlname = "controlleraftab selinterruptaddressdirect" *)
  wire \controlleraftab.selinterruptaddressdirect ;
  (* hdlname = "controlleraftab selinterruptaddressvectored" *)
  wire \controlleraftab.selinterruptaddressvectored ;
  (* hdlname = "controlleraftab seljl" *)
  wire \controlleraftab.seljl ;
  (* hdlname = "controlleraftab selllu" *)
  wire \controlleraftab.selllu ;
  (* hdlname = "controlleraftab sellogic" *)
  wire [1:0] \controlleraftab.sellogic ;
  (* hdlname = "controlleraftab selmedeleg_csr" *)
  wire \controlleraftab.selmedeleg_csr ;
  (* hdlname = "controlleraftab selmem" *)
  wire \controlleraftab.selmem ;
  (* hdlname = "controlleraftab selmepc_csr" *)
  wire \controlleraftab.selmepc_csr ;
  (* hdlname = "controlleraftab selmideleg_csr" *)
  wire \controlleraftab.selmideleg_csr ;
  (* hdlname = "controlleraftab selp1" *)
  wire \controlleraftab.selp1 ;
  (* hdlname = "controlleraftab selp1csr" *)
  wire \controlleraftab.selp1csr ;
  (* hdlname = "controlleraftab selp2" *)
  wire \controlleraftab.selp2 ;
  (* hdlname = "controlleraftab selpc" *)
  wire \controlleraftab.selpc ;
  (* hdlname = "controlleraftab selpc4" *)
  wire \controlleraftab.selpc4 ;
  (* hdlname = "controlleraftab selpc_csr" *)
  wire \controlleraftab.selpc_csr ;
  (* hdlname = "controlleraftab selreadwritecsr" *)
  wire \controlleraftab.selreadwritecsr ;
  (* hdlname = "controlleraftab selromaddress" *)
  wire \controlleraftab.selromaddress ;
  (* hdlname = "controlleraftab selshift" *)
  wire [1:0] \controlleraftab.selshift ;
  (* hdlname = "controlleraftab setcsr" *)
  wire \controlleraftab.setcsr ;
  (* hdlname = "controlleraftab setzeroorone" *)
  wire \controlleraftab.setzeroorone ;
  (* hdlname = "controlleraftab signedsigned" *)
  wire \controlleraftab.signedsigned ;
  (* hdlname = "controlleraftab signedunsigned" *)
  wire \controlleraftab.signedunsigned ;
  (* hdlname = "controlleraftab startdaru" *)
  wire \controlleraftab.startdaru ;
  (* hdlname = "controlleraftab startdawu" *)
  wire \controlleraftab.startdawu ;
  (* hdlname = "controlleraftab startdivideaau" *)
  wire \controlleraftab.startdivideaau ;
  (* hdlname = "controlleraftab startmultiplyaau" *)
  wire \controlleraftab.startmultiplyaau ;
  (* hdlname = "controlleraftab unsignedunsigned" *)
  wire \controlleraftab.unsignedunsigned ;
  (* hdlname = "controlleraftab upcntcsr" *)
  wire \controlleraftab.upcntcsr ;
  (* hdlname = "controlleraftab userstatusalterationpostcsr" *)
  wire \controlleraftab.userstatusalterationpostcsr ;
  (* hdlname = "controlleraftab userstatusalterationprecsr" *)
  wire \controlleraftab.userstatusalterationprecsr ;
  (* hdlname = "controlleraftab validaccesscsr" *)
  wire \controlleraftab.validaccesscsr ;
  (* hdlname = "controlleraftab wb_func3" *)
  wire [2:0] \controlleraftab.wb_func3 ;
  (* hdlname = "controlleraftab wb_iscsrinstruction" *)
  wire \controlleraftab.wb_iscsrinstruction ;
  (* hdlname = "controlleraftab wb_mreturetbar" *)
  wire \controlleraftab.wb_mreturetbar ;
  (* hdlname = "controlleraftab wb_ret_from_epc" *)
  wire \controlleraftab.wb_ret_from_epc ;
  (* hdlname = "controlleraftab wb_valid" *)
  wire \controlleraftab.wb_valid ;
  (* hdlname = "controlleraftab wb_validaccesscsr" *)
  wire \controlleraftab.wb_validaccesscsr ;
  (* hdlname = "controlleraftab writerb_inst" *)
  wire \controlleraftab.writerb_inst ;
  (* hdlname = "controlleraftab writeregbank" *)
  wire \controlleraftab.writeregbank ;
  (* hdlname = "controlleraftab writeregbank_csr" *)
  wire \controlleraftab.writeregbank_csr ;
  (* hdlname = "controlleraftab writeregbank_exint" *)
  wire \controlleraftab.writeregbank_exint ;
  (* hdlname = "controlleraftab writeregfile" *)
  wire \controlleraftab.writeregfile ;
  (* hdlname = "controlleraftab zerocntcsr" *)
  wire \controlleraftab.zerocntcsr ;
  wire csr_from_wb;
  wire d2e_en;
  wire d2e_rst;
  (* hdlname = "datapathaftab aau ain" *)
  wire [31:0] \datapathaftab.aau.ain ;
  (* hdlname = "datapathaftab aau bin" *)
  wire [31:0] \datapathaftab.aau.bin ;
  (* hdlname = "datapathaftab aau clk" *)
  wire \datapathaftab.aau.clk ;
  (* hdlname = "datapathaftab aau completeaau" *)
  wire \datapathaftab.aau.completeaau ;
  (* hdlname = "datapathaftab aau dividedbyzeroflag" *)
  wire \datapathaftab.aau.dividedbyzeroflag ;
  (* hdlname = "datapathaftab aau division clk" *)
  wire \datapathaftab.aau.division.clk ;
  (* hdlname = "datapathaftab aau division ddin" *)
  wire [31:0] \datapathaftab.aau.division.ddin ;
  (* hdlname = "datapathaftab aau division dividedbyzeroflag" *)
  wire \datapathaftab.aau.division.dividedbyzeroflag ;
  (* hdlname = "datapathaftab aau division dividend" *)
  wire [31:0] \datapathaftab.aau.division.dividend ;
  (* hdlname = "datapathaftab aau division divisor" *)
  wire [31:0] \datapathaftab.aau.division.divisor ;
  (* hdlname = "datapathaftab aau division divisorzero" *)
  wire \datapathaftab.aau.division.divisorzero ;
  (* hdlname = "datapathaftab aau division donesdiv" *)
  wire \datapathaftab.aau.division.donesdiv ;
  (* hdlname = "datapathaftab aau division drin" *)
  wire [31:0] \datapathaftab.aau.division.drin ;
  (* hdlname = "datapathaftab aau division endd" *)
  wire \datapathaftab.aau.division.endd ;
  (* hdlname = "datapathaftab aau division endr" *)
  wire \datapathaftab.aau.division.endr ;
  (* hdlname = "datapathaftab aau division enq" *)
  wire \datapathaftab.aau.division.enq ;
  (* hdlname = "datapathaftab aau division enr" *)
  wire \datapathaftab.aau.division.enr ;
  (* hdlname = "datapathaftab aau division qout" *)
  wire [31:0] \datapathaftab.aau.division.qout ;
  (* hdlname = "datapathaftab aau division qp" *)
  wire [31:0] \datapathaftab.aau.division.qp ;
  (* hdlname = "datapathaftab aau division remout" *)
  wire [31:0] \datapathaftab.aau.division.remout ;
  (* hdlname = "datapathaftab aau division remp" *)
  wire [32:0] \datapathaftab.aau.division.remp ;
  (* hdlname = "datapathaftab aau division rst" *)
  wire \datapathaftab.aau.division.rst ;
  (* hdlname = "datapathaftab aau division safestart" *)
  wire \datapathaftab.aau.division.safestart ;
  (* hdlname = "datapathaftab aau division signedunsignedbar" *)
  wire \datapathaftab.aau.division.signedunsignedbar ;
  (* hdlname = "datapathaftab aau division startsdiv" *)
  wire \datapathaftab.aau.division.startsdiv ;
  (* hdlname = "datapathaftab aau division sync_rst" *)
  wire \datapathaftab.aau.division.sync_rst ;
  (* hdlname = "datapathaftab aau division tcldividend ain" *)
  wire [31:0] \datapathaftab.aau.division.tcldividend.ain ;
  (* hdlname = "datapathaftab aau division tcldividend ainp" *)
  wire [31:0] \datapathaftab.aau.division.tcldividend.ainp ;
  (* hdlname = "datapathaftab aau division tcldividend aout" *)
  wire [31:0] \datapathaftab.aau.division.tcldividend.aout ;
  (* hdlname = "datapathaftab aau division tcldividend en" *)
  wire \datapathaftab.aau.division.tcldividend.en ;
  (* hdlname = "datapathaftab aau division tcldivisor ain" *)
  wire [31:0] \datapathaftab.aau.division.tcldivisor.ain ;
  (* hdlname = "datapathaftab aau division tcldivisor ainp" *)
  wire [31:0] \datapathaftab.aau.division.tcldivisor.ainp ;
  (* hdlname = "datapathaftab aau division tcldivisor aout" *)
  wire [31:0] \datapathaftab.aau.division.tcldivisor.aout ;
  (* hdlname = "datapathaftab aau division tcldivisor en" *)
  wire \datapathaftab.aau.division.tcldivisor.en ;
  (* hdlname = "datapathaftab aau division tclq ain" *)
  wire [31:0] \datapathaftab.aau.division.tclq.ain ;
  (* hdlname = "datapathaftab aau division tclq ainp" *)
  wire [31:0] \datapathaftab.aau.division.tclq.ainp ;
  (* hdlname = "datapathaftab aau division tclq aout" *)
  wire [31:0] \datapathaftab.aau.division.tclq.aout ;
  (* hdlname = "datapathaftab aau division tclq en" *)
  wire \datapathaftab.aau.division.tclq.en ;
  (* hdlname = "datapathaftab aau division tclrem ain" *)
  wire [31:0] \datapathaftab.aau.division.tclrem.ain ;
  (* hdlname = "datapathaftab aau division tclrem ainp" *)
  wire [31:0] \datapathaftab.aau.division.tclrem.ainp ;
  (* hdlname = "datapathaftab aau division tclrem aout" *)
  wire [31:0] \datapathaftab.aau.division.tclrem.aout ;
  (* hdlname = "datapathaftab aau division tclrem en" *)
  wire \datapathaftab.aau.division.tclrem.en ;
  (* hdlname = "datapathaftab aau division unsigneddiv clk" *)
  wire \datapathaftab.aau.division.unsigneddiv.clk ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv clk" *)
  wire \datapathaftab.aau.division.unsigneddiv.controllerdiv.clk ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv cocnt" *)
  wire \datapathaftab.aau.division.unsigneddiv.controllerdiv.cocnt ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv counter clk" *)
  wire \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.clk ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv counter cocnt" *)
  wire \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.cocnt ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv counter cocntp" *)
  wire \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.cocntp ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv counter inccnt" *)
  wire \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.inccnt ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv counter initcnt" *)
  wire \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.initcnt ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv counter initvalue" *)
  wire [5:0] \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.initvalue ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv counter outcnt" *)
  wire [5:0] \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.outcnt ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv counter rst" *)
  wire \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.rst ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv counter temp" *)
  wire [5:0] \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.temp ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv counter zerocnt" *)
  wire \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.zerocnt ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv donediv" *)
  wire \datapathaftab.aau.division.unsigneddiv.controllerdiv.donediv ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv inccnt" *)
  wire \datapathaftab.aau.division.unsigneddiv.controllerdiv.inccnt ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv initcnt" *)
  wire \datapathaftab.aau.division.unsigneddiv.controllerdiv.initcnt ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv ldregm" *)
  wire \datapathaftab.aau.division.unsigneddiv.controllerdiv.ldregm ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv ldregq" *)
  wire \datapathaftab.aau.division.unsigneddiv.controllerdiv.ldregq ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv ldregr" *)
  wire \datapathaftab.aau.division.unsigneddiv.controllerdiv.ldregr ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv nstate" *)
  wire [1:0] \datapathaftab.aau.division.unsigneddiv.controllerdiv.nstate ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv pstate" *)
  wire [1:0] \datapathaftab.aau.division.unsigneddiv.controllerdiv.pstate ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv qq0" *)
  wire \datapathaftab.aau.division.unsigneddiv.controllerdiv.qq0 ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv r33" *)
  wire \datapathaftab.aau.division.unsigneddiv.controllerdiv.r33 ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv rst" *)
  wire \datapathaftab.aau.division.unsigneddiv.controllerdiv.rst ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv seldividend" *)
  wire \datapathaftab.aau.division.unsigneddiv.controllerdiv.seldividend ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv selline1" *)
  wire \datapathaftab.aau.division.unsigneddiv.controllerdiv.selline1 ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv shlregq" *)
  wire \datapathaftab.aau.division.unsigneddiv.controllerdiv.shlregq ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv shlregr" *)
  wire \datapathaftab.aau.division.unsigneddiv.controllerdiv.shlregr ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv shrregq" *)
  wire \datapathaftab.aau.division.unsigneddiv.controllerdiv.shrregq ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv shrregr" *)
  wire \datapathaftab.aau.division.unsigneddiv.controllerdiv.shrregr ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv startdiv" *)
  wire \datapathaftab.aau.division.unsigneddiv.controllerdiv.startdiv ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv sync_rst" *)
  wire \datapathaftab.aau.division.unsigneddiv.controllerdiv.sync_rst ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv zerocnt" *)
  wire \datapathaftab.aau.division.unsigneddiv.controllerdiv.zerocnt ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv zeroregm" *)
  wire \datapathaftab.aau.division.unsigneddiv.controllerdiv.zeroregm ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv zeroregq" *)
  wire \datapathaftab.aau.division.unsigneddiv.controllerdiv.zeroregq ;
  (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv zeroregr" *)
  wire \datapathaftab.aau.division.unsigneddiv.controllerdiv.zeroregr ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv addresult" *)
  wire [32:0] \datapathaftab.aau.division.unsigneddiv.datapathdiv.addresult ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv clk" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.clk ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv dividend" *)
  wire [31:0] \datapathaftab.aau.division.unsigneddiv.datapathdiv.dividend ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv divisor" *)
  wire [31:0] \datapathaftab.aau.division.unsigneddiv.datapathdiv.divisor ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv divisorp" *)
  wire [32:0] \datapathaftab.aau.division.unsigneddiv.datapathdiv.divisorp ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv ldregm" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.ldregm ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv ldregq" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.ldregq ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv ldregr" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.ldregr ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv leftbitoutq" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.leftbitoutq ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv line1" *)
  wire [31:0] \datapathaftab.aau.division.unsigneddiv.datapathdiv.line1 ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv m" *)
  wire [32:0] \datapathaftab.aau.division.unsigneddiv.datapathdiv.m ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv mux33b a" *)
  wire [31:0] \datapathaftab.aau.division.unsigneddiv.datapathdiv.mux33b.a ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv mux33b b" *)
  wire [31:0] \datapathaftab.aau.division.unsigneddiv.datapathdiv.mux33b.b ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv mux33b s0" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.mux33b.s0 ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv mux33b s1" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.mux33b.s1 ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv mux33b w" *)
  wire [31:0] \datapathaftab.aau.division.unsigneddiv.datapathdiv.mux33b.w ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv mux34b a" *)
  wire [32:0] \datapathaftab.aau.division.unsigneddiv.datapathdiv.mux34b.a ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv mux34b b" *)
  wire [32:0] \datapathaftab.aau.division.unsigneddiv.datapathdiv.mux34b.b ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv mux34b s0" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.mux34b.s0 ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv mux34b s1" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.mux34b.s1 ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv mux34b w" *)
  wire [32:0] \datapathaftab.aau.division.unsigneddiv.datapathdiv.mux34b.w ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv outmux1" *)
  wire [31:0] \datapathaftab.aau.division.unsigneddiv.datapathdiv.outmux1 ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv q" *)
  wire [31:0] \datapathaftab.aau.division.unsigneddiv.datapathdiv.q ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv qprev" *)
  wire [31:0] \datapathaftab.aau.division.unsigneddiv.datapathdiv.qprev ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv qq0" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.qq0 ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv r33" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.r33 ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv regm clk" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.regm.clk ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv regm inreg" *)
  wire [32:0] \datapathaftab.aau.division.unsigneddiv.datapathdiv.regm.inreg ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv regm load" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.regm.load ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv regm outreg" *)
  wire [32:0] \datapathaftab.aau.division.unsigneddiv.datapathdiv.regm.outreg ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv regm rst" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.regm.rst ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv regm zero" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.regm.zero ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv remainder" *)
  wire [32:0] \datapathaftab.aau.division.unsigneddiv.datapathdiv.remainder ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv rprev" *)
  wire [32:0] \datapathaftab.aau.division.unsigneddiv.datapathdiv.rprev ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv rst" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.rst ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv seldividend" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.seldividend ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv selline1" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.selline1 ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shlregq" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.shlregq ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shlregr" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.shlregr ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shregq 6866.outreg_t" *)
  wire [31:0] \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregq.6866.outreg_t ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shregq 6866.seroutp" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregq.6866.seroutp ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shregq clk" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregq.clk ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shregq inreg" *)
  wire [31:0] \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregq.inreg ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shregq load" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregq.load ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shregq outreg" *)
  wire [31:0] \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregq.outreg ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shregq rst" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregq.rst ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shregq serin" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregq.serin ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shregq serout" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregq.serout ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shregq shiftl" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregq.shiftl ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shregq shiftr" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregq.shiftr ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shregq zero" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregq.zero ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shregr 6833.outreg_t" *)
  wire [32:0] \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregr.6833.outreg_t ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shregr clk" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregr.clk ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shregr inreg" *)
  wire [32:0] \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregr.inreg ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shregr load" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregr.load ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shregr outreg" *)
  wire [32:0] \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregr.outreg ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shregr rst" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregr.rst ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shregr serin" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregr.serin ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shregr shiftl" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregr.shiftl ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shregr shiftr" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregr.shiftr ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shregr zero" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregr.zero ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shrregq" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.shrregq ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shrregr" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.shrregr ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv smux" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.smux ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv sub" *)
  wire [32:0] \datapathaftab.aau.division.unsigneddiv.datapathdiv.sub ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv zeroregm" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.zeroregm ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv zeroregq" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.zeroregq ;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv zeroregr" *)
  wire \datapathaftab.aau.division.unsigneddiv.datapathdiv.zeroregr ;
  (* hdlname = "datapathaftab aau division unsigneddiv dividend" *)
  wire [31:0] \datapathaftab.aau.division.unsigneddiv.dividend ;
  (* hdlname = "datapathaftab aau division unsigneddiv divisor" *)
  wire [31:0] \datapathaftab.aau.division.unsigneddiv.divisor ;
  (* hdlname = "datapathaftab aau division unsigneddiv donediv" *)
  wire \datapathaftab.aau.division.unsigneddiv.donediv ;
  (* hdlname = "datapathaftab aau division unsigneddiv ldregm" *)
  wire \datapathaftab.aau.division.unsigneddiv.ldregm ;
  (* hdlname = "datapathaftab aau division unsigneddiv ldregq" *)
  wire \datapathaftab.aau.division.unsigneddiv.ldregq ;
  (* hdlname = "datapathaftab aau division unsigneddiv ldregr" *)
  wire \datapathaftab.aau.division.unsigneddiv.ldregr ;
  (* hdlname = "datapathaftab aau division unsigneddiv q" *)
  wire [31:0] \datapathaftab.aau.division.unsigneddiv.q ;
  (* hdlname = "datapathaftab aau division unsigneddiv qq0" *)
  wire \datapathaftab.aau.division.unsigneddiv.qq0 ;
  (* hdlname = "datapathaftab aau division unsigneddiv r33" *)
  wire \datapathaftab.aau.division.unsigneddiv.r33 ;
  (* hdlname = "datapathaftab aau division unsigneddiv remainder" *)
  wire [32:0] \datapathaftab.aau.division.unsigneddiv.remainder ;
  (* hdlname = "datapathaftab aau division unsigneddiv rst" *)
  wire \datapathaftab.aau.division.unsigneddiv.rst ;
  (* hdlname = "datapathaftab aau division unsigneddiv seldividend" *)
  wire \datapathaftab.aau.division.unsigneddiv.seldividend ;
  (* hdlname = "datapathaftab aau division unsigneddiv selline1" *)
  wire \datapathaftab.aau.division.unsigneddiv.selline1 ;
  (* hdlname = "datapathaftab aau division unsigneddiv shlregq" *)
  wire \datapathaftab.aau.division.unsigneddiv.shlregq ;
  (* hdlname = "datapathaftab aau division unsigneddiv shlregr" *)
  wire \datapathaftab.aau.division.unsigneddiv.shlregr ;
  (* hdlname = "datapathaftab aau division unsigneddiv shrregq" *)
  wire \datapathaftab.aau.division.unsigneddiv.shrregq ;
  (* hdlname = "datapathaftab aau division unsigneddiv shrregr" *)
  wire \datapathaftab.aau.division.unsigneddiv.shrregr ;
  (* hdlname = "datapathaftab aau division unsigneddiv startdiv" *)
  wire \datapathaftab.aau.division.unsigneddiv.startdiv ;
  (* hdlname = "datapathaftab aau division unsigneddiv sync_rst" *)
  wire \datapathaftab.aau.division.unsigneddiv.sync_rst ;
  (* hdlname = "datapathaftab aau division unsigneddiv zeroregm" *)
  wire \datapathaftab.aau.division.unsigneddiv.zeroregm ;
  (* hdlname = "datapathaftab aau division unsigneddiv zeroregq" *)
  wire \datapathaftab.aau.division.unsigneddiv.zeroregq ;
  (* hdlname = "datapathaftab aau division unsigneddiv zeroregr" *)
  wire \datapathaftab.aau.division.unsigneddiv.zeroregr ;
  (* hdlname = "datapathaftab aau donediv" *)
  wire \datapathaftab.aau.donediv ;
  (* hdlname = "datapathaftab aau donemult" *)
  wire \datapathaftab.aau.donemult ;
  (* hdlname = "datapathaftab aau in1mult" *)
  wire [32:0] \datapathaftab.aau.in1mult ;
  (* hdlname = "datapathaftab aau in2mult" *)
  wire [32:0] \datapathaftab.aau.in2mult ;
  (* hdlname = "datapathaftab aau multiplication clk" *)
  wire \datapathaftab.aau.multiplication.clk ;
  (* hdlname = "datapathaftab aau multiplication controller clk" *)
  wire \datapathaftab.aau.multiplication.controller.clk ;
  (* hdlname = "datapathaftab aau multiplication controller cnt_en" *)
  wire \datapathaftab.aau.multiplication.controller.cnt_en ;
  (* hdlname = "datapathaftab aau multiplication controller cnt_rst" *)
  wire \datapathaftab.aau.multiplication.controller.cnt_rst ;
  (* hdlname = "datapathaftab aau multiplication controller co" *)
  wire \datapathaftab.aau.multiplication.controller.co ;
  (* hdlname = "datapathaftab aau multiplication controller counter clk" *)
  wire \datapathaftab.aau.multiplication.controller.counter.clk ;
  (* hdlname = "datapathaftab aau multiplication controller counter cocnt" *)
  wire \datapathaftab.aau.multiplication.controller.counter.cocnt ;
  (* hdlname = "datapathaftab aau multiplication controller counter cocntp" *)
  wire \datapathaftab.aau.multiplication.controller.counter.cocntp ;
  (* hdlname = "datapathaftab aau multiplication controller counter inccnt" *)
  wire \datapathaftab.aau.multiplication.controller.counter.inccnt ;
  (* hdlname = "datapathaftab aau multiplication controller counter initcnt" *)
  wire \datapathaftab.aau.multiplication.controller.counter.initcnt ;
  (* hdlname = "datapathaftab aau multiplication controller counter initvalue" *)
  wire [5:0] \datapathaftab.aau.multiplication.controller.counter.initvalue ;
  (* hdlname = "datapathaftab aau multiplication controller counter outcnt" *)
  wire [5:0] \datapathaftab.aau.multiplication.controller.counter.outcnt ;
  (* hdlname = "datapathaftab aau multiplication controller counter rst" *)
  wire \datapathaftab.aau.multiplication.controller.counter.rst ;
  (* hdlname = "datapathaftab aau multiplication controller counter temp" *)
  wire [5:0] \datapathaftab.aau.multiplication.controller.counter.temp ;
  (* hdlname = "datapathaftab aau multiplication controller counter zerocnt" *)
  wire \datapathaftab.aau.multiplication.controller.counter.zerocnt ;
  (* hdlname = "datapathaftab aau multiplication controller done" *)
  wire \datapathaftab.aau.multiplication.controller.done ;
  (* hdlname = "datapathaftab aau multiplication controller initcnt" *)
  wire \datapathaftab.aau.multiplication.controller.initcnt ;
  (* hdlname = "datapathaftab aau multiplication controller ldm" *)
  wire \datapathaftab.aau.multiplication.controller.ldm ;
  (* hdlname = "datapathaftab aau multiplication controller ldmr" *)
  wire \datapathaftab.aau.multiplication.controller.ldmr ;
  (* hdlname = "datapathaftab aau multiplication controller ldp" *)
  wire \datapathaftab.aau.multiplication.controller.ldp ;
  (* hdlname = "datapathaftab aau multiplication controller nstate" *)
  wire [1:0] \datapathaftab.aau.multiplication.controller.nstate ;
  (* hdlname = "datapathaftab aau multiplication controller op" *)
  wire [1:0] \datapathaftab.aau.multiplication.controller.op ;
  (* hdlname = "datapathaftab aau multiplication controller pstate" *)
  wire [1:0] \datapathaftab.aau.multiplication.controller.pstate ;
  (* hdlname = "datapathaftab aau multiplication controller rst" *)
  wire \datapathaftab.aau.multiplication.controller.rst ;
  (* hdlname = "datapathaftab aau multiplication controller sel" *)
  wire \datapathaftab.aau.multiplication.controller.sel ;
  (* hdlname = "datapathaftab aau multiplication controller shrmr" *)
  wire \datapathaftab.aau.multiplication.controller.shrmr ;
  (* hdlname = "datapathaftab aau multiplication controller startbooth" *)
  wire \datapathaftab.aau.multiplication.controller.startbooth ;
  (* hdlname = "datapathaftab aau multiplication controller subsel" *)
  wire \datapathaftab.aau.multiplication.controller.subsel ;
  (* hdlname = "datapathaftab aau multiplication controller sync_rst" *)
  wire \datapathaftab.aau.multiplication.controller.sync_rst ;
  (* hdlname = "datapathaftab aau multiplication controller zerop" *)
  wire \datapathaftab.aau.multiplication.controller.zerop ;
  (* hdlname = "datapathaftab aau multiplication datapath addsub a" *)
  wire [32:0] \datapathaftab.aau.multiplication.datapath.addsub.a ;
  (* hdlname = "datapathaftab aau multiplication datapath addsub add a" *)
  wire [32:0] \datapathaftab.aau.multiplication.datapath.addsub.add.a ;
  (* hdlname = "datapathaftab aau multiplication datapath addsub add add" *)
  (* unused_bits = "33" *)
  wire [33:0] \datapathaftab.aau.multiplication.datapath.addsub.add.add ;
  (* hdlname = "datapathaftab aau multiplication datapath addsub add addresult" *)
  wire [32:0] \datapathaftab.aau.multiplication.datapath.addsub.add.addresult ;
  (* hdlname = "datapathaftab aau multiplication datapath addsub add b" *)
  wire [32:0] \datapathaftab.aau.multiplication.datapath.addsub.add.b ;
  (* hdlname = "datapathaftab aau multiplication datapath addsub add carryout" *)
  (* unused_bits = "0" *)
  wire \datapathaftab.aau.multiplication.datapath.addsub.add.carryout ;
  (* hdlname = "datapathaftab aau multiplication datapath addsub add cin" *)
  wire \datapathaftab.aau.multiplication.datapath.addsub.add.cin ;
  (* hdlname = "datapathaftab aau multiplication datapath addsub addsubresult" *)
  wire [32:0] \datapathaftab.aau.multiplication.datapath.addsub.addsubresult ;
  (* hdlname = "datapathaftab aau multiplication datapath addsub b" *)
  wire [32:0] \datapathaftab.aau.multiplication.datapath.addsub.b ;
  (* hdlname = "datapathaftab aau multiplication datapath addsub bsel" *)
  wire [32:0] \datapathaftab.aau.multiplication.datapath.addsub.bsel ;
  (* hdlname = "datapathaftab aau multiplication datapath addsub cout" *)
  (* unused_bits = "0" *)
  wire \datapathaftab.aau.multiplication.datapath.addsub.cout ;
  (* hdlname = "datapathaftab aau multiplication datapath addsub outres" *)
  wire [32:0] \datapathaftab.aau.multiplication.datapath.addsub.outres ;
  (* hdlname = "datapathaftab aau multiplication datapath addsub pass" *)
  wire \datapathaftab.aau.multiplication.datapath.addsub.pass ;
  (* hdlname = "datapathaftab aau multiplication datapath addsub subsel" *)
  wire \datapathaftab.aau.multiplication.datapath.addsub.subsel ;
  (* hdlname = "datapathaftab aau multiplication datapath clk" *)
  wire \datapathaftab.aau.multiplication.datapath.clk ;
  (* hdlname = "datapathaftab aau multiplication datapath ldm" *)
  wire \datapathaftab.aau.multiplication.datapath.ldm ;
  (* hdlname = "datapathaftab aau multiplication datapath ldmr" *)
  wire \datapathaftab.aau.multiplication.datapath.ldmr ;
  (* hdlname = "datapathaftab aau multiplication datapath ldp" *)
  wire \datapathaftab.aau.multiplication.datapath.ldp ;
  (* hdlname = "datapathaftab aau multiplication datapath m" *)
  wire [32:0] \datapathaftab.aau.multiplication.datapath.m ;
  (* hdlname = "datapathaftab aau multiplication datapath mr" *)
  wire [32:0] \datapathaftab.aau.multiplication.datapath.mr ;
  (* hdlname = "datapathaftab aau multiplication datapath mreg clk" *)
  wire \datapathaftab.aau.multiplication.datapath.mreg.clk ;
  (* hdlname = "datapathaftab aau multiplication datapath mreg inreg" *)
  wire [32:0] \datapathaftab.aau.multiplication.datapath.mreg.inreg ;
  (* hdlname = "datapathaftab aau multiplication datapath mreg load" *)
  wire \datapathaftab.aau.multiplication.datapath.mreg.load ;
  (* hdlname = "datapathaftab aau multiplication datapath mreg outreg" *)
  wire [32:0] \datapathaftab.aau.multiplication.datapath.mreg.outreg ;
  (* hdlname = "datapathaftab aau multiplication datapath mreg rst" *)
  wire \datapathaftab.aau.multiplication.datapath.mreg.rst ;
  (* hdlname = "datapathaftab aau multiplication datapath mreg zero" *)
  wire \datapathaftab.aau.multiplication.datapath.mreg.zero ;
  (* hdlname = "datapathaftab aau multiplication datapath mrreg 6594.outreg_t" *)
  wire [33:0] \datapathaftab.aau.multiplication.datapath.mrreg.6594.outreg_t ;
  (* hdlname = "datapathaftab aau multiplication datapath mrreg clk" *)
  wire \datapathaftab.aau.multiplication.datapath.mrreg.clk ;
  (* hdlname = "datapathaftab aau multiplication datapath mrreg inreg" *)
  wire [33:0] \datapathaftab.aau.multiplication.datapath.mrreg.inreg ;
  (* hdlname = "datapathaftab aau multiplication datapath mrreg load" *)
  wire \datapathaftab.aau.multiplication.datapath.mrreg.load ;
  (* hdlname = "datapathaftab aau multiplication datapath mrreg outreg" *)
  wire [33:0] \datapathaftab.aau.multiplication.datapath.mrreg.outreg ;
  (* hdlname = "datapathaftab aau multiplication datapath mrreg rst" *)
  wire \datapathaftab.aau.multiplication.datapath.mrreg.rst ;
  (* hdlname = "datapathaftab aau multiplication datapath mrreg serin" *)
  wire \datapathaftab.aau.multiplication.datapath.mrreg.serin ;
  (* hdlname = "datapathaftab aau multiplication datapath mrreg shiftl" *)
  wire \datapathaftab.aau.multiplication.datapath.mrreg.shiftl ;
  (* hdlname = "datapathaftab aau multiplication datapath mrreg shiftr" *)
  wire \datapathaftab.aau.multiplication.datapath.mrreg.shiftr ;
  (* hdlname = "datapathaftab aau multiplication datapath mrreg zero" *)
  wire \datapathaftab.aau.multiplication.datapath.mrreg.zero ;
  (* hdlname = "datapathaftab aau multiplication datapath op" *)
  wire [1:0] \datapathaftab.aau.multiplication.datapath.op ;
  (* hdlname = "datapathaftab aau multiplication datapath outm" *)
  wire [32:0] \datapathaftab.aau.multiplication.datapath.outm ;
  (* hdlname = "datapathaftab aau multiplication datapath outmr" *)
  wire [33:0] \datapathaftab.aau.multiplication.datapath.outmr ;
  (* hdlname = "datapathaftab aau multiplication datapath p" *)
  wire [65:0] \datapathaftab.aau.multiplication.datapath.p ;
  (* hdlname = "datapathaftab aau multiplication datapath pin" *)
  wire [32:0] \datapathaftab.aau.multiplication.datapath.pin ;
  (* hdlname = "datapathaftab aau multiplication datapath pout" *)
  wire [32:0] \datapathaftab.aau.multiplication.datapath.pout ;
  (* hdlname = "datapathaftab aau multiplication datapath preg clk" *)
  wire \datapathaftab.aau.multiplication.datapath.preg.clk ;
  (* hdlname = "datapathaftab aau multiplication datapath preg inreg" *)
  wire [32:0] \datapathaftab.aau.multiplication.datapath.preg.inreg ;
  (* hdlname = "datapathaftab aau multiplication datapath preg load" *)
  wire \datapathaftab.aau.multiplication.datapath.preg.load ;
  (* hdlname = "datapathaftab aau multiplication datapath preg outreg" *)
  wire [32:0] \datapathaftab.aau.multiplication.datapath.preg.outreg ;
  (* hdlname = "datapathaftab aau multiplication datapath preg rst" *)
  wire \datapathaftab.aau.multiplication.datapath.preg.rst ;
  (* hdlname = "datapathaftab aau multiplication datapath preg zero" *)
  wire \datapathaftab.aau.multiplication.datapath.preg.zero ;
  (* hdlname = "datapathaftab aau multiplication datapath result" *)
  wire [32:0] \datapathaftab.aau.multiplication.datapath.result ;
  (* hdlname = "datapathaftab aau multiplication datapath rst" *)
  wire \datapathaftab.aau.multiplication.datapath.rst ;
  (* hdlname = "datapathaftab aau multiplication datapath seimr" *)
  wire \datapathaftab.aau.multiplication.datapath.seimr ;
  (* hdlname = "datapathaftab aau multiplication datapath sel" *)
  wire \datapathaftab.aau.multiplication.datapath.sel ;
  (* hdlname = "datapathaftab aau multiplication datapath shmr" *)
  wire [33:0] \datapathaftab.aau.multiplication.datapath.shmr ;
  (* hdlname = "datapathaftab aau multiplication datapath shrmr" *)
  wire \datapathaftab.aau.multiplication.datapath.shrmr ;
  (* hdlname = "datapathaftab aau multiplication datapath subsel" *)
  wire \datapathaftab.aau.multiplication.datapath.subsel ;
  (* hdlname = "datapathaftab aau multiplication datapath zerop" *)
  wire \datapathaftab.aau.multiplication.datapath.zerop ;
  (* hdlname = "datapathaftab aau multiplication donebooth" *)
  wire \datapathaftab.aau.multiplication.donebooth ;
  (* hdlname = "datapathaftab aau multiplication ldm" *)
  wire \datapathaftab.aau.multiplication.ldm ;
  (* hdlname = "datapathaftab aau multiplication ldmr" *)
  wire \datapathaftab.aau.multiplication.ldmr ;
  (* hdlname = "datapathaftab aau multiplication ldp" *)
  wire \datapathaftab.aau.multiplication.ldp ;
  (* hdlname = "datapathaftab aau multiplication m" *)
  wire [32:0] \datapathaftab.aau.multiplication.m ;
  (* hdlname = "datapathaftab aau multiplication mr" *)
  wire [32:0] \datapathaftab.aau.multiplication.mr ;
  (* hdlname = "datapathaftab aau multiplication op" *)
  wire [1:0] \datapathaftab.aau.multiplication.op ;
  (* hdlname = "datapathaftab aau multiplication p" *)
  wire [65:0] \datapathaftab.aau.multiplication.p ;
  (* hdlname = "datapathaftab aau multiplication rst" *)
  wire \datapathaftab.aau.multiplication.rst ;
  (* hdlname = "datapathaftab aau multiplication sel" *)
  wire \datapathaftab.aau.multiplication.sel ;
  (* hdlname = "datapathaftab aau multiplication shrmr" *)
  wire \datapathaftab.aau.multiplication.shrmr ;
  (* hdlname = "datapathaftab aau multiplication startbooth" *)
  wire \datapathaftab.aau.multiplication.startbooth ;
  (* hdlname = "datapathaftab aau multiplication subsel" *)
  wire \datapathaftab.aau.multiplication.subsel ;
  (* hdlname = "datapathaftab aau multiplication sync_rst" *)
  wire \datapathaftab.aau.multiplication.sync_rst ;
  (* hdlname = "datapathaftab aau multiplication zerop" *)
  wire \datapathaftab.aau.multiplication.zerop ;
  (* hdlname = "datapathaftab aau quotient" *)
  wire [31:0] \datapathaftab.aau.quotient ;
  (* hdlname = "datapathaftab aau remainder" *)
  wire [31:0] \datapathaftab.aau.remainder ;
  (* hdlname = "datapathaftab aau resaau1" *)
  wire [31:0] \datapathaftab.aau.resaau1 ;
  (* hdlname = "datapathaftab aau resaau2" *)
  wire [31:0] \datapathaftab.aau.resaau2 ;
  (* hdlname = "datapathaftab aau resmult" *)
  wire [65:0] \datapathaftab.aau.resmult ;
  (* hdlname = "datapathaftab aau resmulth" *)
  wire [31:0] \datapathaftab.aau.resmulth ;
  (* hdlname = "datapathaftab aau resmultl" *)
  wire [31:0] \datapathaftab.aau.resmultl ;
  (* hdlname = "datapathaftab aau rst" *)
  wire \datapathaftab.aau.rst ;
  (* hdlname = "datapathaftab aau signedsigned" *)
  wire \datapathaftab.aau.signedsigned ;
  (* hdlname = "datapathaftab aau signedunsigned" *)
  wire \datapathaftab.aau.signedunsigned ;
  (* hdlname = "datapathaftab aau signedunsignedbardiv" *)
  wire \datapathaftab.aau.signedunsignedbardiv ;
  (* hdlname = "datapathaftab aau startdivideaau" *)
  wire \datapathaftab.aau.startdivideaau ;
  (* hdlname = "datapathaftab aau startmultaau" *)
  wire \datapathaftab.aau.startmultaau ;
  (* hdlname = "datapathaftab aau sync_rst" *)
  wire \datapathaftab.aau.sync_rst ;
  (* hdlname = "datapathaftab aau unsignedunsigned" *)
  wire \datapathaftab.aau.unsignedunsigned ;
  (* hdlname = "datapathaftab aauresult" *)
  wire [31:0] \datapathaftab.aauresult ;
  (* hdlname = "datapathaftab addressregbank" *)
  wire [11:0] \datapathaftab.addressregbank ;
  (* hdlname = "datapathaftab addsub a" *)
  wire [31:0] \datapathaftab.addsub.a ;
  (* hdlname = "datapathaftab addsub add a" *)
  wire [31:0] \datapathaftab.addsub.add.a ;
  (* hdlname = "datapathaftab addsub add add" *)
  (* unused_bits = "32" *)
  wire [32:0] \datapathaftab.addsub.add.add ;
  (* hdlname = "datapathaftab addsub add addresult" *)
  wire [31:0] \datapathaftab.addsub.add.addresult ;
  (* hdlname = "datapathaftab addsub add b" *)
  wire [31:0] \datapathaftab.addsub.add.b ;
  (* hdlname = "datapathaftab addsub add carryout" *)
  (* unused_bits = "0" *)
  wire \datapathaftab.addsub.add.carryout ;
  (* hdlname = "datapathaftab addsub add cin" *)
  wire \datapathaftab.addsub.add.cin ;
  (* hdlname = "datapathaftab addsub addsubresult" *)
  wire [31:0] \datapathaftab.addsub.addsubresult ;
  (* hdlname = "datapathaftab addsub b" *)
  wire [31:0] \datapathaftab.addsub.b ;
  (* hdlname = "datapathaftab addsub bsel" *)
  wire [31:0] \datapathaftab.addsub.bsel ;
  (* hdlname = "datapathaftab addsub cout" *)
  (* unused_bits = "0" *)
  wire \datapathaftab.addsub.cout ;
  (* hdlname = "datapathaftab addsub outres" *)
  wire [31:0] \datapathaftab.addsub.outres ;
  (* hdlname = "datapathaftab addsub pass" *)
  wire \datapathaftab.addsub.pass ;
  (* hdlname = "datapathaftab addsub subsel" *)
  wire \datapathaftab.addsub.subsel ;
  (* hdlname = "datapathaftab addsubbar" *)
  wire \datapathaftab.addsubbar ;
  (* hdlname = "datapathaftab asuresult" *)
  wire [31:0] \datapathaftab.asuresult ;
  (* hdlname = "datapathaftab branch_taken" *)
  wire \datapathaftab.branch_taken ;
  (* hdlname = "datapathaftab branch_taken_int" *)
  wire \datapathaftab.branch_taken_int ;
  (* hdlname = "datapathaftab bsu nsh" *)
  wire [4:0] \datapathaftab.bsu.nsh ;
  (* hdlname = "datapathaftab bsu selsh" *)
  wire [1:0] \datapathaftab.bsu.selsh ;
  (* hdlname = "datapathaftab bsu shin" *)
  wire [31:0] \datapathaftab.bsu.shin ;
  (* hdlname = "datapathaftab bsu shout" *)
  wire [31:0] \datapathaftab.bsu.shout ;
  (* hdlname = "datapathaftab bsuresult" *)
  wire [31:0] \datapathaftab.bsuresult ;
  (* hdlname = "datapathaftab bypass_csr_mirror" *)
  wire \datapathaftab.bypass_csr_mirror ;
  (* hdlname = "datapathaftab bypass_csr_result" *)
  wire [11:0] \datapathaftab.bypass_csr_result ;
  (* hdlname = "datapathaftab bypass_csr_result_en" *)
  wire \datapathaftab.bypass_csr_result_en ;
  (* hdlname = "datapathaftab bypass_csr_second_operand" *)
  wire [11:0] \datapathaftab.bypass_csr_second_operand ;
  (* hdlname = "datapathaftab bypass_csr_second_operand_en" *)
  wire \datapathaftab.bypass_csr_second_operand_en ;
  (* hdlname = "datapathaftab bypass_first" *)
  wire \datapathaftab.bypass_first ;
  (* hdlname = "datapathaftab bypass_first_operand" *)
  wire [4:0] \datapathaftab.bypass_first_operand ;
  (* hdlname = "datapathaftab bypass_first_operand_en" *)
  wire \datapathaftab.bypass_first_operand_en ;
  (* hdlname = "datapathaftab bypass_result" *)
  wire [4:0] \datapathaftab.bypass_result ;
  (* hdlname = "datapathaftab bypass_result_en" *)
  wire \datapathaftab.bypass_result_en ;
  (* hdlname = "datapathaftab bypass_second" *)
  wire \datapathaftab.bypass_second ;
  (* hdlname = "datapathaftab bypass_second_csr" *)
  wire \datapathaftab.bypass_second_csr ;
  (* hdlname = "datapathaftab bypass_second_operand" *)
  wire [4:0] \datapathaftab.bypass_second_operand ;
  (* hdlname = "datapathaftab bypass_second_operand_en" *)
  wire \datapathaftab.bypass_second_operand_en ;
  (* hdlname = "datapathaftab bypass_zero_first_operand" *)
  wire \datapathaftab.bypass_zero_first_operand ;
  (* hdlname = "datapathaftab bypass_zero_second_operand" *)
  wire \datapathaftab.bypass_zero_second_operand ;
  (* hdlname = "datapathaftab bytespermemaccess" *)
  wire \datapathaftab.bytespermemaccess ;
  (* hdlname = "datapathaftab bytespermemaccessdaru" *)
  wire \datapathaftab.bytespermemaccessdaru ;
  (* hdlname = "datapathaftab bytespermemaccessdawu" *)
  wire \datapathaftab.bytespermemaccessdawu ;
  (* hdlname = "datapathaftab bytestoreaddaru1" *)
  wire \datapathaftab.bytestoreaddaru1 ;
  (* hdlname = "datapathaftab causecode" *)
  wire [31:0] \datapathaftab.causecode ;
  (* hdlname = "datapathaftab causecodetemp" *)
  wire [5:0] \datapathaftab.causecodetemp ;
  (* hdlname = "datapathaftab ccmie" *)
  wire [31:0] \datapathaftab.ccmie ;
  (* hdlname = "datapathaftab ccmiefield" *)
  wire \datapathaftab.ccmiefield ;
  (* hdlname = "datapathaftab ccmip" *)
  wire [31:0] \datapathaftab.ccmip ;
  (* hdlname = "datapathaftab ccuiefield" *)
  wire \datapathaftab.ccuiefield ;
  (* hdlname = "datapathaftab checkmisaligneddawu" *)
  wire \datapathaftab.checkmisaligneddawu ;
  (* hdlname = "datapathaftab clk" *)
  wire \datapathaftab.clk ;
  (* hdlname = "datapathaftab clrcsr" *)
  wire \datapathaftab.clrcsr ;
  (* hdlname = "datapathaftab cmp_op2" *)
  wire [31:0] \datapathaftab.cmp_op2 ;
  (* hdlname = "datapathaftab cmp_selaluop2" *)
  wire \datapathaftab.cmp_selaluop2 ;
  (* hdlname = "datapathaftab cmp_selop2" *)
  wire \datapathaftab.cmp_selop2 ;
  (* hdlname = "datapathaftab cntoutput" *)
  wire [2:0] \datapathaftab.cntoutput ;
  (* hdlname = "datapathaftab comparator ain" *)
  wire [31:0] \datapathaftab.comparator.ain ;
  (* hdlname = "datapathaftab comparator ainp" *)
  wire [31:0] \datapathaftab.comparator.ainp ;
  (* hdlname = "datapathaftab comparator bin" *)
  wire [31:0] \datapathaftab.comparator.bin ;
  (* hdlname = "datapathaftab comparator binp" *)
  wire [31:0] \datapathaftab.comparator.binp ;
  (* hdlname = "datapathaftab comparator comparesignedunsignedbar" *)
  wire \datapathaftab.comparator.comparesignedunsignedbar ;
  (* hdlname = "datapathaftab comparator eq" *)
  wire \datapathaftab.comparator.eq ;
  (* hdlname = "datapathaftab comparator gt" *)
  wire \datapathaftab.comparator.gt ;
  (* hdlname = "datapathaftab comparator lt" *)
  wire \datapathaftab.comparator.lt ;
  (* hdlname = "datapathaftab comparedsignedunsignedbar" *)
  wire \datapathaftab.comparedsignedunsignedbar ;
  (* hdlname = "datapathaftab comparisonresult" *)
  wire [31:0] \datapathaftab.comparisonresult ;
  (* hdlname = "datapathaftab completedaau" *)
  wire \datapathaftab.completedaau ;
  (* hdlname = "datapathaftab completedaau_aau" *)
  wire \datapathaftab.completedaau_aau ;
  (* hdlname = "datapathaftab completedaau_int" *)
  wire \datapathaftab.completedaau_int ;
  (* hdlname = "datapathaftab completedaau_stored" *)
  wire \datapathaftab.completedaau_stored ;
  (* hdlname = "datapathaftab completeddaru1" *)
  wire \datapathaftab.completeddaru1 ;
  (* hdlname = "datapathaftab completeddaru1_def" *)
  wire \datapathaftab.completeddaru1_def ;
  (* hdlname = "datapathaftab completeddaru1_def_int" *)
  wire \datapathaftab.completeddaru1_def_int ;
  (* hdlname = "datapathaftab completeddaru1_stored" *)
  wire \datapathaftab.completeddaru1_stored ;
  (* hdlname = "datapathaftab completeddaru2" *)
  wire \datapathaftab.completeddaru2 ;
  (* hdlname = "datapathaftab completeddaru2_def" *)
  wire \datapathaftab.completeddaru2_def ;
  (* hdlname = "datapathaftab completeddaru2_stored" *)
  wire \datapathaftab.completeddaru2_stored ;
  (* hdlname = "datapathaftab completeddawu" *)
  wire \datapathaftab.completeddawu ;
  (* hdlname = "datapathaftab completeddawu_def" *)
  wire \datapathaftab.completeddawu_def ;
  (* hdlname = "datapathaftab completeddawu_stored" *)
  wire \datapathaftab.completeddawu_stored ;
  (* hdlname = "datapathaftab csr_address_ctrl addressregbank" *)
  wire [11:0] \datapathaftab.csr_address_ctrl.addressregbank ;
  (* hdlname = "datapathaftab csr_address_ctrl validaddresscsr" *)
  wire \datapathaftab.csr_address_ctrl.validaddresscsr ;
  (* hdlname = "datapathaftab csr_from_wb" *)
  wire \datapathaftab.csr_from_wb ;
  (* hdlname = "datapathaftab csr_pc" *)
  wire [31:0] \datapathaftab.csr_pc ;
  (* hdlname = "datapathaftab csraddressingdecoder cntoutput" *)
  wire [2:0] \datapathaftab.csraddressingdecoder.cntoutput ;
  (* hdlname = "datapathaftab csraddressingdecoder outaddr" *)
  wire [11:0] \datapathaftab.csraddressingdecoder.outaddr ;
  (* hdlname = "datapathaftab csrcounter clk" *)
  wire \datapathaftab.csrcounter.clk ;
  (* hdlname = "datapathaftab csrcounter cocntup" *)
  wire \datapathaftab.csrcounter.cocntup ;
  (* hdlname = "datapathaftab csrcounter dncnt" *)
  wire \datapathaftab.csrcounter.dncnt ;
  (* hdlname = "datapathaftab csrcounter ldcnt" *)
  wire \datapathaftab.csrcounter.ldcnt ;
  (* hdlname = "datapathaftab csrcounter ldvalue" *)
  wire [2:0] \datapathaftab.csrcounter.ldvalue ;
  (* hdlname = "datapathaftab csrcounter outcnt" *)
  wire [2:0] \datapathaftab.csrcounter.outcnt ;
  (* hdlname = "datapathaftab csrcounter rst" *)
  wire \datapathaftab.csrcounter.rst ;
  (* hdlname = "datapathaftab csrcounter temp" *)
  wire [2:0] \datapathaftab.csrcounter.temp ;
  (* hdlname = "datapathaftab csrcounter upcnt" *)
  wire \datapathaftab.csrcounter.upcnt ;
  (* hdlname = "datapathaftab csrcounter zerocnt" *)
  wire \datapathaftab.csrcounter.zerocnt ;
  (* hdlname = "datapathaftab csrisl andres" *)
  wire [31:0] \datapathaftab.csrisl.andres ;
  (* hdlname = "datapathaftab csrisl causecode" *)
  wire [31:0] \datapathaftab.csrisl.causecode ;
  (* hdlname = "datapathaftab csrisl ccmip" *)
  wire [31:0] \datapathaftab.csrisl.ccmip ;
  (* hdlname = "datapathaftab csrisl clr" *)
  wire \datapathaftab.csrisl.clr ;
  (* hdlname = "datapathaftab csrisl curprv" *)
  wire [1:0] \datapathaftab.csrisl.curprv ;
  (* hdlname = "datapathaftab csrisl incsr" *)
  wire [31:0] \datapathaftab.csrisl.incsr ;
  (* hdlname = "datapathaftab csrisl ir19_15" *)
  wire [4:0] \datapathaftab.csrisl.ir19_15 ;
  (* hdlname = "datapathaftab csrisl machinestatusalterationpostcsr" *)
  wire \datapathaftab.csrisl.machinestatusalterationpostcsr ;
  (* hdlname = "datapathaftab csrisl machinestatusalterationprecsr" *)
  wire \datapathaftab.csrisl.machinestatusalterationprecsr ;
  (* hdlname = "datapathaftab csrisl mirroruie" *)
  wire \datapathaftab.csrisl.mirroruie ;
  (* hdlname = "datapathaftab csrisl mirroruip" *)
  wire \datapathaftab.csrisl.mirroruip ;
  (* hdlname = "datapathaftab csrisl mirroruser" *)
  wire \datapathaftab.csrisl.mirroruser ;
  (* hdlname = "datapathaftab csrisl mirrorustatus" *)
  wire \datapathaftab.csrisl.mirrorustatus ;
  (* hdlname = "datapathaftab csrisl orres" *)
  wire [31:0] \datapathaftab.csrisl.orres ;
  (* hdlname = "datapathaftab csrisl outcsr" *)
  wire [31:0] \datapathaftab.csrisl.outcsr ;
  (* hdlname = "datapathaftab csrisl p1" *)
  wire [31:0] \datapathaftab.csrisl.p1 ;
  (* hdlname = "datapathaftab csrisl pc" *)
  wire [31:0] \datapathaftab.csrisl.pc ;
  (* hdlname = "datapathaftab csrisl preincsr" *)
  wire [31:0] \datapathaftab.csrisl.preincsr ;
  (* hdlname = "datapathaftab csrisl previousprv" *)
  wire [1:0] \datapathaftab.csrisl.previousprv ;
  (* hdlname = "datapathaftab csrisl previousprv_int" *)
  wire [1:0] \datapathaftab.csrisl.previousprv_int ;
  (* hdlname = "datapathaftab csrisl regorimm" *)
  wire [31:0] \datapathaftab.csrisl.regorimm ;
  (* hdlname = "datapathaftab csrisl selcause" *)
  wire \datapathaftab.csrisl.selcause ;
  (* hdlname = "datapathaftab csrisl selim" *)
  wire \datapathaftab.csrisl.selim ;
  (* hdlname = "datapathaftab csrisl selmip" *)
  wire \datapathaftab.csrisl.selmip ;
  (* hdlname = "datapathaftab csrisl selp1" *)
  wire \datapathaftab.csrisl.selp1 ;
  (* hdlname = "datapathaftab csrisl selpc" *)
  wire \datapathaftab.csrisl.selpc ;
  (* hdlname = "datapathaftab csrisl selreadwrite" *)
  wire \datapathaftab.csrisl.selreadwrite ;
  (* hdlname = "datapathaftab csrisl seltval" *)
  wire \datapathaftab.csrisl.seltval ;
  (* hdlname = "datapathaftab csrisl set" *)
  wire \datapathaftab.csrisl.set ;
  (* hdlname = "datapathaftab csrisl userstatusalterationpostcsr" *)
  wire \datapathaftab.csrisl.userstatusalterationpostcsr ;
  (* hdlname = "datapathaftab csrisl userstatusalterationprecsr" *)
  wire \datapathaftab.csrisl.userstatusalterationprecsr ;
  (* hdlname = "datapathaftab curprv" *)
  wire [1:0] \datapathaftab.curprv ;
  (* hdlname = "datapathaftab d2e_alu_op1_curr" *)
  wire [31:0] \datapathaftab.d2e_alu_op1_curr ;
  (* hdlname = "datapathaftab d2e_alu_op1_next" *)
  wire [31:0] \datapathaftab.d2e_alu_op1_next ;
  (* hdlname = "datapathaftab d2e_alu_op2_curr" *)
  wire [31:0] \datapathaftab.d2e_alu_op2_curr ;
  (* hdlname = "datapathaftab d2e_alu_op2_next" *)
  wire [31:0] \datapathaftab.d2e_alu_op2_next ;
  (* hdlname = "datapathaftab d2e_ctrl_word_curr" *)
  wire [63:0] \datapathaftab.d2e_ctrl_word_curr ;
  (* hdlname = "datapathaftab d2e_ctrl_word_next" *)
  wire [63:0] \datapathaftab.d2e_ctrl_word_next ;
  (* hdlname = "datapathaftab d2e_ecall_flag_curr" *)
  wire \datapathaftab.d2e_ecall_flag_curr ;
  (* hdlname = "datapathaftab d2e_en" *)
  wire \datapathaftab.d2e_en ;
  (* hdlname = "datapathaftab d2e_en_def" *)
  wire \datapathaftab.d2e_en_def ;
  (* hdlname = "datapathaftab d2e_ex_flag_curr" *)
  wire \datapathaftab.d2e_ex_flag_curr ;
  (* hdlname = "datapathaftab d2e_ex_flag_next" *)
  wire \datapathaftab.d2e_ex_flag_next ;
  (* hdlname = "datapathaftab d2e_illegal_instruction_flag_curr" *)
  wire \datapathaftab.d2e_illegal_instruction_flag_curr ;
  (* hdlname = "datapathaftab d2e_inst_type_curr" *)
  wire [2:0] \datapathaftab.d2e_inst_type_curr ;
  (* hdlname = "datapathaftab d2e_instr_curr" *)
  wire [31:0] \datapathaftab.d2e_instr_curr ;
  (* hdlname = "datapathaftab d2e_instr_misaligned_flag_curr" *)
  wire \datapathaftab.d2e_instr_misaligned_flag_curr ;
  (* hdlname = "datapathaftab d2e_op1_curr" *)
  wire [31:0] \datapathaftab.d2e_op1_curr ;
  (* hdlname = "datapathaftab d2e_op1_next" *)
  wire [31:0] \datapathaftab.d2e_op1_next ;
  (* hdlname = "datapathaftab d2e_op2_curr" *)
  wire [31:0] \datapathaftab.d2e_op2_curr ;
  (* hdlname = "datapathaftab d2e_op2_next" *)
  wire [31:0] \datapathaftab.d2e_op2_next ;
  (* hdlname = "datapathaftab d2e_outcsr_curr" *)
  wire [31:0] \datapathaftab.d2e_outcsr_curr ;
  (* hdlname = "datapathaftab d2e_outcsr_next" *)
  wire [31:0] \datapathaftab.d2e_outcsr_next ;
  (* hdlname = "datapathaftab d2e_outcsr_next_pre_bypass" *)
  wire [31:0] \datapathaftab.d2e_outcsr_next_pre_bypass ;
  (* hdlname = "datapathaftab d2e_pc_curr" *)
  wire [31:0] \datapathaftab.d2e_pc_curr ;
  (* hdlname = "datapathaftab d2e_pc_plus4_curr" *)
  wire [31:0] \datapathaftab.d2e_pc_plus4_curr ;
  (* hdlname = "datapathaftab d2e_rst" *)
  wire \datapathaftab.d2e_rst ;
  (* hdlname = "datapathaftab d2e_rst_def" *)
  wire \datapathaftab.d2e_rst_def ;
  (* hdlname = "datapathaftab d2e_valid_curr" *)
  wire \datapathaftab.d2e_valid_curr ;
  (* hdlname = "datapathaftab d2e_validaccesscsr_curr" *)
  wire \datapathaftab.d2e_validaccesscsr_curr ;
  (* hdlname = "datapathaftab daru1 addrin" *)
  wire [31:0] \datapathaftab.daru1.addrin ;
  (* hdlname = "datapathaftab daru1 addrout" *)
  wire [31:0] \datapathaftab.daru1.addrout ;
  (* hdlname = "datapathaftab daru1 bytestoread" *)
  wire \datapathaftab.daru1.bytestoread ;
  (* hdlname = "datapathaftab daru1 checkmisaligneddaru" *)
  wire \datapathaftab.daru1.checkmisaligneddaru ;
  (* hdlname = "datapathaftab daru1 clk" *)
  wire \datapathaftab.daru1.clk ;
  (* hdlname = "datapathaftab daru1 cocnt" *)
  wire \datapathaftab.daru1.cocnt ;
  (* hdlname = "datapathaftab daru1 completedaru" *)
  wire \datapathaftab.daru1.completedaru ;
  (* hdlname = "datapathaftab daru1 controller clk" *)
  wire \datapathaftab.daru1.controller.clk ;
  (* hdlname = "datapathaftab daru1 controller cocnt" *)
  wire \datapathaftab.daru1.controller.cocnt ;
  (* hdlname = "datapathaftab daru1 controller completedaru" *)
  wire \datapathaftab.daru1.controller.completedaru ;
  (* hdlname = "datapathaftab daru1 controller datainstrbar" *)
  wire \datapathaftab.daru1.controller.datainstrbar ;
  (* hdlname = "datapathaftab daru1 controller enableaddr" *)
  wire \datapathaftab.daru1.controller.enableaddr ;
  (* hdlname = "datapathaftab daru1 controller enabledata" *)
  wire \datapathaftab.daru1.controller.enabledata ;
  (* hdlname = "datapathaftab daru1 controller inccnt" *)
  wire \datapathaftab.daru1.controller.inccnt ;
  (* hdlname = "datapathaftab daru1 controller initcnt" *)
  wire \datapathaftab.daru1.controller.initcnt ;
  (* hdlname = "datapathaftab daru1 controller initreading" *)
  wire \datapathaftab.daru1.controller.initreading ;
  (* hdlname = "datapathaftab daru1 controller ldaddr" *)
  wire \datapathaftab.daru1.controller.ldaddr ;
  (* hdlname = "datapathaftab daru1 controller ldnumbytes" *)
  wire \datapathaftab.daru1.controller.ldnumbytes ;
  (* hdlname = "datapathaftab daru1 controller memready" *)
  wire \datapathaftab.daru1.controller.memready ;
  (* hdlname = "datapathaftab daru1 controller nstate" *)
  wire [1:0] \datapathaftab.daru1.controller.nstate ;
  (* hdlname = "datapathaftab daru1 controller pstate" *)
  wire [1:0] \datapathaftab.daru1.controller.pstate ;
  (* hdlname = "datapathaftab daru1 controller readmem" *)
  wire \datapathaftab.daru1.controller.readmem ;
  (* hdlname = "datapathaftab daru1 controller rst" *)
  wire \datapathaftab.daru1.controller.rst ;
  (* hdlname = "datapathaftab daru1 controller select_incoming_data" *)
  wire \datapathaftab.daru1.controller.select_incoming_data ;
  (* hdlname = "datapathaftab daru1 controller sellden" *)
  wire \datapathaftab.daru1.controller.sellden ;
  (* hdlname = "datapathaftab daru1 controller startdaru" *)
  wire \datapathaftab.daru1.controller.startdaru ;
  (* hdlname = "datapathaftab daru1 controller sync_rst" *)
  wire \datapathaftab.daru1.controller.sync_rst ;
  (* hdlname = "datapathaftab daru1 controller zerocnt" *)
  wire \datapathaftab.daru1.controller.zerocnt ;
  (* hdlname = "datapathaftab daru1 controller zeronumbytes" *)
  wire \datapathaftab.daru1.controller.zeronumbytes ;
  (* hdlname = "datapathaftab daru1 datainstrbar" *)
  wire \datapathaftab.daru1.datainstrbar ;
  (* hdlname = "datapathaftab daru1 dataout" *)
  wire [31:0] \datapathaftab.daru1.dataout ;
  (* hdlname = "datapathaftab daru1 datapath adder a" *)
  wire [31:0] \datapathaftab.daru1.datapath.adder.a ;
  (* hdlname = "datapathaftab daru1 datapath adder b" *)
  wire [1:0] \datapathaftab.daru1.datapath.adder.b ;
  (* hdlname = "datapathaftab daru1 datapath adder cout" *)
  (* unused_bits = "31" *)
  wire [31:0] \datapathaftab.daru1.datapath.adder.cout ;
  (* hdlname = "datapathaftab daru1 datapath adder fa1 a" *)
  wire \datapathaftab.daru1.datapath.adder.fa1.a ;
  (* hdlname = "datapathaftab daru1 datapath adder fa1 b" *)
  wire \datapathaftab.daru1.datapath.adder.fa1.b ;
  (* hdlname = "datapathaftab daru1 datapath adder fa1 cin" *)
  wire \datapathaftab.daru1.datapath.adder.fa1.cin ;
  (* hdlname = "datapathaftab daru1 datapath adder fa1 cout" *)
  wire \datapathaftab.daru1.datapath.adder.fa1.cout ;
  (* hdlname = "datapathaftab daru1 datapath adder fa1 s" *)
  wire \datapathaftab.daru1.datapath.adder.fa1.s ;
  (* hdlname = "datapathaftab daru1 datapath adder fa2 a" *)
  wire \datapathaftab.daru1.datapath.adder.fa2.a ;
  (* hdlname = "datapathaftab daru1 datapath adder fa2 b" *)
  wire \datapathaftab.daru1.datapath.adder.fa2.b ;
  (* hdlname = "datapathaftab daru1 datapath adder fa2 cin" *)
  wire \datapathaftab.daru1.datapath.adder.fa2.cin ;
  (* hdlname = "datapathaftab daru1 datapath adder fa2 cout" *)
  wire \datapathaftab.daru1.datapath.adder.fa2.cout ;
  (* hdlname = "datapathaftab daru1 datapath adder fa2 s" *)
  wire \datapathaftab.daru1.datapath.adder.fa2.s ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:1.ha i_bit1" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:1.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:1.ha i_bit2" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:1.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:1.ha o_carry" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:1.ha.o_carry ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:1.ha o_sum" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:1.ha.o_sum ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:10.ha i_bit1" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:10.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:10.ha i_bit2" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:10.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:10.ha o_carry" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:10.ha.o_carry ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:10.ha o_sum" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:10.ha.o_sum ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:11.ha i_bit1" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:11.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:11.ha i_bit2" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:11.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:11.ha o_carry" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:11.ha.o_carry ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:11.ha o_sum" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:11.ha.o_sum ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:12.ha i_bit1" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:12.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:12.ha i_bit2" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:12.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:12.ha o_carry" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:12.ha.o_carry ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:12.ha o_sum" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:12.ha.o_sum ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:13.ha i_bit1" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:13.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:13.ha i_bit2" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:13.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:13.ha o_carry" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:13.ha.o_carry ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:13.ha o_sum" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:13.ha.o_sum ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:14.ha i_bit1" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:14.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:14.ha i_bit2" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:14.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:14.ha o_carry" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:14.ha.o_carry ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:14.ha o_sum" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:14.ha.o_sum ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:15.ha i_bit1" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:15.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:15.ha i_bit2" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:15.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:15.ha o_carry" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:15.ha.o_carry ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:15.ha o_sum" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:15.ha.o_sum ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:16.ha i_bit1" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:16.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:16.ha i_bit2" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:16.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:16.ha o_carry" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:16.ha.o_carry ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:16.ha o_sum" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:16.ha.o_sum ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:17.ha i_bit1" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:17.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:17.ha i_bit2" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:17.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:17.ha o_carry" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:17.ha.o_carry ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:17.ha o_sum" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:17.ha.o_sum ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:18.ha i_bit1" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:18.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:18.ha i_bit2" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:18.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:18.ha o_carry" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:18.ha.o_carry ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:18.ha o_sum" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:18.ha.o_sum ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:19.ha i_bit1" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:19.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:19.ha i_bit2" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:19.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:19.ha o_carry" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:19.ha.o_carry ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:19.ha o_sum" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:19.ha.o_sum ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:2.ha i_bit1" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:2.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:2.ha i_bit2" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:2.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:2.ha o_carry" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:2.ha.o_carry ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:2.ha o_sum" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:2.ha.o_sum ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:20.ha i_bit1" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:20.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:20.ha i_bit2" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:20.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:20.ha o_carry" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:20.ha.o_carry ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:20.ha o_sum" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:20.ha.o_sum ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:21.ha i_bit1" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:21.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:21.ha i_bit2" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:21.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:21.ha o_carry" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:21.ha.o_carry ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:21.ha o_sum" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:21.ha.o_sum ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:22.ha i_bit1" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:22.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:22.ha i_bit2" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:22.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:22.ha o_carry" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:22.ha.o_carry ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:22.ha o_sum" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:22.ha.o_sum ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:23.ha i_bit1" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:23.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:23.ha i_bit2" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:23.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:23.ha o_carry" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:23.ha.o_carry ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:23.ha o_sum" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:23.ha.o_sum ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:24.ha i_bit1" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:24.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:24.ha i_bit2" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:24.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:24.ha o_carry" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:24.ha.o_carry ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:24.ha o_sum" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:24.ha.o_sum ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:25.ha i_bit1" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:25.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:25.ha i_bit2" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:25.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:25.ha o_carry" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:25.ha.o_carry ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:25.ha o_sum" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:25.ha.o_sum ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:26.ha i_bit1" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:26.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:26.ha i_bit2" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:26.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:26.ha o_carry" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:26.ha.o_carry ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:26.ha o_sum" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:26.ha.o_sum ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:27.ha i_bit1" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:27.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:27.ha i_bit2" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:27.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:27.ha o_carry" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:27.ha.o_carry ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:27.ha o_sum" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:27.ha.o_sum ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:28.ha i_bit1" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:28.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:28.ha i_bit2" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:28.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:28.ha o_carry" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:28.ha.o_carry ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:28.ha o_sum" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:28.ha.o_sum ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:29.ha i_bit1" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:29.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:29.ha i_bit2" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:29.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:29.ha o_carry" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:29.ha.o_carry ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:29.ha o_sum" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:29.ha.o_sum ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:3.ha i_bit1" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:3.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:3.ha i_bit2" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:3.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:3.ha o_carry" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:3.ha.o_carry ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:3.ha o_sum" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:3.ha.o_sum ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:30.ha i_bit1" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:30.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:30.ha i_bit2" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:30.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:30.ha o_carry" *)
  (* unused_bits = "0" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:30.ha.o_carry ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:30.ha o_sum" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:30.ha.o_sum ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:4.ha i_bit1" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:4.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:4.ha i_bit2" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:4.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:4.ha o_carry" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:4.ha.o_carry ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:4.ha o_sum" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:4.ha.o_sum ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:5.ha i_bit1" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:5.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:5.ha i_bit2" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:5.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:5.ha o_carry" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:5.ha.o_carry ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:5.ha o_sum" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:5.ha.o_sum ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:6.ha i_bit1" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:6.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:6.ha i_bit2" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:6.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:6.ha o_carry" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:6.ha.o_carry ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:6.ha o_sum" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:6.ha.o_sum ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:7.ha i_bit1" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:7.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:7.ha i_bit2" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:7.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:7.ha o_carry" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:7.ha.o_carry ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:7.ha o_sum" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:7.ha.o_sum ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:8.ha i_bit1" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:8.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:8.ha i_bit2" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:8.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:8.ha o_carry" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:8.ha.o_carry ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:8.ha o_sum" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:8.ha.o_sum ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:9.ha i_bit1" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:9.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:9.ha i_bit2" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:9.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:9.ha o_carry" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:9.ha.o_carry ;
  (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:9.ha o_sum" *)
  wire \datapathaftab.daru1.datapath.adder.gen_halfadder:9.ha.o_sum ;
  (* hdlname = "datapathaftab daru1 datapath adder sum" *)
  wire [31:0] \datapathaftab.daru1.datapath.adder.sum ;
  (* hdlname = "datapathaftab daru1 datapath addrin" *)
  wire [31:0] \datapathaftab.daru1.datapath.addrin ;
  (* hdlname = "datapathaftab daru1 datapath addrout" *)
  wire [31:0] \datapathaftab.daru1.datapath.addrout ;
  (* hdlname = "datapathaftab daru1 datapath addrreg clk" *)
  wire \datapathaftab.daru1.datapath.addrreg.clk ;
  (* hdlname = "datapathaftab daru1 datapath addrreg inreg" *)
  wire [31:0] \datapathaftab.daru1.datapath.addrreg.inreg ;
  (* hdlname = "datapathaftab daru1 datapath addrreg load" *)
  wire \datapathaftab.daru1.datapath.addrreg.load ;
  (* hdlname = "datapathaftab daru1 datapath addrreg outreg" *)
  wire [31:0] \datapathaftab.daru1.datapath.addrreg.outreg ;
  (* hdlname = "datapathaftab daru1 datapath addrreg rst" *)
  wire \datapathaftab.daru1.datapath.addrreg.rst ;
  (* hdlname = "datapathaftab daru1 datapath addrreg zero" *)
  wire \datapathaftab.daru1.datapath.addrreg.zero ;
  (* hdlname = "datapathaftab daru1 datapath bytecnt" *)
  wire [1:0] \datapathaftab.daru1.datapath.bytecnt ;
  (* hdlname = "datapathaftab daru1 datapath bytestoread" *)
  wire \datapathaftab.daru1.datapath.bytestoread ;
  (* hdlname = "datapathaftab daru1 datapath bytestoread_temp" *)
  wire \datapathaftab.daru1.datapath.bytestoread_temp ;
  (* hdlname = "datapathaftab daru1 datapath checkmisaligneddaru" *)
  wire \datapathaftab.daru1.datapath.checkmisaligneddaru ;
  (* hdlname = "datapathaftab daru1 datapath clk" *)
  wire \datapathaftab.daru1.datapath.clk ;
  (* hdlname = "datapathaftab daru1 datapath cocnt" *)
  wire \datapathaftab.daru1.datapath.cocnt ;
  (* hdlname = "datapathaftab daru1 datapath counter clk" *)
  wire \datapathaftab.daru1.datapath.counter.clk ;
  (* hdlname = "datapathaftab daru1 datapath counter cocnt" *)
  wire \datapathaftab.daru1.datapath.counter.cocnt ;
  (* hdlname = "datapathaftab daru1 datapath counter cocntp" *)
  wire \datapathaftab.daru1.datapath.counter.cocntp ;
  (* hdlname = "datapathaftab daru1 datapath counter inccnt" *)
  wire \datapathaftab.daru1.datapath.counter.inccnt ;
  (* hdlname = "datapathaftab daru1 datapath counter initcnt" *)
  wire \datapathaftab.daru1.datapath.counter.initcnt ;
  (* hdlname = "datapathaftab daru1 datapath counter initvalue" *)
  wire \datapathaftab.daru1.datapath.counter.initvalue ;
  (* hdlname = "datapathaftab daru1 datapath counter outcnt" *)
  wire \datapathaftab.daru1.datapath.counter.outcnt ;
  (* hdlname = "datapathaftab daru1 datapath counter rst" *)
  wire \datapathaftab.daru1.datapath.counter.rst ;
  (* hdlname = "datapathaftab daru1 datapath counter temp" *)
  wire \datapathaftab.daru1.datapath.counter.temp ;
  (* hdlname = "datapathaftab daru1 datapath counter zerocnt" *)
  wire \datapathaftab.daru1.datapath.counter.zerocnt ;
  (* hdlname = "datapathaftab daru1 datapath datain" *)
  wire [15:0] \datapathaftab.daru1.datapath.datain ;
  (* hdlname = "datapathaftab daru1 datapath datainstrbar" *)
  wire \datapathaftab.daru1.datapath.datainstrbar ;
  (* hdlname = "datapathaftab daru1 datapath dataout" *)
  wire [31:0] \datapathaftab.daru1.datapath.dataout ;
  (* hdlname = "datapathaftab daru1 datapath dataouthigh_reg" *)
  wire [15:0] \datapathaftab.daru1.datapath.dataouthigh_reg ;
  (* hdlname = "datapathaftab daru1 datapath decoder en" *)
  wire \datapathaftab.daru1.datapath.decoder.en ;
  (* hdlname = "datapathaftab daru1 datapath decoder indecoder" *)
  wire [1:0] \datapathaftab.daru1.datapath.decoder.indecoder ;
  (* hdlname = "datapathaftab daru1 datapath decoder outdecoder" *)
  (* unused_bits = "2 3" *)
  wire [3:0] \datapathaftab.daru1.datapath.decoder.outdecoder ;
  (* hdlname = "datapathaftab daru1 datapath enableaddr" *)
  wire \datapathaftab.daru1.datapath.enableaddr ;
  (* hdlname = "datapathaftab daru1 datapath enabledata" *)
  wire \datapathaftab.daru1.datapath.enabledata ;
  (* hdlname = "datapathaftab daru1 datapath errordecoder addrin" *)
  wire [1:0] \datapathaftab.daru1.datapath.errordecoder.addrin ;
  (* hdlname = "datapathaftab daru1 datapath errordecoder checkmisaligneddaru" *)
  wire \datapathaftab.daru1.datapath.errordecoder.checkmisaligneddaru ;
  (* hdlname = "datapathaftab daru1 datapath errordecoder cmp_01" *)
  wire \datapathaftab.daru1.datapath.errordecoder.cmp_01 ;
  (* hdlname = "datapathaftab daru1 datapath errordecoder cmp_10" *)
  wire \datapathaftab.daru1.datapath.errordecoder.cmp_10 ;
  (* hdlname = "datapathaftab daru1 datapath errordecoder cmp_11" *)
  wire \datapathaftab.daru1.datapath.errordecoder.cmp_11 ;
  (* hdlname = "datapathaftab daru1 datapath errordecoder datainstrbar" *)
  wire \datapathaftab.daru1.datapath.errordecoder.datainstrbar ;
  (* hdlname = "datapathaftab daru1 datapath errordecoder instrmisalignedflag" *)
  wire \datapathaftab.daru1.datapath.errordecoder.instrmisalignedflag ;
  (* hdlname = "datapathaftab daru1 datapath errordecoder loadmisalignedflag" *)
  wire \datapathaftab.daru1.datapath.errordecoder.loadmisalignedflag ;
  (* hdlname = "datapathaftab daru1 datapath errordecoder misalignederrorp" *)
  wire \datapathaftab.daru1.datapath.errordecoder.misalignederrorp ;
  (* hdlname = "datapathaftab daru1 datapath errordecoder nbytes" *)
  wire [1:0] \datapathaftab.daru1.datapath.errordecoder.nbytes ;
  (* hdlname = "datapathaftab daru1 datapath inccnt" *)
  wire \datapathaftab.daru1.datapath.inccnt ;
  (* hdlname = "datapathaftab daru1 datapath initcnt" *)
  wire \datapathaftab.daru1.datapath.initcnt ;
  (* hdlname = "datapathaftab daru1 datapath initreading" *)
  wire \datapathaftab.daru1.datapath.initreading ;
  (* hdlname = "datapathaftab daru1 datapath initvaluecnt" *)
  wire [1:0] \datapathaftab.daru1.datapath.initvaluecnt ;
  (* hdlname = "datapathaftab daru1 datapath instrmisalignedflag" *)
  wire \datapathaftab.daru1.datapath.instrmisalignedflag ;
  (* hdlname = "datapathaftab daru1 datapath ldaddr" *)
  wire \datapathaftab.daru1.datapath.ldaddr ;
  (* hdlname = "datapathaftab daru1 datapath ldnumbytes" *)
  wire \datapathaftab.daru1.datapath.ldnumbytes ;
  (* hdlname = "datapathaftab daru1 datapath loadmisalignedflag" *)
  wire \datapathaftab.daru1.datapath.loadmisalignedflag ;
  (* hdlname = "datapathaftab daru1 datapath memdata" *)
  wire [15:0] \datapathaftab.daru1.datapath.memdata ;
  (* hdlname = "datapathaftab daru1 datapath nbytereg clk" *)
  wire \datapathaftab.daru1.datapath.nbytereg.clk ;
  (* hdlname = "datapathaftab daru1 datapath nbytereg inreg" *)
  wire [1:0] \datapathaftab.daru1.datapath.nbytereg.inreg ;
  (* hdlname = "datapathaftab daru1 datapath nbytereg load" *)
  wire \datapathaftab.daru1.datapath.nbytereg.load ;
  (* hdlname = "datapathaftab daru1 datapath nbytereg outreg" *)
  wire [1:0] \datapathaftab.daru1.datapath.nbytereg.outreg ;
  (* hdlname = "datapathaftab daru1 datapath nbytereg rst" *)
  wire \datapathaftab.daru1.datapath.nbytereg.rst ;
  (* hdlname = "datapathaftab daru1 datapath nbytereg zero" *)
  wire \datapathaftab.daru1.datapath.nbytereg.zero ;
  (* hdlname = "datapathaftab daru1 datapath nbytes" *)
  wire [1:0] \datapathaftab.daru1.datapath.nbytes ;
  (* hdlname = "datapathaftab daru1 datapath nbytesout" *)
  wire [1:0] \datapathaftab.daru1.datapath.nbytesout ;
  (* hdlname = "datapathaftab daru1 datapath outcnt" *)
  wire \datapathaftab.daru1.datapath.outcnt ;
  (* hdlname = "datapathaftab daru1 datapath outcnt_ext" *)
  wire [1:0] \datapathaftab.daru1.datapath.outcnt_ext ;
  (* hdlname = "datapathaftab daru1 datapath outdecoder" *)
  (* unused_bits = "2 3" *)
  wire [3:0] \datapathaftab.daru1.datapath.outdecoder ;
  (* hdlname = "datapathaftab daru1 datapath readaddr" *)
  wire [31:0] \datapathaftab.daru1.datapath.readaddr ;
  (* hdlname = "datapathaftab daru1 datapath readaddrout" *)
  wire [31:0] \datapathaftab.daru1.datapath.readaddrout ;
  (* hdlname = "datapathaftab daru1 datapath readaddrp" *)
  wire [31:0] \datapathaftab.daru1.datapath.readaddrp ;
  (* hdlname = "datapathaftab daru1 datapath reg0 clk" *)
  wire \datapathaftab.daru1.datapath.reg0.clk ;
  (* hdlname = "datapathaftab daru1 datapath reg0 inreg" *)
  wire [15:0] \datapathaftab.daru1.datapath.reg0.inreg ;
  (* hdlname = "datapathaftab daru1 datapath reg0 load" *)
  wire \datapathaftab.daru1.datapath.reg0.load ;
  (* hdlname = "datapathaftab daru1 datapath reg0 outreg" *)
  wire [15:0] \datapathaftab.daru1.datapath.reg0.outreg ;
  (* hdlname = "datapathaftab daru1 datapath reg0 rst" *)
  wire \datapathaftab.daru1.datapath.reg0.rst ;
  (* hdlname = "datapathaftab daru1 datapath reg0 zero" *)
  wire \datapathaftab.daru1.datapath.reg0.zero ;
  (* hdlname = "datapathaftab daru1 datapath reg1 clk" *)
  wire \datapathaftab.daru1.datapath.reg1.clk ;
  (* hdlname = "datapathaftab daru1 datapath reg1 inreg" *)
  wire [15:0] \datapathaftab.daru1.datapath.reg1.inreg ;
  (* hdlname = "datapathaftab daru1 datapath reg1 load" *)
  wire \datapathaftab.daru1.datapath.reg1.load ;
  (* hdlname = "datapathaftab daru1 datapath reg1 outreg" *)
  wire [15:0] \datapathaftab.daru1.datapath.reg1.outreg ;
  (* hdlname = "datapathaftab daru1 datapath reg1 rst" *)
  wire \datapathaftab.daru1.datapath.reg1.rst ;
  (* hdlname = "datapathaftab daru1 datapath reg1 zero" *)
  wire \datapathaftab.daru1.datapath.reg1.zero ;
  (* hdlname = "datapathaftab daru1 datapath rst" *)
  wire \datapathaftab.daru1.datapath.rst ;
  (* hdlname = "datapathaftab daru1 datapath select_incoming_data" *)
  wire \datapathaftab.daru1.datapath.select_incoming_data ;
  (* hdlname = "datapathaftab daru1 datapath sellden" *)
  wire \datapathaftab.daru1.datapath.sellden ;
  (* hdlname = "datapathaftab daru1 datapath zerocnt" *)
  wire \datapathaftab.daru1.datapath.zerocnt ;
  (* hdlname = "datapathaftab daru1 datapath zeronumbytes" *)
  wire \datapathaftab.daru1.datapath.zeronumbytes ;
  (* hdlname = "datapathaftab daru1 enableaddr" *)
  wire \datapathaftab.daru1.enableaddr ;
  (* hdlname = "datapathaftab daru1 enabledata" *)
  wire \datapathaftab.daru1.enabledata ;
  (* hdlname = "datapathaftab daru1 inccnt" *)
  wire \datapathaftab.daru1.inccnt ;
  (* hdlname = "datapathaftab daru1 initcnt" *)
  wire \datapathaftab.daru1.initcnt ;
  (* hdlname = "datapathaftab daru1 initreading" *)
  wire \datapathaftab.daru1.initreading ;
  (* hdlname = "datapathaftab daru1 instrmisalignedflag" *)
  wire \datapathaftab.daru1.instrmisalignedflag ;
  (* hdlname = "datapathaftab daru1 ldaddr" *)
  wire \datapathaftab.daru1.ldaddr ;
  (* hdlname = "datapathaftab daru1 ldnumbytes" *)
  wire \datapathaftab.daru1.ldnumbytes ;
  (* hdlname = "datapathaftab daru1 loadmisalignedflag" *)
  wire \datapathaftab.daru1.loadmisalignedflag ;
  (* hdlname = "datapathaftab daru1 memdata" *)
  wire [15:0] \datapathaftab.daru1.memdata ;
  (* hdlname = "datapathaftab daru1 memready" *)
  wire \datapathaftab.daru1.memready ;
  (* hdlname = "datapathaftab daru1 nbytes" *)
  wire [1:0] \datapathaftab.daru1.nbytes ;
  (* hdlname = "datapathaftab daru1 readaddrout" *)
  wire [31:0] \datapathaftab.daru1.readaddrout ;
  (* hdlname = "datapathaftab daru1 readmem" *)
  wire \datapathaftab.daru1.readmem ;
  (* hdlname = "datapathaftab daru1 rst" *)
  wire \datapathaftab.daru1.rst ;
  (* hdlname = "datapathaftab daru1 select_incoming_data" *)
  wire \datapathaftab.daru1.select_incoming_data ;
  (* hdlname = "datapathaftab daru1 sellden" *)
  wire \datapathaftab.daru1.sellden ;
  (* hdlname = "datapathaftab daru1 startdaru" *)
  wire \datapathaftab.daru1.startdaru ;
  (* hdlname = "datapathaftab daru1 sync_rst" *)
  wire \datapathaftab.daru1.sync_rst ;
  (* hdlname = "datapathaftab daru1 zerocnt" *)
  wire \datapathaftab.daru1.zerocnt ;
  (* hdlname = "datapathaftab daru1 zeronumbytes" *)
  wire \datapathaftab.daru1.zeronumbytes ;
  (* hdlname = "datapathaftab daru1_en" *)
  wire \datapathaftab.daru1_en ;
  (* hdlname = "datapathaftab daru1_en_def" *)
  wire \datapathaftab.daru1_en_def ;
  (* hdlname = "datapathaftab daru2 addrin" *)
  wire [31:0] \datapathaftab.daru2.addrin ;
  (* hdlname = "datapathaftab daru2 addrout" *)
  wire [31:0] \datapathaftab.daru2.addrout ;
  (* hdlname = "datapathaftab daru2 bytestoread" *)
  wire \datapathaftab.daru2.bytestoread ;
  (* hdlname = "datapathaftab daru2 checkmisaligneddaru" *)
  wire \datapathaftab.daru2.checkmisaligneddaru ;
  (* hdlname = "datapathaftab daru2 clk" *)
  wire \datapathaftab.daru2.clk ;
  (* hdlname = "datapathaftab daru2 cocnt" *)
  wire \datapathaftab.daru2.cocnt ;
  (* hdlname = "datapathaftab daru2 completedaru" *)
  wire \datapathaftab.daru2.completedaru ;
  (* hdlname = "datapathaftab daru2 controller clk" *)
  wire \datapathaftab.daru2.controller.clk ;
  (* hdlname = "datapathaftab daru2 controller cocnt" *)
  wire \datapathaftab.daru2.controller.cocnt ;
  (* hdlname = "datapathaftab daru2 controller completedaru" *)
  wire \datapathaftab.daru2.controller.completedaru ;
  (* hdlname = "datapathaftab daru2 controller datainstrbar" *)
  wire \datapathaftab.daru2.controller.datainstrbar ;
  (* hdlname = "datapathaftab daru2 controller enableaddr" *)
  wire \datapathaftab.daru2.controller.enableaddr ;
  (* hdlname = "datapathaftab daru2 controller enabledata" *)
  wire \datapathaftab.daru2.controller.enabledata ;
  (* hdlname = "datapathaftab daru2 controller inccnt" *)
  wire \datapathaftab.daru2.controller.inccnt ;
  (* hdlname = "datapathaftab daru2 controller initcnt" *)
  wire \datapathaftab.daru2.controller.initcnt ;
  (* hdlname = "datapathaftab daru2 controller initreading" *)
  wire \datapathaftab.daru2.controller.initreading ;
  (* hdlname = "datapathaftab daru2 controller ldaddr" *)
  wire \datapathaftab.daru2.controller.ldaddr ;
  (* hdlname = "datapathaftab daru2 controller ldnumbytes" *)
  wire \datapathaftab.daru2.controller.ldnumbytes ;
  (* hdlname = "datapathaftab daru2 controller memready" *)
  wire \datapathaftab.daru2.controller.memready ;
  (* hdlname = "datapathaftab daru2 controller nstate" *)
  wire [1:0] \datapathaftab.daru2.controller.nstate ;
  (* hdlname = "datapathaftab daru2 controller pstate" *)
  wire [1:0] \datapathaftab.daru2.controller.pstate ;
  (* hdlname = "datapathaftab daru2 controller readmem" *)
  wire \datapathaftab.daru2.controller.readmem ;
  (* hdlname = "datapathaftab daru2 controller rst" *)
  wire \datapathaftab.daru2.controller.rst ;
  (* hdlname = "datapathaftab daru2 controller select_incoming_data" *)
  wire \datapathaftab.daru2.controller.select_incoming_data ;
  (* hdlname = "datapathaftab daru2 controller sellden" *)
  wire \datapathaftab.daru2.controller.sellden ;
  (* hdlname = "datapathaftab daru2 controller startdaru" *)
  wire \datapathaftab.daru2.controller.startdaru ;
  (* hdlname = "datapathaftab daru2 controller sync_rst" *)
  wire \datapathaftab.daru2.controller.sync_rst ;
  (* hdlname = "datapathaftab daru2 controller zerocnt" *)
  wire \datapathaftab.daru2.controller.zerocnt ;
  (* hdlname = "datapathaftab daru2 controller zeronumbytes" *)
  wire \datapathaftab.daru2.controller.zeronumbytes ;
  (* hdlname = "datapathaftab daru2 datainstrbar" *)
  wire \datapathaftab.daru2.datainstrbar ;
  (* hdlname = "datapathaftab daru2 dataout" *)
  wire [31:0] \datapathaftab.daru2.dataout ;
  (* hdlname = "datapathaftab daru2 datapath adder a" *)
  wire [31:0] \datapathaftab.daru2.datapath.adder.a ;
  (* hdlname = "datapathaftab daru2 datapath adder b" *)
  wire [1:0] \datapathaftab.daru2.datapath.adder.b ;
  (* hdlname = "datapathaftab daru2 datapath adder cout" *)
  (* unused_bits = "31" *)
  wire [31:0] \datapathaftab.daru2.datapath.adder.cout ;
  (* hdlname = "datapathaftab daru2 datapath adder fa1 a" *)
  wire \datapathaftab.daru2.datapath.adder.fa1.a ;
  (* hdlname = "datapathaftab daru2 datapath adder fa1 b" *)
  wire \datapathaftab.daru2.datapath.adder.fa1.b ;
  (* hdlname = "datapathaftab daru2 datapath adder fa1 cin" *)
  wire \datapathaftab.daru2.datapath.adder.fa1.cin ;
  (* hdlname = "datapathaftab daru2 datapath adder fa1 cout" *)
  wire \datapathaftab.daru2.datapath.adder.fa1.cout ;
  (* hdlname = "datapathaftab daru2 datapath adder fa1 s" *)
  wire \datapathaftab.daru2.datapath.adder.fa1.s ;
  (* hdlname = "datapathaftab daru2 datapath adder fa2 a" *)
  wire \datapathaftab.daru2.datapath.adder.fa2.a ;
  (* hdlname = "datapathaftab daru2 datapath adder fa2 b" *)
  wire \datapathaftab.daru2.datapath.adder.fa2.b ;
  (* hdlname = "datapathaftab daru2 datapath adder fa2 cin" *)
  wire \datapathaftab.daru2.datapath.adder.fa2.cin ;
  (* hdlname = "datapathaftab daru2 datapath adder fa2 cout" *)
  wire \datapathaftab.daru2.datapath.adder.fa2.cout ;
  (* hdlname = "datapathaftab daru2 datapath adder fa2 s" *)
  wire \datapathaftab.daru2.datapath.adder.fa2.s ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:1.ha i_bit1" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:1.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:1.ha i_bit2" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:1.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:1.ha o_carry" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:1.ha.o_carry ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:1.ha o_sum" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:1.ha.o_sum ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:10.ha i_bit1" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:10.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:10.ha i_bit2" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:10.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:10.ha o_carry" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:10.ha.o_carry ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:10.ha o_sum" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:10.ha.o_sum ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:11.ha i_bit1" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:11.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:11.ha i_bit2" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:11.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:11.ha o_carry" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:11.ha.o_carry ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:11.ha o_sum" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:11.ha.o_sum ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:12.ha i_bit1" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:12.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:12.ha i_bit2" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:12.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:12.ha o_carry" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:12.ha.o_carry ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:12.ha o_sum" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:12.ha.o_sum ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:13.ha i_bit1" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:13.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:13.ha i_bit2" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:13.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:13.ha o_carry" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:13.ha.o_carry ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:13.ha o_sum" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:13.ha.o_sum ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:14.ha i_bit1" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:14.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:14.ha i_bit2" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:14.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:14.ha o_carry" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:14.ha.o_carry ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:14.ha o_sum" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:14.ha.o_sum ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:15.ha i_bit1" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:15.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:15.ha i_bit2" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:15.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:15.ha o_carry" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:15.ha.o_carry ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:15.ha o_sum" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:15.ha.o_sum ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:16.ha i_bit1" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:16.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:16.ha i_bit2" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:16.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:16.ha o_carry" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:16.ha.o_carry ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:16.ha o_sum" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:16.ha.o_sum ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:17.ha i_bit1" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:17.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:17.ha i_bit2" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:17.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:17.ha o_carry" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:17.ha.o_carry ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:17.ha o_sum" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:17.ha.o_sum ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:18.ha i_bit1" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:18.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:18.ha i_bit2" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:18.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:18.ha o_carry" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:18.ha.o_carry ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:18.ha o_sum" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:18.ha.o_sum ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:19.ha i_bit1" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:19.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:19.ha i_bit2" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:19.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:19.ha o_carry" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:19.ha.o_carry ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:19.ha o_sum" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:19.ha.o_sum ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:2.ha i_bit1" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:2.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:2.ha i_bit2" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:2.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:2.ha o_carry" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:2.ha.o_carry ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:2.ha o_sum" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:2.ha.o_sum ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:20.ha i_bit1" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:20.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:20.ha i_bit2" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:20.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:20.ha o_carry" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:20.ha.o_carry ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:20.ha o_sum" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:20.ha.o_sum ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:21.ha i_bit1" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:21.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:21.ha i_bit2" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:21.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:21.ha o_carry" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:21.ha.o_carry ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:21.ha o_sum" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:21.ha.o_sum ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:22.ha i_bit1" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:22.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:22.ha i_bit2" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:22.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:22.ha o_carry" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:22.ha.o_carry ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:22.ha o_sum" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:22.ha.o_sum ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:23.ha i_bit1" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:23.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:23.ha i_bit2" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:23.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:23.ha o_carry" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:23.ha.o_carry ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:23.ha o_sum" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:23.ha.o_sum ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:24.ha i_bit1" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:24.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:24.ha i_bit2" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:24.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:24.ha o_carry" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:24.ha.o_carry ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:24.ha o_sum" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:24.ha.o_sum ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:25.ha i_bit1" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:25.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:25.ha i_bit2" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:25.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:25.ha o_carry" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:25.ha.o_carry ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:25.ha o_sum" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:25.ha.o_sum ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:26.ha i_bit1" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:26.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:26.ha i_bit2" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:26.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:26.ha o_carry" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:26.ha.o_carry ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:26.ha o_sum" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:26.ha.o_sum ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:27.ha i_bit1" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:27.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:27.ha i_bit2" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:27.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:27.ha o_carry" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:27.ha.o_carry ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:27.ha o_sum" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:27.ha.o_sum ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:28.ha i_bit1" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:28.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:28.ha i_bit2" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:28.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:28.ha o_carry" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:28.ha.o_carry ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:28.ha o_sum" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:28.ha.o_sum ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:29.ha i_bit1" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:29.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:29.ha i_bit2" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:29.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:29.ha o_carry" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:29.ha.o_carry ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:29.ha o_sum" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:29.ha.o_sum ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:3.ha i_bit1" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:3.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:3.ha i_bit2" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:3.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:3.ha o_carry" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:3.ha.o_carry ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:3.ha o_sum" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:3.ha.o_sum ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:30.ha i_bit1" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:30.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:30.ha i_bit2" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:30.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:30.ha o_carry" *)
  (* unused_bits = "0" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:30.ha.o_carry ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:30.ha o_sum" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:30.ha.o_sum ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:4.ha i_bit1" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:4.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:4.ha i_bit2" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:4.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:4.ha o_carry" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:4.ha.o_carry ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:4.ha o_sum" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:4.ha.o_sum ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:5.ha i_bit1" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:5.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:5.ha i_bit2" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:5.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:5.ha o_carry" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:5.ha.o_carry ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:5.ha o_sum" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:5.ha.o_sum ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:6.ha i_bit1" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:6.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:6.ha i_bit2" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:6.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:6.ha o_carry" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:6.ha.o_carry ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:6.ha o_sum" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:6.ha.o_sum ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:7.ha i_bit1" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:7.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:7.ha i_bit2" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:7.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:7.ha o_carry" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:7.ha.o_carry ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:7.ha o_sum" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:7.ha.o_sum ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:8.ha i_bit1" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:8.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:8.ha i_bit2" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:8.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:8.ha o_carry" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:8.ha.o_carry ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:8.ha o_sum" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:8.ha.o_sum ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:9.ha i_bit1" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:9.ha.i_bit1 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:9.ha i_bit2" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:9.ha.i_bit2 ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:9.ha o_carry" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:9.ha.o_carry ;
  (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:9.ha o_sum" *)
  wire \datapathaftab.daru2.datapath.adder.gen_halfadder:9.ha.o_sum ;
  (* hdlname = "datapathaftab daru2 datapath adder sum" *)
  wire [31:0] \datapathaftab.daru2.datapath.adder.sum ;
  (* hdlname = "datapathaftab daru2 datapath addrin" *)
  wire [31:0] \datapathaftab.daru2.datapath.addrin ;
  (* hdlname = "datapathaftab daru2 datapath addrout" *)
  wire [31:0] \datapathaftab.daru2.datapath.addrout ;
  (* hdlname = "datapathaftab daru2 datapath addrreg clk" *)
  wire \datapathaftab.daru2.datapath.addrreg.clk ;
  (* hdlname = "datapathaftab daru2 datapath addrreg inreg" *)
  wire [31:0] \datapathaftab.daru2.datapath.addrreg.inreg ;
  (* hdlname = "datapathaftab daru2 datapath addrreg load" *)
  wire \datapathaftab.daru2.datapath.addrreg.load ;
  (* hdlname = "datapathaftab daru2 datapath addrreg outreg" *)
  wire [31:0] \datapathaftab.daru2.datapath.addrreg.outreg ;
  (* hdlname = "datapathaftab daru2 datapath addrreg rst" *)
  wire \datapathaftab.daru2.datapath.addrreg.rst ;
  (* hdlname = "datapathaftab daru2 datapath addrreg zero" *)
  wire \datapathaftab.daru2.datapath.addrreg.zero ;
  (* hdlname = "datapathaftab daru2 datapath bytecnt" *)
  wire [1:0] \datapathaftab.daru2.datapath.bytecnt ;
  (* hdlname = "datapathaftab daru2 datapath bytestoread" *)
  wire \datapathaftab.daru2.datapath.bytestoread ;
  (* hdlname = "datapathaftab daru2 datapath bytestoread_temp" *)
  wire \datapathaftab.daru2.datapath.bytestoread_temp ;
  (* hdlname = "datapathaftab daru2 datapath checkmisaligneddaru" *)
  wire \datapathaftab.daru2.datapath.checkmisaligneddaru ;
  (* hdlname = "datapathaftab daru2 datapath clk" *)
  wire \datapathaftab.daru2.datapath.clk ;
  (* hdlname = "datapathaftab daru2 datapath cocnt" *)
  wire \datapathaftab.daru2.datapath.cocnt ;
  (* hdlname = "datapathaftab daru2 datapath counter clk" *)
  wire \datapathaftab.daru2.datapath.counter.clk ;
  (* hdlname = "datapathaftab daru2 datapath counter cocnt" *)
  wire \datapathaftab.daru2.datapath.counter.cocnt ;
  (* hdlname = "datapathaftab daru2 datapath counter cocntp" *)
  wire \datapathaftab.daru2.datapath.counter.cocntp ;
  (* hdlname = "datapathaftab daru2 datapath counter inccnt" *)
  wire \datapathaftab.daru2.datapath.counter.inccnt ;
  (* hdlname = "datapathaftab daru2 datapath counter initcnt" *)
  wire \datapathaftab.daru2.datapath.counter.initcnt ;
  (* hdlname = "datapathaftab daru2 datapath counter initvalue" *)
  wire \datapathaftab.daru2.datapath.counter.initvalue ;
  (* hdlname = "datapathaftab daru2 datapath counter outcnt" *)
  wire \datapathaftab.daru2.datapath.counter.outcnt ;
  (* hdlname = "datapathaftab daru2 datapath counter rst" *)
  wire \datapathaftab.daru2.datapath.counter.rst ;
  (* hdlname = "datapathaftab daru2 datapath counter temp" *)
  wire \datapathaftab.daru2.datapath.counter.temp ;
  (* hdlname = "datapathaftab daru2 datapath counter zerocnt" *)
  wire \datapathaftab.daru2.datapath.counter.zerocnt ;
  (* hdlname = "datapathaftab daru2 datapath datain" *)
  wire [15:0] \datapathaftab.daru2.datapath.datain ;
  (* hdlname = "datapathaftab daru2 datapath datainstrbar" *)
  wire \datapathaftab.daru2.datapath.datainstrbar ;
  (* hdlname = "datapathaftab daru2 datapath dataout" *)
  wire [31:0] \datapathaftab.daru2.datapath.dataout ;
  (* hdlname = "datapathaftab daru2 datapath dataouthigh_reg" *)
  wire [15:0] \datapathaftab.daru2.datapath.dataouthigh_reg ;
  (* hdlname = "datapathaftab daru2 datapath decoder en" *)
  wire \datapathaftab.daru2.datapath.decoder.en ;
  (* hdlname = "datapathaftab daru2 datapath decoder indecoder" *)
  wire [1:0] \datapathaftab.daru2.datapath.decoder.indecoder ;
  (* hdlname = "datapathaftab daru2 datapath decoder outdecoder" *)
  (* unused_bits = "2 3" *)
  wire [3:0] \datapathaftab.daru2.datapath.decoder.outdecoder ;
  (* hdlname = "datapathaftab daru2 datapath enableaddr" *)
  wire \datapathaftab.daru2.datapath.enableaddr ;
  (* hdlname = "datapathaftab daru2 datapath enabledata" *)
  wire \datapathaftab.daru2.datapath.enabledata ;
  (* hdlname = "datapathaftab daru2 datapath errordecoder addrin" *)
  wire [1:0] \datapathaftab.daru2.datapath.errordecoder.addrin ;
  (* hdlname = "datapathaftab daru2 datapath errordecoder checkmisaligneddaru" *)
  wire \datapathaftab.daru2.datapath.errordecoder.checkmisaligneddaru ;
  (* hdlname = "datapathaftab daru2 datapath errordecoder datainstrbar" *)
  wire \datapathaftab.daru2.datapath.errordecoder.datainstrbar ;
  (* hdlname = "datapathaftab daru2 datapath errordecoder instrmisalignedflag" *)
  wire \datapathaftab.daru2.datapath.errordecoder.instrmisalignedflag ;
  (* hdlname = "datapathaftab daru2 datapath errordecoder loadmisalignedflag" *)
  wire \datapathaftab.daru2.datapath.errordecoder.loadmisalignedflag ;
  (* hdlname = "datapathaftab daru2 datapath errordecoder nbytes" *)
  wire [1:0] \datapathaftab.daru2.datapath.errordecoder.nbytes ;
  (* hdlname = "datapathaftab daru2 datapath inccnt" *)
  wire \datapathaftab.daru2.datapath.inccnt ;
  (* hdlname = "datapathaftab daru2 datapath initcnt" *)
  wire \datapathaftab.daru2.datapath.initcnt ;
  (* hdlname = "datapathaftab daru2 datapath initreading" *)
  wire \datapathaftab.daru2.datapath.initreading ;
  (* hdlname = "datapathaftab daru2 datapath initvaluecnt" *)
  wire [1:0] \datapathaftab.daru2.datapath.initvaluecnt ;
  (* hdlname = "datapathaftab daru2 datapath instrmisalignedflag" *)
  wire \datapathaftab.daru2.datapath.instrmisalignedflag ;
  (* hdlname = "datapathaftab daru2 datapath ldaddr" *)
  wire \datapathaftab.daru2.datapath.ldaddr ;
  (* hdlname = "datapathaftab daru2 datapath ldnumbytes" *)
  wire \datapathaftab.daru2.datapath.ldnumbytes ;
  (* hdlname = "datapathaftab daru2 datapath loadmisalignedflag" *)
  wire \datapathaftab.daru2.datapath.loadmisalignedflag ;
  (* hdlname = "datapathaftab daru2 datapath memdata" *)
  wire [15:0] \datapathaftab.daru2.datapath.memdata ;
  (* hdlname = "datapathaftab daru2 datapath nbytereg clk" *)
  wire \datapathaftab.daru2.datapath.nbytereg.clk ;
  (* hdlname = "datapathaftab daru2 datapath nbytereg inreg" *)
  wire [1:0] \datapathaftab.daru2.datapath.nbytereg.inreg ;
  (* hdlname = "datapathaftab daru2 datapath nbytereg load" *)
  wire \datapathaftab.daru2.datapath.nbytereg.load ;
  (* hdlname = "datapathaftab daru2 datapath nbytereg outreg" *)
  wire [1:0] \datapathaftab.daru2.datapath.nbytereg.outreg ;
  (* hdlname = "datapathaftab daru2 datapath nbytereg rst" *)
  wire \datapathaftab.daru2.datapath.nbytereg.rst ;
  (* hdlname = "datapathaftab daru2 datapath nbytereg zero" *)
  wire \datapathaftab.daru2.datapath.nbytereg.zero ;
  (* hdlname = "datapathaftab daru2 datapath nbytes" *)
  wire [1:0] \datapathaftab.daru2.datapath.nbytes ;
  (* hdlname = "datapathaftab daru2 datapath nbytesout" *)
  wire [1:0] \datapathaftab.daru2.datapath.nbytesout ;
  (* hdlname = "datapathaftab daru2 datapath outcnt" *)
  wire \datapathaftab.daru2.datapath.outcnt ;
  (* hdlname = "datapathaftab daru2 datapath outcnt_ext" *)
  wire [1:0] \datapathaftab.daru2.datapath.outcnt_ext ;
  (* hdlname = "datapathaftab daru2 datapath outdecoder" *)
  (* unused_bits = "2 3" *)
  wire [3:0] \datapathaftab.daru2.datapath.outdecoder ;
  (* hdlname = "datapathaftab daru2 datapath readaddr" *)
  wire [31:0] \datapathaftab.daru2.datapath.readaddr ;
  (* hdlname = "datapathaftab daru2 datapath readaddrout" *)
  wire [31:0] \datapathaftab.daru2.datapath.readaddrout ;
  (* hdlname = "datapathaftab daru2 datapath readaddrp" *)
  wire [31:0] \datapathaftab.daru2.datapath.readaddrp ;
  (* hdlname = "datapathaftab daru2 datapath reg0 clk" *)
  wire \datapathaftab.daru2.datapath.reg0.clk ;
  (* hdlname = "datapathaftab daru2 datapath reg0 inreg" *)
  wire [15:0] \datapathaftab.daru2.datapath.reg0.inreg ;
  (* hdlname = "datapathaftab daru2 datapath reg0 load" *)
  wire \datapathaftab.daru2.datapath.reg0.load ;
  (* hdlname = "datapathaftab daru2 datapath reg0 outreg" *)
  wire [15:0] \datapathaftab.daru2.datapath.reg0.outreg ;
  (* hdlname = "datapathaftab daru2 datapath reg0 rst" *)
  wire \datapathaftab.daru2.datapath.reg0.rst ;
  (* hdlname = "datapathaftab daru2 datapath reg0 zero" *)
  wire \datapathaftab.daru2.datapath.reg0.zero ;
  (* hdlname = "datapathaftab daru2 datapath reg1 clk" *)
  wire \datapathaftab.daru2.datapath.reg1.clk ;
  (* hdlname = "datapathaftab daru2 datapath reg1 inreg" *)
  wire [15:0] \datapathaftab.daru2.datapath.reg1.inreg ;
  (* hdlname = "datapathaftab daru2 datapath reg1 load" *)
  wire \datapathaftab.daru2.datapath.reg1.load ;
  (* hdlname = "datapathaftab daru2 datapath reg1 outreg" *)
  wire [15:0] \datapathaftab.daru2.datapath.reg1.outreg ;
  (* hdlname = "datapathaftab daru2 datapath reg1 rst" *)
  wire \datapathaftab.daru2.datapath.reg1.rst ;
  (* hdlname = "datapathaftab daru2 datapath reg1 zero" *)
  wire \datapathaftab.daru2.datapath.reg1.zero ;
  (* hdlname = "datapathaftab daru2 datapath rst" *)
  wire \datapathaftab.daru2.datapath.rst ;
  (* hdlname = "datapathaftab daru2 datapath select_incoming_data" *)
  wire \datapathaftab.daru2.datapath.select_incoming_data ;
  (* hdlname = "datapathaftab daru2 datapath sellden" *)
  wire \datapathaftab.daru2.datapath.sellden ;
  (* hdlname = "datapathaftab daru2 datapath zerocnt" *)
  wire \datapathaftab.daru2.datapath.zerocnt ;
  (* hdlname = "datapathaftab daru2 datapath zeronumbytes" *)
  wire \datapathaftab.daru2.datapath.zeronumbytes ;
  (* hdlname = "datapathaftab daru2 enableaddr" *)
  wire \datapathaftab.daru2.enableaddr ;
  (* hdlname = "datapathaftab daru2 enabledata" *)
  wire \datapathaftab.daru2.enabledata ;
  (* hdlname = "datapathaftab daru2 inccnt" *)
  wire \datapathaftab.daru2.inccnt ;
  (* hdlname = "datapathaftab daru2 initcnt" *)
  wire \datapathaftab.daru2.initcnt ;
  (* hdlname = "datapathaftab daru2 initreading" *)
  wire \datapathaftab.daru2.initreading ;
  (* hdlname = "datapathaftab daru2 instrmisalignedflag" *)
  wire \datapathaftab.daru2.instrmisalignedflag ;
  (* hdlname = "datapathaftab daru2 ldaddr" *)
  wire \datapathaftab.daru2.ldaddr ;
  (* hdlname = "datapathaftab daru2 ldnumbytes" *)
  wire \datapathaftab.daru2.ldnumbytes ;
  (* hdlname = "datapathaftab daru2 loadmisalignedflag" *)
  wire \datapathaftab.daru2.loadmisalignedflag ;
  (* hdlname = "datapathaftab daru2 memdata" *)
  wire [15:0] \datapathaftab.daru2.memdata ;
  (* hdlname = "datapathaftab daru2 memready" *)
  wire \datapathaftab.daru2.memready ;
  (* hdlname = "datapathaftab daru2 nbytes" *)
  wire [1:0] \datapathaftab.daru2.nbytes ;
  (* hdlname = "datapathaftab daru2 readaddrout" *)
  wire [31:0] \datapathaftab.daru2.readaddrout ;
  (* hdlname = "datapathaftab daru2 readmem" *)
  wire \datapathaftab.daru2.readmem ;
  (* hdlname = "datapathaftab daru2 rst" *)
  wire \datapathaftab.daru2.rst ;
  (* hdlname = "datapathaftab daru2 select_incoming_data" *)
  wire \datapathaftab.daru2.select_incoming_data ;
  (* hdlname = "datapathaftab daru2 sellden" *)
  wire \datapathaftab.daru2.sellden ;
  (* hdlname = "datapathaftab daru2 startdaru" *)
  wire \datapathaftab.daru2.startdaru ;
  (* hdlname = "datapathaftab daru2 sync_rst" *)
  wire \datapathaftab.daru2.sync_rst ;
  (* hdlname = "datapathaftab daru2 zerocnt" *)
  wire \datapathaftab.daru2.zerocnt ;
  (* hdlname = "datapathaftab daru2 zeronumbytes" *)
  wire \datapathaftab.daru2.zeronumbytes ;
  (* hdlname = "datapathaftab daru2_en" *)
  wire \datapathaftab.daru2_en ;
  (* hdlname = "datapathaftab datadaru1" *)
  wire [31:0] \datapathaftab.datadaru1 ;
  (* hdlname = "datapathaftab datadaru2" *)
  wire [31:0] \datapathaftab.datadaru2 ;
  (* hdlname = "datapathaftab datadawu" *)
  wire [15:0] \datapathaftab.datadawu ;
  (* hdlname = "datapathaftab dawu addrin" *)
  wire [31:0] \datapathaftab.dawu.addrin ;
  (* hdlname = "datapathaftab dawu addrout" *)
  wire [31:0] \datapathaftab.dawu.addrout ;
  (* hdlname = "datapathaftab dawu bytestowrite" *)
  wire \datapathaftab.dawu.bytestowrite ;
  (* hdlname = "datapathaftab dawu checkmisaligneddawu" *)
  wire \datapathaftab.dawu.checkmisaligneddawu ;
  (* hdlname = "datapathaftab dawu clk" *)
  wire \datapathaftab.dawu.clk ;
  (* hdlname = "datapathaftab dawu cocnt" *)
  wire \datapathaftab.dawu.cocnt ;
  (* hdlname = "datapathaftab dawu completedawu" *)
  wire \datapathaftab.dawu.completedawu ;
  (* hdlname = "datapathaftab dawu controller clk" *)
  wire \datapathaftab.dawu.controller.clk ;
  (* hdlname = "datapathaftab dawu controller cocnt" *)
  wire \datapathaftab.dawu.controller.cocnt ;
  (* hdlname = "datapathaftab dawu controller completedawu" *)
  wire \datapathaftab.dawu.controller.completedawu ;
  (* hdlname = "datapathaftab dawu controller enableaddr" *)
  wire \datapathaftab.dawu.controller.enableaddr ;
  (* hdlname = "datapathaftab dawu controller enabledata" *)
  wire \datapathaftab.dawu.controller.enabledata ;
  (* hdlname = "datapathaftab dawu controller inccnt" *)
  wire \datapathaftab.dawu.controller.inccnt ;
  (* hdlname = "datapathaftab dawu controller initcnt" *)
  wire \datapathaftab.dawu.controller.initcnt ;
  (* hdlname = "datapathaftab dawu controller ldaddr" *)
  wire \datapathaftab.dawu.controller.ldaddr ;
  (* hdlname = "datapathaftab dawu controller lddata" *)
  wire \datapathaftab.dawu.controller.lddata ;
  (* hdlname = "datapathaftab dawu controller ldnumbytes" *)
  wire \datapathaftab.dawu.controller.ldnumbytes ;
  (* hdlname = "datapathaftab dawu controller memready" *)
  wire \datapathaftab.dawu.controller.memready ;
  (* hdlname = "datapathaftab dawu controller nstate" *)
  wire \datapathaftab.dawu.controller.nstate ;
  (* hdlname = "datapathaftab dawu controller pstate" *)
  wire \datapathaftab.dawu.controller.pstate ;
  (* hdlname = "datapathaftab dawu controller rst" *)
  wire \datapathaftab.dawu.controller.rst ;
  (* hdlname = "datapathaftab dawu controller startdawu" *)
  wire \datapathaftab.dawu.controller.startdawu ;
  (* hdlname = "datapathaftab dawu controller sync_rst" *)
  wire \datapathaftab.dawu.controller.sync_rst ;
  (* hdlname = "datapathaftab dawu controller writemem" *)
  wire \datapathaftab.dawu.controller.writemem ;
  (* hdlname = "datapathaftab dawu controller zeroaddr" *)
  wire \datapathaftab.dawu.controller.zeroaddr ;
  (* hdlname = "datapathaftab dawu controller zerocnt" *)
  wire \datapathaftab.dawu.controller.zerocnt ;
  (* hdlname = "datapathaftab dawu controller zerodata" *)
  wire \datapathaftab.dawu.controller.zerodata ;
  (* hdlname = "datapathaftab dawu controller zeronumbytes" *)
  wire \datapathaftab.dawu.controller.zeronumbytes ;
  (* hdlname = "datapathaftab dawu datain" *)
  wire [31:0] \datapathaftab.dawu.datain ;
  (* hdlname = "datapathaftab dawu dataout" *)
  wire [15:0] \datapathaftab.dawu.dataout ;
  (* hdlname = "datapathaftab dawu datapath adder a" *)
  wire [31:0] \datapathaftab.dawu.datapath.adder.a ;
  (* hdlname = "datapathaftab dawu datapath adder b" *)
  wire [1:0] \datapathaftab.dawu.datapath.adder.b ;
  (* hdlname = "datapathaftab dawu datapath adder cout" *)
  (* unused_bits = "31" *)
  wire [31:0] \datapathaftab.dawu.datapath.adder.cout ;
  (* hdlname = "datapathaftab dawu datapath adder fa1 a" *)
  wire \datapathaftab.dawu.datapath.adder.fa1.a ;
  (* hdlname = "datapathaftab dawu datapath adder fa1 b" *)
  wire \datapathaftab.dawu.datapath.adder.fa1.b ;
  (* hdlname = "datapathaftab dawu datapath adder fa1 cin" *)
  wire \datapathaftab.dawu.datapath.adder.fa1.cin ;
  (* hdlname = "datapathaftab dawu datapath adder fa1 cout" *)
  wire \datapathaftab.dawu.datapath.adder.fa1.cout ;
  (* hdlname = "datapathaftab dawu datapath adder fa1 s" *)
  wire \datapathaftab.dawu.datapath.adder.fa1.s ;
  (* hdlname = "datapathaftab dawu datapath adder fa2 a" *)
  wire \datapathaftab.dawu.datapath.adder.fa2.a ;
  (* hdlname = "datapathaftab dawu datapath adder fa2 b" *)
  wire \datapathaftab.dawu.datapath.adder.fa2.b ;
  (* hdlname = "datapathaftab dawu datapath adder fa2 cin" *)
  wire \datapathaftab.dawu.datapath.adder.fa2.cin ;
  (* hdlname = "datapathaftab dawu datapath adder fa2 cout" *)
  wire \datapathaftab.dawu.datapath.adder.fa2.cout ;
  (* hdlname = "datapathaftab dawu datapath adder fa2 s" *)
  wire \datapathaftab.dawu.datapath.adder.fa2.s ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:1.ha i_bit1" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:1.ha.i_bit1 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:1.ha i_bit2" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:1.ha.i_bit2 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:1.ha o_carry" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:1.ha.o_carry ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:1.ha o_sum" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:1.ha.o_sum ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:10.ha i_bit1" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:10.ha.i_bit1 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:10.ha i_bit2" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:10.ha.i_bit2 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:10.ha o_carry" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:10.ha.o_carry ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:10.ha o_sum" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:10.ha.o_sum ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:11.ha i_bit1" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:11.ha.i_bit1 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:11.ha i_bit2" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:11.ha.i_bit2 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:11.ha o_carry" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:11.ha.o_carry ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:11.ha o_sum" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:11.ha.o_sum ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:12.ha i_bit1" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:12.ha.i_bit1 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:12.ha i_bit2" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:12.ha.i_bit2 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:12.ha o_carry" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:12.ha.o_carry ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:12.ha o_sum" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:12.ha.o_sum ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:13.ha i_bit1" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:13.ha.i_bit1 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:13.ha i_bit2" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:13.ha.i_bit2 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:13.ha o_carry" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:13.ha.o_carry ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:13.ha o_sum" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:13.ha.o_sum ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:14.ha i_bit1" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:14.ha.i_bit1 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:14.ha i_bit2" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:14.ha.i_bit2 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:14.ha o_carry" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:14.ha.o_carry ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:14.ha o_sum" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:14.ha.o_sum ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:15.ha i_bit1" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:15.ha.i_bit1 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:15.ha i_bit2" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:15.ha.i_bit2 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:15.ha o_carry" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:15.ha.o_carry ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:15.ha o_sum" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:15.ha.o_sum ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:16.ha i_bit1" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:16.ha.i_bit1 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:16.ha i_bit2" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:16.ha.i_bit2 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:16.ha o_carry" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:16.ha.o_carry ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:16.ha o_sum" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:16.ha.o_sum ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:17.ha i_bit1" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:17.ha.i_bit1 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:17.ha i_bit2" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:17.ha.i_bit2 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:17.ha o_carry" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:17.ha.o_carry ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:17.ha o_sum" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:17.ha.o_sum ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:18.ha i_bit1" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:18.ha.i_bit1 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:18.ha i_bit2" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:18.ha.i_bit2 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:18.ha o_carry" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:18.ha.o_carry ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:18.ha o_sum" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:18.ha.o_sum ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:19.ha i_bit1" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:19.ha.i_bit1 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:19.ha i_bit2" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:19.ha.i_bit2 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:19.ha o_carry" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:19.ha.o_carry ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:19.ha o_sum" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:19.ha.o_sum ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:2.ha i_bit1" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:2.ha.i_bit1 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:2.ha i_bit2" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:2.ha.i_bit2 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:2.ha o_carry" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:2.ha.o_carry ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:2.ha o_sum" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:2.ha.o_sum ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:20.ha i_bit1" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:20.ha.i_bit1 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:20.ha i_bit2" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:20.ha.i_bit2 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:20.ha o_carry" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:20.ha.o_carry ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:20.ha o_sum" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:20.ha.o_sum ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:21.ha i_bit1" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:21.ha.i_bit1 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:21.ha i_bit2" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:21.ha.i_bit2 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:21.ha o_carry" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:21.ha.o_carry ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:21.ha o_sum" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:21.ha.o_sum ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:22.ha i_bit1" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:22.ha.i_bit1 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:22.ha i_bit2" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:22.ha.i_bit2 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:22.ha o_carry" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:22.ha.o_carry ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:22.ha o_sum" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:22.ha.o_sum ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:23.ha i_bit1" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:23.ha.i_bit1 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:23.ha i_bit2" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:23.ha.i_bit2 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:23.ha o_carry" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:23.ha.o_carry ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:23.ha o_sum" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:23.ha.o_sum ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:24.ha i_bit1" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:24.ha.i_bit1 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:24.ha i_bit2" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:24.ha.i_bit2 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:24.ha o_carry" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:24.ha.o_carry ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:24.ha o_sum" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:24.ha.o_sum ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:25.ha i_bit1" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:25.ha.i_bit1 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:25.ha i_bit2" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:25.ha.i_bit2 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:25.ha o_carry" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:25.ha.o_carry ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:25.ha o_sum" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:25.ha.o_sum ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:26.ha i_bit1" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:26.ha.i_bit1 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:26.ha i_bit2" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:26.ha.i_bit2 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:26.ha o_carry" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:26.ha.o_carry ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:26.ha o_sum" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:26.ha.o_sum ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:27.ha i_bit1" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:27.ha.i_bit1 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:27.ha i_bit2" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:27.ha.i_bit2 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:27.ha o_carry" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:27.ha.o_carry ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:27.ha o_sum" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:27.ha.o_sum ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:28.ha i_bit1" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:28.ha.i_bit1 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:28.ha i_bit2" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:28.ha.i_bit2 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:28.ha o_carry" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:28.ha.o_carry ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:28.ha o_sum" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:28.ha.o_sum ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:29.ha i_bit1" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:29.ha.i_bit1 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:29.ha i_bit2" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:29.ha.i_bit2 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:29.ha o_carry" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:29.ha.o_carry ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:29.ha o_sum" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:29.ha.o_sum ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:3.ha i_bit1" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:3.ha.i_bit1 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:3.ha i_bit2" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:3.ha.i_bit2 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:3.ha o_carry" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:3.ha.o_carry ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:3.ha o_sum" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:3.ha.o_sum ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:30.ha i_bit1" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:30.ha.i_bit1 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:30.ha i_bit2" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:30.ha.i_bit2 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:30.ha o_carry" *)
  (* unused_bits = "0" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:30.ha.o_carry ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:30.ha o_sum" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:30.ha.o_sum ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:4.ha i_bit1" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:4.ha.i_bit1 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:4.ha i_bit2" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:4.ha.i_bit2 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:4.ha o_carry" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:4.ha.o_carry ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:4.ha o_sum" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:4.ha.o_sum ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:5.ha i_bit1" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:5.ha.i_bit1 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:5.ha i_bit2" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:5.ha.i_bit2 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:5.ha o_carry" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:5.ha.o_carry ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:5.ha o_sum" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:5.ha.o_sum ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:6.ha i_bit1" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:6.ha.i_bit1 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:6.ha i_bit2" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:6.ha.i_bit2 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:6.ha o_carry" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:6.ha.o_carry ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:6.ha o_sum" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:6.ha.o_sum ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:7.ha i_bit1" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:7.ha.i_bit1 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:7.ha i_bit2" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:7.ha.i_bit2 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:7.ha o_carry" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:7.ha.o_carry ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:7.ha o_sum" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:7.ha.o_sum ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:8.ha i_bit1" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:8.ha.i_bit1 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:8.ha i_bit2" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:8.ha.i_bit2 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:8.ha o_carry" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:8.ha.o_carry ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:8.ha o_sum" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:8.ha.o_sum ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:9.ha i_bit1" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:9.ha.i_bit1 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:9.ha i_bit2" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:9.ha.i_bit2 ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:9.ha o_carry" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:9.ha.o_carry ;
  (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:9.ha o_sum" *)
  wire \datapathaftab.dawu.datapath.adder.gen_halfadder:9.ha.o_sum ;
  (* hdlname = "datapathaftab dawu datapath adder sum" *)
  wire [31:0] \datapathaftab.dawu.datapath.adder.sum ;
  (* hdlname = "datapathaftab dawu datapath addrin" *)
  wire [31:0] \datapathaftab.dawu.datapath.addrin ;
  (* hdlname = "datapathaftab dawu datapath addrout" *)
  wire [31:0] \datapathaftab.dawu.datapath.addrout ;
  (* hdlname = "datapathaftab dawu datapath addroutreg" *)
  wire [31:0] \datapathaftab.dawu.datapath.addroutreg ;
  (* hdlname = "datapathaftab dawu datapath addrreg clk" *)
  wire \datapathaftab.dawu.datapath.addrreg.clk ;
  (* hdlname = "datapathaftab dawu datapath addrreg inreg" *)
  wire [31:0] \datapathaftab.dawu.datapath.addrreg.inreg ;
  (* hdlname = "datapathaftab dawu datapath addrreg load" *)
  wire \datapathaftab.dawu.datapath.addrreg.load ;
  (* hdlname = "datapathaftab dawu datapath addrreg outreg" *)
  wire [31:0] \datapathaftab.dawu.datapath.addrreg.outreg ;
  (* hdlname = "datapathaftab dawu datapath addrreg rst" *)
  wire \datapathaftab.dawu.datapath.addrreg.rst ;
  (* hdlname = "datapathaftab dawu datapath addrreg zero" *)
  wire \datapathaftab.dawu.datapath.addrreg.zero ;
  (* hdlname = "datapathaftab dawu datapath bytecnt" *)
  wire [1:0] \datapathaftab.dawu.datapath.bytecnt ;
  (* hdlname = "datapathaftab dawu datapath bytestowrite" *)
  wire \datapathaftab.dawu.datapath.bytestowrite ;
  (* hdlname = "datapathaftab dawu datapath bytestowrite_temp" *)
  wire \datapathaftab.dawu.datapath.bytestowrite_temp ;
  (* hdlname = "datapathaftab dawu datapath checkmisaligneddawu" *)
  wire \datapathaftab.dawu.datapath.checkmisaligneddawu ;
  (* hdlname = "datapathaftab dawu datapath clk" *)
  wire \datapathaftab.dawu.datapath.clk ;
  (* hdlname = "datapathaftab dawu datapath cocnt" *)
  wire \datapathaftab.dawu.datapath.cocnt ;
  (* hdlname = "datapathaftab dawu datapath counter clk" *)
  wire \datapathaftab.dawu.datapath.counter.clk ;
  (* hdlname = "datapathaftab dawu datapath counter cocnt" *)
  wire \datapathaftab.dawu.datapath.counter.cocnt ;
  (* hdlname = "datapathaftab dawu datapath counter cocntp" *)
  wire \datapathaftab.dawu.datapath.counter.cocntp ;
  (* hdlname = "datapathaftab dawu datapath counter inccnt" *)
  wire \datapathaftab.dawu.datapath.counter.inccnt ;
  (* hdlname = "datapathaftab dawu datapath counter initcnt" *)
  wire \datapathaftab.dawu.datapath.counter.initcnt ;
  (* hdlname = "datapathaftab dawu datapath counter initvalue" *)
  wire \datapathaftab.dawu.datapath.counter.initvalue ;
  (* hdlname = "datapathaftab dawu datapath counter outcnt" *)
  wire \datapathaftab.dawu.datapath.counter.outcnt ;
  (* hdlname = "datapathaftab dawu datapath counter rst" *)
  wire \datapathaftab.dawu.datapath.counter.rst ;
  (* hdlname = "datapathaftab dawu datapath counter temp" *)
  wire \datapathaftab.dawu.datapath.counter.temp ;
  (* hdlname = "datapathaftab dawu datapath counter zerocnt" *)
  wire \datapathaftab.dawu.datapath.counter.zerocnt ;
  (* hdlname = "datapathaftab dawu datapath datain" *)
  wire [31:0] \datapathaftab.dawu.datapath.datain ;
  (* hdlname = "datapathaftab dawu datapath dataout" *)
  wire [15:0] \datapathaftab.dawu.datapath.dataout ;
  (* hdlname = "datapathaftab dawu datapath enableaddr" *)
  wire \datapathaftab.dawu.datapath.enableaddr ;
  (* hdlname = "datapathaftab dawu datapath enabledata" *)
  wire \datapathaftab.dawu.datapath.enabledata ;
  (* hdlname = "datapathaftab dawu datapath errordecoder addrin" *)
  wire [1:0] \datapathaftab.dawu.datapath.errordecoder.addrin ;
  (* hdlname = "datapathaftab dawu datapath errordecoder checkmisaligneddawu" *)
  wire \datapathaftab.dawu.datapath.errordecoder.checkmisaligneddawu ;
  (* hdlname = "datapathaftab dawu datapath errordecoder nbytes" *)
  wire [1:0] \datapathaftab.dawu.datapath.errordecoder.nbytes ;
  (* hdlname = "datapathaftab dawu datapath inccnt" *)
  wire \datapathaftab.dawu.datapath.inccnt ;
  (* hdlname = "datapathaftab dawu datapath initcnt" *)
  wire \datapathaftab.dawu.datapath.initcnt ;
  (* hdlname = "datapathaftab dawu datapath initvaluecnt" *)
  wire [1:0] \datapathaftab.dawu.datapath.initvaluecnt ;
  (* hdlname = "datapathaftab dawu datapath ldaddr" *)
  wire \datapathaftab.dawu.datapath.ldaddr ;
  (* hdlname = "datapathaftab dawu datapath lddata" *)
  wire \datapathaftab.dawu.datapath.lddata ;
  (* hdlname = "datapathaftab dawu datapath ldnumbytes" *)
  wire \datapathaftab.dawu.datapath.ldnumbytes ;
  (* hdlname = "datapathaftab dawu datapath muxout" *)
  wire [15:0] \datapathaftab.dawu.datapath.muxout ;
  (* hdlname = "datapathaftab dawu datapath nbytesin" *)
  wire [1:0] \datapathaftab.dawu.datapath.nbytesin ;
  (* hdlname = "datapathaftab dawu datapath nbytesout" *)
  wire [1:0] \datapathaftab.dawu.datapath.nbytesout ;
  (* hdlname = "datapathaftab dawu datapath nbytesreg clk" *)
  wire \datapathaftab.dawu.datapath.nbytesreg.clk ;
  (* hdlname = "datapathaftab dawu datapath nbytesreg inreg" *)
  wire [1:0] \datapathaftab.dawu.datapath.nbytesreg.inreg ;
  (* hdlname = "datapathaftab dawu datapath nbytesreg load" *)
  wire \datapathaftab.dawu.datapath.nbytesreg.load ;
  (* hdlname = "datapathaftab dawu datapath nbytesreg outreg" *)
  wire [1:0] \datapathaftab.dawu.datapath.nbytesreg.outreg ;
  (* hdlname = "datapathaftab dawu datapath nbytesreg rst" *)
  wire \datapathaftab.dawu.datapath.nbytesreg.rst ;
  (* hdlname = "datapathaftab dawu datapath nbytesreg zero" *)
  wire \datapathaftab.dawu.datapath.nbytesreg.zero ;
  (* hdlname = "datapathaftab dawu datapath outcnt" *)
  wire \datapathaftab.dawu.datapath.outcnt ;
  (* hdlname = "datapathaftab dawu datapath outreg0" *)
  wire [15:0] \datapathaftab.dawu.datapath.outreg0 ;
  (* hdlname = "datapathaftab dawu datapath outreg1" *)
  wire [15:0] \datapathaftab.dawu.datapath.outreg1 ;
  (* hdlname = "datapathaftab dawu datapath reg0 clk" *)
  wire \datapathaftab.dawu.datapath.reg0.clk ;
  (* hdlname = "datapathaftab dawu datapath reg0 inreg" *)
  wire [15:0] \datapathaftab.dawu.datapath.reg0.inreg ;
  (* hdlname = "datapathaftab dawu datapath reg0 load" *)
  wire \datapathaftab.dawu.datapath.reg0.load ;
  (* hdlname = "datapathaftab dawu datapath reg0 outreg" *)
  wire [15:0] \datapathaftab.dawu.datapath.reg0.outreg ;
  (* hdlname = "datapathaftab dawu datapath reg0 rst" *)
  wire \datapathaftab.dawu.datapath.reg0.rst ;
  (* hdlname = "datapathaftab dawu datapath reg0 zero" *)
  wire \datapathaftab.dawu.datapath.reg0.zero ;
  (* hdlname = "datapathaftab dawu datapath reg1 clk" *)
  wire \datapathaftab.dawu.datapath.reg1.clk ;
  (* hdlname = "datapathaftab dawu datapath reg1 inreg" *)
  wire [15:0] \datapathaftab.dawu.datapath.reg1.inreg ;
  (* hdlname = "datapathaftab dawu datapath reg1 load" *)
  wire \datapathaftab.dawu.datapath.reg1.load ;
  (* hdlname = "datapathaftab dawu datapath reg1 outreg" *)
  wire [15:0] \datapathaftab.dawu.datapath.reg1.outreg ;
  (* hdlname = "datapathaftab dawu datapath reg1 rst" *)
  wire \datapathaftab.dawu.datapath.reg1.rst ;
  (* hdlname = "datapathaftab dawu datapath reg1 zero" *)
  wire \datapathaftab.dawu.datapath.reg1.zero ;
  (* hdlname = "datapathaftab dawu datapath rst" *)
  wire \datapathaftab.dawu.datapath.rst ;
  (* hdlname = "datapathaftab dawu datapath totalbytecnt" *)
  wire \datapathaftab.dawu.datapath.totalbytecnt ;
  (* hdlname = "datapathaftab dawu datapath writeaddr" *)
  wire [31:0] \datapathaftab.dawu.datapath.writeaddr ;
  (* hdlname = "datapathaftab dawu datapath zeroaddr" *)
  wire \datapathaftab.dawu.datapath.zeroaddr ;
  (* hdlname = "datapathaftab dawu datapath zerocnt" *)
  wire \datapathaftab.dawu.datapath.zerocnt ;
  (* hdlname = "datapathaftab dawu datapath zerodata" *)
  wire \datapathaftab.dawu.datapath.zerodata ;
  (* hdlname = "datapathaftab dawu datapath zeronumbytes" *)
  wire \datapathaftab.dawu.datapath.zeronumbytes ;
  (* hdlname = "datapathaftab dawu enableaddr" *)
  wire \datapathaftab.dawu.enableaddr ;
  (* hdlname = "datapathaftab dawu enabledata" *)
  wire \datapathaftab.dawu.enabledata ;
  (* hdlname = "datapathaftab dawu inccnt" *)
  wire \datapathaftab.dawu.inccnt ;
  (* hdlname = "datapathaftab dawu initcnt" *)
  wire \datapathaftab.dawu.initcnt ;
  (* hdlname = "datapathaftab dawu ldaddr" *)
  wire \datapathaftab.dawu.ldaddr ;
  (* hdlname = "datapathaftab dawu lddata" *)
  wire \datapathaftab.dawu.lddata ;
  (* hdlname = "datapathaftab dawu ldnumbytes" *)
  wire \datapathaftab.dawu.ldnumbytes ;
  (* hdlname = "datapathaftab dawu memready" *)
  wire \datapathaftab.dawu.memready ;
  (* hdlname = "datapathaftab dawu nbytes" *)
  wire [1:0] \datapathaftab.dawu.nbytes ;
  (* hdlname = "datapathaftab dawu rst" *)
  wire \datapathaftab.dawu.rst ;
  (* hdlname = "datapathaftab dawu startdawu" *)
  wire \datapathaftab.dawu.startdawu ;
  (* hdlname = "datapathaftab dawu sync_rst" *)
  wire \datapathaftab.dawu.sync_rst ;
  (* hdlname = "datapathaftab dawu writemem" *)
  wire \datapathaftab.dawu.writemem ;
  (* hdlname = "datapathaftab dawu zeroaddr" *)
  wire \datapathaftab.dawu.zeroaddr ;
  (* hdlname = "datapathaftab dawu zerocnt" *)
  wire \datapathaftab.dawu.zerocnt ;
  (* hdlname = "datapathaftab dawu zerodata" *)
  wire \datapathaftab.dawu.zerodata ;
  (* hdlname = "datapathaftab dawu zeronumbytes" *)
  wire \datapathaftab.dawu.zeronumbytes ;
  (* hdlname = "datapathaftab dawu_en" *)
  wire \datapathaftab.dawu_en ;
  (* hdlname = "datapathaftab dec_valid" *)
  wire \datapathaftab.dec_valid ;
  (* hdlname = "datapathaftab delegationmode" *)
  wire [1:0] \datapathaftab.delegationmode ;
  (* hdlname = "datapathaftab dividedbyzeroflag" *)
  wire \datapathaftab.dividedbyzeroflag ;
  (* hdlname = "datapathaftab dncntcsr" *)
  wire \datapathaftab.dncntcsr ;
  (* hdlname = "datapathaftab e2m_alu_res_curr" *)
  wire [31:0] \datapathaftab.e2m_alu_res_curr ;
  (* hdlname = "datapathaftab e2m_alu_res_next" *)
  wire [31:0] \datapathaftab.e2m_alu_res_next ;
  (* hdlname = "datapathaftab e2m_ctrl_word_curr" *)
  wire [63:0] \datapathaftab.e2m_ctrl_word_curr ;
  (* hdlname = "datapathaftab e2m_divided_by_zero_flag_curr" *)
  wire \datapathaftab.e2m_divided_by_zero_flag_curr ;
  (* hdlname = "datapathaftab e2m_ecall_flag_curr" *)
  wire \datapathaftab.e2m_ecall_flag_curr ;
  (* hdlname = "datapathaftab e2m_en" *)
  wire \datapathaftab.e2m_en ;
  (* hdlname = "datapathaftab e2m_en_def" *)
  wire \datapathaftab.e2m_en_def ;
  (* hdlname = "datapathaftab e2m_eq_curr" *)
  wire \datapathaftab.e2m_eq_curr ;
  (* hdlname = "datapathaftab e2m_eq_next" *)
  wire \datapathaftab.e2m_eq_next ;
  (* hdlname = "datapathaftab e2m_ex_flag_curr" *)
  wire \datapathaftab.e2m_ex_flag_curr ;
  (* hdlname = "datapathaftab e2m_ex_flag_next" *)
  wire \datapathaftab.e2m_ex_flag_next ;
  (* hdlname = "datapathaftab e2m_gt_curr" *)
  wire \datapathaftab.e2m_gt_curr ;
  (* hdlname = "datapathaftab e2m_gt_next" *)
  wire \datapathaftab.e2m_gt_next ;
  (* hdlname = "datapathaftab e2m_hazard_flag_curr" *)
  wire \datapathaftab.e2m_hazard_flag_curr ;
  (* hdlname = "datapathaftab e2m_hazard_flag_next" *)
  wire \datapathaftab.e2m_hazard_flag_next ;
  (* hdlname = "datapathaftab e2m_illegal_instruction_flag_curr" *)
  wire \datapathaftab.e2m_illegal_instruction_flag_curr ;
  (* hdlname = "datapathaftab e2m_inst_type_curr" *)
  wire [2:0] \datapathaftab.e2m_inst_type_curr ;
  (* hdlname = "datapathaftab e2m_instr_curr" *)
  wire [31:0] \datapathaftab.e2m_instr_curr ;
  (* hdlname = "datapathaftab e2m_instr_misaligned_flag_curr" *)
  wire \datapathaftab.e2m_instr_misaligned_flag_curr ;
  (* hdlname = "datapathaftab e2m_lt_curr" *)
  wire \datapathaftab.e2m_lt_curr ;
  (* hdlname = "datapathaftab e2m_lt_next" *)
  wire \datapathaftab.e2m_lt_next ;
  (* hdlname = "datapathaftab e2m_op1_curr" *)
  wire [31:0] \datapathaftab.e2m_op1_curr ;
  (* hdlname = "datapathaftab e2m_op2_curr" *)
  wire [31:0] \datapathaftab.e2m_op2_curr ;
  (* hdlname = "datapathaftab e2m_outcsr_curr" *)
  wire [31:0] \datapathaftab.e2m_outcsr_curr ;
  (* hdlname = "datapathaftab e2m_pc_curr" *)
  wire [31:0] \datapathaftab.e2m_pc_curr ;
  (* hdlname = "datapathaftab e2m_pc_plus4_curr" *)
  wire [31:0] \datapathaftab.e2m_pc_plus4_curr ;
  (* hdlname = "datapathaftab e2m_rst" *)
  wire \datapathaftab.e2m_rst ;
  (* hdlname = "datapathaftab e2m_rst_def" *)
  wire \datapathaftab.e2m_rst_def ;
  (* hdlname = "datapathaftab e2m_valid_curr" *)
  wire \datapathaftab.e2m_valid_curr ;
  (* hdlname = "datapathaftab e2m_validaccesscsr_curr" *)
  wire \datapathaftab.e2m_validaccesscsr_curr ;
  (* hdlname = "datapathaftab e_addsubbar" *)
  wire \datapathaftab.e_addsubbar ;
  (* hdlname = "datapathaftab e_cmp_selaluop2" *)
  wire \datapathaftab.e_cmp_selaluop2 ;
  (* hdlname = "datapathaftab e_cmp_selop2" *)
  wire \datapathaftab.e_cmp_selop2 ;
  (* hdlname = "datapathaftab e_comparedsignedunsignedbar" *)
  wire \datapathaftab.e_comparedsignedunsignedbar ;
  (* hdlname = "datapathaftab e_pass" *)
  wire \datapathaftab.e_pass ;
  (* hdlname = "datapathaftab e_selaah" *)
  wire \datapathaftab.e_selaah ;
  (* hdlname = "datapathaftab e_selaal" *)
  wire \datapathaftab.e_selaal ;
  (* hdlname = "datapathaftab e_selaau" *)
  wire \datapathaftab.e_selaau ;
  (* hdlname = "datapathaftab e_selasu" *)
  wire \datapathaftab.e_selasu ;
  (* hdlname = "datapathaftab e_selbsu" *)
  wire \datapathaftab.e_selbsu ;
  (* hdlname = "datapathaftab e_selcsr" *)
  wire \datapathaftab.e_selcsr ;
  (* hdlname = "datapathaftab e_selllu" *)
  wire \datapathaftab.e_selllu ;
  (* hdlname = "datapathaftab e_sellogic" *)
  wire [1:0] \datapathaftab.e_sellogic ;
  (* hdlname = "datapathaftab e_selshift" *)
  wire [1:0] \datapathaftab.e_selshift ;
  (* hdlname = "datapathaftab e_signedsigned" *)
  wire \datapathaftab.e_signedsigned ;
  (* hdlname = "datapathaftab e_signedunsigned" *)
  wire \datapathaftab.e_signedunsigned ;
  (* hdlname = "datapathaftab e_startdivideaau" *)
  wire \datapathaftab.e_startdivideaau ;
  (* hdlname = "datapathaftab e_startmultiplyaau" *)
  wire \datapathaftab.e_startmultiplyaau ;
  (* hdlname = "datapathaftab e_unsignedunsigned" *)
  wire \datapathaftab.e_unsignedunsigned ;
  (* hdlname = "datapathaftab ecallflag" *)
  wire \datapathaftab.ecallflag ;
  (* hdlname = "datapathaftab eh_state_curr" *)
  wire [1:0] \datapathaftab.eh_state_curr ;
  (* hdlname = "datapathaftab eh_state_next" *)
  wire [1:0] \datapathaftab.eh_state_next ;
  (* hdlname = "datapathaftab ex_valid" *)
  wire \datapathaftab.ex_valid ;
  (* hdlname = "datapathaftab exceptionraise" *)
  wire \datapathaftab.exceptionraise ;
  (* hdlname = "datapathaftab exceptionraise_int" *)
  wire \datapathaftab.exceptionraise_int ;
  (* hdlname = "datapathaftab exceptionraisetemp" *)
  wire \datapathaftab.exceptionraisetemp ;
  (* hdlname = "datapathaftab f2gi_pc_plus4_curr" *)
  wire [31:0] \datapathaftab.f2gi_pc_plus4_curr ;
  (* hdlname = "datapathaftab f2gi_pc_plus4_next" *)
  wire [31:0] \datapathaftab.f2gi_pc_plus4_next ;
  (* hdlname = "datapathaftab forced_rb_read" *)
  wire \datapathaftab.forced_rb_read ;
  (* hdlname = "datapathaftab gi2d_en" *)
  wire \datapathaftab.gi2d_en ;
  (* hdlname = "datapathaftab gi2d_en_def" *)
  wire \datapathaftab.gi2d_en_def ;
  (* hdlname = "datapathaftab gi2d_ex_flag_curr" *)
  wire \datapathaftab.gi2d_ex_flag_curr ;
  (* hdlname = "datapathaftab gi2d_ex_flag_next" *)
  wire \datapathaftab.gi2d_ex_flag_next ;
  (* hdlname = "datapathaftab gi2d_instr_curr" *)
  wire [31:0] \datapathaftab.gi2d_instr_curr ;
  (* hdlname = "datapathaftab gi2d_instr_misaligned_flag_curr" *)
  wire \datapathaftab.gi2d_instr_misaligned_flag_curr ;
  (* hdlname = "datapathaftab gi2d_instr_next" *)
  wire [31:0] \datapathaftab.gi2d_instr_next ;
  (* hdlname = "datapathaftab gi2d_pc_curr" *)
  wire [31:0] \datapathaftab.gi2d_pc_curr ;
  (* hdlname = "datapathaftab gi2d_pc_next" *)
  wire [31:0] \datapathaftab.gi2d_pc_next ;
  (* hdlname = "datapathaftab gi2d_pc_plus4_curr" *)
  wire [31:0] \datapathaftab.gi2d_pc_plus4_curr ;
  (* hdlname = "datapathaftab gi2d_pc_plus4_next" *)
  wire [31:0] \datapathaftab.gi2d_pc_plus4_next ;
  (* hdlname = "datapathaftab gi2d_rst" *)
  wire \datapathaftab.gi2d_rst ;
  (* hdlname = "datapathaftab gi2d_rst_def" *)
  wire \datapathaftab.gi2d_rst_def ;
  (* hdlname = "datapathaftab gi2d_valid_curr" *)
  wire \datapathaftab.gi2d_valid_curr ;
  (* hdlname = "datapathaftab hazard_solved" *)
  wire \datapathaftab.hazard_solved ;
  (* hdlname = "datapathaftab hazex" *)
  wire \datapathaftab.hazex ;
  (* hdlname = "datapathaftab hazex_csr_mirror" *)
  wire \datapathaftab.hazex_csr_mirror ;
  (* hdlname = "datapathaftab hazex_csr_result" *)
  wire [11:0] \datapathaftab.hazex_csr_result ;
  (* hdlname = "datapathaftab hazex_csr_result_en" *)
  wire \datapathaftab.hazex_csr_result_en ;
  (* hdlname = "datapathaftab hazex_csr_second_operand" *)
  wire [11:0] \datapathaftab.hazex_csr_second_operand ;
  (* hdlname = "datapathaftab hazex_csr_second_operand_en" *)
  wire \datapathaftab.hazex_csr_second_operand_en ;
  (* hdlname = "datapathaftab hazex_first_operand" *)
  wire [4:0] \datapathaftab.hazex_first_operand ;
  (* hdlname = "datapathaftab hazex_first_operand_en" *)
  wire \datapathaftab.hazex_first_operand_en ;
  (* hdlname = "datapathaftab hazex_int" *)
  wire \datapathaftab.hazex_int ;
  (* hdlname = "datapathaftab hazex_result" *)
  wire [4:0] \datapathaftab.hazex_result ;
  (* hdlname = "datapathaftab hazex_result_en" *)
  wire \datapathaftab.hazex_result_en ;
  (* hdlname = "datapathaftab hazex_second_operand" *)
  wire [4:0] \datapathaftab.hazex_second_operand ;
  (* hdlname = "datapathaftab hazex_second_operand_en" *)
  wire \datapathaftab.hazex_second_operand_en ;
  (* hdlname = "datapathaftab hazex_zero_first_operand" *)
  wire \datapathaftab.hazex_zero_first_operand ;
  (* hdlname = "datapathaftab hazex_zero_second_operand" *)
  wire \datapathaftab.hazex_zero_second_operand ;
  (* hdlname = "datapathaftab hazm" *)
  wire \datapathaftab.hazm ;
  (* hdlname = "datapathaftab hazm_csr_mirror" *)
  wire \datapathaftab.hazm_csr_mirror ;
  (* hdlname = "datapathaftab hazm_csr_result" *)
  wire [11:0] \datapathaftab.hazm_csr_result ;
  (* hdlname = "datapathaftab hazm_csr_result_en" *)
  wire \datapathaftab.hazm_csr_result_en ;
  (* hdlname = "datapathaftab hazm_csr_second_operand" *)
  wire [11:0] \datapathaftab.hazm_csr_second_operand ;
  (* hdlname = "datapathaftab hazm_csr_second_operand_en" *)
  wire \datapathaftab.hazm_csr_second_operand_en ;
  (* hdlname = "datapathaftab hazm_first_operand" *)
  wire [4:0] \datapathaftab.hazm_first_operand ;
  (* hdlname = "datapathaftab hazm_first_operand_en" *)
  wire \datapathaftab.hazm_first_operand_en ;
  (* hdlname = "datapathaftab hazm_int" *)
  wire \datapathaftab.hazm_int ;
  (* hdlname = "datapathaftab hazm_result" *)
  wire [4:0] \datapathaftab.hazm_result ;
  (* hdlname = "datapathaftab hazm_result_en" *)
  wire \datapathaftab.hazm_result_en ;
  (* hdlname = "datapathaftab hazm_second_operand" *)
  wire [4:0] \datapathaftab.hazm_second_operand ;
  (* hdlname = "datapathaftab hazm_second_operand_en" *)
  wire \datapathaftab.hazm_second_operand_en ;
  (* hdlname = "datapathaftab hazm_zero_first_operand" *)
  wire \datapathaftab.hazm_zero_first_operand ;
  (* hdlname = "datapathaftab hazm_zero_second_operand" *)
  wire \datapathaftab.hazm_zero_second_operand ;
  (* hdlname = "datapathaftab i4pc a" *)
  wire [31:0] \datapathaftab.i4pc.a ;
  (* hdlname = "datapathaftab i4pc add" *)
  (* unused_bits = "32" *)
  wire [32:0] \datapathaftab.i4pc.add ;
  (* hdlname = "datapathaftab i4pc addresult" *)
  wire [31:0] \datapathaftab.i4pc.addresult ;
  (* hdlname = "datapathaftab i4pc b" *)
  wire [31:0] \datapathaftab.i4pc.b ;
  (* hdlname = "datapathaftab i4pc carryout" *)
  (* unused_bits = "0" *)
  wire \datapathaftab.i4pc.carryout ;
  (* hdlname = "datapathaftab i4pc cin" *)
  wire \datapathaftab.i4pc.cin ;
  (* hdlname = "datapathaftab illegalinstrflag" *)
  wire \datapathaftab.illegalinstrflag ;
  (* hdlname = "datapathaftab immediate" *)
  wire [31:0] \datapathaftab.immediate ;
  (* hdlname = "datapathaftab immselsignex imm" *)
  wire [31:0] \datapathaftab.immselsignex.imm ;
  (* hdlname = "datapathaftab immselsignex ir11_8" *)
  wire [3:0] \datapathaftab.immselsignex.ir11_8 ;
  (* hdlname = "datapathaftab immselsignex ir19_12" *)
  wire [7:0] \datapathaftab.immselsignex.ir19_12 ;
  (* hdlname = "datapathaftab immselsignex ir20" *)
  wire \datapathaftab.immselsignex.ir20 ;
  (* hdlname = "datapathaftab immselsignex ir24_21" *)
  wire [3:0] \datapathaftab.immselsignex.ir24_21 ;
  (* hdlname = "datapathaftab immselsignex ir30_25" *)
  wire [5:0] \datapathaftab.immselsignex.ir30_25 ;
  (* hdlname = "datapathaftab immselsignex ir31" *)
  wire \datapathaftab.immselsignex.ir31 ;
  (* hdlname = "datapathaftab immselsignex ir7" *)
  wire \datapathaftab.immselsignex.ir7 ;
  (* hdlname = "datapathaftab immselsignex selb" *)
  wire \datapathaftab.immselsignex.selb ;
  (* hdlname = "datapathaftab immselsignex selbuj" *)
  wire \datapathaftab.immselsignex.selbuj ;
  (* hdlname = "datapathaftab immselsignex seli" *)
  wire \datapathaftab.immselsignex.seli ;
  (* hdlname = "datapathaftab immselsignex selij" *)
  wire \datapathaftab.immselsignex.selij ;
  (* hdlname = "datapathaftab immselsignex selis" *)
  wire \datapathaftab.immselsignex.selis ;
  (* hdlname = "datapathaftab immselsignex selisb" *)
  wire \datapathaftab.immselsignex.selisb ;
  (* hdlname = "datapathaftab immselsignex selisbj" *)
  wire \datapathaftab.immselsignex.selisbj ;
  (* hdlname = "datapathaftab immselsignex selj" *)
  wire \datapathaftab.immselsignex.selj ;
  (* hdlname = "datapathaftab immselsignex sels" *)
  wire \datapathaftab.immselsignex.sels ;
  (* hdlname = "datapathaftab immselsignex selsb" *)
  wire \datapathaftab.immselsignex.selsb ;
  (* hdlname = "datapathaftab immselsignex selu" *)
  wire \datapathaftab.immselsignex.selu ;
  (* hdlname = "datapathaftab immselsignex seluj" *)
  wire \datapathaftab.immselsignex.seluj ;
  (* hdlname = "datapathaftab inc4pc" *)
  wire [31:0] \datapathaftab.inc4pc ;
  (* hdlname = "datapathaftab incsr" *)
  wire [31:0] \datapathaftab.incsr ;
  (* hdlname = "datapathaftab inpc" *)
  wire [31:0] \datapathaftab.inpc ;
  (* hdlname = "datapathaftab inst" *)
  wire [31:0] \datapathaftab.inst ;
  (* hdlname = "datapathaftab inst_type" *)
  wire [2:0] \datapathaftab.inst_type ;
  (* hdlname = "datapathaftab instrmisalignedflag" *)
  wire \datapathaftab.instrmisalignedflag ;
  (* hdlname = "datapathaftab instructiondone" *)
  wire \datapathaftab.instructiondone ;
  (* hdlname = "datapathaftab instructiondone_int" *)
  wire \datapathaftab.instructiondone_int ;
  (* hdlname = "datapathaftab instructiondonecsr" *)
  wire \datapathaftab.instructiondonecsr ;
  (* hdlname = "datapathaftab interrcheckcausedetection causecode" *)
  wire [31:0] \datapathaftab.interrcheckcausedetection.causecode ;
  (* hdlname = "datapathaftab interrcheckcausedetection clk" *)
  wire \datapathaftab.interrcheckcausedetection.clk ;
  (* hdlname = "datapathaftab interrcheckcausedetection curprv" *)
  wire [1:0] \datapathaftab.interrcheckcausedetection.curprv ;
  (* hdlname = "datapathaftab interrcheckcausedetection currentprv" *)
  wire [1:0] \datapathaftab.interrcheckcausedetection.currentprv ;
  (* hdlname = "datapathaftab interrcheckcausedetection delegationmode" *)
  wire [1:0] \datapathaftab.interrcheckcausedetection.delegationmode ;
  (* hdlname = "datapathaftab interrcheckcausedetection delegationreg" *)
  wire [1:0] \datapathaftab.interrcheckcausedetection.delegationreg ;
  (* hdlname = "datapathaftab interrcheckcausedetection exceptionraise" *)
  wire \datapathaftab.interrcheckcausedetection.exceptionraise ;
  (* hdlname = "datapathaftab interrcheckcausedetection exceptionraisetemp" *)
  wire \datapathaftab.interrcheckcausedetection.exceptionraisetemp ;
  (* hdlname = "datapathaftab interrcheckcausedetection inst" *)
  wire [31:0] \datapathaftab.interrcheckcausedetection.inst ;
  (* hdlname = "datapathaftab interrcheckcausedetection interraisemachineexternal" *)
  wire \datapathaftab.interrcheckcausedetection.interraisemachineexternal ;
  (* hdlname = "datapathaftab interrcheckcausedetection interraisemachinesoftware" *)
  wire \datapathaftab.interrcheckcausedetection.interraisemachinesoftware ;
  (* hdlname = "datapathaftab interrcheckcausedetection interraisemachinetimer" *)
  wire \datapathaftab.interrcheckcausedetection.interraisemachinetimer ;
  (* hdlname = "datapathaftab interrcheckcausedetection interraisereserved" *)
  wire \datapathaftab.interrcheckcausedetection.interraisereserved ;
  (* hdlname = "datapathaftab interrcheckcausedetection interraisetemp" *)
  wire \datapathaftab.interrcheckcausedetection.interraisetemp ;
  (* hdlname = "datapathaftab interrcheckcausedetection interraiseuserexternal" *)
  wire \datapathaftab.interrcheckcausedetection.interraiseuserexternal ;
  (* hdlname = "datapathaftab interrcheckcausedetection interraiseusersoftware" *)
  wire \datapathaftab.interrcheckcausedetection.interraiseusersoftware ;
  (* hdlname = "datapathaftab interrcheckcausedetection interraiseusertimer" *)
  wire \datapathaftab.interrcheckcausedetection.interraiseusertimer ;
  (* hdlname = "datapathaftab interrcheckcausedetection interreserved" *)
  wire [15:0] \datapathaftab.interrcheckcausedetection.interreserved ;
  (* hdlname = "datapathaftab interrcheckcausedetection interruptraise" *)
  wire \datapathaftab.interrcheckcausedetection.interruptraise ;
  (* hdlname = "datapathaftab interrcheckcausedetection lddelegation" *)
  wire \datapathaftab.interrcheckcausedetection.lddelegation ;
  (* hdlname = "datapathaftab interrcheckcausedetection ldmachine" *)
  wire \datapathaftab.interrcheckcausedetection.ldmachine ;
  (* hdlname = "datapathaftab interrcheckcausedetection lduser" *)
  wire \datapathaftab.interrcheckcausedetection.lduser ;
  (* hdlname = "datapathaftab interrcheckcausedetection machine" *)
  wire \datapathaftab.interrcheckcausedetection.machine ;
  (* hdlname = "datapathaftab interrcheckcausedetection medelegcsr" *)
  wire [31:0] \datapathaftab.interrcheckcausedetection.medelegcsr ;
  (* hdlname = "datapathaftab interrcheckcausedetection midelegcsr" *)
  wire [31:0] \datapathaftab.interrcheckcausedetection.midelegcsr ;
  (* hdlname = "datapathaftab interrcheckcausedetection miecc" *)
  wire [31:0] \datapathaftab.interrcheckcausedetection.miecc ;
  (* hdlname = "datapathaftab interrcheckcausedetection miefieldcc" *)
  wire \datapathaftab.interrcheckcausedetection.miefieldcc ;
  (* hdlname = "datapathaftab interrcheckcausedetection mipcc" *)
  wire [31:0] \datapathaftab.interrcheckcausedetection.mipcc ;
  (* hdlname = "datapathaftab interrcheckcausedetection outadr" *)
  wire [31:0] \datapathaftab.interrcheckcausedetection.outadr ;
  (* hdlname = "datapathaftab interrcheckcausedetection outpc" *)
  wire [31:0] \datapathaftab.interrcheckcausedetection.outpc ;
  (* hdlname = "datapathaftab interrcheckcausedetection rst" *)
  wire \datapathaftab.interrcheckcausedetection.rst ;
  (* hdlname = "datapathaftab interrcheckcausedetection tempdividedbyzero" *)
  wire \datapathaftab.interrcheckcausedetection.tempdividedbyzero ;
  (* hdlname = "datapathaftab interrcheckcausedetection tempecallflag" *)
  wire \datapathaftab.interrcheckcausedetection.tempecallflag ;
  (* hdlname = "datapathaftab interrcheckcausedetection tempflags" *)
  wire [5:0] \datapathaftab.interrcheckcausedetection.tempflags ;
  (* hdlname = "datapathaftab interrcheckcausedetection tempillegalinstr" *)
  wire \datapathaftab.interrcheckcausedetection.tempillegalinstr ;
  (* hdlname = "datapathaftab interrcheckcausedetection tempinstraddrmisaligned" *)
  wire \datapathaftab.interrcheckcausedetection.tempinstraddrmisaligned ;
  (* hdlname = "datapathaftab interrcheckcausedetection temploadaddrmisaligned" *)
  wire \datapathaftab.interrcheckcausedetection.temploadaddrmisaligned ;
  (* hdlname = "datapathaftab interrcheckcausedetection tempstoreaddrmisaligned" *)
  wire \datapathaftab.interrcheckcausedetection.tempstoreaddrmisaligned ;
  (* hdlname = "datapathaftab interrcheckcausedetection uiefieldcc" *)
  wire \datapathaftab.interrcheckcausedetection.uiefieldcc ;
  (* hdlname = "datapathaftab interrcheckcausedetection user" *)
  wire \datapathaftab.interrcheckcausedetection.user ;
  (* hdlname = "datapathaftab interruptraise" *)
  wire \datapathaftab.interruptraise ;
  (* hdlname = "datapathaftab interruptraise_int" *)
  wire \datapathaftab.interruptraise_int ;
  (* hdlname = "datapathaftab interruptraisetemp" *)
  wire \datapathaftab.interruptraisetemp ;
  (* hdlname = "datapathaftab interruptsources" *)
  wire [31:0] \datapathaftab.interruptsources ;
  (* hdlname = "datapathaftab interruptstartaddressdirect" *)
  wire [31:0] \datapathaftab.interruptstartaddressdirect ;
  (* hdlname = "datapathaftab interruptstartaddressgenerator causecode" *)
  wire [5:0] \datapathaftab.interruptstartaddressgenerator.causecode ;
  (* hdlname = "datapathaftab interruptstartaddressgenerator interruptstartaddressdirect" *)
  wire [31:0] \datapathaftab.interruptstartaddressgenerator.interruptstartaddressdirect ;
  (* hdlname = "datapathaftab interruptstartaddressgenerator interruptstartaddressvectored" *)
  wire [31:0] \datapathaftab.interruptstartaddressgenerator.interruptstartaddressvectored ;
  (* hdlname = "datapathaftab interruptstartaddressgenerator modetvec" *)
  wire [1:0] \datapathaftab.interruptstartaddressgenerator.modetvec ;
  (* hdlname = "datapathaftab interruptstartaddressgenerator tvecbase" *)
  wire [31:0] \datapathaftab.interruptstartaddressgenerator.tvecbase ;
  (* hdlname = "datapathaftab interruptstartaddressvectored" *)
  wire [31:0] \datapathaftab.interruptstartaddressvectored ;
  (* hdlname = "datapathaftab intersrcsynchreg clk" *)
  wire \datapathaftab.intersrcsynchreg.clk ;
  (* hdlname = "datapathaftab intersrcsynchreg inreg" *)
  wire [31:0] \datapathaftab.intersrcsynchreg.inreg ;
  (* hdlname = "datapathaftab intersrcsynchreg outreg" *)
  wire [31:0] \datapathaftab.intersrcsynchreg.outreg ;
  (* hdlname = "datapathaftab intersrcsynchreg rst" *)
  wire \datapathaftab.intersrcsynchreg.rst ;
  (* hdlname = "datapathaftab intersrcsynchreg zero" *)
  wire \datapathaftab.intersrcsynchreg.zero ;
  (* hdlname = "datapathaftab ir" *)
  wire [31:0] \datapathaftab.ir ;
  (* hdlname = "datapathaftab is_aau_used" *)
  wire \datapathaftab.is_aau_used ;
  (* hdlname = "datapathaftab is_load_in_mem" *)
  wire \datapathaftab.is_load_in_mem ;
  (* hdlname = "datapathaftab is_store_in_mem" *)
  wire \datapathaftab.is_store_in_mem ;
  (* hdlname = "datapathaftab iscsrinstruction" *)
  wire \datapathaftab.iscsrinstruction ;
  (* hdlname = "datapathaftab ldbytesigned" *)
  wire \datapathaftab.ldbytesigned ;
  (* hdlname = "datapathaftab ldcntcsr" *)
  wire \datapathaftab.ldcntcsr ;
  (* hdlname = "datapathaftab lddelegation" *)
  wire \datapathaftab.lddelegation ;
  (* hdlname = "datapathaftab ldhalfsigned" *)
  wire \datapathaftab.ldhalfsigned ;
  (* hdlname = "datapathaftab ldmachine" *)
  wire \datapathaftab.ldmachine ;
  (* hdlname = "datapathaftab ldmiereg" *)
  wire \datapathaftab.ldmiereg ;
  (* hdlname = "datapathaftab ldmieuiefield" *)
  wire \datapathaftab.ldmieuiefield ;
  (* hdlname = "datapathaftab ldpc" *)
  wire \datapathaftab.ldpc ;
  (* hdlname = "datapathaftab lduser" *)
  wire \datapathaftab.lduser ;
  (* hdlname = "datapathaftab ldvaluecsr" *)
  wire [2:0] \datapathaftab.ldvaluecsr ;
  (* hdlname = "datapathaftab llu ain" *)
  wire [31:0] \datapathaftab.llu.ain ;
  (* hdlname = "datapathaftab llu bin" *)
  wire [31:0] \datapathaftab.llu.bin ;
  (* hdlname = "datapathaftab llu result" *)
  wire [31:0] \datapathaftab.llu.result ;
  (* hdlname = "datapathaftab llu sellogic" *)
  wire [1:0] \datapathaftab.llu.sellogic ;
  (* hdlname = "datapathaftab llu y" *)
  wire [31:0] \datapathaftab.llu.y ;
  (* hdlname = "datapathaftab lluresult" *)
  wire [31:0] \datapathaftab.lluresult ;
  (* hdlname = "datapathaftab load" *)
  wire \datapathaftab.load ;
  (* hdlname = "datapathaftab loadmiereg" *)
  wire \datapathaftab.loadmiereg ;
  (* hdlname = "datapathaftab loadmieuiefield" *)
  wire \datapathaftab.loadmieuiefield ;
  (* hdlname = "datapathaftab m2wb_alu_res_curr" *)
  wire [31:0] \datapathaftab.m2wb_alu_res_curr ;
  (* hdlname = "datapathaftab m2wb_ctrl_word_curr" *)
  wire [63:0] \datapathaftab.m2wb_ctrl_word_curr ;
  (* hdlname = "datapathaftab m2wb_divided_by_zero_flag_curr" *)
  wire \datapathaftab.m2wb_divided_by_zero_flag_curr ;
  (* hdlname = "datapathaftab m2wb_ecall_flag_curr" *)
  wire \datapathaftab.m2wb_ecall_flag_curr ;
  (* hdlname = "datapathaftab m2wb_en" *)
  wire \datapathaftab.m2wb_en ;
  (* hdlname = "datapathaftab m2wb_ex_flag_curr" *)
  wire \datapathaftab.m2wb_ex_flag_curr ;
  (* hdlname = "datapathaftab m2wb_hazard_flag_curr" *)
  wire \datapathaftab.m2wb_hazard_flag_curr ;
  (* hdlname = "datapathaftab m2wb_hazard_flag_next" *)
  wire \datapathaftab.m2wb_hazard_flag_next ;
  (* hdlname = "datapathaftab m2wb_illegal_instruction_flag_curr" *)
  wire \datapathaftab.m2wb_illegal_instruction_flag_curr ;
  (* hdlname = "datapathaftab m2wb_inst_type_curr" *)
  wire [2:0] \datapathaftab.m2wb_inst_type_curr ;
  (* hdlname = "datapathaftab m2wb_instr_curr" *)
  wire [31:0] \datapathaftab.m2wb_instr_curr ;
  (* hdlname = "datapathaftab m2wb_instr_misaligned_flag_curr" *)
  wire \datapathaftab.m2wb_instr_misaligned_flag_curr ;
  (* hdlname = "datapathaftab m2wb_lt_curr" *)
  wire \datapathaftab.m2wb_lt_curr ;
  (* hdlname = "datapathaftab m2wb_mem_res_curr" *)
  wire [31:0] \datapathaftab.m2wb_mem_res_curr ;
  (* hdlname = "datapathaftab m2wb_mem_res_next" *)
  wire [31:0] \datapathaftab.m2wb_mem_res_next ;
  (* hdlname = "datapathaftab m2wb_op1_curr" *)
  wire [31:0] \datapathaftab.m2wb_op1_curr ;
  (* hdlname = "datapathaftab m2wb_outcsr_curr" *)
  wire [31:0] \datapathaftab.m2wb_outcsr_curr ;
  (* hdlname = "datapathaftab m2wb_pc_curr" *)
  wire [31:0] \datapathaftab.m2wb_pc_curr ;
  (* hdlname = "datapathaftab m2wb_pc_plus4_curr" *)
  wire [31:0] \datapathaftab.m2wb_pc_plus4_curr ;
  (* hdlname = "datapathaftab m2wb_rst" *)
  wire \datapathaftab.m2wb_rst ;
  (* hdlname = "datapathaftab m2wb_rst_def" *)
  wire \datapathaftab.m2wb_rst_def ;
  (* hdlname = "datapathaftab m2wb_valid_curr" *)
  wire \datapathaftab.m2wb_valid_curr ;
  (* hdlname = "datapathaftab m2wb_validaccesscsr_curr" *)
  wire \datapathaftab.m2wb_validaccesscsr_curr ;
  (* hdlname = "datapathaftab m_checkmisaligneddawu" *)
  wire \datapathaftab.m_checkmisaligneddawu ;
  (* hdlname = "datapathaftab m_func3" *)
  wire [2:0] \datapathaftab.m_func3 ;
  (* hdlname = "datapathaftab m_ldbytesigned" *)
  wire \datapathaftab.m_ldbytesigned ;
  (* hdlname = "datapathaftab m_ldhalfsigned" *)
  wire \datapathaftab.m_ldhalfsigned ;
  (* hdlname = "datapathaftab m_load" *)
  wire \datapathaftab.m_load ;
  (* hdlname = "datapathaftab m_nbytes" *)
  wire [1:0] \datapathaftab.m_nbytes ;
  (* hdlname = "datapathaftab m_opcode" *)
  wire [6:0] \datapathaftab.m_opcode ;
  (* hdlname = "datapathaftab m_startdaru" *)
  wire \datapathaftab.m_startdaru ;
  (* hdlname = "datapathaftab m_startdawu" *)
  wire \datapathaftab.m_startdawu ;
  (* hdlname = "datapathaftab m_valid" *)
  wire \datapathaftab.m_valid ;
  (* hdlname = "datapathaftab machineexternalinterrupt" *)
  wire \datapathaftab.machineexternalinterrupt ;
  (* hdlname = "datapathaftab machinesoftwareinterrupt" *)
  wire \datapathaftab.machinesoftwareinterrupt ;
  (* hdlname = "datapathaftab machinestatusalterationpostcsr" *)
  wire \datapathaftab.machinestatusalterationpostcsr ;
  (* hdlname = "datapathaftab machinestatusalterationprecsr" *)
  wire \datapathaftab.machinestatusalterationprecsr ;
  (* hdlname = "datapathaftab machinetimerinterrupt" *)
  wire \datapathaftab.machinetimerinterrupt ;
  (* hdlname = "datapathaftab memaddr1" *)
  wire [31:0] \datapathaftab.memaddr1 ;
  (* hdlname = "datapathaftab memaddr2" *)
  wire [31:0] \datapathaftab.memaddr2 ;
  (* hdlname = "datapathaftab memaddrdaru2" *)
  wire [31:0] \datapathaftab.memaddrdaru2 ;
  (* hdlname = "datapathaftab memaddrdawu" *)
  wire [31:0] \datapathaftab.memaddrdawu ;
  (* hdlname = "datapathaftab memdataout1" *)
  wire [15:0] \datapathaftab.memdataout1 ;
  (* hdlname = "datapathaftab memdataout2" *)
  wire [15:0] \datapathaftab.memdataout2 ;
  (* hdlname = "datapathaftab memready1" *)
  wire \datapathaftab.memready1 ;
  (* hdlname = "datapathaftab memready2" *)
  wire \datapathaftab.memready2 ;
  (* hdlname = "datapathaftab mipcclddisable" *)
  wire \datapathaftab.mipcclddisable ;
  (* hdlname = "datapathaftab mirror" *)
  wire \datapathaftab.mirror ;
  (* hdlname = "datapathaftab mirror_int" *)
  wire \datapathaftab.mirror_int ;
  (* hdlname = "datapathaftab mirroraddress" *)
  wire [11:0] \datapathaftab.mirroraddress ;
  (* hdlname = "datapathaftab mirroruie" *)
  wire \datapathaftab.mirroruie ;
  (* hdlname = "datapathaftab mirroruip" *)
  wire \datapathaftab.mirroruip ;
  (* hdlname = "datapathaftab mirrorusercu" *)
  wire \datapathaftab.mirrorusercu ;
  (* hdlname = "datapathaftab mirrorustatus" *)
  wire \datapathaftab.mirrorustatus ;
  (* hdlname = "datapathaftab modetvec" *)
  wire [1:0] \datapathaftab.modetvec ;
  (* hdlname = "datapathaftab mux2 a" *)
  wire [31:0] \datapathaftab.mux2.a ;
  (* hdlname = "datapathaftab mux2 b" *)
  wire [31:0] \datapathaftab.mux2.b ;
  (* hdlname = "datapathaftab mux2 s0" *)
  wire \datapathaftab.mux2.s0 ;
  (* hdlname = "datapathaftab mux2 s1" *)
  wire \datapathaftab.mux2.s1 ;
  (* hdlname = "datapathaftab mux2 w" *)
  wire [31:0] \datapathaftab.mux2.w ;
  (* hdlname = "datapathaftab mux5 a" *)
  wire [31:0] \datapathaftab.mux5.a ;
  (* hdlname = "datapathaftab mux5 b" *)
  wire [31:0] \datapathaftab.mux5.b ;
  (* hdlname = "datapathaftab mux5 s0" *)
  wire \datapathaftab.mux5.s0 ;
  (* hdlname = "datapathaftab mux5 s1" *)
  wire \datapathaftab.mux5.s1 ;
  (* hdlname = "datapathaftab mux5 w" *)
  wire [31:0] \datapathaftab.mux5.w ;
  (* hdlname = "datapathaftab mux6 a" *)
  wire [31:0] \datapathaftab.mux6.a ;
  (* hdlname = "datapathaftab mux6 b" *)
  wire [31:0] \datapathaftab.mux6.b ;
  (* hdlname = "datapathaftab mux6 s0" *)
  wire \datapathaftab.mux6.s0 ;
  (* hdlname = "datapathaftab mux6 s1" *)
  wire \datapathaftab.mux6.s1 ;
  (* hdlname = "datapathaftab mux6 w" *)
  wire [31:0] \datapathaftab.mux6.w ;
  (* hdlname = "datapathaftab mux8 a" *)
  wire [11:0] \datapathaftab.mux8.a ;
  (* hdlname = "datapathaftab mux8 b" *)
  wire [11:0] \datapathaftab.mux8.b ;
  (* hdlname = "datapathaftab mux8 s1" *)
  wire \datapathaftab.mux8.s1 ;
  (* hdlname = "datapathaftab mux8 w" *)
  wire [11:0] \datapathaftab.mux8.w ;
  (* hdlname = "datapathaftab muxcmp a" *)
  wire [31:0] \datapathaftab.muxcmp.a ;
  (* hdlname = "datapathaftab muxcmp b" *)
  wire [31:0] \datapathaftab.muxcmp.b ;
  (* hdlname = "datapathaftab muxcmp s0" *)
  wire \datapathaftab.muxcmp.s0 ;
  (* hdlname = "datapathaftab muxcmp s1" *)
  wire \datapathaftab.muxcmp.s1 ;
  (* hdlname = "datapathaftab muxcmp w" *)
  wire [31:0] \datapathaftab.muxcmp.w ;
  (* hdlname = "datapathaftab muxcode" *)
  wire [11:0] \datapathaftab.muxcode ;
  (* hdlname = "datapathaftab nbytes" *)
  wire [1:0] \datapathaftab.nbytes ;
  (* hdlname = "datapathaftab op1_p1_pc" *)
  wire [31:0] \datapathaftab.op1_p1_pc ;
  (* hdlname = "datapathaftab outaddr" *)
  wire [11:0] \datapathaftab.outaddr ;
  (* hdlname = "datapathaftab outcsr_reg" *)
  wire [31:0] \datapathaftab.outcsr_reg ;
  (* hdlname = "datapathaftab outcsr_register clk" *)
  wire \datapathaftab.outcsr_register.clk ;
  (* hdlname = "datapathaftab outcsr_register inreg" *)
  wire [31:0] \datapathaftab.outcsr_register.inreg ;
  (* hdlname = "datapathaftab outcsr_register load" *)
  wire \datapathaftab.outcsr_register.load ;
  (* hdlname = "datapathaftab outcsr_register outreg" *)
  wire [31:0] \datapathaftab.outcsr_register.outreg ;
  (* hdlname = "datapathaftab outcsr_register rst" *)
  wire \datapathaftab.outcsr_register.rst ;
  (* hdlname = "datapathaftab outcsr_register zero" *)
  wire \datapathaftab.outcsr_register.zero ;
  (* hdlname = "datapathaftab outcsr_write_val" *)
  wire [31:0] \datapathaftab.outcsr_write_val ;
  (* hdlname = "datapathaftab outpc" *)
  wire [31:0] \datapathaftab.outpc ;
  (* hdlname = "datapathaftab p1" *)
  wire [31:0] \datapathaftab.p1 ;
  (* hdlname = "datapathaftab p2" *)
  wire [31:0] \datapathaftab.p2 ;
  (* hdlname = "datapathaftab pass" *)
  wire \datapathaftab.pass ;
  (* hdlname = "datapathaftab pc_from_wb" *)
  wire \datapathaftab.pc_from_wb ;
  (* hdlname = "datapathaftab platforminterruptsignals" *)
  wire [15:0] \datapathaftab.platforminterruptsignals ;
  (* hdlname = "datapathaftab preaddressregbank" *)
  wire [11:0] \datapathaftab.preaddressregbank ;
  (* hdlname = "datapathaftab previousprv" *)
  wire [1:0] \datapathaftab.previousprv ;
  (* hdlname = "datapathaftab readmemdaru1" *)
  wire \datapathaftab.readmemdaru1 ;
  (* hdlname = "datapathaftab readmemdaru1_int" *)
  wire \datapathaftab.readmemdaru1_int ;
  (* hdlname = "datapathaftab readmemdaru2" *)
  wire \datapathaftab.readmemdaru2 ;
  (* hdlname = "datapathaftab readmemdaru2_int" *)
  wire \datapathaftab.readmemdaru2_int ;
  (* hdlname = "datapathaftab readonlycsr" *)
  wire \datapathaftab.readonlycsr ;
  (* hdlname = "datapathaftab register_bank addressregbank" *)
  wire [11:0] \datapathaftab.register_bank.addressregbank ;
  (* hdlname = "datapathaftab register_bank clk" *)
  wire \datapathaftab.register_bank.clk ;
  (* hdlname = "datapathaftab register_bank csr_address_logic addressregbank" *)
  wire [11:0] \datapathaftab.register_bank.csr_address_logic.addressregbank ;
  (* hdlname = "datapathaftab register_bank csr_address_logic ldmiereg" *)
  wire \datapathaftab.register_bank.csr_address_logic.ldmiereg ;
  (* hdlname = "datapathaftab register_bank csr_address_logic ldmieuiefield" *)
  wire \datapathaftab.register_bank.csr_address_logic.ldmieuiefield ;
  (* hdlname = "datapathaftab register_bank csr_address_logic mirror" *)
  wire \datapathaftab.register_bank.csr_address_logic.mirror ;
  (* hdlname = "datapathaftab register_bank csr_address_logic mirroruie" *)
  wire \datapathaftab.register_bank.csr_address_logic.mirroruie ;
  (* hdlname = "datapathaftab register_bank csr_address_logic mirroruietemp" *)
  wire \datapathaftab.register_bank.csr_address_logic.mirroruietemp ;
  (* hdlname = "datapathaftab register_bank csr_address_logic mirroruip" *)
  wire \datapathaftab.register_bank.csr_address_logic.mirroruip ;
  (* hdlname = "datapathaftab register_bank csr_address_logic mirroruiptemp" *)
  wire \datapathaftab.register_bank.csr_address_logic.mirroruiptemp ;
  (* hdlname = "datapathaftab register_bank csr_address_logic mirrorustatus" *)
  wire \datapathaftab.register_bank.csr_address_logic.mirrorustatus ;
  (* hdlname = "datapathaftab register_bank csr_address_logic mirrorustatustemp" *)
  wire \datapathaftab.register_bank.csr_address_logic.mirrorustatustemp ;
  (* hdlname = "datapathaftab register_bank csr_registers addressregbank" *)
  wire [4:0] \datapathaftab.register_bank.csr_registers.addressregbank ;
  (* hdlname = "datapathaftab register_bank csr_registers clk" *)
  wire \datapathaftab.register_bank.csr_registers.clk ;
  (* hdlname = "datapathaftab register_bank csr_registers inputregbank" *)
  wire [31:0] \datapathaftab.register_bank.csr_registers.inputregbank ;
  (* hdlname = "datapathaftab register_bank csr_registers outregbank" *)
  wire [31:0] \datapathaftab.register_bank.csr_registers.outregbank ;
  (* hdlname = "datapathaftab register_bank csr_registers rdata" *)
  (* ramstyle = "M9K" *)
  wire [1023:0] \datapathaftab.register_bank.csr_registers.rdata ;
  (* hdlname = "datapathaftab register_bank csr_registers rst" *)
  wire \datapathaftab.register_bank.csr_registers.rst ;
  (* hdlname = "datapathaftab register_bank csr_registers writeaddressregbank" *)
  wire [4:0] \datapathaftab.register_bank.csr_registers.writeaddressregbank ;
  (* hdlname = "datapathaftab register_bank csr_registers writeregbank" *)
  wire \datapathaftab.register_bank.csr_registers.writeregbank ;
  (* hdlname = "datapathaftab register_bank inputregbank" *)
  wire [31:0] \datapathaftab.register_bank.inputregbank ;
  (* hdlname = "datapathaftab register_bank ldmiereg" *)
  wire \datapathaftab.register_bank.ldmiereg ;
  (* hdlname = "datapathaftab register_bank ldmieuiefield" *)
  wire \datapathaftab.register_bank.ldmieuiefield ;
  (* hdlname = "datapathaftab register_bank loadmiereg" *)
  wire \datapathaftab.register_bank.loadmiereg ;
  (* hdlname = "datapathaftab register_bank loadmieuiefield" *)
  wire \datapathaftab.register_bank.loadmieuiefield ;
  (* hdlname = "datapathaftab register_bank mieccregister clk" *)
  wire \datapathaftab.register_bank.mieccregister.clk ;
  (* hdlname = "datapathaftab register_bank mieccregister inreg" *)
  wire [31:0] \datapathaftab.register_bank.mieccregister.inreg ;
  (* hdlname = "datapathaftab register_bank mieccregister load" *)
  wire \datapathaftab.register_bank.mieccregister.load ;
  (* hdlname = "datapathaftab register_bank mieccregister outreg" *)
  wire [31:0] \datapathaftab.register_bank.mieccregister.outreg ;
  (* hdlname = "datapathaftab register_bank mieccregister rst" *)
  wire \datapathaftab.register_bank.mieccregister.rst ;
  (* hdlname = "datapathaftab register_bank mieccregister zero" *)
  wire \datapathaftab.register_bank.mieccregister.zero ;
  (* hdlname = "datapathaftab register_bank miefieldccregister clk" *)
  wire \datapathaftab.register_bank.miefieldccregister.clk ;
  (* hdlname = "datapathaftab register_bank miefieldccregister inreg" *)
  wire \datapathaftab.register_bank.miefieldccregister.inreg ;
  (* hdlname = "datapathaftab register_bank miefieldccregister load" *)
  wire \datapathaftab.register_bank.miefieldccregister.load ;
  (* hdlname = "datapathaftab register_bank miefieldccregister outreg" *)
  wire \datapathaftab.register_bank.miefieldccregister.outreg ;
  (* hdlname = "datapathaftab register_bank miefieldccregister rst" *)
  wire \datapathaftab.register_bank.miefieldccregister.rst ;
  (* hdlname = "datapathaftab register_bank miefieldccregister zero" *)
  wire \datapathaftab.register_bank.miefieldccregister.zero ;
  (* hdlname = "datapathaftab register_bank mirror" *)
  wire \datapathaftab.register_bank.mirror ;
  (* hdlname = "datapathaftab register_bank mirroruie" *)
  wire \datapathaftab.register_bank.mirroruie ;
  (* hdlname = "datapathaftab register_bank mirroruip" *)
  wire \datapathaftab.register_bank.mirroruip ;
  (* hdlname = "datapathaftab register_bank mirrorustatus" *)
  wire \datapathaftab.register_bank.mirrorustatus ;
  (* hdlname = "datapathaftab register_bank outmieccreg" *)
  wire [31:0] \datapathaftab.register_bank.outmieccreg ;
  (* hdlname = "datapathaftab register_bank outmiefieldccreg" *)
  wire \datapathaftab.register_bank.outmiefieldccreg ;
  (* hdlname = "datapathaftab register_bank outregbank" *)
  wire [31:0] \datapathaftab.register_bank.outregbank ;
  (* hdlname = "datapathaftab register_bank outuiefieldccreg" *)
  wire \datapathaftab.register_bank.outuiefieldccreg ;
  (* hdlname = "datapathaftab register_bank rst" *)
  wire \datapathaftab.register_bank.rst ;
  (* hdlname = "datapathaftab register_bank translatedaddress" *)
  wire [4:0] \datapathaftab.register_bank.translatedaddress ;
  (* hdlname = "datapathaftab register_bank translatedwriteaddress" *)
  wire [4:0] \datapathaftab.register_bank.translatedwriteaddress ;
  (* hdlname = "datapathaftab register_bank uiefieldccregister clk" *)
  wire \datapathaftab.register_bank.uiefieldccregister.clk ;
  (* hdlname = "datapathaftab register_bank uiefieldccregister inreg" *)
  wire \datapathaftab.register_bank.uiefieldccregister.inreg ;
  (* hdlname = "datapathaftab register_bank uiefieldccregister load" *)
  wire \datapathaftab.register_bank.uiefieldccregister.load ;
  (* hdlname = "datapathaftab register_bank uiefieldccregister outreg" *)
  wire \datapathaftab.register_bank.uiefieldccregister.outreg ;
  (* hdlname = "datapathaftab register_bank uiefieldccregister rst" *)
  wire \datapathaftab.register_bank.uiefieldccregister.rst ;
  (* hdlname = "datapathaftab register_bank uiefieldccregister zero" *)
  wire \datapathaftab.register_bank.uiefieldccregister.zero ;
  (* hdlname = "datapathaftab register_bank writeaddressregbank" *)
  wire [11:0] \datapathaftab.register_bank.writeaddressregbank ;
  (* hdlname = "datapathaftab register_bank writeregbank" *)
  wire \datapathaftab.register_bank.writeregbank ;
  (* hdlname = "datapathaftab registerfile clk" *)
  wire \datapathaftab.registerfile.clk ;
  (* hdlname = "datapathaftab registerfile p1" *)
  wire [31:0] \datapathaftab.registerfile.p1 ;
  (* hdlname = "datapathaftab registerfile p2" *)
  wire [31:0] \datapathaftab.registerfile.p2 ;
  (* hdlname = "datapathaftab registerfile rd" *)
  wire [4:0] \datapathaftab.registerfile.rd ;
  (* hdlname = "datapathaftab registerfile rdata" *)
  (* ramstyle = "M9K" *)
  wire [1023:0] \datapathaftab.registerfile.rdata ;
  (* hdlname = "datapathaftab registerfile rs1" *)
  wire [4:0] \datapathaftab.registerfile.rs1 ;
  (* hdlname = "datapathaftab registerfile rs2" *)
  wire [4:0] \datapathaftab.registerfile.rs2 ;
  (* hdlname = "datapathaftab registerfile rst" *)
  wire \datapathaftab.registerfile.rst ;
  (* hdlname = "datapathaftab registerfile setone" *)
  wire \datapathaftab.registerfile.setone ;
  (* hdlname = "datapathaftab registerfile setzero" *)
  wire \datapathaftab.registerfile.setzero ;
  (* hdlname = "datapathaftab registerfile writedata" *)
  wire [31:0] \datapathaftab.registerfile.writedata ;
  (* hdlname = "datapathaftab registerfile writeregfile" *)
  wire \datapathaftab.registerfile.writeregfile ;
  (* hdlname = "datapathaftab regpc clk" *)
  wire \datapathaftab.regpc.clk ;
  (* hdlname = "datapathaftab regpc inreg" *)
  wire [31:0] \datapathaftab.regpc.inreg ;
  (* hdlname = "datapathaftab regpc load" *)
  wire \datapathaftab.regpc.load ;
  (* hdlname = "datapathaftab regpc outreg" *)
  wire [31:0] \datapathaftab.regpc.outreg ;
  (* hdlname = "datapathaftab regpc rst" *)
  wire \datapathaftab.regpc.rst ;
  (* hdlname = "datapathaftab regpc zero" *)
  wire \datapathaftab.regpc.zero ;
  (* hdlname = "datapathaftab resaah" *)
  wire [31:0] \datapathaftab.resaah ;
  (* hdlname = "datapathaftab resaal" *)
  wire [31:0] \datapathaftab.resaal ;
  (* hdlname = "datapathaftab ret_from_epc" *)
  wire \datapathaftab.ret_from_epc ;
  (* hdlname = "datapathaftab rst" *)
  wire \datapathaftab.rst ;
  (* hdlname = "datapathaftab selaah" *)
  wire \datapathaftab.selaah ;
  (* hdlname = "datapathaftab selaal" *)
  wire \datapathaftab.selaal ;
  (* hdlname = "datapathaftab selaau" *)
  wire \datapathaftab.selaau ;
  (* hdlname = "datapathaftab selalu" *)
  wire \datapathaftab.selalu ;
  (* hdlname = "datapathaftab selasu" *)
  wire \datapathaftab.selasu ;
  (* hdlname = "datapathaftab selauipc" *)
  wire \datapathaftab.selauipc ;
  (* hdlname = "datapathaftab selbsu" *)
  wire \datapathaftab.selbsu ;
  (* hdlname = "datapathaftab selcause_csr" *)
  wire \datapathaftab.selcause_csr ;
  (* hdlname = "datapathaftab selccmip_csr" *)
  wire \datapathaftab.selccmip_csr ;
  (* hdlname = "datapathaftab selcsr" *)
  wire \datapathaftab.selcsr ;
  (* hdlname = "datapathaftab selcsraddrfrominst" *)
  wire \datapathaftab.selcsraddrfrominst ;
  (* hdlname = "datapathaftab selimm" *)
  wire \datapathaftab.selimm ;
  (* hdlname = "datapathaftab selimmcsr" *)
  wire \datapathaftab.selimmcsr ;
  (* hdlname = "datapathaftab selinterruptaddressdirect" *)
  wire \datapathaftab.selinterruptaddressdirect ;
  (* hdlname = "datapathaftab selinterruptaddressvectored" *)
  wire \datapathaftab.selinterruptaddressvectored ;
  (* hdlname = "datapathaftab seljl" *)
  wire \datapathaftab.seljl ;
  (* hdlname = "datapathaftab selllu" *)
  wire \datapathaftab.selllu ;
  (* hdlname = "datapathaftab sellogic" *)
  wire [1:0] \datapathaftab.sellogic ;
  (* hdlname = "datapathaftab selmedeleg_csr" *)
  wire \datapathaftab.selmedeleg_csr ;
  (* hdlname = "datapathaftab selmem" *)
  wire \datapathaftab.selmem ;
  (* hdlname = "datapathaftab selmepc_csr" *)
  wire \datapathaftab.selmepc_csr ;
  (* hdlname = "datapathaftab selmideleg_csr" *)
  wire \datapathaftab.selmideleg_csr ;
  (* hdlname = "datapathaftab selp1" *)
  wire \datapathaftab.selp1 ;
  (* hdlname = "datapathaftab selp1csr" *)
  wire \datapathaftab.selp1csr ;
  (* hdlname = "datapathaftab selp2" *)
  wire \datapathaftab.selp2 ;
  (* hdlname = "datapathaftab selpc" *)
  wire \datapathaftab.selpc ;
  (* hdlname = "datapathaftab selpc4" *)
  wire \datapathaftab.selpc4 ;
  (* hdlname = "datapathaftab selpc_csr" *)
  wire \datapathaftab.selpc_csr ;
  (* hdlname = "datapathaftab selreadwritecsr" *)
  wire \datapathaftab.selreadwritecsr ;
  (* hdlname = "datapathaftab selromaddress" *)
  wire \datapathaftab.selromaddress ;
  (* hdlname = "datapathaftab selshift" *)
  wire [1:0] \datapathaftab.selshift ;
  (* hdlname = "datapathaftab seltval_csr" *)
  wire \datapathaftab.seltval_csr ;
  (* hdlname = "datapathaftab setcsr" *)
  wire \datapathaftab.setcsr ;
  (* hdlname = "datapathaftab setone_in" *)
  wire \datapathaftab.setone_in ;
  (* hdlname = "datapathaftab setzero_in" *)
  wire \datapathaftab.setzero_in ;
  (* hdlname = "datapathaftab setzeroorone" *)
  wire \datapathaftab.setzeroorone ;
  (* hdlname = "datapathaftab signedsigned" *)
  wire \datapathaftab.signedsigned ;
  (* hdlname = "datapathaftab signedunsigned" *)
  wire \datapathaftab.signedunsigned ;
  (* hdlname = "datapathaftab startdaru" *)
  wire \datapathaftab.startdaru ;
  (* hdlname = "datapathaftab startdawu" *)
  wire \datapathaftab.startdawu ;
  (* hdlname = "datapathaftab startdivideaau" *)
  wire \datapathaftab.startdivideaau ;
  (* hdlname = "datapathaftab startdivideaau_def" *)
  wire \datapathaftab.startdivideaau_def ;
  (* hdlname = "datapathaftab startmultiplyaau" *)
  wire \datapathaftab.startmultiplyaau ;
  (* hdlname = "datapathaftab startmultiplyaau_def" *)
  wire \datapathaftab.startmultiplyaau_def ;
  (* hdlname = "datapathaftab sulu datain" *)
  wire [31:0] \datapathaftab.sulu.datain ;
  (* hdlname = "datapathaftab sulu dataout" *)
  wire [31:0] \datapathaftab.sulu.dataout ;
  (* hdlname = "datapathaftab sulu load" *)
  wire \datapathaftab.sulu.load ;
  (* hdlname = "datapathaftab sulu loadbytesigned" *)
  wire \datapathaftab.sulu.loadbytesigned ;
  (* hdlname = "datapathaftab sulu loadhalfsigned" *)
  wire \datapathaftab.sulu.loadhalfsigned ;
  (* hdlname = "datapathaftab tempflags" *)
  wire [5:0] \datapathaftab.tempflags ;
  (* hdlname = "datapathaftab unsignedunsigned" *)
  wire \datapathaftab.unsignedunsigned ;
  (* hdlname = "datapathaftab upcntcsr" *)
  wire \datapathaftab.upcntcsr ;
  (* hdlname = "datapathaftab userexternalinterrupt" *)
  wire \datapathaftab.userexternalinterrupt ;
  (* hdlname = "datapathaftab usersoftwareinterrupt" *)
  wire \datapathaftab.usersoftwareinterrupt ;
  (* hdlname = "datapathaftab userstatusalterationpostcsr" *)
  wire \datapathaftab.userstatusalterationpostcsr ;
  (* hdlname = "datapathaftab userstatusalterationprecsr" *)
  wire \datapathaftab.userstatusalterationprecsr ;
  (* hdlname = "datapathaftab usertimerinterrupt" *)
  wire \datapathaftab.usertimerinterrupt ;
  (* hdlname = "datapathaftab validaccesscsr" *)
  wire \datapathaftab.validaccesscsr ;
  (* hdlname = "datapathaftab validaccesscsr_int" *)
  wire \datapathaftab.validaccesscsr_int ;
  (* hdlname = "datapathaftab validaddresscsr" *)
  wire \datapathaftab.validaddresscsr ;
  (* hdlname = "datapathaftab wb_addressregbank" *)
  wire [11:0] \datapathaftab.wb_addressregbank ;
  (* hdlname = "datapathaftab wb_func3" *)
  wire [2:0] \datapathaftab.wb_func3 ;
  (* hdlname = "datapathaftab wb_iscsrinstruction" *)
  wire \datapathaftab.wb_iscsrinstruction ;
  (* hdlname = "datapathaftab wb_mreturetbar" *)
  wire \datapathaftab.wb_mreturetbar ;
  (* hdlname = "datapathaftab wb_ret_from_epc" *)
  wire \datapathaftab.wb_ret_from_epc ;
  (* hdlname = "datapathaftab wb_ret_from_epc_int" *)
  wire \datapathaftab.wb_ret_from_epc_int ;
  (* hdlname = "datapathaftab wb_selalu" *)
  wire \datapathaftab.wb_selalu ;
  (* hdlname = "datapathaftab wb_selcsraddrfrominst" *)
  wire \datapathaftab.wb_selcsraddrfrominst ;
  (* hdlname = "datapathaftab wb_selmem" *)
  wire \datapathaftab.wb_selmem ;
  (* hdlname = "datapathaftab wb_selpc4" *)
  wire \datapathaftab.wb_selpc4 ;
  (* hdlname = "datapathaftab wb_setzeroorone" *)
  wire \datapathaftab.wb_setzeroorone ;
  (* hdlname = "datapathaftab wb_valid" *)
  wire \datapathaftab.wb_valid ;
  (* hdlname = "datapathaftab wb_validaccesscsr" *)
  wire \datapathaftab.wb_validaccesscsr ;
  (* hdlname = "datapathaftab wb_writeregfile" *)
  wire \datapathaftab.wb_writeregfile ;
  (* hdlname = "datapathaftab writeaddressregbank" *)
  wire [11:0] \datapathaftab.writeaddressregbank ;
  (* hdlname = "datapathaftab writedata" *)
  wire [31:0] \datapathaftab.writedata ;
  (* hdlname = "datapathaftab writememdawu" *)
  wire \datapathaftab.writememdawu ;
  (* hdlname = "datapathaftab writememdawu_int" *)
  wire \datapathaftab.writememdawu_int ;
  (* hdlname = "datapathaftab writerb_inst" *)
  wire \datapathaftab.writerb_inst ;
  (* hdlname = "datapathaftab writeregbank" *)
  wire \datapathaftab.writeregbank ;
  (* hdlname = "datapathaftab writeregfile" *)
  wire \datapathaftab.writeregfile ;
  (* hdlname = "datapathaftab writeregfile_in" *)
  wire \datapathaftab.writeregfile_in ;
  (* hdlname = "datapathaftab zerocntcsr" *)
  wire \datapathaftab.zerocntcsr ;
  wire dec_valid;
  wire [1:0] delegationmode;
  wire dncntcsr;
  wire e2m_en;
  wire e2m_rst;
  wire ecallflag;
  wire ex_valid;
  wire exceptionraise;
  wire forced_rb_read;
  wire gi2d_en;
  wire gi2d_rst;
  wire hazard_solved;
  wire hazex;
  wire hazm;
  wire illegalinstrflag;
  wire [2:0] inst_type;
  wire instructiondone;
  wire instructiondonecsr;
  output interruptProcessing;
  wire interruptProcessing;
  wire interruptraise;
  wire [31:0] ir;
  wire is_aau_used;
  wire is_load_in_mem;
  wire is_store_in_mem;
  wire iscsrinstruction;
  wire ldbytesigned;
  wire ldcntcsr;
  wire lddelegation;
  wire ldhalfsigned;
  wire ldmachine;
  wire ldmiereg;
  wire ldmieuiefield;
  wire lduser;
  wire [2:0] ldvaluecsr;
  wire load;
  wire loadmiereg;
  wire loadmieuiefield;
  wire m2wb_en;
  wire m2wb_rst;
  wire m_valid;
  input machineExternalInterrupt;
  wire machineExternalInterrupt;
  input machineSoftwareInterrupt;
  wire machineSoftwareInterrupt;
  input machineTimerInterrupt;
  wire machineTimerInterrupt;
  wire machinestatusalterationpostcsr;
  wire machinestatusalterationprecsr;
  output [31:0] memAddr1;
  wire [31:0] memAddr1;
  output [31:0] memAddr2;
  wire [31:0] memAddr2;
  output [15:0] memDataIn2;
  wire [15:0] memDataIn2;
  input [15:0] memDataOut1;
  wire [15:0] memDataOut1;
  input [15:0] memDataOut2;
  wire [15:0] memDataOut2;
  output memRead1;
  wire memRead1;
  output memRead2;
  wire memRead2;
  input memReady1;
  wire memReady1;
  input memReady2;
  wire memReady2;
  output memWrite;
  wire memWrite;
  wire mipcclddisable;
  wire mirror;
  wire mirrorusercu;
  wire [1:0] modetvec;
  wire [11:0] muxcode;
  wire [1:0] nbytes;
  wire pass;
  input [15:0] platformInterruptSignals;
  wire [15:0] platformInterruptSignals;
  wire [1:0] previousprv;
  wire readonlycsr;
  wire ret_from_epc;
  input rst;
  wire rst;
  wire sel_tval_csr;
  wire selaah;
  wire selaal;
  wire selaau;
  wire selalu;
  wire selasu;
  wire selauipc;
  wire selbsu;
  wire selcause_csr;
  wire selccmip_csr;
  wire selcsr;
  wire selcsraddrfrominst;
  wire selimm;
  wire selimmcsr;
  wire selinterruptaddressdirect;
  wire selinterruptaddressvectored;
  wire seljl;
  wire selllu;
  wire [1:0] sellogic;
  wire selmedeleg_csr;
  wire selmem;
  wire selmepc_csr;
  wire selmideleg_csr;
  wire selp1;
  wire selp1csr;
  wire selp2;
  wire selpc;
  wire selpc4;
  wire selpc_csr;
  wire selreadwritecsr;
  wire selromaddress;
  wire [1:0] selshift;
  wire setcsr;
  wire setzeroorone;
  wire signedsigned;
  wire signedunsigned;
  wire startdaru;
  wire startdawu;
  wire startdivideaau;
  wire startmultiplyaau;
  wire unsignedunsigned;
  wire upcntcsr;
  input userExternalInterrupt;
  wire userExternalInterrupt;
  input userSoftwareInterrupt;
  wire userSoftwareInterrupt;
  input userTimerInterrupt;
  wire userTimerInterrupt;
  wire userstatusalterationpostcsr;
  wire userstatusalterationprecsr;
  wire validaccesscsr;
  wire [2:0] wb_func3;
  wire wb_iscsrinstruction;
  wire wb_mreturetbar;
  wire wb_ret_from_epc;
  wire wb_valid;
  wire wb_validaccesscsr;
  wire writerb_inst;
  wire writeregbank;
  wire writeregfile;
  wire zerocntcsr;
  always @(posedge clk)
    if (_0000_) _0999_[5] <= 1'h0;
    else _0999_[5] <= _1003_[5];
  always @(posedge clk)
    if (rst) _0999_[4:0] <= 5'h00;
    else _0999_[4:0] <= _1004_[4:0];
  reg [1:0] _1668_;
  always @(posedge clk)
    if (_0001_) _1668_ <= 2'h0;
    else _1668_ <= { _0972_[5], _0972_[0] };
  assign { _0968_[5], _0968_[0] } = _1668_;
  reg [3:0] _1669_;
  always @(posedge clk)
    if (rst) _1669_ <= 4'h0;
    else _1669_ <= _0973_[4:1];
  assign _0968_[4:1] = _1669_;
  always @(posedge clk)
    if (_0002_) _1113_ <= 1'h0;
    else _1113_ <= _1117_;
  always @(posedge clk)
    if (_0003_) _1142_ <= 1'h0;
    else _1142_ <= _1146_;
  always @(posedge clk)
    if (_0004_) _1167_ <= 1'h0;
    else _1167_ <= _1171_;
  reg [21:0] _1673_;
  always @(posedge clk)
    if (rst) _1673_ <= 22'h000000;
    else _1673_ <= { _1423_[31:16], _1423_[11], _1423_[8:7], _1423_[4:3], _1423_[0] };
  assign { _1422_[31:16], _1422_[11], _1422_[8:7], _1422_[4:3], _1422_[0] } = _1673_;
  reg _1674_;
  (* hdlname = "datapathaftab interrcheckcausedetection 5460" *)
  always @(posedge clk)
    if (rst) _1674_ <= 1'h0;
    else _1674_ <= _1270_[0];
  assign _1185_[0] = _1674_;
  reg [9:0] _1675_;
  always @(posedge clk)
    if (_0005_) _1675_ <= 10'h000;
    else _1675_ <= { \datapathaftab.csrisl.ccmip [15:12], \datapathaftab.csrisl.ccmip [10:9], \datapathaftab.csrisl.ccmip [6:5], \datapathaftab.csrisl.ccmip [2:1] };
  assign { _1272_[15:12], _1272_[10:9], _1272_[6:5], _1272_[2:1] } = _1675_;
  reg [21:0] _1676_;
  always @(posedge clk)
    if (rst) _1676_ <= 22'h000000;
    else _1676_ <= { _1273_[31:16], _1273_[11], _1273_[8:7], _1273_[4:3], _1273_[0] };
  assign { _1272_[31:16], _1272_[11], _1272_[8:7], _1272_[4:3], _1272_[0] } = _1676_;
  always @(posedge clk)
    if (_0000_) _1010_[0] <= 1'h0;
    else _1010_[0] <= _1011_[0];
  always @(posedge clk)
    if (rst) _1010_[33:1] <= 33'h000000000;
    else _1010_[33:1] <= _1012_[33:1];
  always @(posedge clk)
    if (_0001_) _0976_[32] <= 1'h0;
    else _0976_[32] <= \datapathaftab.aau.division.unsigneddiv.datapathdiv.m [32];
  always @(posedge clk)
    if (rst) _0976_[31:0] <= 32'd0;
    else _0976_[31:0] <= _0977_[31:0];
  reg _1681_;
  always @(posedge clk)
    if (_0006_) _1681_ <= 1'h0;
    else _1681_ <= \datapathaftab.d2e_ctrl_word_curr [46];
  assign _0509_[46] = _1681_;
  reg [62:0] _1682_;
  always @(posedge clk)
    if (_0933_) _1682_ <= 63'h0000000000000000;
    else _1682_ <= { _0867_[63:47], _0867_[45:0] };
  assign { _0509_[63:47], _0509_[45:0] } = _1682_;
  assign _0008_ = ~ \controlleraftab.mipcclddisable ;
  assign _0000_ = | { \datapathaftab.aau.multiplication.controller.counter.initcnt , rst };
  assign _0001_ = | { \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.initcnt , rst };
  assign _0002_ = | { \datapathaftab.daru1.controller.initcnt , rst };
  assign _0003_ = | { \datapathaftab.daru2.controller.initcnt , rst };
  assign _0004_ = | { \datapathaftab.dawu.controller.initcnt , rst };
  assign _0005_ = | { _0008_, rst };
  assign _0006_ = | { \datapathaftab.d2e_rst_def , \datapathaftab.d2e_en_def , rst };
  assign _0007_ = | { _1104_, _1098_ };
  assign \controlleraftab.p_state  = rst ? 5'h00 : _0009_;
  assign \controlleraftab.csr_p_state  = rst ? 1'h0 : _0010_;
  assign _0453_ = | { _0417_, _0400_, _0399_, _0395_, _0394_, _0388_, _0381_, _0020_, _0021_, _0023_ };
  assign _0454_ = | { _0405_, _0404_, _0397_, _0396_, _0387_, _0386_, _0385_, _0384_, _0383_ };
  assign _0455_ = | { _0417_, _0404_, _0400_, _0396_, _0395_, _0384_, _0381_, _0020_, _0021_, _0023_ };
  assign _0456_ = | { _0394_, _0388_, _0387_, _0386_, _0383_ };
  assign _0457_ = | { _0405_, _0397_, _0385_ };
  assign _0459_ = | { _0404_, _0400_, _0399_, _0396_, _0395_, _0394_, _0388_, _0387_, _0386_, _0385_, _0384_, _0383_, _0381_, _0020_, _0021_, _0023_ };
  assign _0460_ = | { _0405_, _0397_ };
  assign _0461_ = | { _0404_, _0400_, _0399_, _0397_, _0396_, _0395_, _0394_, _0388_, _0387_, _0386_, _0385_, _0384_, _0383_, _0381_, _0020_, _0021_, _0023_ };
  assign _0462_ = | { _0417_, _0404_, _0400_, _0399_, _0397_, _0396_, _0395_, _0388_, _0387_, _0386_, _0385_, _0384_, _0383_, _0381_, _0020_, _0021_, _0023_ };
  assign _0463_ = | { _0405_, _0394_ };
  assign _0464_ = | { _0417_, _0404_, _0400_, _0399_, _0397_, _0396_, _0395_, _0394_, _0388_, _0387_, _0386_, _0385_, _0384_, _0383_, _0381_ };
  assign _0465_ = | { _0417_, _0405_, _0400_, _0399_, _0397_, _0395_, _0394_, _0388_, _0387_, _0386_, _0385_, _0384_, _0383_, _0381_, _0020_, _0021_, _0023_ };
  assign _0466_ = | { _0404_, _0396_ };
  assign _0467_ = | { _0417_, _0400_, _0399_, _0397_, _0396_, _0395_, _0394_, _0388_, _0387_, _0386_, _0385_, _0384_, _0383_, _0381_, _0020_, _0021_, _0023_ };
  assign _0468_ = | { _0405_, _0404_ };
  assign _0469_ = | { _0417_, _0405_, _0404_, _0400_, _0399_, _0395_, _0394_, _0388_, _0387_, _0386_, _0385_, _0384_, _0383_, _0381_, _0020_, _0021_, _0023_ };
  assign _0470_ = | { _0397_, _0396_ };
  assign _0471_ = | { _0417_, _0405_, _0404_, _0400_, _0399_, _0397_, _0396_, _0395_, _0388_, _0387_, _0386_, _0385_, _0384_, _0383_, _0381_, _0020_, _0021_, _0023_ };
  assign _0472_ = | { _0417_, _0405_, _0404_, _0399_, _0397_, _0396_, _0395_, _0394_, _0388_, _0387_, _0386_, _0385_, _0384_, _0383_, _0381_, _0020_, _0021_, _0023_ };
  assign _0473_ = | { _0417_, _0381_, _0020_, _0021_, _0023_ };
  assign _0474_ = | { _0405_, _0404_, _0400_, _0399_, _0397_, _0396_, _0395_, _0394_, _0388_, _0387_, _0386_, _0385_, _0384_, _0383_ };
  assign _0475_ = | { _0417_, _0405_, _0400_, _0399_, _0396_, _0395_, _0388_, _0387_, _0386_, _0385_, _0384_, _0383_, _0381_, _0020_, _0021_, _0023_ };
  assign _0476_ = | { _0397_, _0394_ };
  assign _0477_ = | { _0417_, _0405_, _0404_, _0400_, _0399_, _0397_, _0396_, _0395_, _0394_, _0388_, _0387_, _0386_, _0385_, _0384_, _0383_, _0020_, _0021_, _0023_ };
  assign _0478_ = | { _0417_, _0405_, _0404_, _0400_, _0399_, _0397_, _0396_, _0395_, _0388_, _0384_, _0383_, _0381_, _0020_, _0021_, _0023_ };
  assign _0479_ = | { _0394_, _0387_, _0386_, _0385_ };
  assign _0481_ = | { _0399_, _0383_ };
  assign _0480_ = | { _0417_, _0405_, _0404_, _0400_, _0397_, _0396_, _0395_, _0394_, _0388_, _0387_, _0386_, _0385_, _0384_, _0381_ };
  assign _0482_ = | { _0417_, _0405_, _0404_, _0400_, _0399_, _0397_, _0396_, _0395_, _0394_, _0388_, _0387_, _0386_, _0385_, _0384_, _0383_ };
  assign _0483_ = | { _0417_, _0405_, _0404_, _0400_, _0399_, _0397_, _0396_, _0395_, _0394_, _0388_, _0386_, _0385_, _0384_, _0383_, _0381_, _0020_, _0021_, _0023_ };
  assign _0484_ = | { _0417_, _0405_, _0404_, _0400_, _0399_, _0397_, _0396_, _0395_, _0394_, _0388_, _0387_, _0385_, _0384_, _0383_, _0381_, _0020_, _0021_, _0023_ };
  assign _0485_ = | { _0417_, _0405_, _0404_, _0400_, _0399_, _0397_, _0396_, _0395_, _0394_, _0388_, _0387_, _0386_, _0383_, _0381_, _0020_, _0021_, _0023_ };
  assign _0486_ = | { _0385_, _0384_ };
  assign _0487_ = | { _0397_, _0396_, _0395_, _0394_, _0388_, _0387_, _0386_, _0385_, _0384_, _0383_, _0381_ };
  assign _0488_ = | { _0417_, _0405_, _0404_, _0400_, _0399_ };
  assign _0458_ = | { _0417_, _0405_, _0404_, _0400_, _0399_, _0397_, _0396_, _0395_, _0394_, _0388_, _0387_, _0386_, _0385_, _0384_, _0383_, _0381_ };
  assign _0490_ = | { _0417_, _0020_, _0021_, _0023_ };
  assign _0491_ = | { _0405_, _0404_, _0400_, _0399_, _0397_, _0396_, _0395_, _0394_, _0388_, _0387_, _0386_, _0385_, _0384_, _0383_, _0381_ };
  assign _0492_ = | { _0385_, _0383_ };
  assign _0493_ = | { _0021_, _0023_ };
  assign _0489_ = | { _0020_, _0021_, _0023_ };
  assign \controlleraftab.wb_validaccesscsr  = rst ? 1'h0 : _0494_;
  assign \datapathaftab.e2m_validaccesscsr_curr  = rst ? 1'h0 : _0495_;
  assign \datapathaftab.d2e_validaccesscsr_curr  = rst ? 1'h0 : _0496_;
  assign \datapathaftab.eh_state_curr  = rst ? 2'h0 : _0497_;
  assign \datapathaftab.m2wb_ctrl_word_curr  = rst ? 64'h0000000000000000 : { 4'hx, _0498_[59], 2'hx, _0498_[56:53], 4'hx, _0498_[48], 46'hxxxxxxxxxxxx, _0498_[1:0] };
  assign \datapathaftab.m2wb_inst_type_curr  = rst ? 3'h0 : _0499_;
  assign \datapathaftab.e2m_divided_by_zero_flag_curr  = rst ? 1'h0 : _0500_;
  assign \datapathaftab.e2m_ctrl_word_curr  = rst ? 64'h0000000000000000 : _0501_;
  assign \datapathaftab.e2m_ecall_flag_curr  = rst ? 1'h0 : _0502_;
  assign \datapathaftab.e2m_illegal_instruction_flag_curr  = rst ? 1'h0 : _0503_;
  assign \datapathaftab.e2m_pc_curr  = rst ? 32'd0 : _0504_;
  assign \datapathaftab.e2m_op1_curr  = rst ? 32'd0 : _0505_;
  assign \datapathaftab.e2m_outcsr_curr  = rst ? 32'd0 : _0506_;
  assign \datapathaftab.e2m_instr_misaligned_flag_curr  = rst ? 1'h0 : _0507_;
  assign \controlleraftab.m_valid  = rst ? 1'h0 : _0508_;
  assign \datapathaftab.d2e_ctrl_word_curr  = rst ? 64'h0000000000000000 : _0509_;
  assign \datapathaftab.d2e_ecall_flag_curr  = rst ? 1'h0 : _0510_;
  assign \datapathaftab.d2e_illegal_instruction_flag_curr  = rst ? 1'h0 : _0511_;
  assign \datapathaftab.d2e_instr_misaligned_flag_curr  = rst ? 1'h0 : _0512_;
  assign \controlleraftab.ex_valid  = rst ? 1'h0 : _0513_;
  assign \datapathaftab.gi2d_instr_misaligned_flag_curr  = rst ? 1'h0 : _0514_;
  assign \datapathaftab.d2e_pc_plus4_curr  = rst ? 32'd0 : _0515_;
  assign \datapathaftab.gi2d_pc_plus4_curr  = rst ? 32'd0 : _0516_;
  assign \datapathaftab.d2e_pc_curr  = rst ? 32'd0 : _0517_;
  assign \datapathaftab.gi2d_pc_curr  = rst ? 32'd0 : _0518_;
  assign \controlleraftab.dec_valid  = rst ? 1'h0 : _0519_;
  assign \datapathaftab.e2m_hazard_flag_curr  = rst ? 1'h0 : _0520_;
  assign \datapathaftab.e2m_inst_type_curr  = rst ? 3'h0 : _0521_;
  assign \datapathaftab.e2m_instr_curr  = rst ? 32'd0 : _0522_;
  assign \datapathaftab.m2wb_pc_curr  = rst ? 32'd0 : _0523_;
  assign \datapathaftab.d2e_inst_type_curr  = rst ? 3'h0 : _0524_;
  assign \datapathaftab.d2e_instr_curr  = rst ? 32'd0 : _0525_;
  assign \controlleraftab.wb_valid  = rst ? 1'h0 : _0526_;
  assign \datapathaftab.m2wb_instr_misaligned_flag_curr  = rst ? 1'h0 : _0527_;
  assign \datapathaftab.m2wb_illegal_instruction_flag_curr  = rst ? 1'h0 : _0528_;
  assign \datapathaftab.m2wb_divided_by_zero_flag_curr  = rst ? 1'h0 : _0529_;
  assign \datapathaftab.m2wb_ecall_flag_curr  = rst ? 1'h0 : _0530_;
  assign \datapathaftab.m2wb_outcsr_curr  = rst ? 32'd0 : _0531_;
  assign \datapathaftab.e2m_pc_plus4_curr  = rst ? 32'd0 : _0532_;
  assign \datapathaftab.csrisl.p1  = rst ? 32'd0 : _0533_;
  assign \datapathaftab.m2wb_hazard_flag_curr  = rst ? 1'h0 : _0534_;
  assign \datapathaftab.m2wb_pc_plus4_curr  = rst ? 32'd0 : _0535_;
  assign \datapathaftab.m2wb_alu_res_curr  = rst ? 32'd0 : _0536_;
  assign \datapathaftab.m2wb_mem_res_curr  = rst ? 32'd0 : _0537_;
  assign \datapathaftab.e2m_ex_flag_curr  = rst ? 1'h0 : _0538_;
  assign \datapathaftab.e2m_op2_curr  = rst ? 32'd0 : _0539_;
  assign \datapathaftab.e2m_gt_curr  = rst ? 1'h0 : _0540_;
  assign \datapathaftab.e2m_eq_curr  = rst ? 1'h0 : _0541_;
  assign \datapathaftab.e2m_lt_curr  = rst ? 1'h0 : _0542_;
  assign \datapathaftab.d2e_outcsr_curr  = rst ? 32'd0 : _0543_;
  assign \datapathaftab.comparator.ain  = rst ? 32'd0 : _0544_;
  assign \datapathaftab.d2e_op2_curr  = rst ? 32'd0 : _0545_;
  assign \datapathaftab.aau.bin  = rst ? 32'd0 : _0546_;
  assign \datapathaftab.aau.ain  = rst ? 32'd0 : _0547_;
  assign \datapathaftab.completedaau_stored  = rst ? 1'h0 : _0548_;
  assign \datapathaftab.d2e_ex_flag_curr  = rst ? 1'h0 : _0549_;
  assign \datapathaftab.m2wb_instr_curr  = rst ? 32'd0 : _0550_;
  assign \datapathaftab.m2wb_lt_curr  = rst ? 1'h0 : _0551_;
  assign \datapathaftab.m2wb_ex_flag_curr  = rst ? 1'h0 : _0552_;
  assign { \controlleraftab.ir [31:20], \datapathaftab.gi2d_instr_curr [19:15], \controlleraftab.ir [14:12], \datapathaftab.gi2d_instr_curr [11:7], \controlleraftab.ir [6:0] } = rst ? 32'd0 : _0553_;
  assign \datapathaftab.gi2d_ex_flag_curr  = rst ? 1'h0 : _0554_;
  assign \datapathaftab.completeddaru1_stored  = rst ? 1'h0 : _0555_;
  assign \datapathaftab.f2gi_pc_plus4_curr  = rst ? 32'd0 : _0556_;
  assign \datapathaftab.daru2.datapath.addrreg.inreg  = rst ? 32'd0 : _0557_;
  always @(posedge clk)
    if (_0932_) _0518_ <= 32'd0;
    else _0518_ <= _0850_;
  always @(posedge clk)
    if (_0932_) _0519_ <= 1'h0;
    else _0519_ <= _0849_;
  always @(posedge clk)
    if (_0933_) _0510_ <= 1'h0;
    else _0510_ <= _0866_;
  always @(posedge clk)
    if (_0934_) _0520_ <= 1'h0;
    else _0520_ <= _0878_;
  always @(posedge clk)
    if (_0934_) _0521_ <= 3'h0;
    else _0521_ <= _0877_;
  always @(posedge clk)
    if (_0934_) _0522_ <= 32'd0;
    else _0522_ <= _0876_;
  always @(posedge clk)
    if (_0935_) _0523_ <= 32'd0;
    else _0523_ <= _0903_;
  always @(posedge clk)
    if (_0933_) _0511_ <= 1'h0;
    else _0511_ <= _0865_;
  always @(posedge clk)
    if (_0933_) _0524_ <= 3'h0;
    else _0524_ <= _0860_;
  always @(posedge clk)
    if (_0933_) _0525_ <= 32'd0;
    else _0525_ <= _0859_;
  always @(posedge clk)
    if (_0935_) _0526_ <= 1'h0;
    else _0526_ <= _0902_;
  always @(posedge clk)
    if (_0935_) _0527_ <= 1'h0;
    else _0527_ <= _0901_;
  always @(posedge clk)
    if (_0935_) _0528_ <= 1'h0;
    else _0528_ <= _0900_;
  always @(posedge clk)
    if (_0935_) _0529_ <= 1'h0;
    else _0529_ <= _0899_;
  always @(posedge clk)
    if (_0935_) _0530_ <= 1'h0;
    else _0530_ <= _0898_;
  always @(posedge clk)
    if (_0935_) _0531_ <= 32'd0;
    else _0531_ <= _0897_;
  always @(posedge clk)
    if (_0934_) _0532_ <= 32'd0;
    else _0532_ <= _0875_;
  always @(posedge clk)
    if (_0935_) _0533_ <= 32'd0;
    else _0533_ <= _0896_;
  always @(posedge clk)
    if (_0933_) _0512_ <= 1'h0;
    else _0512_ <= _0864_;
  always @(posedge clk)
    if (_0935_) _0534_ <= 1'h0;
    else _0534_ <= _0895_;
  always @(posedge clk)
    if (_0933_) _0513_ <= 1'h0;
    else _0513_ <= _0863_;
  always @(posedge clk)
    if (_0935_) _0535_ <= 32'd0;
    else _0535_ <= _0894_;
  always @(posedge clk)
    if (_0935_) _0536_ <= 32'd0;
    else _0536_ <= _0893_;
  always @(posedge clk)
    if (_0935_) _0537_ <= 32'd0;
    else _0537_ <= _0892_;
  always @(posedge clk)
    if (_0934_) _0538_ <= 1'h0;
    else _0538_ <= _0874_;
  always @(posedge clk)
    if (_0932_) _0514_ <= 1'h0;
    else _0514_ <= _0852_;
  always @(posedge clk)
    if (_0934_) _0539_ <= 32'd0;
    else _0539_ <= _0873_;
  always @(posedge clk)
    if (_0933_) _0515_ <= 32'd0;
    else _0515_ <= _0862_;
  always @(posedge clk)
    if (_0934_) _0540_ <= 1'h0;
    else _0540_ <= _0872_;
  always @(posedge clk)
    if (_0934_) _0541_ <= 1'h0;
    else _0541_ <= _0871_;
  always @(posedge clk)
    if (_0934_) _0542_ <= 1'h0;
    else _0542_ <= _0870_;
  always @(posedge clk)
    if (_0933_) _0543_ <= 32'd0;
    else _0543_ <= _0858_;
  always @(posedge clk)
    if (_0933_) _0544_ <= 32'd0;
    else _0544_ <= _0857_;
  always @(posedge clk)
    if (_0932_) _0516_ <= 32'd0;
    else _0516_ <= _0851_;
  always @(posedge clk)
    if (_0933_) _0545_ <= 32'd0;
    else _0545_ <= _0856_;
  always @(posedge clk)
    if (_0935_) _0494_ <= 1'h0;
    else _0494_ <= _0906_;
  always @(posedge clk)
    if (_0933_) _0546_ <= 32'd0;
    else _0546_ <= _0855_;
  always @(posedge clk)
    if (_0933_) _0547_ <= 32'd0;
    else _0547_ <= _0854_;
  always @(posedge clk)
    if (_0934_) _0495_ <= 1'h0;
    else _0495_ <= _0888_;
  always @(posedge clk)
    if (_0933_) _0496_ <= 1'h0;
    else _0496_ <= _0868_;
  always @(posedge clk)
    if (_0936_) _0497_ <= 2'h0;
    else _0497_ <= \datapathaftab.eh_state_next ;
  reg [7:0] _1840_;
  always @(posedge clk)
    if (_0935_) _1840_ <= 8'h00;
    else _1840_ <= { _0905_[59], _0905_[56:53], _0905_[48], _0905_[1:0] };
  assign { _0498_[59], _0498_[56:53], _0498_[48], _0498_[1:0] } = _1840_;
  always @(posedge clk)
    if (_0937_) _0548_ <= 1'h0;
    else _0548_ <= _0679_;
  always @(posedge clk)
    if (_0933_) _0549_ <= 1'h0;
    else _0549_ <= _0853_;
  always @(posedge clk)
    if (_0935_) _0550_ <= 32'd0;
    else _0550_ <= _0891_;
  always @(posedge clk)
    if (_0935_) _0499_ <= 3'h0;
    else _0499_ <= _0904_;
  always @(posedge clk)
    if (_0934_) _0500_ <= 1'h0;
    else _0500_ <= _0887_;
  always @(posedge clk)
    if (_0934_) _0501_ <= 64'h0000000000000000;
    else _0501_ <= _0886_;
  always @(posedge clk)
    if (_0934_) _0502_ <= 1'h0;
    else _0502_ <= _0885_;
  always @(posedge clk)
    if (_0935_) _0551_ <= 1'h0;
    else _0551_ <= _0890_;
  always @(posedge clk)
    if (_0934_) _0503_ <= 1'h0;
    else _0503_ <= _0884_;
  always @(posedge clk)
    if (_0935_) _0552_ <= 1'h0;
    else _0552_ <= _0889_;
  always @(posedge clk)
    if (_0934_) _0504_ <= 32'd0;
    else _0504_ <= _0883_;
  always @(posedge clk)
    if (_0932_) _0553_ <= 32'd0;
    else _0553_ <= _0848_;
  always @(posedge clk)
    if (_0932_) _0554_ <= 1'h0;
    else _0554_ <= _0847_;
  always @(posedge clk)
    if (_0938_) _0555_ <= 1'h0;
    else _0555_ <= _0569_;
  always @(posedge clk)
    if (_0934_) _0505_ <= 32'd0;
    else _0505_ <= _0882_;
  always @(posedge clk)
    if (_0934_) _0506_ <= 32'd0;
    else _0506_ <= _0881_;
  always @(posedge clk)
    if (_0934_) _0507_ <= 1'h0;
    else _0507_ <= _0880_;
  always @(posedge clk)
    if (_0934_) _0557_ <= 32'd0;
    else _0557_ <= _0869_;
  always @(posedge clk)
    if (_0933_) _0517_ <= 32'd0;
    else _0517_ <= _0861_;
  always @(posedge clk)
    if (_0934_) _0508_ <= 1'h0;
    else _0508_ <= _0879_;
  assign _0932_ = | { \datapathaftab.gi2d_rst_def , rst };
  assign _0933_ = | { \datapathaftab.d2e_rst_def , rst };
  assign _0934_ = | { \datapathaftab.e2m_rst_def , rst };
  assign _0935_ = | { \datapathaftab.m2wb_rst_def , rst };
  assign _0936_ = | { \controlleraftab.m2wb_rst , rst };
  assign _0937_ = | { _0678_, rst };
  assign _0938_ = | { _0568_, rst };
  assign _0939_ = | { _0924_, _0923_ };
  assign _0940_ = | { _0924_, _0923_, _0921_ };
  assign _0941_ = | { _0921_, _0918_ };
  assign _0942_ = | { _0923_, _0921_, _0918_ };
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.pstate  = rst ? 2'h0 : _0960_;
  always @(posedge clk)
    if (_0933_) _0960_ <= 2'h0;
    else _0960_ <= \datapathaftab.aau.division.unsigneddiv.controllerdiv.nstate ;
  assign _0967_ = | { _0965_, _0962_ };
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.temp  = rst ? 6'h00 : _0968_;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.m  = rst ? 33'h000000000 : _0976_;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregq.6866.seroutp  = rst ? 1'h0 : _0978_;
  assign \datapathaftab.aau.division.tclq.ain  = rst ? 32'd0 : _0979_;
  always @(posedge clk)
    if (rst) _0979_ <= 32'd0;
    else _0979_ <= _0982_;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.rprev  = rst ? 33'h000000000 : _0984_;
  always @(posedge clk)
    if (_0001_) _0984_ <= 33'h000000000;
    else _0984_ <= _0986_;
  assign \datapathaftab.aau.multiplication.controller.pstate  = rst ? 2'h1 : _0987_;
  always @(posedge clk)
    if (_0933_) _0987_ <= 2'h1;
    else _0987_ <= \datapathaftab.aau.multiplication.controller.nstate ;
  assign \datapathaftab.aau.multiplication.controller.counter.temp  = rst ? 6'h00 : _0999_;
  assign \datapathaftab.aau.multiplication.datapath.addsub.b  = rst ? 33'h000000000 : _1008_;
  always @(posedge clk)
    if (rst) _1008_ <= 33'h000000000;
    else _1008_ <= _1009_;
  assign \datapathaftab.aau.multiplication.datapath.mrreg.6594.outreg_t  = rst ? 34'h000000000 : _1010_;
  assign \datapathaftab.aau.multiplication.datapath.addsub.add.a  = rst ? 33'h000000000 : _1013_;
  always @(posedge clk)
    if (_0000_) _1013_ <= 33'h000000000;
    else _1013_ <= _1014_;
  assign \datapathaftab.csraddressingdecoder.cntoutput  = rst ? 3'h0 : _1074_;
  always @(posedge clk)
    if (_1080_) _1074_ <= 3'h0;
    else _1074_ <= _1079_;
  assign _1080_ = | { \controlleraftab.zerocntcsr , rst };
  assign \datapathaftab.daru1.controller.pstate  = rst ? 2'h0 : _1096_;
  always @(posedge clk)
    if (_1108_) _1096_ <= 2'h0;
    else _1096_ <= \datapathaftab.daru1.controller.nstate ;
  assign _1108_ = | { \controlleraftab.gi2d_rst , rst };
  assign \datapathaftab.daru1.datapath.addrreg.outreg  = rst ? 32'd0 : _1111_;
  always @(posedge clk)
    if (rst) _1111_ <= 32'd0;
    else _1111_ <= _1112_;
  assign \datapathaftab.daru1.datapath.adder.fa2.b  = rst ? 1'h0 : _1113_;
  assign \datapathaftab.daru1.datapath.nbytereg.outreg  = rst ? 2'h0 : _1124_;
  always @(posedge clk)
    if (rst) _1124_ <= 2'h0;
    else _1124_ <= _1125_;
  assign \datapathaftab.daru1.datapath.reg0.outreg  = rst ? 16'h0000 : _1126_;
  always @(posedge clk)
    if (_0002_) _1126_ <= 16'h0000;
    else _1126_ <= _1127_;
  assign \datapathaftab.daru1.datapath.dataouthigh_reg  = rst ? 16'h0000 : _1128_;
  always @(posedge clk)
    if (_0002_) _1128_ <= 16'h0000;
    else _1128_ <= _1129_;
  assign \datapathaftab.daru2.controller.pstate  = rst ? 2'h0 : _1130_;
  always @(posedge clk)
    if (_1137_) _1130_ <= 2'h0;
    else _1130_ <= \datapathaftab.daru2.controller.nstate ;
  assign \datapathaftab.daru2.datapath.addrreg.outreg  = rst ? 32'd0 : _1140_;
  always @(posedge clk)
    if (rst) _1140_ <= 32'd0;
    else _1140_ <= _1141_;
  assign \datapathaftab.daru2.datapath.adder.fa2.b  = rst ? 1'h0 : _1142_;
  assign \datapathaftab.daru2.datapath.nbytereg.outreg  = rst ? 2'h0 : _1149_;
  always @(posedge clk)
    if (rst) _1149_ <= 2'h0;
    else _1149_ <= _1150_;
  assign \datapathaftab.daru2.datapath.reg0.outreg  = rst ? 16'h0000 : _1151_;
  always @(posedge clk)
    if (_0003_) _1151_ <= 16'h0000;
    else _1151_ <= _1152_;
  assign \datapathaftab.daru2.datapath.reg1.outreg  = rst ? 16'h0000 : _1153_;
  always @(posedge clk)
    if (_0003_) _1153_ <= 16'h0000;
    else _1153_ <= _1154_;
  assign \datapathaftab.dawu.controller.pstate  = rst ? 1'h0 : _1155_;
  always @(posedge clk)
    if (_1137_) _1155_ <= 1'h0;
    else _1155_ <= \datapathaftab.dawu.controller.nstate ;
  assign _1137_ = | { \controlleraftab.m2wb_en_temp , rst };
  assign \datapathaftab.dawu.datapath.addrreg.outreg  = rst ? 32'd0 : _1165_;
  always @(posedge clk)
    if (rst) _1165_ <= 32'd0;
    else _1165_ <= _1166_;
  assign \datapathaftab.dawu.datapath.adder.fa2.b  = rst ? 1'h0 : _1167_;
  assign \datapathaftab.dawu.datapath.nbytesout  = rst ? 2'h0 : _1172_;
  always @(posedge clk)
    if (rst) _1172_ <= 2'h0;
    else _1172_ <= _1173_;
  assign \datapathaftab.dawu.datapath.outreg0  = rst ? 16'h0000 : _1174_;
  always @(posedge clk)
    if (rst) _1174_ <= 16'h0000;
    else _1174_ <= _1175_;
  assign \datapathaftab.dawu.datapath.outreg1  = rst ? 16'h0000 : _1176_;
  always @(posedge clk)
    if (rst) _1176_ <= 16'h0000;
    else _1176_ <= _1177_;
  assign { \datapathaftab.interrcheckcausedetection.delegationmode [1], \controlleraftab.delegationmode [0] } = rst ? 2'h0 : { 1'hx, _1185_[0] };
  assign \datapathaftab.curprv  = rst ? 2'h3 : _1186_;
  always @(posedge clk)
    if (_1271_) _1186_ <= 2'h3;
    else _1186_ <= _1187_;
  assign _1271_ = | { \controlleraftab.ldmachine , rst };
  assign \datapathaftab.csrisl.ccmip  = rst ? 32'd0 : _1272_;
  assign \datapathaftab.outcsr_reg  = rst ? 32'd0 : _1284_;
  always @(posedge clk)
    if (rst) _1284_ <= 32'd0;
    else _1284_ <= \datapathaftab.d2e_outcsr_next ;
  assign \datapathaftab.register_bank.csr_registers.rdata  = rst ? 1024'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : _1291_;
  assign _1292_ = _1312_[0] ? \datapathaftab.register_bank.csr_registers.rdata [63:32] : \datapathaftab.register_bank.csr_registers.rdata [31:0];
  assign _1293_ = _1312_[0] ? \datapathaftab.register_bank.csr_registers.rdata [191:160] : \datapathaftab.register_bank.csr_registers.rdata [159:128];
  assign _1294_ = _1312_[0] ? \datapathaftab.register_bank.csr_registers.rdata [319:288] : \datapathaftab.register_bank.csr_registers.rdata [287:256];
  assign _1295_ = _1312_[0] ? \datapathaftab.register_bank.csr_registers.rdata [447:416] : \datapathaftab.register_bank.csr_registers.rdata [415:384];
  assign _1296_ = _1312_[0] ? \datapathaftab.register_bank.csr_registers.rdata [575:544] : \datapathaftab.register_bank.csr_registers.rdata [543:512];
  assign _1297_ = _1312_[0] ? \datapathaftab.register_bank.csr_registers.rdata [703:672] : \datapathaftab.register_bank.csr_registers.rdata [671:640];
  assign _1298_ = _1312_[0] ? \datapathaftab.register_bank.csr_registers.rdata [831:800] : \datapathaftab.register_bank.csr_registers.rdata [799:768];
  assign _1299_ = _1312_[0] ? \datapathaftab.register_bank.csr_registers.rdata [959:928] : \datapathaftab.register_bank.csr_registers.rdata [927:896];
  assign _1300_ = _1312_[2] ? _1316_ : _1315_;
  assign _1301_ = _1312_[2] ? _1320_ : _1319_;
  assign _1302_ = _1312_[0] ? \datapathaftab.register_bank.csr_registers.rdata [127:96] : \datapathaftab.register_bank.csr_registers.rdata [95:64];
  assign _1303_ = _1312_[0] ? \datapathaftab.register_bank.csr_registers.rdata [255:224] : \datapathaftab.register_bank.csr_registers.rdata [223:192];
  assign _1304_ = _1312_[0] ? \datapathaftab.register_bank.csr_registers.rdata [383:352] : \datapathaftab.register_bank.csr_registers.rdata [351:320];
  assign _1305_ = _1312_[0] ? \datapathaftab.register_bank.csr_registers.rdata [511:480] : \datapathaftab.register_bank.csr_registers.rdata [479:448];
  assign _1306_ = _1312_[0] ? \datapathaftab.register_bank.csr_registers.rdata [639:608] : \datapathaftab.register_bank.csr_registers.rdata [607:576];
  assign _1307_ = _1312_[0] ? \datapathaftab.register_bank.csr_registers.rdata [767:736] : \datapathaftab.register_bank.csr_registers.rdata [735:704];
  assign _1308_ = _1312_[0] ? \datapathaftab.register_bank.csr_registers.rdata [895:864] : \datapathaftab.register_bank.csr_registers.rdata [863:832];
  assign _1309_ = _1312_[0] ? \datapathaftab.register_bank.csr_registers.rdata [1023:992] : \datapathaftab.register_bank.csr_registers.rdata [991:960];
  assign _1310_ = _1312_[2] ? _1318_ : _1317_;
  assign _1311_ = _1312_[2] ? _1322_ : _1321_;
  assign _1315_ = _1312_[1] ? _1302_ : _1292_;
  assign _1316_ = _1312_[1] ? _1303_ : _1293_;
  assign _1317_ = _1312_[1] ? _1304_ : _1294_;
  assign _1318_ = _1312_[1] ? _1305_ : _1295_;
  assign _1319_ = _1312_[1] ? _1306_ : _1296_;
  assign _1320_ = _1312_[1] ? _1307_ : _1297_;
  assign _1321_ = _1312_[1] ? _1308_ : _1298_;
  assign _1322_ = _1312_[1] ? _1309_ : _1299_;
  assign _1323_ = _1312_[3] ? _1310_ : _1300_;
  assign _1324_ = _1312_[3] ? _1311_ : _1301_;
  assign { \datapathaftab.interrcheckcausedetection.miecc [31:16], \datapathaftab.register_bank.mieccregister.outreg [15:12], \datapathaftab.interrcheckcausedetection.miecc [11], \datapathaftab.register_bank.mieccregister.outreg [10:9], \datapathaftab.interrcheckcausedetection.miecc [8:7], \datapathaftab.register_bank.mieccregister.outreg [6:5], \datapathaftab.interrcheckcausedetection.miecc [4:3], \datapathaftab.register_bank.mieccregister.outreg [2:1], \datapathaftab.interrcheckcausedetection.miecc [0] } = rst ? 32'd0 : { _1422_[31:16], 4'hx, _1422_[11], 2'hx, _1422_[8:7], 2'hx, _1422_[4:3], 2'hx, _1422_[0] };
  assign \datapathaftab.interrcheckcausedetection.miefieldcc  = rst ? 1'h0 : _1424_;
  always @(posedge clk)
    if (rst) _1424_ <= 1'h0;
    else _1424_ <= _1425_;
  assign \datapathaftab.interrcheckcausedetection.uiefieldcc  = rst ? 1'h0 : _1426_;
  always @(posedge clk)
    if (rst) _1426_ <= 1'h0;
    else _1426_ <= _1427_;
  assign \datapathaftab.registerfile.rdata  = rst ? 1024'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : _1428_;
  assign _1429_ = _1469_[0] ? \datapathaftab.registerfile.rdata [63:32] : \datapathaftab.registerfile.rdata [31:0];
  assign _1430_ = _1469_[0] ? \datapathaftab.registerfile.rdata [191:160] : \datapathaftab.registerfile.rdata [159:128];
  assign _1431_ = _1469_[0] ? \datapathaftab.registerfile.rdata [319:288] : \datapathaftab.registerfile.rdata [287:256];
  assign _1432_ = _1469_[0] ? \datapathaftab.registerfile.rdata [447:416] : \datapathaftab.registerfile.rdata [415:384];
  assign _1433_ = _1469_[0] ? \datapathaftab.registerfile.rdata [575:544] : \datapathaftab.registerfile.rdata [543:512];
  assign _1434_ = _1469_[0] ? \datapathaftab.registerfile.rdata [703:672] : \datapathaftab.registerfile.rdata [671:640];
  assign _1435_ = _1469_[0] ? \datapathaftab.registerfile.rdata [831:800] : \datapathaftab.registerfile.rdata [799:768];
  assign _1436_ = _1469_[0] ? \datapathaftab.registerfile.rdata [959:928] : \datapathaftab.registerfile.rdata [927:896];
  assign _1437_ = _1469_[2] ? _1480_ : _1479_;
  assign _1438_ = _1469_[2] ? _1484_ : _1483_;
  assign _1439_ = _1471_[0] ? \datapathaftab.registerfile.rdata [63:32] : \datapathaftab.registerfile.rdata [31:0];
  assign _1440_ = _1471_[0] ? \datapathaftab.registerfile.rdata [191:160] : \datapathaftab.registerfile.rdata [159:128];
  assign _1441_ = _1471_[0] ? \datapathaftab.registerfile.rdata [319:288] : \datapathaftab.registerfile.rdata [287:256];
  assign _1442_ = _1471_[0] ? \datapathaftab.registerfile.rdata [447:416] : \datapathaftab.registerfile.rdata [415:384];
  assign _1443_ = _1471_[0] ? \datapathaftab.registerfile.rdata [575:544] : \datapathaftab.registerfile.rdata [543:512];
  assign _1444_ = _1471_[0] ? \datapathaftab.registerfile.rdata [703:672] : \datapathaftab.registerfile.rdata [671:640];
  assign _1445_ = _1471_[0] ? \datapathaftab.registerfile.rdata [831:800] : \datapathaftab.registerfile.rdata [799:768];
  assign _1446_ = _1471_[0] ? \datapathaftab.registerfile.rdata [959:928] : \datapathaftab.registerfile.rdata [927:896];
  assign _1447_ = _1471_[2] ? _1491_ : _1490_;
  assign _1448_ = _1471_[2] ? _1495_ : _1494_;
  assign _1449_ = _1469_[0] ? \datapathaftab.registerfile.rdata [127:96] : \datapathaftab.registerfile.rdata [95:64];
  assign _1450_ = _1469_[0] ? \datapathaftab.registerfile.rdata [255:224] : \datapathaftab.registerfile.rdata [223:192];
  assign _1451_ = _1469_[0] ? \datapathaftab.registerfile.rdata [383:352] : \datapathaftab.registerfile.rdata [351:320];
  assign _1452_ = _1469_[0] ? \datapathaftab.registerfile.rdata [511:480] : \datapathaftab.registerfile.rdata [479:448];
  assign _1453_ = _1469_[0] ? \datapathaftab.registerfile.rdata [639:608] : \datapathaftab.registerfile.rdata [607:576];
  assign _1454_ = _1469_[0] ? \datapathaftab.registerfile.rdata [767:736] : \datapathaftab.registerfile.rdata [735:704];
  assign _1455_ = _1469_[0] ? \datapathaftab.registerfile.rdata [895:864] : \datapathaftab.registerfile.rdata [863:832];
  assign _1456_ = _1469_[0] ? \datapathaftab.registerfile.rdata [1023:992] : \datapathaftab.registerfile.rdata [991:960];
  assign _1457_ = _1469_[2] ? _1482_ : _1481_;
  assign _1458_ = _1469_[2] ? _1486_ : _1485_;
  assign _1459_ = _1471_[0] ? \datapathaftab.registerfile.rdata [127:96] : \datapathaftab.registerfile.rdata [95:64];
  assign _1460_ = _1471_[0] ? \datapathaftab.registerfile.rdata [255:224] : \datapathaftab.registerfile.rdata [223:192];
  assign _1461_ = _1471_[0] ? \datapathaftab.registerfile.rdata [383:352] : \datapathaftab.registerfile.rdata [351:320];
  assign _1462_ = _1471_[0] ? \datapathaftab.registerfile.rdata [511:480] : \datapathaftab.registerfile.rdata [479:448];
  assign _1463_ = _1471_[0] ? \datapathaftab.registerfile.rdata [639:608] : \datapathaftab.registerfile.rdata [607:576];
  assign _1464_ = _1471_[0] ? \datapathaftab.registerfile.rdata [767:736] : \datapathaftab.registerfile.rdata [735:704];
  assign _1465_ = _1471_[0] ? \datapathaftab.registerfile.rdata [895:864] : \datapathaftab.registerfile.rdata [863:832];
  assign _1466_ = _1471_[0] ? \datapathaftab.registerfile.rdata [1023:992] : \datapathaftab.registerfile.rdata [991:960];
  assign _1467_ = _1471_[2] ? _1493_ : _1492_;
  assign _1468_ = _1471_[2] ? _1497_ : _1496_;
  assign _1479_ = _1469_[1] ? _1449_ : _1429_;
  assign _1480_ = _1469_[1] ? _1450_ : _1430_;
  assign _1481_ = _1469_[1] ? _1451_ : _1431_;
  assign _1482_ = _1469_[1] ? _1452_ : _1432_;
  assign _1483_ = _1469_[1] ? _1453_ : _1433_;
  assign _1484_ = _1469_[1] ? _1454_ : _1434_;
  assign _1485_ = _1469_[1] ? _1455_ : _1435_;
  assign _1486_ = _1469_[1] ? _1456_ : _1436_;
  assign _1487_ = _1469_[3] ? _1457_ : _1437_;
  assign _1488_ = _1469_[3] ? _1458_ : _1438_;
  assign _1490_ = _1471_[1] ? _1459_ : _1439_;
  assign _1491_ = _1471_[1] ? _1460_ : _1440_;
  assign _1492_ = _1471_[1] ? _1461_ : _1441_;
  assign _1493_ = _1471_[1] ? _1462_ : _1442_;
  assign _1494_ = _1471_[1] ? _1463_ : _1443_;
  assign _1495_ = _1471_[1] ? _1464_ : _1444_;
  assign _1496_ = _1471_[1] ? _1465_ : _1445_;
  assign _1497_ = _1471_[1] ? _1466_ : _1446_;
  assign _1498_ = _1471_[3] ? _1467_ : _1447_;
  assign _1499_ = _1471_[3] ? _1468_ : _1448_;
  assign \datapathaftab.daru1.datapath.addrreg.inreg  = rst ? 32'd0 : _1662_;
  always @(posedge clk)
    if (rst) _1662_ <= 32'd0;
    else _1662_ <= _1663_;
  assign _0419_ = \controlleraftab.hazm  ? (* hdlname = "controlleraftab 2109" *) 5'h11 : 5'h00;
  assign _0420_ = \controlleraftab.hazex  ? (* hdlname = "controlleraftab 2111" *) 5'h10 : _0419_;
  assign _0421_ = \controlleraftab.branch_taken  ? (* hdlname = "controlleraftab 2113" *) 5'h00 : _0420_;
  assign _0422_ = _0418_ ? (* hdlname = "controlleraftab 2115" *) 5'h01 : _0421_;
  assign _0423_ = _0356_ ? (* hdlname = "controlleraftab 2117" *) 5'h0c : _0422_;
  assign _0424_ = \controlleraftab.interruptraise  ? (* hdlname = "controlleraftab 2122" *) 5'h03 : 5'h02;
  assign _0425_ = ~ (* hdlname = "controlleraftab 2143" *) \controlleraftab.completeddawu ;
  assign _0426_ = _0425_ & (* hdlname = "controlleraftab 2144" *) \datapathaftab.e2m_ctrl_word_curr [34];
  assign _0427_ = ~ (* hdlname = "controlleraftab 2145" *) \controlleraftab.exceptionraise ;
  assign _0428_ = _0427_ & (* hdlname = "controlleraftab 2146" *) _0426_;
  assign _0429_ = _0428_ ? (* hdlname = "controlleraftab 2149" *) 5'h12 : 5'h00;
  assign _0431_ = _0430_ ? (* hdlname = "controlleraftab 2164" *) 5'h00 : 5'h10;
  assign _0432_ = _0418_ ? (* hdlname = "controlleraftab 2166" *) 5'h01 : _0431_;
  assign _0418_ = \controlleraftab.interruptraise  | (* hdlname = "controlleraftab 2169" *) \controlleraftab.exceptionraise ;
  assign _0430_ = \controlleraftab.hazard_solved  | (* hdlname = "controlleraftab 2170" *) \controlleraftab.branch_taken ;
  assign _0433_ = _0430_ ? (* hdlname = "controlleraftab 2173" *) 5'h00 : 5'h11;
  assign _0434_ = _0418_ ? (* hdlname = "controlleraftab 2175" *) 5'h01 : _0433_;
  assign _0435_ = \controlleraftab.completeddawu  ? (* hdlname = "controlleraftab 2180" *) 5'h00 : 5'h12;
  function [4:0] \controlleraftab.2198 ;
    input [4:0] a;
    input [84:0] b;
    input [16:0] s;
    (* hdlname = "controlleraftab 2198" *)
    (* parallel_case *)
    casez (s)
      17'b????????????????1:
        \controlleraftab.2198  = b[4:0];
      17'b???????????????1?:
        \controlleraftab.2198  = b[9:5];
      17'b??????????????1??:
        \controlleraftab.2198  = b[14:10];
      17'b?????????????1???:
        \controlleraftab.2198  = b[19:15];
      17'b????????????1????:
        \controlleraftab.2198  = b[24:20];
      17'b???????????1?????:
        \controlleraftab.2198  = b[29:25];
      17'b??????????1??????:
        \controlleraftab.2198  = b[34:30];
      17'b?????????1???????:
        \controlleraftab.2198  = b[39:35];
      17'b????????1????????:
        \controlleraftab.2198  = b[44:40];
      17'b???????1?????????:
        \controlleraftab.2198  = b[49:45];
      17'b??????1??????????:
        \controlleraftab.2198  = b[54:50];
      17'b?????1???????????:
        \controlleraftab.2198  = b[59:55];
      17'b????1????????????:
        \controlleraftab.2198  = b[64:60];
      17'b???1?????????????:
        \controlleraftab.2198  = b[69:65];
      17'b??1??????????????:
        \controlleraftab.2198  = b[74:70];
      17'b?1???????????????:
        \controlleraftab.2198  = b[79:75];
      17'b1????????????????:
        \controlleraftab.2198  = b[84:80];
      default:
        \controlleraftab.2198  = a;
    endcase
  endfunction
  assign \controlleraftab.n_state  = \controlleraftab.2198 (5'h00, { _0435_, _0434_, _0432_, 15'h3dcd, _0429_, 40'h41ccb52485, _0424_, _0423_ }, { _0417_, _0023_, _0021_, _0404_, _0400_, _0399_, _0397_, _0396_, _0395_, _0394_, _0388_, _0387_, _0386_, _0384_, _0492_, _0381_, _0020_ });
  assign _0438_ = _0016_ & (* hdlname = "controlleraftab 2210" *) _0437_;
  assign _0439_ = \datapathaftab.m2wb_instr_curr [14] & (* hdlname = "controlleraftab 2214" *) _0437_;
  assign _0440_ = _0017_ & (* hdlname = "controlleraftab 2219" *) _0437_;
  assign _0441_ = _0018_ & (* hdlname = "controlleraftab 2224" *) _0437_;
  assign _0436_ = ~ (* hdlname = "controlleraftab 2228" *) \controlleraftab.readonlycsr ;
  assign _0437_ = \controlleraftab.wb_validaccesscsr  & (* hdlname = "controlleraftab 2229" *) _0436_;
  assign _0442_ = _0019_ & (* hdlname = "controlleraftab 2230" *) _0437_;
  assign _0443_ = \controlleraftab.ldmiereg  & (* hdlname = "controlleraftab 2231" *) \controlleraftab.wb_validaccesscsr ;
  assign _0444_ = \controlleraftab.ldmieuiefield  & (* hdlname = "controlleraftab 2232" *) \controlleraftab.wb_validaccesscsr ;
  assign _0445_ = \controlleraftab.mirror  ? (* hdlname = "controlleraftab 2235" *) 1'h0 : 1'h1;
  assign _0446_ = _0012_ ? (* hdlname = "controlleraftab 2238" *) 1'h1 : 1'h0;
  assign _0447_ = \datapathaftab.m2wb_ctrl_word_curr [59] ? (* hdlname = "controlleraftab 2240" *) _0439_ : 1'h0;
  assign _0448_ = \datapathaftab.m2wb_ctrl_word_curr [59] ? (* hdlname = "controlleraftab 2242" *) _0438_ : 1'h0;
  assign _0449_ = \datapathaftab.m2wb_ctrl_word_curr [59] ? (* hdlname = "controlleraftab 2244" *) _0440_ : 1'h0;
  assign _0450_ = \datapathaftab.m2wb_ctrl_word_curr [59] ? (* hdlname = "controlleraftab 2246" *) _0442_ : 1'h0;
  assign _0451_ = \datapathaftab.m2wb_ctrl_word_curr [59] ? (* hdlname = "controlleraftab 2248" *) _0441_ : 1'h0;
  assign _0452_ = \datapathaftab.m2wb_ctrl_word_curr [59] ? (* hdlname = "controlleraftab 2250" *) _0443_ : 1'h0;
  assign _0011_ = \datapathaftab.m2wb_ctrl_word_curr [59] ? (* hdlname = "controlleraftab 2252" *) _0445_ : 1'h0;
  assign _0012_ = \controlleraftab.mirror  & (* hdlname = "controlleraftab 2253" *) \datapathaftab.m2wb_ctrl_word_curr [59];
  assign _0013_ = \datapathaftab.m2wb_ctrl_word_curr [59] ? (* hdlname = "controlleraftab 2255" *) _0437_ : 1'h0;
  assign _0014_ = \datapathaftab.m2wb_ctrl_word_curr [59] ? (* hdlname = "controlleraftab 2257" *) _0444_ : 1'h0;
  assign _0015_ = ~ (* hdlname = "controlleraftab 2259" *) \controlleraftab.csr_p_state ;
  assign _0016_ = ~ (* hdlname = "controlleraftab 2261" *) \datapathaftab.m2wb_instr_curr [14];
  assign _0017_ = ~ (* hdlname = "controlleraftab 2264" *) \datapathaftab.m2wb_instr_curr [13];
  assign _0018_ = ~ (* hdlname = "controlleraftab 2266" *) \datapathaftab.m2wb_instr_curr [12];
  assign _0019_ = \datapathaftab.m2wb_instr_curr [13] & (* hdlname = "controlleraftab 2269" *) \datapathaftab.m2wb_instr_curr [12];
  function [0:0] \controlleraftab.2274 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controlleraftab 2274" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controlleraftab.2274  = b[0:0];
      2'b1?:
        \controlleraftab.2274  = b[1:1];
      default:
        \controlleraftab.2274  = a;
    endcase
  endfunction
  assign \controlleraftab.selimmcsr  = \controlleraftab.2274 (1'hx, { \datapathaftab.m2wb_instr_curr [14], _0447_ }, { \controlleraftab.csr_p_state , _0015_ });
  function [0:0] \controlleraftab.2277 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controlleraftab 2277" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controlleraftab.2277  = b[0:0];
      2'b1?:
        \controlleraftab.2277  = b[1:1];
      default:
        \controlleraftab.2277  = a;
    endcase
  endfunction
  assign \controlleraftab.selp1csr  = \controlleraftab.2277 (1'hx, { _0016_, _0448_ }, { \controlleraftab.csr_p_state , _0015_ });
  function [0:0] \controlleraftab.2280 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controlleraftab 2280" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controlleraftab.2280  = b[0:0];
      2'b1?:
        \controlleraftab.2280  = b[1:1];
      default:
        \controlleraftab.2280  = a;
    endcase
  endfunction
  assign \controlleraftab.selreadwritecsr  = \controlleraftab.2280 (1'hx, { _0017_, _0449_ }, { \controlleraftab.csr_p_state , _0015_ });
  function [0:0] \controlleraftab.2283 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controlleraftab 2283" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controlleraftab.2283  = b[0:0];
      2'b1?:
        \controlleraftab.2283  = b[1:1];
      default:
        \controlleraftab.2283  = a;
    endcase
  endfunction
  assign \controlleraftab.clrcsr  = \controlleraftab.2283 (1'hx, { _0019_, _0450_ }, { \controlleraftab.csr_p_state , _0015_ });
  function [0:0] \controlleraftab.2286 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controlleraftab 2286" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controlleraftab.2286  = b[0:0];
      2'b1?:
        \controlleraftab.2286  = b[1:1];
      default:
        \controlleraftab.2286  = a;
    endcase
  endfunction
  assign \controlleraftab.setcsr  = \controlleraftab.2286 (1'hx, { _0018_, _0451_ }, { \controlleraftab.csr_p_state , _0015_ });
  function [0:0] \controlleraftab.2290 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controlleraftab 2290" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controlleraftab.2290  = b[0:0];
      2'b1?:
        \controlleraftab.2290  = b[1:1];
      default:
        \controlleraftab.2290  = a;
    endcase
  endfunction
  assign \controlleraftab.loadmiereg  = \controlleraftab.2290 (1'hx, { 1'h0, _0452_ }, { \controlleraftab.csr_p_state , _0015_ });
  function [0:0] \controlleraftab.2294 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controlleraftab 2294" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controlleraftab.2294  = b[0:0];
      2'b1?:
        \controlleraftab.2294  = b[1:1];
      default:
        \controlleraftab.2294  = a;
    endcase
  endfunction
  assign \controlleraftab.instructiondonecsr  = \controlleraftab.2294 (1'hx, { 1'h1, _0011_ }, { \controlleraftab.csr_p_state , _0015_ });
  function [0:0] \controlleraftab.2298 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controlleraftab 2298" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controlleraftab.2298  = b[0:0];
      2'b1?:
        \controlleraftab.2298  = b[1:1];
      default:
        \controlleraftab.2298  = a;
    endcase
  endfunction
  assign \controlleraftab.csr_n_state  = \controlleraftab.2298 (1'hx, { 1'h0, _0446_ }, { \controlleraftab.csr_p_state , _0015_ });
  function [0:0] \controlleraftab.2302 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controlleraftab 2302" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controlleraftab.2302  = b[0:0];
      2'b1?:
        \controlleraftab.2302  = b[1:1];
      default:
        \controlleraftab.2302  = a;
    endcase
  endfunction
  assign \controlleraftab.mirrorusercu_inst  = \controlleraftab.2302 (1'hx, 2'h2, { \controlleraftab.csr_p_state , _0015_ });
  function [0:0] \controlleraftab.2306 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controlleraftab 2306" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controlleraftab.2306  = b[0:0];
      2'b1?:
        \controlleraftab.2306  = b[1:1];
      default:
        \controlleraftab.2306  = a;
    endcase
  endfunction
  assign \controlleraftab.writeregbank_csr  = \controlleraftab.2306 (1'hx, { 1'h1, _0013_ }, { \controlleraftab.csr_p_state , _0015_ });
  function [0:0] \controlleraftab.2310 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controlleraftab 2310" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controlleraftab.2310  = b[0:0];
      2'b1?:
        \controlleraftab.2310  = b[1:1];
      default:
        \controlleraftab.2310  = a;
    endcase
  endfunction
  assign \controlleraftab.loadmieuiefield_csr  = \controlleraftab.2310 (1'hx, { 1'h0, _0014_ }, { \controlleraftab.csr_p_state , _0015_ });
  assign \controlleraftab.mirrorusercu  = _0024_ ? (* hdlname = "controlleraftab 2327" *) \controlleraftab.mirrorusercu_inst  : \controlleraftab.mirrorusercu_exint ;
  assign \controlleraftab.writeregbank  = _0024_ ? (* hdlname = "controlleraftab 2336" *) \controlleraftab.writeregbank_csr  : \controlleraftab.writeregbank_exint ;
  assign _0022_ = _0020_ | (* hdlname = "controlleraftab 2341" *) _0021_;
  assign _0024_ = _0022_ | (* hdlname = "controlleraftab 2344" *) _0023_;
  assign \controlleraftab.loadmieuiefield  = _0024_ ? (* hdlname = "controlleraftab 2345" *) \controlleraftab.loadmieuiefield_csr  : \controlleraftab.loadmieuiefield_exint ;
  assign _0025_ = \controlleraftab.ir [6:0] == (* hdlname = "controlleraftab 2348" *) 7'h03;
  assign _0031_ = _0029_ & (* hdlname = "controlleraftab 2361" *) _0030_;
  assign _0029_ = _0027_ & (* hdlname = "controlleraftab 2366" *) _0028_;
  assign _0032_ = _0029_ & (* hdlname = "controlleraftab 2368" *) \controlleraftab.ir [12];
  assign _0033_ = \controlleraftab.ir [14] | (* hdlname = "controlleraftab 2371" *) \controlleraftab.ir [13];
  assign _0034_ = \controlleraftab.ir [6:0] == (* hdlname = "controlleraftab 2373" *) 7'h23;
  assign _0035_ = \controlleraftab.ir [6:0] == (* hdlname = "controlleraftab 2380" *) 7'h33;
  assign _0040_ = _0039_ ? (* hdlname = "controlleraftab 2401" *) 1'h1 : 1'h0;
  assign _0041_ = _0038_ ? (* hdlname = "controlleraftab 2404" *) 1'h1 : 1'h0;
  assign _0042_ = _0038_ ? (* hdlname = "controlleraftab 2406" *) 1'h0 : _0040_;
  assign _0043_ = _0037_ ? (* hdlname = "controlleraftab 2409" *) 1'h1 : 1'h0;
  assign _0044_ = _0037_ ? (* hdlname = "controlleraftab 2411" *) 1'h0 : _0041_;
  assign _0045_ = _0037_ ? (* hdlname = "controlleraftab 2413" *) 1'h0 : _0042_;
  assign _0046_ = _0036_ ? (* hdlname = "controlleraftab 2415" *) 1'h1 : _0043_;
  assign _0047_ = _0036_ ? (* hdlname = "controlleraftab 2417" *) 1'h0 : _0044_;
  assign _0048_ = _0036_ ? (* hdlname = "controlleraftab 2419" *) 1'h0 : _0045_;
  assign _0036_ = ! (* hdlname = "controlleraftab 2423" *) \controlleraftab.ir [13:12];
  assign _0038_ = \controlleraftab.ir [13:12] == (* hdlname = "controlleraftab 2426" *) 2'h2;
  assign _0049_ = _0036_ | (* hdlname = "controlleraftab 2427" *) _0038_;
  assign _0037_ = \controlleraftab.ir [13:12] == (* hdlname = "controlleraftab 2430" *) 2'h1;
  assign _0039_ = \controlleraftab.ir [13:12] == (* hdlname = "controlleraftab 2433" *) 2'h3;
  assign _0050_ = _0037_ | (* hdlname = "controlleraftab 2434" *) _0039_;
  assign _0051_ = _0050_ ? (* hdlname = "controlleraftab 2437" *) 1'h1 : 1'h0;
  assign _0052_ = _0049_ ? (* hdlname = "controlleraftab 2440" *) 1'h1 : 1'h0;
  assign _0053_ = _0049_ ? (* hdlname = "controlleraftab 2442" *) 1'h0 : _0051_;
  assign _0054_ = \controlleraftab.ir [14] ? (* hdlname = "controlleraftab 2447" *) _0052_ : _0046_;
  assign _0055_ = \controlleraftab.ir [14] ? (* hdlname = "controlleraftab 2449" *) 1'h0 : _0047_;
  assign _0056_ = \controlleraftab.ir [14] ? (* hdlname = "controlleraftab 2450" *) _0053_ : _0048_;
  assign _0027_ = ~ (* hdlname = "controlleraftab 2452" *) \controlleraftab.ir [14];
  assign _0057_ = ~ (* hdlname = "controlleraftab 2456" *) _0026_;
  assign _0026_ = \controlleraftab.ir [13] | (* hdlname = "controlleraftab 2459" *) \controlleraftab.ir [12];
  assign _0058_ = \controlleraftab.ir [14] ? (* hdlname = "controlleraftab 2468" *) \controlleraftab.ir [13] : _0057_;
  assign _0059_ = \controlleraftab.ir [14] ? (* hdlname = "controlleraftab 2469" *) _0028_ : _0026_;
  assign _0118_ = \controlleraftab.ir [25] ? (* hdlname = "controlleraftab 2641" *) 1'h0 : _0104_;
  assign _0120_ = \controlleraftab.ir [25] ? (* hdlname = "controlleraftab 2645" *) 1'h0 : _0106_;
  assign _0121_ = \controlleraftab.ir [25] ? (* hdlname = "controlleraftab 2647" *) 1'h0 : _0107_;
  assign _0122_ = \controlleraftab.ir [25] ? (* hdlname = "controlleraftab 2649" *) 1'h0 : _0108_;
  assign _0123_ = \controlleraftab.ir [25] ? (* hdlname = "controlleraftab 2652" *) 1'h1 : 1'h0;
  assign _0119_ = \controlleraftab.ir [25] ? (* hdlname = "controlleraftab 2654" *) 1'h1 : _0105_;
  assign _0124_ = \controlleraftab.ir [25] ? (* hdlname = "controlleraftab 2656" *) 1'h1 : _0109_;
  assign _0125_ = \controlleraftab.ir [25] ? (* hdlname = "controlleraftab 2658" *) 1'h0 : _0110_;
  assign _0126_ = \controlleraftab.ir [25] ? (* hdlname = "controlleraftab 2660" *) 2'h0 : _0111_;
  assign _0127_ = \controlleraftab.ir [25] ? (* hdlname = "controlleraftab 2662" *) 1'h0 : _0112_;
  assign _0128_ = \controlleraftab.ir [25] ? (* hdlname = "controlleraftab 2664" *) 12'h000 : _0113_;
  assign _0129_ = \controlleraftab.ir [25] ? (* hdlname = "controlleraftab 2666" *) 2'h0 : _0114_;
  assign _0130_ = \controlleraftab.ir [25] ? (* hdlname = "controlleraftab 2668" *) _0027_ : 1'h0;
  assign _0131_ = \controlleraftab.ir [25] ? (* hdlname = "controlleraftab 2670" *) \controlleraftab.ir [14] : 1'h0;
  assign _0132_ = \controlleraftab.ir [25] ? (* hdlname = "controlleraftab 2672" *) _0054_ : 1'h0;
  assign _0133_ = \controlleraftab.ir [25] ? (* hdlname = "controlleraftab 2674" *) _0055_ : 1'h0;
  assign _0134_ = \controlleraftab.ir [25] ? (* hdlname = "controlleraftab 2676" *) _0056_ : 1'h0;
  assign _0135_ = \controlleraftab.ir [25] ? (* hdlname = "controlleraftab 2678" *) _0058_ : 1'h0;
  assign _0136_ = \controlleraftab.ir [25] ? (* hdlname = "controlleraftab 2680" *) _0059_ : 1'h0;
  assign _0137_ = \controlleraftab.ir [25] ? (* hdlname = "controlleraftab 2682" *) 3'h0 : _0115_;
  assign _0116_ = \controlleraftab.ir [25] ? (* hdlname = "controlleraftab 2684" *) 1'h1 : _0102_;
  assign _0117_ = \controlleraftab.ir [25] ? (* hdlname = "controlleraftab 2686" *) 1'h0 : _0103_;
  assign _0138_ = \controlleraftab.ir [6:0] == (* hdlname = "controlleraftab 2688" *) 7'h13;
  assign _0063_ = \controlleraftab.ir [30] & (* hdlname = "controlleraftab 2700" *) \controlleraftab.ir [5];
  assign _0064_ = \controlleraftab.ir [14:12] == (* hdlname = "controlleraftab 2702" *) 3'h2;
  assign _0065_ = \controlleraftab.ir [14:12] == (* hdlname = "controlleraftab 2704" *) 3'h3;
  assign _0066_ = _0064_ | (* hdlname = "controlleraftab 2705" *) _0065_;
  assign _0030_ = ~ (* hdlname = "controlleraftab 2714" *) \controlleraftab.ir [12];
  assign _0067_ = \controlleraftab.ir [14:12] == (* hdlname = "controlleraftab 2716" *) 3'h4;
  assign _0068_ = \controlleraftab.ir [14:12] == (* hdlname = "controlleraftab 2718" *) 3'h6;
  assign _0069_ = _0067_ | (* hdlname = "controlleraftab 2719" *) _0068_;
  assign _0070_ = \controlleraftab.ir [14:12] == (* hdlname = "controlleraftab 2721" *) 3'h7;
  assign _0071_ = _0069_ | (* hdlname = "controlleraftab 2722" *) _0070_;
  assign _0072_ = \controlleraftab.ir [14:12] == (* hdlname = "controlleraftab 2732" *) 3'h1;
  assign _0073_ = \controlleraftab.ir [14:12] == (* hdlname = "controlleraftab 2734" *) 3'h5;
  assign _0074_ = _0072_ | (* hdlname = "controlleraftab 2735" *) _0073_;
  assign _0061_ = \controlleraftab.ir [5] ? (* hdlname = "controlleraftab 2739" *) 3'h0 : 3'h1;
  assign _0076_ = _0074_ ? (* hdlname = "controlleraftab 2759" *) \controlleraftab.ir [5] : 1'h0;
  assign _0077_ = _0074_ ? (* hdlname = "controlleraftab 2761" *) _0062_ : 1'h0;
  assign _0078_ = _0074_ ? (* hdlname = "controlleraftab 2763" *) { \controlleraftab.ir [14], \controlleraftab.ir [30] } : 2'h0;
  assign _0079_ = _0074_ ? (* hdlname = "controlleraftab 2766" *) 12'h4c9 : 12'h000;
  assign _0080_ = _0074_ ? (* hdlname = "controlleraftab 2768" *) _0061_ : 3'h0;
  assign _0075_ = _0074_ ? (* hdlname = "controlleraftab 2771" *) 1'h1 : 1'h0;
  assign _0082_ = _0071_ ? (* hdlname = "controlleraftab 2777" *) 1'h0 : _0075_;
  assign _0083_ = _0071_ ? (* hdlname = "controlleraftab 2780" *) 1'h1 : 1'h0;
  assign _0084_ = _0071_ ? (* hdlname = "controlleraftab 2783" *) \controlleraftab.ir [5] : _0076_;
  assign _0085_ = _0071_ ? (* hdlname = "controlleraftab 2784" *) _0062_ : _0077_;
  assign _0086_ = _0071_ ? (* hdlname = "controlleraftab 2786" *) 2'h0 : _0078_;
  assign _0087_ = _0071_ ? (* hdlname = "controlleraftab 2788" *) 12'h4c9 : _0079_;
  assign _0088_ = _0071_ ? (* hdlname = "controlleraftab 2790" *) \controlleraftab.ir [13:12] : 2'h0;
  assign _0089_ = _0071_ ? (* hdlname = "controlleraftab 2791" *) _0061_ : _0080_;
  assign _0081_ = _0071_ ? (* hdlname = "controlleraftab 2793" *) 1'h1 : _0075_;
  assign _0092_ = _0066_ ? (* hdlname = "controlleraftab 2800" *) _0030_ : 1'h0;
  assign _0094_ = _0066_ ? (* hdlname = "controlleraftab 2804" *) 1'h0 : _0082_;
  assign _0095_ = _0066_ ? (* hdlname = "controlleraftab 2806" *) 1'h0 : _0083_;
  assign _0093_ = _0066_ ? (* hdlname = "controlleraftab 2808" *) 1'h1 : _0081_;
  assign _0096_ = _0066_ ? (* hdlname = "controlleraftab 2809" *) \controlleraftab.ir [5] : _0084_;
  assign _0097_ = _0066_ ? (* hdlname = "controlleraftab 2810" *) _0062_ : _0085_;
  assign _0098_ = _0066_ ? (* hdlname = "controlleraftab 2812" *) 2'h0 : _0086_;
  assign _0099_ = _0066_ ? (* hdlname = "controlleraftab 2814" *) 12'h4c9 : _0087_;
  assign _0100_ = _0066_ ? (* hdlname = "controlleraftab 2816" *) 2'h0 : _0088_;
  assign _0101_ = _0066_ ? (* hdlname = "controlleraftab 2817" *) _0061_ : _0089_;
  assign _0090_ = _0066_ ? (* hdlname = "controlleraftab 2819" *) 1'h0 : _0081_;
  assign _0091_ = _0066_ ? (* hdlname = "controlleraftab 2822" *) 1'h1 : 1'h0;
  assign _0104_ = _0060_ ? (* hdlname = "controlleraftab 2828" *) 1'h0 : _0092_;
  assign _0106_ = _0060_ ? (* hdlname = "controlleraftab 2832" *) 1'h0 : _0094_;
  assign _0107_ = _0060_ ? (* hdlname = "controlleraftab 2834" *) 1'h0 : _0095_;
  assign _0108_ = _0060_ ? (* hdlname = "controlleraftab 2837" *) 1'h1 : 1'h0;
  assign _0105_ = _0060_ ? (* hdlname = "controlleraftab 2839" *) 1'h1 : _0093_;
  assign _0109_ = _0060_ ? (* hdlname = "controlleraftab 2840" *) \controlleraftab.ir [5] : _0096_;
  assign _0110_ = _0060_ ? (* hdlname = "controlleraftab 2841" *) _0062_ : _0097_;
  assign _0111_ = _0060_ ? (* hdlname = "controlleraftab 2843" *) 2'h0 : _0098_;
  assign _0112_ = _0060_ ? (* hdlname = "controlleraftab 2845" *) _0063_ : 1'h0;
  assign _0113_ = _0060_ ? (* hdlname = "controlleraftab 2847" *) 12'h4c9 : _0099_;
  assign _0114_ = _0060_ ? (* hdlname = "controlleraftab 2849" *) 2'h0 : _0100_;
  assign _0115_ = _0060_ ? (* hdlname = "controlleraftab 2850" *) _0061_ : _0101_;
  assign _0102_ = _0060_ ? (* hdlname = "controlleraftab 2852" *) 1'h1 : _0090_;
  assign _0103_ = _0060_ ? (* hdlname = "controlleraftab 2854" *) 1'h0 : _0091_;
  assign _0139_ = \controlleraftab.ir [6:0] == (* hdlname = "controlleraftab 2856" *) 7'h6f;
  assign _0140_ = \controlleraftab.ir [6:0] == (* hdlname = "controlleraftab 2858" *) 7'h67;
  assign _0141_ = \controlleraftab.ir [6:0] == (* hdlname = "controlleraftab 2860" *) 7'h63;
  assign _0028_ = ~ (* hdlname = "controlleraftab 2862" *) \controlleraftab.ir [13];
  assign _0142_ = \controlleraftab.ir [6:0] == (* hdlname = "controlleraftab 2864" *) 7'h37;
  assign _0143_ = \controlleraftab.ir [6:0] == (* hdlname = "controlleraftab 2866" *) 7'h17;
  assign _0144_ = _0142_ | (* hdlname = "controlleraftab 2867" *) _0143_;
  assign _0062_ = ~ (* hdlname = "controlleraftab 2870" *) \controlleraftab.ir [5];
  assign _0145_ = \controlleraftab.ir [6:0] == (* hdlname = "controlleraftab 2872" *) 7'h73;
  assign _0060_ = ! (* hdlname = "controlleraftab 2874" *) \controlleraftab.ir [14:12];
  assign _0146_ = ! (* hdlname = "controlleraftab 2876" *) \controlleraftab.ir [31:20];
  assign _0147_ = _0146_ & (* hdlname = "controlleraftab 2877" *) _0060_;
  assign _0148_ = | (* hdlname = "controlleraftab 2879" *) \controlleraftab.ir [14:12];
  assign _0149_ = \controlleraftab.ir [31:20] != (* hdlname = "controlleraftab 2881" *) 12'h302;
  assign _0150_ = \controlleraftab.ir [31:20] != (* hdlname = "controlleraftab 2883" *) 12'h002;
  assign _0151_ = _0150_ & (* hdlname = "controlleraftab 2884" *) _0149_;
  assign _0152_ = _0148_ | (* hdlname = "controlleraftab 2885" *) _0151_;
  assign _0153_ = ~ (* hdlname = "controlleraftab 2888" *) \controlleraftab.validaccesscsr ;
  assign _0155_ = _0152_ ? (* hdlname = "controlleraftab 2893" *) \controlleraftab.validaccesscsr  : 1'h0;
  assign _0156_ = _0152_ ? (* hdlname = "controlleraftab 2899" *) 3'h1 : 3'h2;
  assign _0157_ = _0152_ ? (* hdlname = "controlleraftab 2902" *) 1'h0 : 1'h1;
  assign _0154_ = _0152_ ? (* hdlname = "controlleraftab 2908" *) 1'h1 : 1'h0;
  assign _0158_ = _0152_ ? (* hdlname = "controlleraftab 2910" *) _0153_ : 1'h0;
  assign _0160_ = _0147_ ? (* hdlname = "controlleraftab 2914" *) 1'h0 : _0155_;
  assign _0161_ = _0147_ ? (* hdlname = "controlleraftab 2918" *) 3'h1 : _0156_;
  assign _0162_ = _0147_ ? (* hdlname = "controlleraftab 2920" *) 1'h0 : _0157_;
  assign _0159_ = _0147_ ? (* hdlname = "controlleraftab 2924" *) 1'h0 : _0154_;
  assign _0163_ = _0147_ ? (* hdlname = "controlleraftab 2927" *) 1'h1 : 1'h0;
  assign _0164_ = _0147_ ? (* hdlname = "controlleraftab 2929" *) 1'h0 : _0158_;
  assign _0165_ = \controlleraftab.dec_valid  ? (* hdlname = "controlleraftab 2932" *) 1'h1 : 1'h0;
  assign _0167_ = _0145_ ? (* hdlname = "controlleraftab 2936" *) _0160_ : 1'h0;
  assign _0168_ = _0145_ ? (* hdlname = "controlleraftab 2940" *) _0161_ : 3'h0;
  assign _0169_ = _0145_ ? (* hdlname = "controlleraftab 2942" *) _0162_ : 1'h0;
  assign _0166_ = _0145_ ? (* hdlname = "controlleraftab 2946" *) _0159_ : 1'h0;
  assign _0170_ = _0145_ ? (* hdlname = "controlleraftab 2948" *) _0163_ : 1'h0;
  assign _0171_ = _0145_ ? (* hdlname = "controlleraftab 2949" *) _0164_ : _0165_;
  assign _0173_ = _0144_ ? (* hdlname = "controlleraftab 2960" *) 1'h1 : 1'h0;
  assign _0174_ = _0144_ ? (* hdlname = "controlleraftab 2962" *) \controlleraftab.ir [5] : 1'h0;
  assign _0175_ = _0144_ ? (* hdlname = "controlleraftab 2964" *) _0062_ : 1'h0;
  assign _0176_ = _0144_ ? (* hdlname = "controlleraftab 2967" *) 12'h824 : 12'h000;
  assign _0177_ = _0144_ ? (* hdlname = "controlleraftab 2969" *) 1'h0 : _0167_;
  assign _0179_ = _0144_ ? (* hdlname = "controlleraftab 2973" *) 3'h3 : _0168_;
  assign _0180_ = _0144_ ? (* hdlname = "controlleraftab 2975" *) 1'h0 : _0169_;
  assign _0172_ = _0144_ ? (* hdlname = "controlleraftab 2977" *) 1'h1 : _0166_;
  assign _0178_ = _0144_ ? (* hdlname = "controlleraftab 2979" *) 1'h0 : _0166_;
  assign _0181_ = _0144_ ? (* hdlname = "controlleraftab 2981" *) 1'h0 : _0170_;
  assign _0182_ = _0144_ ? (* hdlname = "controlleraftab 2983" *) 1'h0 : _0171_;
  assign _0184_ = _0141_ ? (* hdlname = "controlleraftab 2987" *) _0028_ : 1'h0;
  assign _0186_ = _0141_ ? (* hdlname = "controlleraftab 2992" *) 1'h0 : _0173_;
  assign _0187_ = _0141_ ? (* hdlname = "controlleraftab 2999" *) 1'h1 : _0173_;
  assign _0188_ = _0141_ ? (* hdlname = "controlleraftab 3001" *) 1'h0 : _0174_;
  assign _0189_ = _0141_ ? (* hdlname = "controlleraftab 3003" *) 1'h0 : _0175_;
  assign _0190_ = _0141_ ? (* hdlname = "controlleraftab 3005" *) 12'h554 : _0176_;
  assign _0191_ = _0141_ ? (* hdlname = "controlleraftab 3007" *) 1'h0 : _0177_;
  assign _0193_ = _0141_ ? (* hdlname = "controlleraftab 3011" *) 3'h4 : _0179_;
  assign _0194_ = _0141_ ? (* hdlname = "controlleraftab 3013" *) 1'h0 : _0180_;
  assign _0183_ = _0141_ ? (* hdlname = "controlleraftab 3015" *) 1'h0 : _0172_;
  assign _0185_ = _0141_ ? (* hdlname = "controlleraftab 3018" *) 1'h1 : 1'h0;
  assign _0192_ = _0141_ ? (* hdlname = "controlleraftab 3020" *) 1'h0 : _0178_;
  assign _0195_ = _0141_ ? (* hdlname = "controlleraftab 3022" *) 1'h0 : _0181_;
  assign _0196_ = _0141_ ? (* hdlname = "controlleraftab 3024" *) 1'h0 : _0182_;
  assign _0197_ = _0140_ ? (* hdlname = "controlleraftab 3026" *) 1'h1 : _0183_;
  assign _0198_ = _0140_ ? (* hdlname = "controlleraftab 3028" *) 1'h0 : _0184_;
  assign _0200_ = _0140_ ? (* hdlname = "controlleraftab 3032" *) 1'h1 : _0186_;
  assign _0202_ = _0140_ ? (* hdlname = "controlleraftab 3036" *) 1'h1 : _0185_;
  assign _0201_ = _0140_ ? (* hdlname = "controlleraftab 3038" *) 1'h1 : _0187_;
  assign _0203_ = _0140_ ? (* hdlname = "controlleraftab 3040" *) 1'h0 : _0188_;
  assign _0204_ = _0140_ ? (* hdlname = "controlleraftab 3042" *) 1'h0 : _0189_;
  assign _0205_ = _0140_ ? (* hdlname = "controlleraftab 3044" *) 12'h4c9 : _0190_;
  assign _0206_ = _0140_ ? (* hdlname = "controlleraftab 3046" *) 1'h0 : _0191_;
  assign _0208_ = _0140_ ? (* hdlname = "controlleraftab 3050" *) 3'h5 : _0193_;
  assign _0209_ = _0140_ ? (* hdlname = "controlleraftab 3052" *) 1'h0 : _0194_;
  assign _0210_ = _0140_ ? (* hdlname = "controlleraftab 3054" *) 1'h0 : _0183_;
  assign _0211_ = _0140_ ? (* hdlname = "controlleraftab 3057" *) 1'h1 : 1'h0;
  assign _0199_ = _0140_ ? (* hdlname = "controlleraftab 3059" *) 1'h0 : _0185_;
  assign _0207_ = _0140_ ? (* hdlname = "controlleraftab 3061" *) 1'h0 : _0192_;
  assign _0212_ = _0140_ ? (* hdlname = "controlleraftab 3063" *) 1'h0 : _0195_;
  assign _0213_ = _0140_ ? (* hdlname = "controlleraftab 3065" *) 1'h0 : _0196_;
  assign _0214_ = _0139_ ? (* hdlname = "controlleraftab 3067" *) 1'h1 : _0197_;
  assign _0215_ = _0139_ ? (* hdlname = "controlleraftab 3069" *) 1'h0 : _0198_;
  assign _0216_ = _0139_ ? (* hdlname = "controlleraftab 3071" *) 1'h1 : _0199_;
  assign _0217_ = _0139_ ? (* hdlname = "controlleraftab 3073" *) 1'h0 : _0200_;
  assign _0219_ = _0139_ ? (* hdlname = "controlleraftab 3077" *) 1'h0 : _0202_;
  assign _0218_ = _0139_ ? (* hdlname = "controlleraftab 3079" *) 1'h1 : _0201_;
  assign _0220_ = _0139_ ? (* hdlname = "controlleraftab 3081" *) 1'h0 : _0203_;
  assign _0221_ = _0139_ ? (* hdlname = "controlleraftab 3083" *) 1'h0 : _0204_;
  assign _0222_ = _0139_ ? (* hdlname = "controlleraftab 3085" *) 12'ha4c : _0205_;
  assign _0223_ = _0139_ ? (* hdlname = "controlleraftab 3087" *) 1'h0 : _0206_;
  assign _0225_ = _0139_ ? (* hdlname = "controlleraftab 3091" *) 3'h5 : _0208_;
  assign _0226_ = _0139_ ? (* hdlname = "controlleraftab 3093" *) 1'h0 : _0209_;
  assign _0227_ = _0139_ ? (* hdlname = "controlleraftab 3095" *) 1'h0 : _0210_;
  assign _0228_ = _0139_ ? (* hdlname = "controlleraftab 3097" *) 1'h1 : _0211_;
  assign _0229_ = _0139_ ? (* hdlname = "controlleraftab 3099" *) 1'h0 : _0199_;
  assign _0224_ = _0139_ ? (* hdlname = "controlleraftab 3101" *) 1'h0 : _0207_;
  assign _0230_ = _0139_ ? (* hdlname = "controlleraftab 3103" *) 1'h0 : _0212_;
  assign _0231_ = _0139_ ? (* hdlname = "controlleraftab 3105" *) 1'h0 : _0213_;
  assign _0232_ = _0138_ ? (* hdlname = "controlleraftab 3106" *) _0102_ : _0214_;
  assign _0234_ = _0138_ ? (* hdlname = "controlleraftab 3109" *) _0104_ : _0215_;
  assign _0235_ = _0138_ ? (* hdlname = "controlleraftab 3111" *) 1'h0 : _0216_;
  assign _0236_ = _0138_ ? (* hdlname = "controlleraftab 3112" *) _0105_ : _0217_;
  assign _0237_ = _0138_ ? (* hdlname = "controlleraftab 3114" *) _0106_ : 1'h0;
  assign _0238_ = _0138_ ? (* hdlname = "controlleraftab 3116" *) _0107_ : 1'h0;
  assign _0239_ = _0138_ ? (* hdlname = "controlleraftab 3117" *) _0108_ : _0218_;
  assign _0240_ = _0138_ ? (* hdlname = "controlleraftab 3118" *) _0105_ : _0219_;
  assign _0241_ = _0138_ ? (* hdlname = "controlleraftab 3120" *) _0109_ : 1'h0;
  assign _0242_ = _0138_ ? (* hdlname = "controlleraftab 3121" *) _0110_ : _0218_;
  assign _0243_ = _0138_ ? (* hdlname = "controlleraftab 3123" *) _0111_ : 2'h0;
  assign _0244_ = _0138_ ? (* hdlname = "controlleraftab 3125" *) _0112_ : 1'h0;
  assign _0245_ = _0138_ ? (* hdlname = "controlleraftab 3127" *) 1'h0 : _0220_;
  assign _0246_ = _0138_ ? (* hdlname = "controlleraftab 3129" *) 1'h0 : _0221_;
  assign _0247_ = _0138_ ? (* hdlname = "controlleraftab 3130" *) _0113_ : _0222_;
  assign _0248_ = _0138_ ? (* hdlname = "controlleraftab 3132" *) _0114_ : 2'h0;
  assign _0249_ = _0138_ ? (* hdlname = "controlleraftab 3134" *) 1'h0 : _0223_;
  assign _0251_ = _0138_ ? (* hdlname = "controlleraftab 3137" *) _0115_ : _0225_;
  assign _0252_ = _0138_ ? (* hdlname = "controlleraftab 3139" *) 1'h0 : _0226_;
  assign _0253_ = _0138_ ? (* hdlname = "controlleraftab 3140" *) _0102_ : _0227_;
  assign _0254_ = _0138_ ? (* hdlname = "controlleraftab 3142" *) 1'h0 : _0228_;
  assign _0233_ = _0138_ ? (* hdlname = "controlleraftab 3144" *) _0103_ : 1'h0;
  assign _0255_ = _0138_ ? (* hdlname = "controlleraftab 3146" *) 1'h0 : _0229_;
  assign _0250_ = _0138_ ? (* hdlname = "controlleraftab 3148" *) 1'h0 : _0224_;
  assign _0256_ = _0138_ ? (* hdlname = "controlleraftab 3150" *) 1'h0 : _0230_;
  assign _0257_ = _0138_ ? (* hdlname = "controlleraftab 3152" *) 1'h0 : _0231_;
  assign _0258_ = _0035_ ? (* hdlname = "controlleraftab 3153" *) _0116_ : _0232_;
  assign _0260_ = _0035_ ? (* hdlname = "controlleraftab 3155" *) _0118_ : _0234_;
  assign _0261_ = _0035_ ? (* hdlname = "controlleraftab 3157" *) 1'h0 : _0235_;
  assign _0262_ = _0035_ ? (* hdlname = "controlleraftab 3158" *) _0119_ : _0236_;
  assign _0263_ = _0035_ ? (* hdlname = "controlleraftab 3159" *) _0120_ : _0237_;
  assign _0264_ = _0035_ ? (* hdlname = "controlleraftab 3160" *) _0121_ : _0238_;
  assign _0265_ = _0035_ ? (* hdlname = "controlleraftab 3161" *) _0122_ : _0239_;
  assign _0266_ = _0035_ ? (* hdlname = "controlleraftab 3163" *) _0123_ : 1'h0;
  assign _0267_ = _0035_ ? (* hdlname = "controlleraftab 3164" *) _0119_ : _0240_;
  assign _0268_ = _0035_ ? (* hdlname = "controlleraftab 3165" *) _0124_ : _0241_;
  assign _0269_ = _0035_ ? (* hdlname = "controlleraftab 3166" *) _0125_ : _0242_;
  assign _0270_ = _0035_ ? (* hdlname = "controlleraftab 3167" *) _0126_ : _0243_;
  assign _0271_ = _0035_ ? (* hdlname = "controlleraftab 3168" *) _0127_ : _0244_;
  assign _0272_ = _0035_ ? (* hdlname = "controlleraftab 3170" *) 1'h0 : _0245_;
  assign _0273_ = _0035_ ? (* hdlname = "controlleraftab 3172" *) 1'h0 : _0246_;
  assign _0274_ = _0035_ ? (* hdlname = "controlleraftab 3173" *) _0128_ : _0247_;
  assign _0275_ = _0035_ ? (* hdlname = "controlleraftab 3174" *) _0129_ : _0248_;
  assign _0276_ = _0035_ ? (* hdlname = "controlleraftab 3176" *) _0130_ : 1'h0;
  assign _0277_ = _0035_ ? (* hdlname = "controlleraftab 3178" *) _0131_ : 1'h0;
  assign _0278_ = _0035_ ? (* hdlname = "controlleraftab 3180" *) _0132_ : 1'h0;
  assign _0279_ = _0035_ ? (* hdlname = "controlleraftab 3182" *) _0133_ : 1'h0;
  assign _0280_ = _0035_ ? (* hdlname = "controlleraftab 3184" *) _0134_ : 1'h0;
  assign _0281_ = _0035_ ? (* hdlname = "controlleraftab 3186" *) _0135_ : 1'h0;
  assign _0282_ = _0035_ ? (* hdlname = "controlleraftab 3188" *) _0136_ : 1'h0;
  assign _0283_ = _0035_ ? (* hdlname = "controlleraftab 3190" *) 1'h0 : _0249_;
  assign _0285_ = _0035_ ? (* hdlname = "controlleraftab 3193" *) _0137_ : _0251_;
  assign _0286_ = _0035_ ? (* hdlname = "controlleraftab 3195" *) 1'h0 : _0252_;
  assign _0287_ = _0035_ ? (* hdlname = "controlleraftab 3196" *) _0116_ : _0253_;
  assign _0288_ = _0035_ ? (* hdlname = "controlleraftab 3198" *) 1'h0 : _0254_;
  assign _0259_ = _0035_ ? (* hdlname = "controlleraftab 3199" *) _0117_ : _0233_;
  assign _0289_ = _0035_ ? (* hdlname = "controlleraftab 3201" *) 1'h0 : _0255_;
  assign _0284_ = _0035_ ? (* hdlname = "controlleraftab 3203" *) 1'h0 : _0250_;
  assign _0290_ = _0035_ ? (* hdlname = "controlleraftab 3205" *) 1'h0 : _0256_;
  assign _0291_ = _0035_ ? (* hdlname = "controlleraftab 3207" *) 1'h0 : _0257_;
  assign _0292_ = _0034_ ? (* hdlname = "controlleraftab 3209" *) 1'h0 : _0258_;
  assign _0294_ = _0034_ ? (* hdlname = "controlleraftab 3213" *) 1'h0 : _0260_;
  assign _0295_ = _0034_ ? (* hdlname = "controlleraftab 3215" *) 1'h0 : _0261_;
  assign _0296_ = _0034_ ? (* hdlname = "controlleraftab 3217" *) 1'h1 : _0262_;
  assign _0297_ = _0034_ ? (* hdlname = "controlleraftab 3219" *) 1'h0 : _0263_;
  assign _0298_ = _0034_ ? (* hdlname = "controlleraftab 3221" *) 1'h0 : _0264_;
  assign _0299_ = _0034_ ? (* hdlname = "controlleraftab 3223" *) 1'h1 : _0265_;
  assign _0300_ = _0034_ ? (* hdlname = "controlleraftab 3225" *) 1'h0 : _0266_;
  assign _0301_ = _0034_ ? (* hdlname = "controlleraftab 3227" *) 1'h1 : _0267_;
  assign _0302_ = _0034_ ? (* hdlname = "controlleraftab 3229" *) 1'h0 : _0268_;
  assign _0303_ = _0034_ ? (* hdlname = "controlleraftab 3231" *) 1'h1 : _0269_;
  assign _0304_ = _0034_ ? (* hdlname = "controlleraftab 3233" *) 2'h0 : _0270_;
  assign _0305_ = _0034_ ? (* hdlname = "controlleraftab 3235" *) 1'h0 : _0271_;
  assign _0306_ = _0034_ ? (* hdlname = "controlleraftab 3237" *) 1'h0 : _0272_;
  assign _0307_ = _0034_ ? (* hdlname = "controlleraftab 3239" *) 1'h0 : _0273_;
  assign _0308_ = _0034_ ? (* hdlname = "controlleraftab 3241" *) 12'h4d2 : _0274_;
  assign _0309_ = _0034_ ? (* hdlname = "controlleraftab 3243" *) 2'h0 : _0275_;
  assign _0311_ = _0034_ ? (* hdlname = "controlleraftab 3248" *) 1'h0 : _0276_;
  assign _0312_ = _0034_ ? (* hdlname = "controlleraftab 3250" *) 1'h0 : _0277_;
  assign _0313_ = _0034_ ? (* hdlname = "controlleraftab 3252" *) 1'h0 : _0278_;
  assign _0314_ = _0034_ ? (* hdlname = "controlleraftab 3254" *) 1'h0 : _0279_;
  assign _0315_ = _0034_ ? (* hdlname = "controlleraftab 3256" *) 1'h0 : _0280_;
  assign _0316_ = _0034_ ? (* hdlname = "controlleraftab 3258" *) 1'h0 : _0281_;
  assign _0317_ = _0034_ ? (* hdlname = "controlleraftab 3260" *) 1'h0 : _0282_;
  assign _0318_ = _0034_ ? (* hdlname = "controlleraftab 3262" *) { \controlleraftab.ir [13], _0026_ } : 2'h0;
  assign _0319_ = _0034_ ? (* hdlname = "controlleraftab 3264" *) 1'h0 : _0283_;
  assign _0310_ = _0034_ ? (* hdlname = "controlleraftab 3267" *) 1'h1 : 1'h0;
  assign _0321_ = _0034_ ? (* hdlname = "controlleraftab 3271" *) 3'h2 : _0285_;
  assign _0322_ = _0034_ ? (* hdlname = "controlleraftab 3273" *) 1'h0 : _0286_;
  assign _0323_ = _0034_ ? (* hdlname = "controlleraftab 3275" *) 1'h0 : _0287_;
  assign _0324_ = _0034_ ? (* hdlname = "controlleraftab 3277" *) 1'h0 : _0288_;
  assign _0293_ = _0034_ ? (* hdlname = "controlleraftab 3279" *) 1'h0 : _0259_;
  assign _0325_ = _0034_ ? (* hdlname = "controlleraftab 3281" *) 1'h0 : _0289_;
  assign _0320_ = _0034_ ? (* hdlname = "controlleraftab 3283" *) 1'h0 : _0284_;
  assign _0326_ = _0034_ ? (* hdlname = "controlleraftab 3285" *) 1'h0 : _0290_;
  assign _0327_ = _0034_ ? (* hdlname = "controlleraftab 3287" *) 1'h0 : _0291_;
  assign \controlleraftab.writeregfile  = _0025_ ? (* hdlname = "controlleraftab 3289" *) 1'h1 : _0292_;
  assign \controlleraftab.cmp_selaluop2  = _0025_ ? (* hdlname = "controlleraftab 3292" *) 1'h0 : _0293_;
  assign \controlleraftab.comparedsignedunsignedbar  = _0025_ ? (* hdlname = "controlleraftab 3295" *) 1'h0 : _0294_;
  assign \controlleraftab.selpc  = _0025_ ? (* hdlname = "controlleraftab 3298" *) 1'h0 : _0295_;
  assign \controlleraftab.seljl  = _0025_ ? (* hdlname = "controlleraftab 3301" *) 1'h1 : _0296_;
  assign \controlleraftab.selbsu  = _0025_ ? (* hdlname = "controlleraftab 3304" *) 1'h0 : _0297_;
  assign \controlleraftab.selllu  = _0025_ ? (* hdlname = "controlleraftab 3307" *) 1'h0 : _0298_;
  assign \controlleraftab.selasu  = _0025_ ? (* hdlname = "controlleraftab 3310" *) 1'h1 : _0299_;
  assign \controlleraftab.selaau  = _0025_ ? (* hdlname = "controlleraftab 3313" *) 1'h0 : _0300_;
  assign \controlleraftab.selp1  = _0025_ ? (* hdlname = "controlleraftab 3316" *) 1'h1 : _0301_;
  assign \controlleraftab.selp2  = _0025_ ? (* hdlname = "controlleraftab 3319" *) 1'h0 : _0302_;
  assign \controlleraftab.selimm  = _0025_ ? (* hdlname = "controlleraftab 3322" *) 1'h1 : _0303_;
  assign \controlleraftab.ldbytesigned  = _0025_ ? (* hdlname = "controlleraftab 3325" *) _0031_ : 1'h0;
  assign \controlleraftab.ldhalfsigned  = _0025_ ? (* hdlname = "controlleraftab 3328" *) _0032_ : 1'h0;
  assign \controlleraftab.load  = _0025_ ? (* hdlname = "controlleraftab 3331" *) _0033_ : 1'h0;
  assign \controlleraftab.selshift  = _0025_ ? (* hdlname = "controlleraftab 3334" *) 2'h0 : _0304_;
  assign \controlleraftab.addsubbar  = _0025_ ? (* hdlname = "controlleraftab 3337" *) 1'h0 : _0305_;
  assign \controlleraftab.pass  = _0025_ ? (* hdlname = "controlleraftab 3340" *) 1'h0 : _0306_;
  assign \controlleraftab.selauipc  = _0025_ ? (* hdlname = "controlleraftab 3343" *) 1'h0 : _0307_;
  assign \controlleraftab.muxcode  = _0025_ ? (* hdlname = "controlleraftab 3346" *) 12'h4c9 : _0308_;
  assign \controlleraftab.sellogic  = _0025_ ? (* hdlname = "controlleraftab 3349" *) 2'h0 : _0309_;
  assign \controlleraftab.startmultiplyaau  = _0025_ ? (* hdlname = "controlleraftab 3359" *) 1'h0 : _0311_;
  assign \controlleraftab.startdivideaau  = _0025_ ? (* hdlname = "controlleraftab 3362" *) 1'h0 : _0312_;
  assign \controlleraftab.signedsigned  = _0025_ ? (* hdlname = "controlleraftab 3365" *) 1'h0 : _0313_;
  assign \controlleraftab.signedunsigned  = _0025_ ? (* hdlname = "controlleraftab 3368" *) 1'h0 : _0314_;
  assign \controlleraftab.unsignedunsigned  = _0025_ ? (* hdlname = "controlleraftab 3371" *) 1'h0 : _0315_;
  assign \controlleraftab.selaal  = _0025_ ? (* hdlname = "controlleraftab 3374" *) 1'h0 : _0316_;
  assign \controlleraftab.selaah  = _0025_ ? (* hdlname = "controlleraftab 3377" *) 1'h0 : _0317_;
  assign \controlleraftab.nbytes  = _0025_ ? (* hdlname = "controlleraftab 3379" *) { \controlleraftab.ir [13], _0026_ } : _0318_;
  assign \controlleraftab.selcsr  = _0025_ ? (* hdlname = "controlleraftab 3382" *) 1'h0 : _0319_;
  assign \controlleraftab.checkmisaligneddawu  = _0025_ ? (* hdlname = "controlleraftab 3385" *) 1'h0 : _0310_;
  assign \controlleraftab.inst_type  = _0025_ ? (* hdlname = "controlleraftab 3391" *) 3'h1 : _0321_;
  assign \controlleraftab.ret_from_epc  = _0025_ ? (* hdlname = "controlleraftab 3394" *) 1'h0 : _0322_;
  assign \controlleraftab.selalu  = _0025_ ? (* hdlname = "controlleraftab 3397" *) 1'h0 : _0323_;
  assign \controlleraftab.selpc4  = _0025_ ? (* hdlname = "controlleraftab 3400" *) 1'h0 : _0324_;
  assign \controlleraftab.selmem  = _0025_ ? (* hdlname = "controlleraftab 3404" *) 1'h1 : 1'h0;
  assign \controlleraftab.cmp_selop2  = _0025_ ? (* hdlname = "controlleraftab 3410" *) 1'h0 : _0325_;
  assign \controlleraftab.iscsrinstruction  = _0025_ ? (* hdlname = "controlleraftab 3413" *) 1'h0 : _0320_;
  assign \controlleraftab.ecallflag  = _0025_ ? (* hdlname = "controlleraftab 3416" *) 1'h0 : _0326_;
  assign \controlleraftab.illegalinstrflag  = _0025_ ? (* hdlname = "controlleraftab 3419" *) 1'h0 : _0327_;
  assign _0328_ = ~ (* hdlname = "controlleraftab 3421" *) \controlleraftab.dec_valid ;
  assign _0329_ = \controlleraftab.d2e_en_temp  | (* hdlname = "controlleraftab 3422" *) _0328_;
  assign _0330_ = \controlleraftab.completeddaru1  & (* hdlname = "controlleraftab 3423" *) _0329_;
  assign _0331_ = _0330_ ? (* hdlname = "controlleraftab 3426" *) 1'h1 : 1'h0;
  assign _0332_ = ~ (* hdlname = "controlleraftab 3428" *) \controlleraftab.ex_valid ;
  assign _0333_ = \controlleraftab.e2m_en_temp  | (* hdlname = "controlleraftab 3429" *) _0332_;
  assign _0334_ = \controlleraftab.dec_valid  & (* hdlname = "controlleraftab 3430" *) _0333_;
  assign _0335_ = _0334_ ? (* hdlname = "controlleraftab 3433" *) 1'h1 : 1'h0;
  assign _0336_ = ~ (* hdlname = "controlleraftab 3435" *) \controlleraftab.m_valid ;
  assign _0337_ = \controlleraftab.m2wb_en_temp  | (* hdlname = "controlleraftab 3436" *) _0336_;
  assign _0338_ = \controlleraftab.ex_valid  & (* hdlname = "controlleraftab 3437" *) _0337_;
  assign _0339_ = ~ (* hdlname = "controlleraftab 3438" *) \controlleraftab.is_aau_used ;
  assign _0340_ = _0339_ | (* hdlname = "controlleraftab 3439" *) \controlleraftab.completedaau ;
  assign _0341_ = _0340_ & (* hdlname = "controlleraftab 3440" *) _0338_;
  assign _0342_ = _0341_ ? (* hdlname = "controlleraftab 3443" *) 1'h1 : 1'h0;
  assign _0343_ = \datapathaftab.e2m_ctrl_word_curr [34] & (* hdlname = "controlleraftab 3445" *) \controlleraftab.completeddawu ;
  assign _0344_ = \datapathaftab.e2m_ctrl_word_curr [35] & (* hdlname = "controlleraftab 3446" *) \controlleraftab.completeddaru2 ;
  assign _0345_ = _0343_ | (* hdlname = "controlleraftab 3447" *) _0344_;
  assign _0346_ = ~ (* hdlname = "controlleraftab 3448" *) \datapathaftab.e2m_ctrl_word_curr [34];
  assign _0347_ = ~ (* hdlname = "controlleraftab 3449" *) \datapathaftab.e2m_ctrl_word_curr [35];
  assign _0348_ = _0347_ & (* hdlname = "controlleraftab 3450" *) _0346_;
  assign _0349_ = _0345_ | (* hdlname = "controlleraftab 3451" *) _0348_;
  assign _0350_ = _0349_ & (* hdlname = "controlleraftab 3452" *) \controlleraftab.instructiondone ;
  assign _0351_ = \controlleraftab.m_valid  & (* hdlname = "controlleraftab 3453" *) _0350_;
  assign _0352_ = _0351_ ? (* hdlname = "controlleraftab 3456" *) 1'h1 : 1'h0;
  assign _0353_ = \controlleraftab.instructiondone  ? (* hdlname = "controlleraftab 3460" *) 1'h1 : 1'h0;
  assign _0354_ = \controlleraftab.branch_taken  ? (* hdlname = "controlleraftab 3467" *) 1'h1 : 1'h0;
  assign _0355_ = \controlleraftab.branch_taken  ? (* hdlname = "controlleraftab 3470" *) _0353_ : 1'h0;
  assign _0357_ = \controlleraftab.hazm  ? (* hdlname = "controlleraftab 3474" *) 1'h0 : _0331_;
  assign _0358_ = \controlleraftab.hazm  ? (* hdlname = "controlleraftab 3476" *) 1'h0 : _0335_;
  assign _0359_ = \controlleraftab.hazex  ? (* hdlname = "controlleraftab 3478" *) 1'h0 : _0357_;
  assign _0360_ = \controlleraftab.hazex  ? (* hdlname = "controlleraftab 3480" *) 1'h0 : _0358_;
  assign _0361_ = \controlleraftab.interruptraise  ? (* hdlname = "controlleraftab 3489" *) 1'h1 : 1'h0;
  assign _0362_ = \controlleraftab.interruptraise  ? (* hdlname = "controlleraftab 3491" *) 1'h0 : _0359_;
  assign _0363_ = \controlleraftab.interruptraise  ? (* hdlname = "controlleraftab 3493" *) 1'h0 : _0360_;
  assign _0364_ = \controlleraftab.interruptraise  ? (* hdlname = "controlleraftab 3495" *) 1'h0 : _0342_;
  assign _0365_ = \controlleraftab.interruptraise  ? (* hdlname = "controlleraftab 3497" *) 1'h0 : _0352_;
  assign _0368_ = \controlleraftab.exceptionraise  ? (* hdlname = "controlleraftab 3507" *) 3'h7 : 3'h0;
  assign _0367_ = \controlleraftab.exceptionraise  ? (* hdlname = "controlleraftab 3510" *) 1'h1 : 1'h0;
  assign _0366_ = \controlleraftab.exceptionraise  ? (* hdlname = "controlleraftab 3512" *) 1'h0 : _0361_;
  assign _0369_ = \controlleraftab.exceptionraise  ? (* hdlname = "controlleraftab 3514" *) 1'h0 : _0362_;
  assign _0370_ = \controlleraftab.exceptionraise  ? (* hdlname = "controlleraftab 3516" *) 1'h0 : _0363_;
  assign _0371_ = \controlleraftab.exceptionraise  ? (* hdlname = "controlleraftab 3518" *) 1'h0 : _0364_;
  assign _0372_ = \controlleraftab.exceptionraise  ? (* hdlname = "controlleraftab 3520" *) 1'h0 : _0365_;
  assign _0374_ = _0356_ ? (* hdlname = "controlleraftab 3524" *) 1'h0 : _0367_;
  assign _0375_ = _0356_ ? (* hdlname = "controlleraftab 3528" *) 3'h2 : _0368_;
  assign _0376_ = _0356_ ? (* hdlname = "controlleraftab 3530" *) 1'h1 : _0367_;
  assign _0373_ = _0356_ ? (* hdlname = "controlleraftab 3532" *) 1'h0 : _0366_;
  assign _0377_ = _0356_ ? (* hdlname = "controlleraftab 3534" *) 1'h0 : _0369_;
  assign _0378_ = _0356_ ? (* hdlname = "controlleraftab 3536" *) 1'h0 : _0370_;
  assign _0379_ = _0356_ ? (* hdlname = "controlleraftab 3538" *) 1'h0 : _0371_;
  assign _0380_ = _0356_ ? (* hdlname = "controlleraftab 3540" *) 1'h0 : _0372_;
  assign _0020_ = ! (* hdlname = "controlleraftab 3542" *) \controlleraftab.p_state ;
  assign _0381_ = \controlleraftab.p_state  == (* hdlname = "controlleraftab 3544" *) 5'h01;
  assign _0383_ = \controlleraftab.p_state  == (* hdlname = "controlleraftab 3548" *) 5'h02;
  assign _0384_ = \controlleraftab.p_state  == (* hdlname = "controlleraftab 3550" *) 5'h03;
  assign _0385_ = \controlleraftab.p_state  == (* hdlname = "controlleraftab 3552" *) 5'h04;
  assign _0386_ = \controlleraftab.p_state  == (* hdlname = "controlleraftab 3556" *) 5'h05;
  assign _0387_ = \controlleraftab.p_state  == (* hdlname = "controlleraftab 3560" *) 5'h09;
  assign _0388_ = \controlleraftab.p_state  == (* hdlname = "controlleraftab 3564" *) 5'h0a;
  assign _0389_ = ! (* hdlname = "controlleraftab 3571" *) \datapathaftab.d2e_outcsr_next [1:0];
  assign _0390_ = \datapathaftab.d2e_outcsr_next [1:0] == (* hdlname = "controlleraftab 3573" *) 2'h1;
  assign _0391_ = _0390_ ? (* hdlname = "controlleraftab 3576" *) 1'h1 : 1'h0;
  assign _0392_ = _0389_ ? (* hdlname = "controlleraftab 3579" *) 1'h1 : 1'h0;
  assign _0393_ = _0389_ ? (* hdlname = "controlleraftab 3581" *) 1'h0 : _0391_;
  assign _0394_ = \controlleraftab.p_state  == (* hdlname = "controlleraftab 3583" *) 5'h0b;
  assign _0395_ = \controlleraftab.p_state  == (* hdlname = "controlleraftab 3585" *) 5'h06;
  assign _0396_ = \controlleraftab.p_state  == (* hdlname = "controlleraftab 3590" *) 5'h07;
  assign _0382_ = ~ (* hdlname = "controlleraftab 3596" *) \controlleraftab.delegationmode [0];
  assign _0397_ = \controlleraftab.p_state  == (* hdlname = "controlleraftab 3598" *) 5'h08;
  assign _0399_ = \controlleraftab.p_state  == (* hdlname = "controlleraftab 3601" *) 5'h0c;
  assign _0400_ = \controlleraftab.p_state  == (* hdlname = "controlleraftab 3603" *) 5'h0d;
  assign _0401_ = ~ (* hdlname = "controlleraftab 3606" *) \datapathaftab.csrisl.outcsr [11];
  assign _0402_ = \datapathaftab.m2wb_instr_curr [29] ? (* hdlname = "controlleraftab 3608" *) \datapathaftab.csrisl.outcsr [11] : 1'h0;
  assign _0403_ = \datapathaftab.m2wb_instr_curr [29] ? (* hdlname = "controlleraftab 3610" *) _0401_ : 1'h1;
  assign _0404_ = \controlleraftab.p_state  == (* hdlname = "controlleraftab 3613" *) 5'h0e;
  assign _0398_ = ~ (* hdlname = "controlleraftab 3614" *) \datapathaftab.m2wb_instr_curr [29];
  assign _0405_ = \controlleraftab.p_state  == (* hdlname = "controlleraftab 3616" *) 5'h0f;
  assign _0406_ = \controlleraftab.hazard_solved  ? (* hdlname = "controlleraftab 3621" *) _0331_ : 1'h0;
  assign _0407_ = \controlleraftab.hazard_solved  ? (* hdlname = "controlleraftab 3623" *) _0335_ : 1'h0;
  assign _0408_ = \controlleraftab.interruptraise  ? (* hdlname = "controlleraftab 3634" *) 1'h0 : _0406_;
  assign _0409_ = \controlleraftab.interruptraise  ? (* hdlname = "controlleraftab 3636" *) 1'h0 : _0407_;
  assign _0021_ = \controlleraftab.p_state  == (* hdlname = "controlleraftab 3685" *) 5'h10;
  assign _0356_ = \controlleraftab.wb_valid  & (* hdlname = "controlleraftab 3686" *) \datapathaftab.m2wb_ctrl_word_curr [53];
  assign _0410_ = \controlleraftab.exceptionraise  ? (* hdlname = "controlleraftab 3726" *) 1'h0 : _0408_;
  assign _0411_ = \controlleraftab.exceptionraise  ? (* hdlname = "controlleraftab 3728" *) 1'h0 : _0409_;
  assign _0412_ = _0356_ ? (* hdlname = "controlleraftab 3746" *) 1'h0 : _0410_;
  assign _0413_ = _0356_ ? (* hdlname = "controlleraftab 3748" *) 1'h0 : _0411_;
  assign _0023_ = \controlleraftab.p_state  == (* hdlname = "controlleraftab 3754" *) 5'h11;
  assign _0414_ = \controlleraftab.completeddawu  ? (* hdlname = "controlleraftab 3756" *) 1'h1 : _0354_;
  assign _0415_ = \controlleraftab.completeddawu  ? (* hdlname = "controlleraftab 3758" *) 1'h1 : _0355_;
  assign _0416_ = \controlleraftab.completeddawu  ? (* hdlname = "controlleraftab 3761" *) 1'h1 : 1'h0;
  assign _0417_ = \controlleraftab.p_state  == (* hdlname = "controlleraftab 3763" *) 5'h12;
  function [0:0] \controlleraftab.3782 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controlleraftab 3782" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controlleraftab.3782  = b[0:0];
      2'b1?:
        \controlleraftab.3782  = b[1:1];
      default:
        \controlleraftab.3782  = a;
    endcase
  endfunction
  assign \controlleraftab.forced_rb_read  = \controlleraftab.3782 (1'hx, 2'h2, { _0491_, _0490_ });
  function [0:0] \controlleraftab.3802 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controlleraftab 3802" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controlleraftab.3802  = b[0:0];
      2'b1?:
        \controlleraftab.3802  = b[1:1];
      default:
        \controlleraftab.3802  = a;
    endcase
  endfunction
  assign \controlleraftab.csr_from_wb  = \controlleraftab.3802 (1'hx, 2'h2, { _0458_, _0489_ });
  function [0:0] \controlleraftab.3817 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* hdlname = "controlleraftab 3817" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \controlleraftab.3817  = b[0:0];
      3'b?1?:
        \controlleraftab.3817  = b[1:1];
      3'b1??:
        \controlleraftab.3817  = b[2:2];
      default:
        \controlleraftab.3817  = a;
    endcase
  endfunction
  assign \controlleraftab.mipcclddisable  = \controlleraftab.3817 (1'hx, { 2'h1, _0373_ }, { _0488_, _0487_, _0489_ });
  function [0:0] \controlleraftab.3823 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controlleraftab 3823" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controlleraftab.3823  = b[0:0];
      2'b1?:
        \controlleraftab.3823  = b[1:1];
      default:
        \controlleraftab.3823  = a;
    endcase
  endfunction
  assign \controlleraftab.selccmip_csr  = \controlleraftab.3823 (1'hx, 2'h2, { _0486_, _0485_ });
  function [0:0] \controlleraftab.3828 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controlleraftab 3828" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controlleraftab.3828  = b[0:0];
      2'b1?:
        \controlleraftab.3828  = b[1:1];
      default:
        \controlleraftab.3828  = a;
    endcase
  endfunction
  assign \controlleraftab.selcause_csr  = \controlleraftab.3828 (1'hx, 2'h2, { _0386_, _0484_ });
  function [0:0] \controlleraftab.3833 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controlleraftab 3833" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controlleraftab.3833  = b[0:0];
      2'b1?:
        \controlleraftab.3833  = b[1:1];
      default:
        \controlleraftab.3833  = a;
    endcase
  endfunction
  assign \controlleraftab.selpc_csr  = \controlleraftab.3833 (1'hx, 2'h2, { _0387_, _0483_ });
  function [0:0] \controlleraftab.3842 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* hdlname = "controlleraftab 3842" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \controlleraftab.3842  = b[0:0];
      3'b?1?:
        \controlleraftab.3842  = b[1:1];
      3'b1??:
        \controlleraftab.3842  = b[2:2];
      default:
        \controlleraftab.3842  = a;
    endcase
  endfunction
  assign \controlleraftab.selmedeleg_csr  = \controlleraftab.3842 (1'hx, { 1'h0, \controlleraftab.exceptionraise , _0374_ }, { _0482_, _0381_, _0489_ });
  function [0:0] \controlleraftab.3846 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* hdlname = "controlleraftab 3846" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \controlleraftab.3846  = b[0:0];
      3'b?1?:
        \controlleraftab.3846  = b[1:1];
      3'b1??:
        \controlleraftab.3846  = b[2:2];
      default:
        \controlleraftab.3846  = a;
    endcase
  endfunction
  assign \controlleraftab.selmideleg_csr  = \controlleraftab.3846 (1'hx, { 1'h0, \controlleraftab.interruptraise , _0373_ }, { _0482_, _0381_, _0489_ });
  function [2:0] \controlleraftab.3852 ;
    input [2:0] a;
    input [11:0] b;
    input [3:0] s;
    (* hdlname = "controlleraftab 3852" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        \controlleraftab.3852  = b[2:0];
      4'b??1?:
        \controlleraftab.3852  = b[5:3];
      4'b?1??:
        \controlleraftab.3852  = b[8:6];
      4'b1???:
        \controlleraftab.3852  = b[11:9];
      default:
        \controlleraftab.3852  = a;
    endcase
  endfunction
  assign \controlleraftab.ldvaluecsr  = \controlleraftab.3852 (3'hx, { 9'h108, _0375_ }, { _0399_, _0383_, _0480_, _0489_ });
  function [0:0] \controlleraftab.3858 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* hdlname = "controlleraftab 3858" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \controlleraftab.3858  = b[0:0];
      3'b?1?:
        \controlleraftab.3858  = b[1:1];
      3'b1??:
        \controlleraftab.3858  = b[2:2];
      default:
        \controlleraftab.3858  = a;
    endcase
  endfunction
  assign \controlleraftab.ldcntcsr  = \controlleraftab.3858 (1'hx, { 2'h2, _0376_ }, { _0481_, _0480_, _0489_ });
  function [0:0] \controlleraftab.3866 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controlleraftab 3866" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controlleraftab.3866  = b[0:0];
      2'b1?:
        \controlleraftab.3866  = b[1:1];
      default:
        \controlleraftab.3866  = a;
    endcase
  endfunction
  assign \controlleraftab.upcntcsr  = \controlleraftab.3866 (1'hx, 2'h2, { _0479_, _0478_ });
  function [0:0] \controlleraftab.3871 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controlleraftab 3871" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controlleraftab.3871  = b[0:0];
      2'b1?:
        \controlleraftab.3871  = b[1:1];
      default:
        \controlleraftab.3871  = a;
    endcase
  endfunction
  assign \controlleraftab.lddelegation  = \controlleraftab.3871 (1'hx, 2'h2, { _0381_, _0477_ });
  function [0:0] \controlleraftab.3875 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* hdlname = "controlleraftab 3875" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \controlleraftab.3875  = b[0:0];
      3'b?1?:
        \controlleraftab.3875  = b[1:1];
      3'b1??:
        \controlleraftab.3875  = b[2:2];
      default:
        \controlleraftab.3875  = a;
    endcase
  endfunction
  assign \controlleraftab.ldmachine  = \controlleraftab.3875 (1'hx, { _0402_, \controlleraftab.delegationmode [0], 1'h0 }, { _0404_, _0476_, _0475_ });
  function [0:0] \controlleraftab.3879 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* hdlname = "controlleraftab 3879" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \controlleraftab.3879  = b[0:0];
      3'b?1?:
        \controlleraftab.3879  = b[1:1];
      3'b1??:
        \controlleraftab.3879  = b[2:2];
      default:
        \controlleraftab.3879  = a;
    endcase
  endfunction
  assign \controlleraftab.lduser  = \controlleraftab.3879 (1'hx, { _0403_, _0382_, 1'h0 }, { _0404_, _0476_, _0475_ });
  function [0:0] \controlleraftab.3897 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controlleraftab 3897" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controlleraftab.3897  = b[0:0];
      2'b1?:
        \controlleraftab.3897  = b[1:1];
      default:
        \controlleraftab.3897  = a;
    endcase
  endfunction
  assign \controlleraftab.selromaddress  = \controlleraftab.3897 (1'hx, 2'h2, { _0474_, _0473_ });
  function [0:0] \controlleraftab.3902 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controlleraftab 3902" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controlleraftab.3902  = b[0:0];
      2'b1?:
        \controlleraftab.3902  = b[1:1];
      default:
        \controlleraftab.3902  = a;
    endcase
  endfunction
  assign \controlleraftab.selmepc_csr  = \controlleraftab.3902 (1'hx, 2'h2, { _0400_, _0472_ });
  function [0:0] \controlleraftab.3906 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controlleraftab 3906" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controlleraftab.3906  = b[0:0];
      2'b1?:
        \controlleraftab.3906  = b[1:1];
      default:
        \controlleraftab.3906  = a;
    endcase
  endfunction
  assign \controlleraftab.selinterruptaddressdirect  = \controlleraftab.3906 (1'hx, { _0392_, 1'h0 }, { _0394_, _0471_ });
  function [0:0] \controlleraftab.3910 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controlleraftab 3910" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controlleraftab.3910  = b[0:0];
      2'b1?:
        \controlleraftab.3910  = b[1:1];
      default:
        \controlleraftab.3910  = a;
    endcase
  endfunction
  assign \controlleraftab.selinterruptaddressvectored  = \controlleraftab.3910 (1'hx, { _0393_, 1'h0 }, { _0394_, _0471_ });
  function [0:0] \controlleraftab.3914 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controlleraftab 3914" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controlleraftab.3914  = b[0:0];
      2'b1?:
        \controlleraftab.3914  = b[1:1];
      default:
        \controlleraftab.3914  = a;
    endcase
  endfunction
  assign \controlleraftab.machinestatusalterationprecsr  = \controlleraftab.3914 (1'hx, { \controlleraftab.delegationmode [0], 1'h0 }, { _0470_, _0469_ });
  function [0:0] \controlleraftab.3918 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controlleraftab 3918" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controlleraftab.3918  = b[0:0];
      2'b1?:
        \controlleraftab.3918  = b[1:1];
      default:
        \controlleraftab.3918  = a;
    endcase
  endfunction
  assign \controlleraftab.userstatusalterationprecsr  = \controlleraftab.3918 (1'hx, { _0382_, 1'h0 }, { _0470_, _0469_ });
  function [0:0] \controlleraftab.3922 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controlleraftab 3922" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controlleraftab.3922  = b[0:0];
      2'b1?:
        \controlleraftab.3922  = b[1:1];
      default:
        \controlleraftab.3922  = a;
    endcase
  endfunction
  assign \controlleraftab.machinestatusalterationpostcsr  = \controlleraftab.3922 (1'hx, { \datapathaftab.m2wb_instr_curr [29], 1'h0 }, { _0468_, _0467_ });
  function [0:0] \controlleraftab.3926 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controlleraftab 3926" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controlleraftab.3926  = b[0:0];
      2'b1?:
        \controlleraftab.3926  = b[1:1];
      default:
        \controlleraftab.3926  = a;
    endcase
  endfunction
  assign \controlleraftab.userstatusalterationpostcsr  = \controlleraftab.3926 (1'hx, { _0398_, 1'h0 }, { _0468_, _0467_ });
  function [0:0] \controlleraftab.3931 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* hdlname = "controlleraftab 3931" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \controlleraftab.3931  = b[0:0];
      3'b?1?:
        \controlleraftab.3931  = b[1:1];
      3'b1??:
        \controlleraftab.3931  = b[2:2];
      default:
        \controlleraftab.3931  = a;
    endcase
  endfunction
  assign \controlleraftab.zerocntcsr  = \controlleraftab.3931 (1'hx, { 2'h2, _0373_ }, { _0405_, _0464_, _0489_ });
  function [0:0] \controlleraftab.3936 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controlleraftab 3936" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controlleraftab.3936  = b[0:0];
      2'b1?:
        \controlleraftab.3936  = b[1:1];
      default:
        \controlleraftab.3936  = a;
    endcase
  endfunction
  assign \controlleraftab.gi2d_rst  = \controlleraftab.3936 (1'hx, { 1'h1, _0354_ }, { _0463_, _0462_ });
  function [0:0] \controlleraftab.3939 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* hdlname = "controlleraftab 3939" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \controlleraftab.3939  = b[0:0];
      3'b?1?:
        \controlleraftab.3939  = b[1:1];
      3'b1??:
        \controlleraftab.3939  = b[2:2];
      default:
        \controlleraftab.3939  = a;
    endcase
  endfunction
  assign \controlleraftab.d2e_rst  = \controlleraftab.3939 (1'hx, { _0414_, 1'h1, _0354_ }, { _0417_, _0405_, _0461_ });
  function [0:0] \controlleraftab.3942 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* hdlname = "controlleraftab 3942" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \controlleraftab.3942  = b[0:0];
      3'b?1?:
        \controlleraftab.3942  = b[1:1];
      3'b1??:
        \controlleraftab.3942  = b[2:2];
      default:
        \controlleraftab.3942  = a;
    endcase
  endfunction
  assign \controlleraftab.e2m_rst  = \controlleraftab.3942 (1'hx, { _0415_, 1'h1, _0355_ }, { _0417_, _0405_, _0461_ });
  function [0:0] \controlleraftab.3947 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* hdlname = "controlleraftab 3947" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \controlleraftab.3947  = b[0:0];
      3'b?1?:
        \controlleraftab.3947  = b[1:1];
      3'b1??:
        \controlleraftab.3947  = b[2:2];
      default:
        \controlleraftab.3947  = a;
    endcase
  endfunction
  assign \controlleraftab.m2wb_rst  = \controlleraftab.3947 (1'hx, { _0416_, 2'h2 }, { _0417_, _0460_, _0459_ });
  function [0:0] \controlleraftab.3966 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* hdlname = "controlleraftab 3966" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \controlleraftab.3966  = b[0:0];
      3'b?1?:
        \controlleraftab.3966  = b[1:1];
      3'b1??:
        \controlleraftab.3966  = b[2:2];
      default:
        \controlleraftab.3966  = a;
    endcase
  endfunction
  assign \controlleraftab.gi2d_en  = \controlleraftab.3966 (1'hx, { _0412_, 1'h0, _0377_ }, { _0493_, _0458_, _0020_ });
  function [0:0] \controlleraftab.3984 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* hdlname = "controlleraftab 3984" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \controlleraftab.3984  = b[0:0];
      3'b?1?:
        \controlleraftab.3984  = b[1:1];
      3'b1??:
        \controlleraftab.3984  = b[2:2];
      default:
        \controlleraftab.3984  = a;
    endcase
  endfunction
  assign \controlleraftab.d2e_en_temp  = \controlleraftab.3984 (1'hx, { _0413_, 1'h0, _0378_ }, { _0493_, _0458_, _0020_ });
  function [0:0] \controlleraftab.4002 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controlleraftab 4002" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controlleraftab.4002  = b[0:0];
      2'b1?:
        \controlleraftab.4002  = b[1:1];
      default:
        \controlleraftab.4002  = a;
    endcase
  endfunction
  assign \controlleraftab.e2m_en_temp  = \controlleraftab.4002 (1'hx, { 1'h0, _0379_ }, { _0458_, _0489_ });
  function [0:0] \controlleraftab.4020 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controlleraftab 4020" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controlleraftab.4020  = b[0:0];
      2'b1?:
        \controlleraftab.4020  = b[1:1];
      default:
        \controlleraftab.4020  = a;
    endcase
  endfunction
  assign \controlleraftab.m2wb_en_temp  = \controlleraftab.4020 (1'hx, { 1'h0, _0380_ }, { _0458_, _0489_ });
  function [0:0] \controlleraftab.4031 ;
    input [0:0] a;
    input [3:0] b;
    input [3:0] s;
    (* hdlname = "controlleraftab 4031" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        \controlleraftab.4031  = b[0:0];
      4'b??1?:
        \controlleraftab.4031  = b[1:1];
      4'b?1??:
        \controlleraftab.4031  = b[2:2];
      4'b1???:
        \controlleraftab.4031  = b[3:3];
      default:
        \controlleraftab.4031  = a;
    endcase
  endfunction
  assign \controlleraftab.mirrorusercu_exint  = \controlleraftab.4031 (1'hx, { _0398_, 1'h1, _0382_, 1'h0 }, { _0399_, _0457_, _0456_, _0455_ });
  function [0:0] \controlleraftab.4044 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controlleraftab 4044" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controlleraftab.4044  = b[0:0];
      2'b1?:
        \controlleraftab.4044  = b[1:1];
      default:
        \controlleraftab.4044  = a;
    endcase
  endfunction
  assign \controlleraftab.writeregbank_exint  = \controlleraftab.4044 (1'hx, 2'h2, { _0454_, _0453_ });
  function [0:0] \controlleraftab.4048 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controlleraftab 4048" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controlleraftab.4048  = b[0:0];
      2'b1?:
        \controlleraftab.4048  = b[1:1];
      default:
        \controlleraftab.4048  = a;
    endcase
  endfunction
  assign \controlleraftab.loadmieuiefield_exint  = \controlleraftab.4048 (1'hx, { \controlleraftab.ldmieuiefield , 1'h0 }, { _0466_, _0465_ });
  (* hdlname = "controlleraftab 4059" *)
  always @(posedge clk)
    if (rst) _0009_ <= 5'h00;
    else _0009_ <= \controlleraftab.n_state ;
  (* hdlname = "controlleraftab 4060" *)
  always @(posedge clk)
    if (rst) _0010_ <= 1'h0;
    else _0010_ <= \controlleraftab.csr_n_state ;
  assign _0772_ = _0744_ ? (* hdlname = "datapathaftab 1001" *) _0755_ : 1'h0;
  assign _0773_ = _0744_ ? (* hdlname = "datapathaftab 1003" *) _0756_ : 1'h0;
  assign \datapathaftab.hazex_result  = _0743_ ? (* hdlname = "datapathaftab 1004" *) \datapathaftab.d2e_instr_curr [11:7] : _0769_;
  assign \datapathaftab.hazex_result_en  = _0743_ ? (* hdlname = "datapathaftab 1007" *) 1'h1 : _0770_;
  assign \datapathaftab.hazex_csr_result  = _0743_ ? (* hdlname = "datapathaftab 1010" *) 12'h000 : _0771_;
  assign \datapathaftab.hazex_csr_result_en  = _0743_ ? (* hdlname = "datapathaftab 1013" *) 1'h0 : _0772_;
  assign \datapathaftab.hazex_csr_mirror  = _0743_ ? (* hdlname = "datapathaftab 1016" *) 1'h0 : _0773_;
  assign _0775_ = \datapathaftab.bypass_first_operand  == (* hdlname = "datapathaftab 1035" *) \datapathaftab.hazex_result ;
  assign _0776_ = _0775_ & (* hdlname = "datapathaftab 1036" *) _0774_;
  assign _0777_ = \datapathaftab.bypass_first_operand_en  & (* hdlname = "datapathaftab 1037" *) _0776_;
  assign _0778_ = \datapathaftab.hazex_result_en  & (* hdlname = "datapathaftab 1038" *) _0777_;
  assign _0779_ = _0648_ & (* hdlname = "datapathaftab 1040" *) _0778_;
  assign _0780_ = \datapathaftab.bypass_second_operand  == (* hdlname = "datapathaftab 1042" *) \datapathaftab.hazex_result ;
  assign _0781_ = \datapathaftab.bypass_second_operand_en  & (* hdlname = "datapathaftab 1043" *) _0780_;
  assign _0782_ = \datapathaftab.hazex_result_en  & (* hdlname = "datapathaftab 1044" *) _0781_;
  assign _0783_ = _0653_ & (* hdlname = "datapathaftab 1046" *) _0782_;
  assign _0784_ = ~ (* hdlname = "datapathaftab 1047" *) \datapathaftab.hazex_csr_mirror ;
  assign _0785_ = \datapathaftab.bypass_csr_second_operand  == (* hdlname = "datapathaftab 1048" *) \datapathaftab.hazex_csr_result ;
  assign _0786_ = _0785_ & (* hdlname = "datapathaftab 1049" *) _0784_;
  assign _0787_ = \datapathaftab.bypass_csr_second_operand [7:0] == (* hdlname = "datapathaftab 1052" *) \datapathaftab.hazex_csr_result [7:0];
  assign _0788_ = _0787_ & (* hdlname = "datapathaftab 1053" *) \datapathaftab.hazex_csr_mirror ;
  assign _0789_ = _0786_ | (* hdlname = "datapathaftab 1054" *) _0788_;
  assign _0790_ = \datapathaftab.bypass_csr_second_operand_en  & (* hdlname = "datapathaftab 1055" *) _0789_;
  assign _0791_ = \datapathaftab.hazex_csr_result_en  & (* hdlname = "datapathaftab 1056" *) _0790_;
  assign _0792_ = _0783_ | (* hdlname = "datapathaftab 1057" *) _0791_;
  assign _0793_ = _0792_ & (* hdlname = "datapathaftab 1058" *) _0774_;
  assign _0794_ = _0793_ ? (* hdlname = "datapathaftab 1061" *) 1'h1 : 1'h0;
  assign \controlleraftab.hazex  = _0779_ ? (* hdlname = "datapathaftab 1063" *) 1'h1 : _0794_;
  assign _0577_ = ! (* hdlname = "datapathaftab 1068" *) \controlleraftab.inst_type ;
  assign _0578_ = \controlleraftab.inst_type  == (* hdlname = "datapathaftab 1072" *) 3'h1;
  assign _0579_ = _0148_ & (* hdlname = "datapathaftab 1079" *) _0145_;
  assign _0583_ = _0579_ ? (* hdlname = "datapathaftab 1091" *) \datapathaftab.gi2d_instr_curr [19:15] : _0581_;
  assign _0585_ = _0579_ ? (* hdlname = "datapathaftab 1093" *) 1'h1 : _0582_;
  assign _0584_ = _0579_ ? (* hdlname = "datapathaftab 1095" *) \controlleraftab.ir [31:20] : 12'h000;
  assign _0586_ = _0579_ ? (* hdlname = "datapathaftab 1098" *) 1'h1 : 1'h0;
  assign _0587_ = \controlleraftab.inst_type  == (* hdlname = "datapathaftab 1100" *) 3'h2;
  assign _0580_ = \controlleraftab.ir [6:0] != (* hdlname = "datapathaftab 1103" *) 7'h73;
  assign _0581_ = _0580_ ? (* hdlname = "datapathaftab 1107" *) \datapathaftab.gi2d_instr_curr [19:15] : 5'h00;
  assign _0588_ = _0580_ ? (* hdlname = "datapathaftab 1109" *) \controlleraftab.ir [24:20] : 5'h00;
  assign _0582_ = _0580_ ? (* hdlname = "datapathaftab 1115" *) 1'h1 : 1'h0;
  assign _0589_ = \controlleraftab.inst_type  == (* hdlname = "datapathaftab 1117" *) 3'h4;
  assign _0590_ = \controlleraftab.inst_type  == (* hdlname = "datapathaftab 1121" *) 3'h3;
  assign _0591_ = \controlleraftab.inst_type  == (* hdlname = "datapathaftab 1123" *) 3'h5;
  assign _0592_ = \controlleraftab.selpc  ? (* hdlname = "datapathaftab 1126" *) 5'h00 : \datapathaftab.gi2d_instr_curr [19:15];
  assign _0593_ = \controlleraftab.selpc  ? (* hdlname = "datapathaftab 1129" *) 1'h0 : 1'h1;
  assign _0594_ = _0591_ ? (* hdlname = "datapathaftab 1131" *) _0592_ : 5'h00;
  assign _0595_ = _0591_ ? (* hdlname = "datapathaftab 1133" *) _0593_ : 1'h0;
  assign _0596_ = _0590_ ? (* hdlname = "datapathaftab 1135" *) 5'h00 : _0594_;
  assign _0597_ = _0590_ ? (* hdlname = "datapathaftab 1137" *) 1'h0 : _0595_;
  assign _0598_ = _0589_ ? (* hdlname = "datapathaftab 1138" *) \datapathaftab.gi2d_instr_curr [19:15] : _0596_;
  assign _0599_ = _0589_ ? (* hdlname = "datapathaftab 1140" *) \controlleraftab.ir [24:20] : 5'h00;
  assign _0600_ = _0589_ ? (* hdlname = "datapathaftab 1142" *) 1'h1 : _0597_;
  assign _0601_ = _0589_ ? (* hdlname = "datapathaftab 1145" *) 1'h1 : 1'h0;
  assign _0602_ = _0587_ ? (* hdlname = "datapathaftab 1146" *) _0581_ : _0598_;
  assign _0603_ = _0587_ ? (* hdlname = "datapathaftab 1147" *) _0588_ : _0599_;
  assign _0604_ = _0587_ ? (* hdlname = "datapathaftab 1148" *) _0582_ : _0600_;
  assign _0605_ = _0587_ ? (* hdlname = "datapathaftab 1149" *) _0582_ : _0601_;
  assign _0606_ = _0578_ ? (* hdlname = "datapathaftab 1150" *) _0583_ : _0602_;
  assign _0607_ = _0578_ ? (* hdlname = "datapathaftab 1152" *) 5'h00 : _0603_;
  assign _0609_ = _0578_ ? (* hdlname = "datapathaftab 1153" *) _0585_ : _0604_;
  assign _0610_ = _0578_ ? (* hdlname = "datapathaftab 1155" *) 1'h0 : _0605_;
  assign _0608_ = _0578_ ? (* hdlname = "datapathaftab 1157" *) _0584_ : 12'h000;
  assign _0611_ = _0578_ ? (* hdlname = "datapathaftab 1159" *) _0586_ : 1'h0;
  assign \datapathaftab.bypass_first_operand  = _0577_ ? (* hdlname = "datapathaftab 1160" *) \datapathaftab.gi2d_instr_curr [19:15] : _0606_;
  assign \datapathaftab.bypass_second_operand  = _0577_ ? (* hdlname = "datapathaftab 1162" *) \controlleraftab.ir [24:20] : _0607_;
  assign \datapathaftab.bypass_first_operand_en  = _0577_ ? (* hdlname = "datapathaftab 1165" *) 1'h1 : _0609_;
  assign \datapathaftab.bypass_second_operand_en  = _0577_ ? (* hdlname = "datapathaftab 1168" *) 1'h1 : _0610_;
  assign \datapathaftab.bypass_csr_second_operand  = _0577_ ? (* hdlname = "datapathaftab 1171" *) 12'h000 : _0608_;
  assign \datapathaftab.bypass_csr_second_operand_en  = _0577_ ? (* hdlname = "datapathaftab 1174" *) 1'h0 : _0611_;
  assign _0795_ = ! (* hdlname = "datapathaftab 1177" *) \datapathaftab.e2m_inst_type_curr ;
  assign _0796_ = \datapathaftab.e2m_inst_type_curr  == (* hdlname = "datapathaftab 1180" *) 3'h1;
  assign _0797_ = \datapathaftab.e2m_instr_curr [6:0] == (* hdlname = "datapathaftab 1183" *) 7'h73;
  assign _0798_ = | (* hdlname = "datapathaftab 1186" *) \datapathaftab.e2m_instr_curr [14:12];
  assign _0799_ = _0798_ & (* hdlname = "datapathaftab 1187" *) _0797_;
  assign _0800_ = ! (* hdlname = "datapathaftab 1190" *) \datapathaftab.e2m_instr_curr [27:20];
  assign _0801_ = \datapathaftab.e2m_instr_curr [27:20] == (* hdlname = "datapathaftab 1193" *) 8'h04;
  assign _0802_ = _0800_ | (* hdlname = "datapathaftab 1194" *) _0801_;
  assign _0803_ = \datapathaftab.e2m_instr_curr [27:20] == (* hdlname = "datapathaftab 1197" *) 8'h44;
  assign _0804_ = _0802_ | (* hdlname = "datapathaftab 1198" *) _0803_;
  assign _0805_ = _0804_ ? (* hdlname = "datapathaftab 1201" *) 1'h1 : 1'h0;
  assign _0806_ = _0799_ ? (* hdlname = "datapathaftab 1204" *) \datapathaftab.e2m_instr_curr [31:20] : 12'h000;
  assign _0807_ = _0799_ ? (* hdlname = "datapathaftab 1207" *) 1'h1 : 1'h0;
  assign _0808_ = _0799_ ? (* hdlname = "datapathaftab 1209" *) _0805_ : 1'h0;
  assign _0809_ = \datapathaftab.e2m_inst_type_curr  == (* hdlname = "datapathaftab 1212" *) 3'h2;
  assign _0810_ = \datapathaftab.e2m_inst_type_curr  == (* hdlname = "datapathaftab 1214" *) 3'h4;
  assign _0811_ = \datapathaftab.e2m_inst_type_curr  == (* hdlname = "datapathaftab 1216" *) 3'h3;
  assign _0812_ = \datapathaftab.e2m_inst_type_curr  == (* hdlname = "datapathaftab 1219" *) 3'h5;
  assign _0813_ = _0812_ ? (* hdlname = "datapathaftab 1222" *) \datapathaftab.e2m_instr_curr [11:7] : 5'h00;
  assign _0814_ = _0812_ ? (* hdlname = "datapathaftab 1225" *) 1'h1 : 1'h0;
  assign _0815_ = _0811_ ? (* hdlname = "datapathaftab 1226" *) \datapathaftab.e2m_instr_curr [11:7] : _0813_;
  assign _0816_ = _0811_ ? (* hdlname = "datapathaftab 1228" *) 1'h1 : _0814_;
  assign _0817_ = _0810_ ? (* hdlname = "datapathaftab 1230" *) 5'h00 : _0815_;
  assign _0818_ = _0810_ ? (* hdlname = "datapathaftab 1232" *) 1'h0 : _0816_;
  assign _0819_ = _0809_ ? (* hdlname = "datapathaftab 1234" *) 5'h00 : _0817_;
  assign _0820_ = _0809_ ? (* hdlname = "datapathaftab 1236" *) 1'h0 : _0818_;
  assign _0821_ = _0796_ ? (* hdlname = "datapathaftab 1237" *) \datapathaftab.e2m_instr_curr [11:7] : _0819_;
  assign _0822_ = _0796_ ? (* hdlname = "datapathaftab 1239" *) 1'h1 : _0820_;
  assign _0823_ = _0796_ ? (* hdlname = "datapathaftab 1241" *) _0806_ : 12'h000;
  assign _0824_ = _0796_ ? (* hdlname = "datapathaftab 1243" *) _0807_ : 1'h0;
  assign _0825_ = _0796_ ? (* hdlname = "datapathaftab 1245" *) _0808_ : 1'h0;
  assign \datapathaftab.hazm_result  = _0795_ ? (* hdlname = "datapathaftab 1246" *) \datapathaftab.e2m_instr_curr [11:7] : _0821_;
  assign \datapathaftab.hazm_result_en  = _0795_ ? (* hdlname = "datapathaftab 1249" *) 1'h1 : _0822_;
  assign \datapathaftab.hazm_csr_result  = _0795_ ? (* hdlname = "datapathaftab 1252" *) 12'h000 : _0823_;
  assign \datapathaftab.hazm_csr_result_en  = _0795_ ? (* hdlname = "datapathaftab 1255" *) 1'h0 : _0824_;
  assign \datapathaftab.hazm_csr_mirror  = _0795_ ? (* hdlname = "datapathaftab 1258" *) 1'h0 : _0825_;
  assign _0643_ = ! (* hdlname = "datapathaftab 1262" *) \datapathaftab.gi2d_instr_curr [19:15];
  assign \datapathaftab.hazm_zero_first_operand  = _0643_ ? (* hdlname = "datapathaftab 1265" *) 1'h1 : 1'h0;
  assign _0644_ = ! (* hdlname = "datapathaftab 1269" *) \controlleraftab.ir [24:20];
  assign \datapathaftab.hazm_zero_second_operand  = _0644_ ? (* hdlname = "datapathaftab 1272" *) 1'h1 : 1'h0;
  assign _0826_ = \datapathaftab.bypass_first_operand  == (* hdlname = "datapathaftab 1277" *) \datapathaftab.hazm_result ;
  assign _0827_ = _0826_ & (* hdlname = "datapathaftab 1278" *) _0774_;
  assign _0828_ = \datapathaftab.bypass_first_operand_en  & (* hdlname = "datapathaftab 1279" *) _0827_;
  assign _0829_ = \datapathaftab.hazm_result_en  & (* hdlname = "datapathaftab 1280" *) _0828_;
  assign _0648_ = ~ (* hdlname = "datapathaftab 1281" *) \datapathaftab.hazm_zero_first_operand ;
  assign _0830_ = _0648_ & (* hdlname = "datapathaftab 1282" *) _0829_;
  assign _0774_ = ~ (* hdlname = "datapathaftab 1283" *) \datapathaftab.d2e_ex_flag_next ;
  assign _0831_ = \datapathaftab.bypass_second_operand  == (* hdlname = "datapathaftab 1284" *) \datapathaftab.hazm_result ;
  assign _0832_ = \datapathaftab.bypass_second_operand_en  & (* hdlname = "datapathaftab 1285" *) _0831_;
  assign _0833_ = \datapathaftab.hazm_result_en  & (* hdlname = "datapathaftab 1286" *) _0832_;
  assign _0653_ = ~ (* hdlname = "datapathaftab 1287" *) \datapathaftab.hazm_zero_second_operand ;
  assign _0834_ = _0653_ & (* hdlname = "datapathaftab 1288" *) _0833_;
  assign _0835_ = ~ (* hdlname = "datapathaftab 1289" *) \datapathaftab.hazm_csr_mirror ;
  assign _0836_ = \datapathaftab.bypass_csr_second_operand  == (* hdlname = "datapathaftab 1290" *) \datapathaftab.hazm_csr_result ;
  assign _0837_ = _0836_ & (* hdlname = "datapathaftab 1291" *) _0835_;
  assign _0838_ = \datapathaftab.bypass_csr_second_operand [7:0] == (* hdlname = "datapathaftab 1294" *) \datapathaftab.hazm_csr_result [7:0];
  assign _0839_ = _0838_ & (* hdlname = "datapathaftab 1295" *) \datapathaftab.hazm_csr_mirror ;
  assign _0840_ = _0837_ | (* hdlname = "datapathaftab 1296" *) _0839_;
  assign _0841_ = \datapathaftab.bypass_csr_second_operand_en  & (* hdlname = "datapathaftab 1297" *) _0840_;
  assign _0842_ = \datapathaftab.hazm_csr_result_en  & (* hdlname = "datapathaftab 1298" *) _0841_;
  assign _0843_ = _0834_ | (* hdlname = "datapathaftab 1299" *) _0842_;
  assign _0844_ = _0843_ & (* hdlname = "datapathaftab 1300" *) _0774_;
  assign _0845_ = _0844_ ? (* hdlname = "datapathaftab 1303" *) 1'h1 : 1'h0;
  assign \controlleraftab.hazm  = _0830_ ? (* hdlname = "datapathaftab 1305" *) 1'h1 : _0845_;
  assign \datapathaftab.e2m_hazard_flag_next  = \controlleraftab.hazex  ? (* hdlname = "datapathaftab 1309" *) 1'h1 : 1'h0;
  assign _0846_ = \controlleraftab.hazm  | (* hdlname = "datapathaftab 1312" *) \datapathaftab.e2m_hazard_flag_curr ;
  assign \datapathaftab.m2wb_hazard_flag_next  = _0846_ ? (* hdlname = "datapathaftab 1313" *) 1'h1 : 1'h0;
  assign _0847_ = \datapathaftab.gi2d_en_def  ? (* hdlname = "datapathaftab 1320" *) \datapathaftab.gi2d_ex_flag_next  : \datapathaftab.gi2d_ex_flag_curr ;
  assign _0848_ = \datapathaftab.gi2d_en_def  ? (* hdlname = "datapathaftab 1321" *) { \datapathaftab.daru1.datapath.dataout [31:16], \datapathaftab.daru1.datapath.reg0.outreg  } : { \controlleraftab.ir [31:20], \datapathaftab.gi2d_instr_curr [19:15], \controlleraftab.ir [14:12], \datapathaftab.gi2d_instr_curr [11:7], \controlleraftab.ir [6:0] };
  assign _0849_ = \datapathaftab.gi2d_en_def  ? (* hdlname = "datapathaftab 1323" *) 1'h1 : \controlleraftab.dec_valid ;
  assign _0850_ = \datapathaftab.gi2d_en_def  ? (* hdlname = "datapathaftab 1324" *) \datapathaftab.daru1.datapath.addrreg.outreg  : \datapathaftab.gi2d_pc_curr ;
  assign _0851_ = \datapathaftab.gi2d_en_def  ? (* hdlname = "datapathaftab 1325" *) \datapathaftab.f2gi_pc_plus4_curr  : \datapathaftab.gi2d_pc_plus4_curr ;
  assign _0852_ = \datapathaftab.gi2d_en_def  ? (* hdlname = "datapathaftab 1326" *) \datapathaftab.gi2d_ex_flag_next  : \datapathaftab.gi2d_instr_misaligned_flag_curr ;
  assign _0853_ = \datapathaftab.d2e_en_def  ? (* hdlname = "datapathaftab 1339" *) \datapathaftab.d2e_ex_flag_next  : \datapathaftab.d2e_ex_flag_curr ;
  assign _0854_ = \datapathaftab.d2e_en_def  ? (* hdlname = "datapathaftab 1340" *) \datapathaftab.d2e_alu_op1_next  : \datapathaftab.aau.ain ;
  assign _0855_ = \datapathaftab.d2e_en_def  ? (* hdlname = "datapathaftab 1341" *) \datapathaftab.d2e_alu_op2_next  : \datapathaftab.aau.bin ;
  assign _0856_ = \datapathaftab.d2e_en_def  ? (* hdlname = "datapathaftab 1342" *) \datapathaftab.d2e_op2_next  : \datapathaftab.d2e_op2_curr ;
  assign _0857_ = \datapathaftab.d2e_en_def  ? (* hdlname = "datapathaftab 1343" *) \datapathaftab.d2e_op1_next  : \datapathaftab.comparator.ain ;
  assign _0858_ = \datapathaftab.d2e_en_def  ? (* hdlname = "datapathaftab 1344" *) \datapathaftab.d2e_outcsr_next  : \datapathaftab.d2e_outcsr_curr ;
  assign _0859_ = \datapathaftab.d2e_en_def  ? (* hdlname = "datapathaftab 1345" *) { \controlleraftab.ir [31:20], \datapathaftab.gi2d_instr_curr [19:15], \controlleraftab.ir [14:12], \datapathaftab.gi2d_instr_curr [11:7], \controlleraftab.ir [6:0] } : \datapathaftab.d2e_instr_curr ;
  assign _0860_ = \datapathaftab.d2e_en_def  ? (* hdlname = "datapathaftab 1346" *) \controlleraftab.inst_type  : \datapathaftab.d2e_inst_type_curr ;
  assign _0861_ = \datapathaftab.d2e_en_def  ? (* hdlname = "datapathaftab 1347" *) \datapathaftab.gi2d_pc_curr  : \datapathaftab.d2e_pc_curr ;
  assign _0862_ = \datapathaftab.d2e_en_def  ? (* hdlname = "datapathaftab 1348" *) \datapathaftab.gi2d_pc_plus4_curr  : \datapathaftab.d2e_pc_plus4_curr ;
  assign _0863_ = \datapathaftab.d2e_en_def  ? (* hdlname = "datapathaftab 1349" *) \controlleraftab.dec_valid  : \controlleraftab.ex_valid ;
  assign _0864_ = \datapathaftab.d2e_en_def  ? (* hdlname = "datapathaftab 1350" *) \datapathaftab.gi2d_instr_misaligned_flag_curr  : \datapathaftab.d2e_instr_misaligned_flag_curr ;
  assign _0865_ = \datapathaftab.d2e_en_def  ? (* hdlname = "datapathaftab 1351" *) \controlleraftab.illegalinstrflag  : \datapathaftab.d2e_illegal_instruction_flag_curr ;
  assign _0866_ = \datapathaftab.d2e_en_def  ? (* hdlname = "datapathaftab 1352" *) \controlleraftab.ecallflag  : \datapathaftab.d2e_ecall_flag_curr ;
  assign _0867_ = \datapathaftab.d2e_en_def  ? (* hdlname = "datapathaftab 1353" *) { 4'hz, \controlleraftab.iscsrinstruction , \controlleraftab.cmp_selop2 , \controlleraftab.cmp_selaluop2 , \controlleraftab.selmem , \controlleraftab.selpc4 , \controlleraftab.selalu , \controlleraftab.ret_from_epc , \controlleraftab.inst_type , \controlleraftab.forced_rb_read , \controlleraftab.iscsrinstruction , \controlleraftab.checkmisaligneddawu , 1'h0, \controlleraftab.selcsr , \controlleraftab.nbytes , \controlleraftab.selaah , \controlleraftab.selaal , \controlleraftab.unsignedunsigned , \controlleraftab.signedunsigned , \controlleraftab.signedsigned , \controlleraftab.startdivideaau , \controlleraftab.startmultiplyaau , \controlleraftab.selmem , \controlleraftab.checkmisaligneddawu , \controlleraftab.sellogic , \controlleraftab.muxcode , \controlleraftab.selauipc , \controlleraftab.pass , \controlleraftab.addsubbar , \controlleraftab.selshift , \controlleraftab.load , \controlleraftab.ldhalfsigned , \controlleraftab.ldbytesigned , \controlleraftab.selimm , \controlleraftab.selp2 , \controlleraftab.selp1 , \controlleraftab.selaau , \controlleraftab.selasu , \controlleraftab.selllu , \controlleraftab.selbsu , \controlleraftab.seljl , \controlleraftab.selpc , \controlleraftab.comparedsignedunsignedbar , \controlleraftab.cmp_selaluop2 , \controlleraftab.writeregfile  } : \datapathaftab.d2e_ctrl_word_curr ;
  assign _0868_ = \datapathaftab.d2e_en_def  ? (* hdlname = "datapathaftab 1354" *) \controlleraftab.validaccesscsr  : \datapathaftab.d2e_validaccesscsr_curr ;
  assign _0869_ = \controlleraftab.e2m_en_temp  ? (* hdlname = "datapathaftab 1387" *) \datapathaftab.e2m_alu_res_next  : \datapathaftab.daru2.datapath.addrreg.inreg ;
  assign _0870_ = \controlleraftab.e2m_en_temp  ? (* hdlname = "datapathaftab 1388" *) \datapathaftab.comparator.lt  : \datapathaftab.e2m_lt_curr ;
  assign _0871_ = \controlleraftab.e2m_en_temp  ? (* hdlname = "datapathaftab 1389" *) \datapathaftab.comparator.eq  : \datapathaftab.e2m_eq_curr ;
  assign _0872_ = \controlleraftab.e2m_en_temp  ? (* hdlname = "datapathaftab 1390" *) \datapathaftab.comparator.gt  : \datapathaftab.e2m_gt_curr ;
  assign _0873_ = \controlleraftab.e2m_en_temp  ? (* hdlname = "datapathaftab 1391" *) \datapathaftab.d2e_op2_curr  : \datapathaftab.e2m_op2_curr ;
  assign _0874_ = \controlleraftab.e2m_en_temp  ? (* hdlname = "datapathaftab 1392" *) \datapathaftab.e2m_ex_flag_next  : \datapathaftab.e2m_ex_flag_curr ;
  assign _0875_ = \controlleraftab.e2m_en_temp  ? (* hdlname = "datapathaftab 1393" *) \datapathaftab.d2e_pc_plus4_curr  : \datapathaftab.e2m_pc_plus4_curr ;
  assign _0876_ = \controlleraftab.e2m_en_temp  ? (* hdlname = "datapathaftab 1394" *) \datapathaftab.d2e_instr_curr  : \datapathaftab.e2m_instr_curr ;
  assign _0877_ = \controlleraftab.e2m_en_temp  ? (* hdlname = "datapathaftab 1395" *) \datapathaftab.d2e_inst_type_curr  : \datapathaftab.e2m_inst_type_curr ;
  assign _0878_ = \controlleraftab.e2m_en_temp  ? (* hdlname = "datapathaftab 1396" *) \datapathaftab.e2m_hazard_flag_next  : \datapathaftab.e2m_hazard_flag_curr ;
  assign _0879_ = \controlleraftab.e2m_en_temp  ? (* hdlname = "datapathaftab 1397" *) \controlleraftab.ex_valid  : \controlleraftab.m_valid ;
  assign _0880_ = \controlleraftab.e2m_en_temp  ? (* hdlname = "datapathaftab 1398" *) \datapathaftab.d2e_instr_misaligned_flag_curr  : \datapathaftab.e2m_instr_misaligned_flag_curr ;
  assign _0881_ = \controlleraftab.e2m_en_temp  ? (* hdlname = "datapathaftab 1399" *) \datapathaftab.d2e_outcsr_curr  : \datapathaftab.e2m_outcsr_curr ;
  assign _0882_ = \controlleraftab.e2m_en_temp  ? (* hdlname = "datapathaftab 1400" *) \datapathaftab.comparator.ain  : \datapathaftab.e2m_op1_curr ;
  assign _0883_ = \controlleraftab.e2m_en_temp  ? (* hdlname = "datapathaftab 1401" *) \datapathaftab.d2e_pc_curr  : \datapathaftab.e2m_pc_curr ;
  assign _0884_ = \controlleraftab.e2m_en_temp  ? (* hdlname = "datapathaftab 1402" *) \datapathaftab.d2e_illegal_instruction_flag_curr  : \datapathaftab.e2m_illegal_instruction_flag_curr ;
  assign _0885_ = \controlleraftab.e2m_en_temp  ? (* hdlname = "datapathaftab 1403" *) \datapathaftab.d2e_ecall_flag_curr  : \datapathaftab.e2m_ecall_flag_curr ;
  assign _0886_ = \controlleraftab.e2m_en_temp  ? (* hdlname = "datapathaftab 1404" *) \datapathaftab.d2e_ctrl_word_curr  : \datapathaftab.e2m_ctrl_word_curr ;
  assign _0887_ = \controlleraftab.e2m_en_temp  ? (* hdlname = "datapathaftab 1405" *) \datapathaftab.aau.division.dividedbyzeroflag  : \datapathaftab.e2m_divided_by_zero_flag_curr ;
  assign _0888_ = \controlleraftab.e2m_en_temp  ? (* hdlname = "datapathaftab 1406" *) \datapathaftab.d2e_validaccesscsr_curr  : \datapathaftab.e2m_validaccesscsr_curr ;
  assign _0889_ = \controlleraftab.m2wb_en_temp  ? (* hdlname = "datapathaftab 1447" *) \datapathaftab.e2m_ex_flag_curr  : \datapathaftab.m2wb_ex_flag_curr ;
  assign _0890_ = \controlleraftab.m2wb_en_temp  ? (* hdlname = "datapathaftab 1448" *) \datapathaftab.e2m_lt_curr  : \datapathaftab.m2wb_lt_curr ;
  assign _0891_ = \controlleraftab.m2wb_en_temp  ? (* hdlname = "datapathaftab 1449" *) \datapathaftab.e2m_instr_curr  : \datapathaftab.m2wb_instr_curr ;
  assign _0892_ = \controlleraftab.m2wb_en_temp  ? (* hdlname = "datapathaftab 1450" *) \datapathaftab.m2wb_mem_res_next  : \datapathaftab.m2wb_mem_res_curr ;
  assign _0893_ = \controlleraftab.m2wb_en_temp  ? (* hdlname = "datapathaftab 1451" *) \datapathaftab.daru2.datapath.addrreg.inreg  : \datapathaftab.m2wb_alu_res_curr ;
  assign _0894_ = \controlleraftab.m2wb_en_temp  ? (* hdlname = "datapathaftab 1452" *) \datapathaftab.e2m_pc_plus4_curr  : \datapathaftab.m2wb_pc_plus4_curr ;
  assign _0895_ = \controlleraftab.m2wb_en_temp  ? (* hdlname = "datapathaftab 1453" *) \datapathaftab.m2wb_hazard_flag_next  : \datapathaftab.m2wb_hazard_flag_curr ;
  assign _0896_ = \controlleraftab.m2wb_en_temp  ? (* hdlname = "datapathaftab 1454" *) \datapathaftab.e2m_op1_curr  : \datapathaftab.csrisl.p1 ;
  assign _0897_ = \controlleraftab.m2wb_en_temp  ? (* hdlname = "datapathaftab 1455" *) \datapathaftab.e2m_outcsr_curr  : \datapathaftab.m2wb_outcsr_curr ;
  assign _0898_ = \controlleraftab.m2wb_en_temp  ? (* hdlname = "datapathaftab 1456" *) \datapathaftab.e2m_ecall_flag_curr  : \datapathaftab.m2wb_ecall_flag_curr ;
  assign _0899_ = \controlleraftab.m2wb_en_temp  ? (* hdlname = "datapathaftab 1457" *) \datapathaftab.e2m_divided_by_zero_flag_curr  : \datapathaftab.m2wb_divided_by_zero_flag_curr ;
  assign _0900_ = \controlleraftab.m2wb_en_temp  ? (* hdlname = "datapathaftab 1458" *) \datapathaftab.e2m_illegal_instruction_flag_curr  : \datapathaftab.m2wb_illegal_instruction_flag_curr ;
  assign _0901_ = \controlleraftab.m2wb_en_temp  ? (* hdlname = "datapathaftab 1459" *) \datapathaftab.e2m_instr_misaligned_flag_curr  : \datapathaftab.m2wb_instr_misaligned_flag_curr ;
  assign _0902_ = \controlleraftab.m2wb_en_temp  ? (* hdlname = "datapathaftab 1460" *) \controlleraftab.m_valid  : \controlleraftab.wb_valid ;
  assign _0903_ = \controlleraftab.m2wb_en_temp  ? (* hdlname = "datapathaftab 1461" *) \datapathaftab.e2m_pc_curr  : \datapathaftab.m2wb_pc_curr ;
  assign _0904_ = \controlleraftab.m2wb_en_temp  ? (* hdlname = "datapathaftab 1462" *) \datapathaftab.e2m_inst_type_curr  : \datapathaftab.m2wb_inst_type_curr ;
  assign _0905_ = \controlleraftab.m2wb_en_temp  ? (* hdlname = "datapathaftab 1463" *) \datapathaftab.e2m_ctrl_word_curr  : \datapathaftab.m2wb_ctrl_word_curr ;
  assign _0906_ = \controlleraftab.m2wb_en_temp  ? (* hdlname = "datapathaftab 1466" *) \datapathaftab.e2m_validaccesscsr_curr  : \controlleraftab.wb_validaccesscsr ;
  assign _0907_ = \datapathaftab.gi2d_ex_flag_next  ? (* hdlname = "datapathaftab 1701" *) 1'h0 : \datapathaftab.daru1_en ;
  assign _0908_ = \datapathaftab.gi2d_ex_flag_next  ? (* hdlname = "datapathaftab 1703" *) 2'h1 : \datapathaftab.eh_state_curr ;
  assign _0911_ = _0910_ ? (* hdlname = "datapathaftab 1707" *) 1'h0 : _0907_;
  assign _0913_ = _0910_ ? (* hdlname = "datapathaftab 1711" *) 2'h2 : _0908_;
  assign _0914_ = \datapathaftab.aau.division.dividedbyzeroflag  ? (* hdlname = "datapathaftab 1713" *) 1'h0 : _0911_;
  assign _0917_ = \datapathaftab.aau.division.dividedbyzeroflag  ? (* hdlname = "datapathaftab 1719" *) 2'h3 : _0913_;
  assign _0918_ = ! (* hdlname = "datapathaftab 1721" *) \datapathaftab.eh_state_curr ;
  assign _0909_ = \controlleraftab.illegalinstrflag  | (* hdlname = "datapathaftab 1722" *) \controlleraftab.ecallflag ;
  assign _0910_ = _0909_ | (* hdlname = "datapathaftab 1723" *) \controlleraftab.ret_from_epc ;
  assign _0912_ = _0910_ ? (* hdlname = "datapathaftab 1725" *) 1'h0 : \controlleraftab.gi2d_en ;
  assign _0919_ = _0910_ ? (* hdlname = "datapathaftab 1727" *) 2'h2 : \datapathaftab.eh_state_curr ;
  assign _0915_ = \datapathaftab.aau.division.dividedbyzeroflag  ? (* hdlname = "datapathaftab 1729" *) 1'h0 : _0912_;
  assign _0920_ = \datapathaftab.aau.division.dividedbyzeroflag  ? (* hdlname = "datapathaftab 1733" *) 2'h3 : _0919_;
  assign _0921_ = \datapathaftab.eh_state_curr  == (* hdlname = "datapathaftab 1735" *) 2'h1;
  assign _0916_ = \datapathaftab.aau.division.dividedbyzeroflag  ? (* hdlname = "datapathaftab 1737" *) 1'h0 : \controlleraftab.d2e_en_temp ;
  assign _0922_ = \datapathaftab.aau.division.dividedbyzeroflag  ? (* hdlname = "datapathaftab 1739" *) 2'h3 : \datapathaftab.eh_state_curr ;
  assign _0923_ = \datapathaftab.eh_state_curr  == (* hdlname = "datapathaftab 1741" *) 2'h2;
  assign _0924_ = \datapathaftab.eh_state_curr  == (* hdlname = "datapathaftab 1743" *) 2'h3;
  function [0:0] \datapathaftab.1749 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "datapathaftab 1749" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \datapathaftab.1749  = b[0:0];
      2'b1?:
        \datapathaftab.1749  = b[1:1];
      default:
        \datapathaftab.1749  = a;
    endcase
  endfunction
  assign \datapathaftab.daru1.controller.startdaru  = \datapathaftab.1749 (1'hx, { 1'h0, _0914_ }, { _0940_, _0918_ });
  function [0:0] \datapathaftab.1753 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "datapathaftab 1753" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \datapathaftab.1753  = b[0:0];
      2'b1?:
        \datapathaftab.1753  = b[1:1];
      default:
        \datapathaftab.1753  = a;
    endcase
  endfunction
  assign \datapathaftab.gi2d_en_def  = \datapathaftab.1753 (1'hx, { 1'h0, _0915_ }, { _0939_, _0941_ });
  function [0:0] \datapathaftab.1756 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "datapathaftab 1756" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \datapathaftab.1756  = b[0:0];
      2'b1?:
        \datapathaftab.1756  = b[1:1];
      default:
        \datapathaftab.1756  = a;
    endcase
  endfunction
  assign \datapathaftab.d2e_en_def  = \datapathaftab.1756 (1'hx, { 1'h0, _0916_ }, { _0924_, _0942_ });
  function [1:0] \datapathaftab.1758 ;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    (* hdlname = "datapathaftab 1758" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        \datapathaftab.1758  = b[1:0];
      4'b??1?:
        \datapathaftab.1758  = b[3:2];
      4'b?1??:
        \datapathaftab.1758  = b[5:4];
      4'b1???:
        \datapathaftab.1758  = b[7:6];
      default:
        \datapathaftab.1758  = a;
    endcase
  endfunction
  assign \datapathaftab.eh_state_next  = \datapathaftab.1758 (2'hx, { \datapathaftab.eh_state_curr , _0922_, _0920_, _0917_ }, { _0924_, _0923_, _0921_, _0918_ });
  assign _0925_ = ~ (* hdlname = "datapathaftab 1769" *) \controlleraftab.mirror ;
  assign _0926_ = ~ (* hdlname = "datapathaftab 1770" *) \controlleraftab.writeregbank ;
  assign _0927_ = _0925_ | (* hdlname = "datapathaftab 1771" *) _0926_;
  assign _0928_ = \controlleraftab.wb_valid  & (* hdlname = "datapathaftab 1772" *) _0927_;
  assign _0929_ = ~ (* hdlname = "datapathaftab 1773" *) \controlleraftab.wb_valid ;
  assign _0930_ = _0928_ | (* hdlname = "datapathaftab 1774" *) _0929_;
  assign \controlleraftab.instructiondone  = _0930_ ? (* hdlname = "datapathaftab 1775" *) 1'h1 : \controlleraftab.instructiondonecsr ;
  assign _0931_ = \datapathaftab.daru1_en  ? (* hdlname = "datapathaftab 1931" *) \datapathaftab.i4pc.add [31:0] : \datapathaftab.f2gi_pc_plus4_curr ;
  (* hdlname = "datapathaftab 1932" *)
  always @(posedge clk)
    if (rst) _0556_ <= 32'd0;
    else _0556_ <= _0931_;
  assign _0559_ = \datapathaftab.daru1.controller.startdaru  & (* hdlname = "datapathaftab 211" *) _0558_;
  assign _0560_ = _0559_ | (* hdlname = "datapathaftab 212" *) \controlleraftab.gi2d_rst ;
  assign \datapathaftab.ldpc  = _0560_ | (* hdlname = "datapathaftab 213" *) \controlleraftab.selmepc_csr ;
  assign \datapathaftab.inpc  = \controlleraftab.branch_taken  ? (* hdlname = "datapathaftab 219" *) \datapathaftab.daru2.datapath.addrreg.inreg  : _0561_;
  assign _0561_ = \controlleraftab.selmepc_csr  ? (* hdlname = "datapathaftab 220" *) \datapathaftab.csrisl.outcsr  : _0562_;
  assign _0562_ = \controlleraftab.selinterruptaddressdirect  ? (* hdlname = "datapathaftab 221" *) \datapathaftab.d2e_outcsr_next  : _0563_;
  assign _0563_ = \controlleraftab.selinterruptaddressvectored  ? (* hdlname = "datapathaftab 222" *) { 2'h0, \datapathaftab.interruptstartaddressgenerator.interruptstartaddressvectored [29:0] } : \datapathaftab.i4pc.add [31:0];
  assign _0565_ = ~ (* hdlname = "datapathaftab 235" *) \datapathaftab.daru1.controller.enableaddr ;
  assign _0566_ = ~ (* hdlname = "datapathaftab 236" *) \controlleraftab.completeddaru1 ;
  assign _0567_ = _0565_ & (* hdlname = "datapathaftab 237" *) _0566_;
  assign \datapathaftab.daru1_en  = _0564_ | (* hdlname = "datapathaftab 238" *) _0567_;
  assign _0558_ = ~ (* hdlname = "datapathaftab 241" *) \datapathaftab.gi2d_rst_def ;
  assign _0564_ = _0558_ & (* hdlname = "datapathaftab 242" *) \datapathaftab.gi2d_en_def ;
  assign _0568_ = _0564_ | (* hdlname = "datapathaftab 243" *) \controlleraftab.gi2d_rst ;
  assign _0569_ = \datapathaftab.completeddaru1  ? (* hdlname = "datapathaftab 245" *) 1'h1 : \datapathaftab.completeddaru1_stored ;
  assign \controlleraftab.completeddaru1  = \datapathaftab.completeddaru1  | (* hdlname = "datapathaftab 252" *) \datapathaftab.completeddaru1_stored ;
  assign _0570_ = ~ (* hdlname = "datapathaftab 253" *) \datapathaftab.gi2d_en_def ;
  assign _0571_ = _0570_ & (* hdlname = "datapathaftab 254" *) \datapathaftab.d2e_en_def ;
  assign \datapathaftab.gi2d_rst_def  = \controlleraftab.gi2d_rst  | (* hdlname = "datapathaftab 255" *) _0571_;
  assign _0572_ = ~ (* hdlname = "datapathaftab 276" *) \datapathaftab.m2wb_ex_flag_curr ;
  assign \datapathaftab.registerfile.writeregfile  = \datapathaftab.m2wb_ctrl_word_curr [0] & (* hdlname = "datapathaftab 277" *) _0572_;
  assign \datapathaftab.registerfile.setone  = \datapathaftab.m2wb_lt_curr  & (* hdlname = "datapathaftab 278" *) \datapathaftab.m2wb_ctrl_word_curr [1];
  assign _0573_ = ~ (* hdlname = "datapathaftab 279" *) \datapathaftab.m2wb_lt_curr ;
  assign \datapathaftab.registerfile.setzero  = _0573_ & (* hdlname = "datapathaftab 280" *) \datapathaftab.m2wb_ctrl_word_curr [1];
  assign _0574_ = \datapathaftab.curprv  >= (* hdlname = "datapathaftab 299" *) \datapathaftab.addressregbank [9:8];
  assign _0575_ = \datapathaftab.csr_address_ctrl.validaddresscsr  & (* hdlname = "datapathaftab 300" *) _0574_;
  assign \controlleraftab.validaccesscsr  = _0575_ ? (* hdlname = "datapathaftab 301" *) 1'h1 : 1'h0;
  assign _0576_ = \datapathaftab.mux8.w [11:10] == (* hdlname = "datapathaftab 306" *) 2'h3;
  assign \controlleraftab.readonlycsr  = _0576_ ? (* hdlname = "datapathaftab 307" *) 1'h1 : 1'h0;
  assign \datapathaftab.addressregbank  = \controlleraftab.forced_rb_read  ? (* hdlname = "datapathaftab 309" *) \datapathaftab.mux8.w  : \controlleraftab.ir [31:20];
  assign _0612_ = ! (* hdlname = "datapathaftab 425" *) \datapathaftab.m2wb_inst_type_curr ;
  assign _0613_ = \datapathaftab.m2wb_inst_type_curr  == (* hdlname = "datapathaftab 428" *) 3'h1;
  assign _0614_ = \datapathaftab.m2wb_instr_curr [6:0] == (* hdlname = "datapathaftab 431" *) 7'h73;
  assign _0615_ = | (* hdlname = "datapathaftab 434" *) \datapathaftab.m2wb_instr_curr [14:12];
  assign _0616_ = _0615_ & (* hdlname = "datapathaftab 435" *) _0614_;
  assign _0617_ = ! (* hdlname = "datapathaftab 438" *) \datapathaftab.m2wb_instr_curr [27:20];
  assign _0618_ = \datapathaftab.m2wb_instr_curr [27:20] == (* hdlname = "datapathaftab 441" *) 8'h04;
  assign _0619_ = _0617_ | (* hdlname = "datapathaftab 442" *) _0618_;
  assign _0620_ = \datapathaftab.m2wb_instr_curr [27:20] == (* hdlname = "datapathaftab 445" *) 8'h44;
  assign _0621_ = _0619_ | (* hdlname = "datapathaftab 446" *) _0620_;
  assign _0622_ = _0621_ ? (* hdlname = "datapathaftab 449" *) 1'h1 : 1'h0;
  assign _0623_ = _0616_ ? (* hdlname = "datapathaftab 452" *) \datapathaftab.m2wb_instr_curr [31:20] : 12'h000;
  assign _0624_ = _0616_ ? (* hdlname = "datapathaftab 455" *) 1'h1 : 1'h0;
  assign _0625_ = _0616_ ? (* hdlname = "datapathaftab 457" *) _0622_ : 1'h0;
  assign _0626_ = \datapathaftab.m2wb_inst_type_curr  == (* hdlname = "datapathaftab 460" *) 3'h2;
  assign _0627_ = \datapathaftab.m2wb_inst_type_curr  == (* hdlname = "datapathaftab 462" *) 3'h4;
  assign _0628_ = \datapathaftab.m2wb_inst_type_curr  == (* hdlname = "datapathaftab 464" *) 3'h3;
  assign _0629_ = \datapathaftab.m2wb_inst_type_curr  == (* hdlname = "datapathaftab 467" *) 3'h5;
  assign _0630_ = _0629_ ? (* hdlname = "datapathaftab 470" *) \datapathaftab.m2wb_instr_curr [11:7] : 5'h00;
  assign _0631_ = _0629_ ? (* hdlname = "datapathaftab 473" *) 1'h1 : 1'h0;
  assign _0632_ = _0628_ ? (* hdlname = "datapathaftab 474" *) \datapathaftab.m2wb_instr_curr [11:7] : _0630_;
  assign _0633_ = _0628_ ? (* hdlname = "datapathaftab 476" *) 1'h1 : _0631_;
  assign _0634_ = _0627_ ? (* hdlname = "datapathaftab 478" *) 5'h00 : _0632_;
  assign _0635_ = _0627_ ? (* hdlname = "datapathaftab 480" *) 1'h0 : _0633_;
  assign _0636_ = _0626_ ? (* hdlname = "datapathaftab 482" *) 5'h00 : _0634_;
  assign _0637_ = _0626_ ? (* hdlname = "datapathaftab 484" *) 1'h0 : _0635_;
  assign _0638_ = _0613_ ? (* hdlname = "datapathaftab 485" *) \datapathaftab.m2wb_instr_curr [11:7] : _0636_;
  assign _0639_ = _0613_ ? (* hdlname = "datapathaftab 487" *) _0623_ : 12'h000;
  assign _0640_ = _0613_ ? (* hdlname = "datapathaftab 489" *) 1'h1 : _0637_;
  assign _0641_ = _0613_ ? (* hdlname = "datapathaftab 491" *) _0624_ : 1'h0;
  assign _0642_ = _0613_ ? (* hdlname = "datapathaftab 493" *) _0625_ : 1'h0;
  assign \datapathaftab.bypass_result  = _0612_ ? (* hdlname = "datapathaftab 494" *) \datapathaftab.m2wb_instr_curr [11:7] : _0638_;
  assign \datapathaftab.bypass_csr_result  = _0612_ ? (* hdlname = "datapathaftab 497" *) 12'h000 : _0639_;
  assign \datapathaftab.bypass_result_en  = _0612_ ? (* hdlname = "datapathaftab 500" *) 1'h1 : _0640_;
  assign \datapathaftab.bypass_csr_result_en  = _0612_ ? (* hdlname = "datapathaftab 503" *) 1'h0 : _0641_;
  assign \datapathaftab.bypass_csr_mirror  = _0612_ ? (* hdlname = "datapathaftab 506" *) 1'h0 : _0642_;
  assign _0645_ = \datapathaftab.bypass_first_operand  == (* hdlname = "datapathaftab 524" *) \datapathaftab.bypass_result ;
  assign _0646_ = \datapathaftab.bypass_first_operand_en  & (* hdlname = "datapathaftab 525" *) _0645_;
  assign _0647_ = \datapathaftab.bypass_result_en  & (* hdlname = "datapathaftab 526" *) _0646_;
  assign _0649_ = _0648_ & (* hdlname = "datapathaftab 528" *) _0647_;
  assign \datapathaftab.bypass_first  = _0649_ ? (* hdlname = "datapathaftab 531" *) 1'h1 : 1'h0;
  assign _0650_ = \datapathaftab.bypass_second_operand  == (* hdlname = "datapathaftab 533" *) \datapathaftab.bypass_result ;
  assign _0651_ = \datapathaftab.bypass_second_operand_en  & (* hdlname = "datapathaftab 534" *) _0650_;
  assign _0652_ = \datapathaftab.bypass_result_en  & (* hdlname = "datapathaftab 535" *) _0651_;
  assign _0654_ = _0653_ & (* hdlname = "datapathaftab 537" *) _0652_;
  assign \datapathaftab.bypass_second  = _0654_ ? (* hdlname = "datapathaftab 540" *) 1'h1 : 1'h0;
  assign _0655_ = ~ (* hdlname = "datapathaftab 542" *) \datapathaftab.bypass_csr_mirror ;
  assign _0656_ = \datapathaftab.bypass_csr_second_operand  == (* hdlname = "datapathaftab 543" *) \datapathaftab.bypass_csr_result ;
  assign _0657_ = _0656_ & (* hdlname = "datapathaftab 544" *) _0655_;
  assign _0658_ = \datapathaftab.bypass_csr_second_operand [7:0] == (* hdlname = "datapathaftab 547" *) \datapathaftab.bypass_csr_result [7:0];
  assign _0659_ = _0658_ & (* hdlname = "datapathaftab 548" *) \datapathaftab.bypass_csr_mirror ;
  assign _0660_ = \datapathaftab.bypass_csr_second_operand [9:8] == (* hdlname = "datapathaftab 551" *) 2'h3;
  assign _0661_ = ! (* hdlname = "datapathaftab 554" *) \datapathaftab.bypass_csr_result [9:8];
  assign _0662_ = _0661_ & (* hdlname = "datapathaftab 555" *) _0660_;
  assign _0663_ = ~ (* hdlname = "datapathaftab 556" *) _0662_;
  assign _0664_ = _0663_ & (* hdlname = "datapathaftab 557" *) _0659_;
  assign _0665_ = _0657_ | (* hdlname = "datapathaftab 558" *) _0664_;
  assign _0666_ = \datapathaftab.bypass_csr_second_operand_en  & (* hdlname = "datapathaftab 559" *) _0665_;
  assign _0667_ = \datapathaftab.bypass_csr_result_en  & (* hdlname = "datapathaftab 560" *) _0666_;
  assign \datapathaftab.bypass_second_csr  = _0667_ ? (* hdlname = "datapathaftab 563" *) 1'h1 : 1'h0;
  assign \datapathaftab.d2e_op1_next  = \datapathaftab.bypass_first  ? (* hdlname = "datapathaftab 567" *) \datapathaftab.registerfile.writedata  : \datapathaftab.p1 ;
  assign \datapathaftab.d2e_op2_next  = \datapathaftab.bypass_second  ? (* hdlname = "datapathaftab 569" *) \datapathaftab.registerfile.writedata  : \datapathaftab.p2 ;
  assign \datapathaftab.d2e_outcsr_next  = \datapathaftab.bypass_second_csr  ? (* hdlname = "datapathaftab 571" *) \datapathaftab.csrisl.incsr  : \datapathaftab.d2e_outcsr_next_pre_bypass ;
  assign _0668_ = \datapathaftab.gi2d_ex_flag_curr  | (* hdlname = "datapathaftab 572" *) \controlleraftab.ecallflag ;
  assign \datapathaftab.d2e_ex_flag_next  = _0668_ | (* hdlname = "datapathaftab 573" *) \controlleraftab.illegalinstrflag ;
  assign _0669_ = ~ (* hdlname = "datapathaftab 574" *) \datapathaftab.d2e_en_def ;
  assign _0670_ = _0669_ & (* hdlname = "datapathaftab 575" *) \controlleraftab.e2m_en_temp ;
  assign \datapathaftab.d2e_rst_def  = \controlleraftab.d2e_rst  | (* hdlname = "datapathaftab 576" *) _0670_;
  assign \datapathaftab.aau.multiplication.controller.startbooth  = \datapathaftab.d2e_ctrl_word_curr [36] & (* hdlname = "datapathaftab 580" *) _0673_;
  assign _0671_ = ~ (* hdlname = "datapathaftab 581" *) \controlleraftab.completedaau ;
  assign _0672_ = ~ (* hdlname = "datapathaftab 582" *) \datapathaftab.completedaau_stored ;
  assign _0673_ = _0671_ & (* hdlname = "datapathaftab 583" *) _0672_;
  assign \datapathaftab.aau.division.startsdiv  = \datapathaftab.d2e_ctrl_word_curr [37] & (* hdlname = "datapathaftab 584" *) _0673_;
  assign _0674_ = ~ (* hdlname = "datapathaftab 589" *) \datapathaftab.aau.division.dividedbyzeroflag ;
  assign _0675_ = \datapathaftab.d2e_ctrl_word_curr [37] & (* hdlname = "datapathaftab 590" *) _0674_;
  assign \controlleraftab.is_aau_used  = \datapathaftab.d2e_ctrl_word_curr [36] | (* hdlname = "datapathaftab 591" *) _0675_;
  assign _0678_ = \controlleraftab.d2e_rst  | (* hdlname = "datapathaftab 596" *) _0677_;
  assign _0679_ = \controlleraftab.completedaau  ? (* hdlname = "datapathaftab 598" *) 1'h1 : \datapathaftab.completedaau_stored ;
  assign \datapathaftab.aauresult  = \datapathaftab.d2e_ctrl_word_curr [42] ? (* hdlname = "datapathaftab 605" *) \datapathaftab.aau.resaau1  : _0680_;
  assign _0680_ = \datapathaftab.d2e_ctrl_word_curr [41] ? (* hdlname = "datapathaftab 606" *) \datapathaftab.aau.resaau2  : 32'd0;
  assign \datapathaftab.e2m_alu_res_next  = \datapathaftab.d2e_ctrl_word_curr [5] ? (* hdlname = "datapathaftab 616" *) \datapathaftab.bsu.shout  : _0681_;
  assign _0681_ = \datapathaftab.d2e_ctrl_word_curr [6] ? (* hdlname = "datapathaftab 617" *) \datapathaftab.llu.result  : _0682_;
  assign _0682_ = \datapathaftab.d2e_ctrl_word_curr [7] ? (* hdlname = "datapathaftab 618" *) \datapathaftab.addsub.outres  : _0683_;
  assign _0683_ = \datapathaftab.d2e_ctrl_word_curr [8] ? (* hdlname = "datapathaftab 619" *) \datapathaftab.aauresult  : _0684_;
  assign _0684_ = \datapathaftab.d2e_ctrl_word_curr [45] ? (* hdlname = "datapathaftab 620" *) \datapathaftab.d2e_outcsr_curr  : 32'd0;
  assign \datapathaftab.e2m_ex_flag_next  = \datapathaftab.d2e_ex_flag_curr  | (* hdlname = "datapathaftab 622" *) \datapathaftab.aau.division.dividedbyzeroflag ;
  assign _0685_ = ~ (* hdlname = "datapathaftab 623" *) \controlleraftab.e2m_en_temp ;
  assign _0686_ = _0685_ & (* hdlname = "datapathaftab 624" *) \controlleraftab.m2wb_en_temp ;
  assign \datapathaftab.e2m_rst_def  = \controlleraftab.e2m_rst  | (* hdlname = "datapathaftab 625" *) _0686_;
  assign _0687_ = \datapathaftab.e2m_instr_curr [6:0] == (* hdlname = "datapathaftab 628" *) 7'h63;
  assign _0689_ = _0688_ & (* hdlname = "datapathaftab 632" *) \datapathaftab.e2m_instr_curr [14];
  assign _0690_ = \datapathaftab.e2m_lt_curr  ? (* hdlname = "datapathaftab 635" *) 1'h1 : 1'h0;
  assign _0691_ = \datapathaftab.e2m_instr_curr [12] & (* hdlname = "datapathaftab 638" *) \datapathaftab.e2m_instr_curr [14];
  assign _0692_ = \datapathaftab.e2m_gt_curr  | (* hdlname = "datapathaftab 639" *) \datapathaftab.e2m_eq_curr ;
  assign _0693_ = _0692_ ? (* hdlname = "datapathaftab 642" *) 1'h1 : 1'h0;
  assign _0688_ = ~ (* hdlname = "datapathaftab 646" *) \datapathaftab.e2m_instr_curr [12];
  assign _0695_ = _0688_ & (* hdlname = "datapathaftab 647" *) _0694_;
  assign _0696_ = \datapathaftab.e2m_eq_curr  ? (* hdlname = "datapathaftab 650" *) 1'h1 : 1'h0;
  assign _0694_ = ~ (* hdlname = "datapathaftab 652" *) \datapathaftab.e2m_instr_curr [14];
  assign _0697_ = \datapathaftab.e2m_instr_curr [12] & (* hdlname = "datapathaftab 654" *) _0694_;
  assign _0698_ = \datapathaftab.e2m_eq_curr  ? (* hdlname = "datapathaftab 658" *) 1'h0 : 1'h1;
  assign _0699_ = _0697_ ? (* hdlname = "datapathaftab 660" *) _0698_ : 1'h0;
  assign _0700_ = _0695_ ? (* hdlname = "datapathaftab 661" *) _0696_ : _0699_;
  assign _0701_ = _0691_ ? (* hdlname = "datapathaftab 662" *) _0693_ : _0700_;
  assign _0702_ = _0689_ ? (* hdlname = "datapathaftab 663" *) _0690_ : _0701_;
  assign _0703_ = \datapathaftab.e2m_instr_curr [6:0] == (* hdlname = "datapathaftab 665" *) 7'h6f;
  assign _0704_ = \datapathaftab.e2m_instr_curr [6:0] == (* hdlname = "datapathaftab 667" *) 7'h67;
  assign _0705_ = _0704_ ? (* hdlname = "datapathaftab 670" *) 1'h1 : 1'h0;
  assign _0706_ = _0703_ ? (* hdlname = "datapathaftab 672" *) 1'h1 : _0705_;
  assign \controlleraftab.branch_taken  = _0687_ ? (* hdlname = "datapathaftab 673" *) _0702_ : _0706_;
  assign _0708_ = \datapathaftab.e2m_ctrl_word_curr [34] & (* hdlname = "datapathaftab 682" *) _0707_;
  assign _0711_ = ~ (* hdlname = "datapathaftab 685" *) \datapathaftab.dawu.controller.enableaddr ;
  assign _0712_ = ~ (* hdlname = "datapathaftab 686" *) \datapathaftab.completeddawu_stored ;
  assign _0713_ = _0711_ & (* hdlname = "datapathaftab 687" *) _0712_;
  assign _0714_ = _0710_ | (* hdlname = "datapathaftab 688" *) _0713_;
  assign \datapathaftab.dawu.controller.startdawu  = _0708_ & (* hdlname = "datapathaftab 689" *) _0714_;
  assign _0716_ = \datapathaftab.completeddawu  ? (* hdlname = "datapathaftab 696" *) 1'h1 : 1'h0;
  assign _0717_ = _0715_ ? (* hdlname = "datapathaftab 698" *) 1'h0 : _0716_;
  assign \datapathaftab.completeddawu_stored  = rst ? (* hdlname = "datapathaftab 700" *) 1'h0 : _0717_;
  assign _0718_ = \datapathaftab.completeddawu  | (* hdlname = "datapathaftab 702" *) \datapathaftab.completeddawu_stored ;
  assign \controlleraftab.completeddawu  = _0718_ | (* hdlname = "datapathaftab 704" *) _0346_;
  assign _0707_ = ~ (* hdlname = "datapathaftab 712" *) \datapathaftab.e2m_ex_flag_curr ;
  assign _0719_ = \datapathaftab.e2m_ctrl_word_curr [35] & (* hdlname = "datapathaftab 713" *) _0707_;
  assign _0709_ = ~ (* hdlname = "datapathaftab 714" *) \datapathaftab.m2wb_rst_def ;
  assign _0710_ = \controlleraftab.m2wb_en_temp  & (* hdlname = "datapathaftab 715" *) _0709_;
  assign _0720_ = ~ (* hdlname = "datapathaftab 716" *) \datapathaftab.daru2.controller.enableaddr ;
  assign _0721_ = ~ (* hdlname = "datapathaftab 717" *) \datapathaftab.completeddaru2_stored ;
  assign _0722_ = _0720_ & (* hdlname = "datapathaftab 718" *) _0721_;
  assign _0723_ = _0710_ | (* hdlname = "datapathaftab 719" *) _0722_;
  assign \datapathaftab.daru2.controller.startdaru  = _0719_ & (* hdlname = "datapathaftab 720" *) _0723_;
  assign _0676_ = ~ (* hdlname = "datapathaftab 722" *) \datapathaftab.e2m_rst_def ;
  assign _0677_ = _0676_ & (* hdlname = "datapathaftab 723" *) \controlleraftab.e2m_en_temp ;
  assign _0715_ = \controlleraftab.e2m_rst  | (* hdlname = "datapathaftab 724" *) _0677_;
  assign _0724_ = \datapathaftab.completeddaru2  ? (* hdlname = "datapathaftab 727" *) 1'h1 : 1'h0;
  assign _0725_ = _0715_ ? (* hdlname = "datapathaftab 729" *) 1'h0 : _0724_;
  assign \datapathaftab.completeddaru2_stored  = rst ? (* hdlname = "datapathaftab 731" *) 1'h0 : _0725_;
  assign _0726_ = \datapathaftab.completeddaru2  | (* hdlname = "datapathaftab 733" *) \datapathaftab.completeddaru2_stored ;
  assign \controlleraftab.completeddaru2  = _0726_ | (* hdlname = "datapathaftab 735" *) _0347_;
  assign _0727_ = ~ (* hdlname = "datapathaftab 737" *) \datapathaftab.m2wb_ctrl_word_curr [53];
  assign _0728_ = ~ (* hdlname = "datapathaftab 738" *) \controlleraftab.m2wb_en_temp ;
  assign _0729_ = _0727_ & (* hdlname = "datapathaftab 739" *) _0728_;
  assign _0730_ = _0729_ & (* hdlname = "datapathaftab 740" *) \controlleraftab.instructiondone ;
  assign _0731_ = _0730_ & (* hdlname = "datapathaftab 742" *) _0427_;
  assign _0732_ = ~ (* hdlname = "datapathaftab 743" *) \controlleraftab.interruptraise ;
  assign _0733_ = _0731_ & (* hdlname = "datapathaftab 744" *) _0732_;
  assign \datapathaftab.m2wb_rst_def  = \controlleraftab.m2wb_rst  | (* hdlname = "datapathaftab 745" *) _0733_;
  assign \datapathaftab.memaddr2  = \datapathaftab.daru2.controller.enableaddr  ? (* hdlname = "datapathaftab 746" *) \datapathaftab.daru2.datapath.addrout  : \datapathaftab.dawu.datapath.addrout ;
  assign \datapathaftab.bytespermemaccess  = \datapathaftab.daru2.controller.enableaddr  ? (* hdlname = "datapathaftab 747" *) \datapathaftab.bytespermemaccessdaru  : \datapathaftab.bytespermemaccessdawu ;
  assign \controlleraftab.hazard_solved  = \datapathaftab.m2wb_hazard_flag_curr  & (* hdlname = "datapathaftab 748" *) \controlleraftab.instructiondone ;
  assign \datapathaftab.registerfile.writedata  = \datapathaftab.m2wb_ctrl_word_curr [54] ? (* hdlname = "datapathaftab 751" *) \datapathaftab.m2wb_alu_res_curr  : _0734_;
  assign _0734_ = \datapathaftab.m2wb_ctrl_word_curr [55] ? (* hdlname = "datapathaftab 752" *) \datapathaftab.m2wb_pc_plus4_curr  : _0735_;
  assign _0735_ = \datapathaftab.m2wb_ctrl_word_curr [56] ? (* hdlname = "datapathaftab 753" *) \datapathaftab.m2wb_mem_res_curr  : _0736_;
  assign _0736_ = \datapathaftab.m2wb_ctrl_word_curr [1] ? (* hdlname = "datapathaftab 754" *) { 31'h00000000, \datapathaftab.registerfile.setone  } : 32'd0;
  assign \datapathaftab.mux8.a  = \datapathaftab.m2wb_ctrl_word_curr [48] ? (* hdlname = "datapathaftab 759" *) \datapathaftab.m2wb_instr_curr [31:20] : _0737_;
  assign _0737_ = \controlleraftab.selromaddress  ? (* hdlname = "datapathaftab 760" *) { 5'h06, \datapathaftab.csraddressingdecoder.outaddr [6], 3'h0, \datapathaftab.csraddressingdecoder.outaddr [2:0] } : _0738_;
  assign _0738_ = \controlleraftab.selmedeleg_csr  ? (* hdlname = "datapathaftab 762" *) 12'h302 : _0739_;
  assign _0739_ = \controlleraftab.selmideleg_csr  ? (* hdlname = "datapathaftab 764" *) 12'h303 : 12'h000;
  assign _0740_ = \datapathaftab.e2m_ctrl_word_curr [34] & (* hdlname = "datapathaftab 791" *) \controlleraftab.interruptraise ;
  assign \datapathaftab.pc_from_wb  = _0740_ & (* hdlname = "datapathaftab 793" *) _0427_;
  assign \datapathaftab.csr_pc  = \datapathaftab.pc_from_wb  ? (* hdlname = "datapathaftab 795" *) \datapathaftab.e2m_pc_plus4_curr  : \datapathaftab.m2wb_pc_curr ;
  assign \datapathaftab.csrisl.outcsr  = \controlleraftab.csr_from_wb  ? (* hdlname = "datapathaftab 797" *) \datapathaftab.outcsr_reg  : \datapathaftab.m2wb_outcsr_curr ;
  assign _0741_ = \datapathaftab.interrcheckcausedetection.interraisetemp  & (* hdlname = "datapathaftab 820" *) \controlleraftab.instructiondone ;
  assign \controlleraftab.interruptraise  = _0741_ & (* hdlname = "datapathaftab 821" *) \controlleraftab.wb_valid ;
  assign _0742_ = \datapathaftab.exceptionraisetemp  & (* hdlname = "datapathaftab 822" *) \controlleraftab.instructiondone ;
  assign \controlleraftab.exceptionraise  = _0742_ & (* hdlname = "datapathaftab 823" *) \controlleraftab.wb_valid ;
  assign _0743_ = ! (* hdlname = "datapathaftab 935" *) \datapathaftab.d2e_inst_type_curr ;
  assign _0744_ = \datapathaftab.d2e_inst_type_curr  == (* hdlname = "datapathaftab 938" *) 3'h1;
  assign _0745_ = \datapathaftab.d2e_instr_curr [6:0] == (* hdlname = "datapathaftab 941" *) 7'h73;
  assign _0746_ = | (* hdlname = "datapathaftab 944" *) \datapathaftab.d2e_instr_curr [14:12];
  assign _0747_ = _0746_ & (* hdlname = "datapathaftab 945" *) _0745_;
  assign _0748_ = ! (* hdlname = "datapathaftab 948" *) \datapathaftab.d2e_instr_curr [27:20];
  assign _0749_ = \datapathaftab.d2e_instr_curr [27:20] == (* hdlname = "datapathaftab 951" *) 8'h04;
  assign _0750_ = _0748_ | (* hdlname = "datapathaftab 952" *) _0749_;
  assign _0751_ = \datapathaftab.d2e_instr_curr [27:20] == (* hdlname = "datapathaftab 955" *) 8'h44;
  assign _0752_ = _0750_ | (* hdlname = "datapathaftab 956" *) _0751_;
  assign _0753_ = _0752_ ? (* hdlname = "datapathaftab 959" *) 1'h1 : 1'h0;
  assign _0754_ = _0747_ ? (* hdlname = "datapathaftab 962" *) \datapathaftab.d2e_instr_curr [31:20] : 12'h000;
  assign _0755_ = _0747_ ? (* hdlname = "datapathaftab 965" *) 1'h1 : 1'h0;
  assign _0756_ = _0747_ ? (* hdlname = "datapathaftab 967" *) _0753_ : 1'h0;
  assign _0757_ = \datapathaftab.d2e_inst_type_curr  == (* hdlname = "datapathaftab 970" *) 3'h2;
  assign _0758_ = \datapathaftab.d2e_inst_type_curr  == (* hdlname = "datapathaftab 972" *) 3'h4;
  assign _0759_ = \datapathaftab.d2e_inst_type_curr  == (* hdlname = "datapathaftab 974" *) 3'h3;
  assign _0760_ = \datapathaftab.d2e_inst_type_curr  == (* hdlname = "datapathaftab 977" *) 3'h5;
  assign _0761_ = _0760_ ? (* hdlname = "datapathaftab 980" *) \datapathaftab.d2e_instr_curr [11:7] : 5'h00;
  assign _0762_ = _0760_ ? (* hdlname = "datapathaftab 983" *) 1'h1 : 1'h0;
  assign _0763_ = _0759_ ? (* hdlname = "datapathaftab 984" *) \datapathaftab.d2e_instr_curr [11:7] : _0761_;
  assign _0764_ = _0759_ ? (* hdlname = "datapathaftab 986" *) 1'h1 : _0762_;
  assign _0765_ = _0758_ ? (* hdlname = "datapathaftab 988" *) 5'h00 : _0763_;
  assign _0766_ = _0758_ ? (* hdlname = "datapathaftab 990" *) 1'h0 : _0764_;
  assign _0767_ = _0757_ ? (* hdlname = "datapathaftab 992" *) 5'h00 : _0765_;
  assign _0768_ = _0757_ ? (* hdlname = "datapathaftab 994" *) 1'h0 : _0766_;
  assign _0769_ = _0744_ ? (* hdlname = "datapathaftab 995" *) \datapathaftab.d2e_instr_curr [11:7] : _0767_;
  assign _0770_ = _0744_ ? (* hdlname = "datapathaftab 997" *) 1'h1 : _0768_;
  assign _0771_ = _0744_ ? (* hdlname = "datapathaftab 999" *) _0754_ : 12'h000;
  assign \controlleraftab.completedaau  = \datapathaftab.aau.donemult  | (* hdlname = "datapathaftab aau 4841" *) \datapathaftab.aau.division.unsigneddiv.controllerdiv.donediv ;
  assign \datapathaftab.aau.in1mult  = \datapathaftab.d2e_ctrl_word_curr [40] ? (* hdlname = "datapathaftab aau 4844" *) { 1'h0, \datapathaftab.aau.ain  } : _0944_;
  assign _0943_ = \datapathaftab.d2e_ctrl_word_curr [38] | (* hdlname = "datapathaftab aau 4847" *) \datapathaftab.d2e_ctrl_word_curr [39];
  assign _0944_ = _0943_ ? (* hdlname = "datapathaftab aau 4848" *) { \datapathaftab.aau.ain [31], \datapathaftab.aau.ain  } : 33'h000000000;
  assign _0945_ = \datapathaftab.d2e_ctrl_word_curr [40] | (* hdlname = "datapathaftab aau 4852" *) \datapathaftab.d2e_ctrl_word_curr [39];
  assign \datapathaftab.aau.in2mult  = _0945_ ? (* hdlname = "datapathaftab aau 4853" *) { 1'h0, \datapathaftab.aau.bin  } : _0946_;
  assign _0946_ = \datapathaftab.d2e_ctrl_word_curr [38] ? (* hdlname = "datapathaftab aau 4856" *) { \datapathaftab.aau.bin [31], \datapathaftab.aau.bin  } : 33'h000000000;
  assign \datapathaftab.aau.division.signedunsignedbar  = \datapathaftab.d2e_ctrl_word_curr [38] ? (* hdlname = "datapathaftab aau 4863" *) 1'h1 : 1'h0;
  assign \datapathaftab.aau.resaau1  = \datapathaftab.aau.donemult  ? (* hdlname = "datapathaftab aau 4871" *) { \datapathaftab.aau.multiplication.datapath.addsub.add.a [30:0], \datapathaftab.aau.multiplication.datapath.mrreg.6594.outreg_t [33] } : _0947_;
  assign _0947_ = \datapathaftab.aau.division.unsigneddiv.controllerdiv.donediv  ? (* hdlname = "datapathaftab aau 4872" *) \datapathaftab.aau.division.tclq.aout  : 32'd0;
  assign \datapathaftab.aau.resaau2  = \datapathaftab.aau.donemult  ? (* hdlname = "datapathaftab aau 4874" *) \datapathaftab.aau.multiplication.datapath.mrreg.6594.outreg_t [32:1] : _0948_;
  assign _0948_ = \datapathaftab.aau.division.unsigneddiv.controllerdiv.donediv  ? (* hdlname = "datapathaftab aau 4875" *) \datapathaftab.aau.division.tclrem.aout  : 32'd0;
  assign _0949_ = ! (* hdlname = "datapathaftab aau division 5942" *) \datapathaftab.aau.bin ;
  assign \datapathaftab.aau.division.divisorzero  = _0949_ ? (* hdlname = "datapathaftab aau division 5943" *) 1'h1 : 1'h0;
  assign \datapathaftab.aau.division.dividedbyzeroflag  = \datapathaftab.aau.division.startsdiv  & (* hdlname = "datapathaftab aau division 5945" *) \datapathaftab.aau.division.divisorzero ;
  assign _0950_ = ~ (* hdlname = "datapathaftab aau division 5946" *) \datapathaftab.aau.division.divisorzero ;
  assign \datapathaftab.aau.division.safestart  = _0950_ & (* hdlname = "datapathaftab aau division 5947" *) \datapathaftab.aau.division.startsdiv ;
  assign \datapathaftab.aau.division.endr  = \datapathaftab.aau.bin [31] & (* hdlname = "datapathaftab aau division 5951" *) \datapathaftab.aau.division.signedunsignedbar ;
  assign _0951_ = \datapathaftab.aau.ain [31] ^ (* hdlname = "datapathaftab aau division 5954" *) \datapathaftab.aau.bin [31];
  assign \datapathaftab.aau.division.enq  = _0951_ & (* hdlname = "datapathaftab aau division 5955" *) \datapathaftab.aau.division.signedunsignedbar ;
  assign \datapathaftab.aau.division.endd  = \datapathaftab.aau.ain [31] & (* hdlname = "datapathaftab aau division 5957" *) \datapathaftab.aau.division.signedunsignedbar ;
  assign _0952_ = ~ (* hdlname = "datapathaftab aau division tcldividend 6514" *) \datapathaftab.aau.ain ;
  assign \datapathaftab.aau.division.tcldividend.ainp  = \datapathaftab.aau.division.endd  ? (* hdlname = "datapathaftab aau division tcldividend 6515" *) _0952_ : \datapathaftab.aau.ain ;
  assign _0953_ = \datapathaftab.aau.division.tcldividend.ainp  + (* hdlname = "datapathaftab aau division tcldividend 6517" *) 32'd1;
  assign \datapathaftab.aau.division.tcldividend.aout  = \datapathaftab.aau.division.endd  ? (* hdlname = "datapathaftab aau division tcldividend 6518" *) _0953_ : \datapathaftab.aau.division.tcldividend.ainp ;
  assign \datapathaftab.aau.division.tcldivisor.ainp  = \datapathaftab.aau.division.endr  ? (* hdlname = "datapathaftab aau division tcldivisor 6515" *) _0954_ : \datapathaftab.aau.bin ;
  assign _0955_ = \datapathaftab.aau.division.tcldivisor.ainp  + (* hdlname = "datapathaftab aau division tcldivisor 6517" *) 32'd1;
  assign \datapathaftab.aau.division.tcldivisor.aout  = \datapathaftab.aau.division.endr  ? (* hdlname = "datapathaftab aau division tcldivisor 6518" *) _0955_ : \datapathaftab.aau.division.tcldivisor.ainp ;
  assign _0956_ = ~ (* hdlname = "datapathaftab aau division tclq 6514" *) \datapathaftab.aau.division.tclq.ain ;
  assign \datapathaftab.aau.division.tclq.ainp  = \datapathaftab.aau.division.enq  ? (* hdlname = "datapathaftab aau division tclq 6515" *) _0956_ : \datapathaftab.aau.division.tclq.ain ;
  assign _0957_ = \datapathaftab.aau.division.tclq.ainp  + (* hdlname = "datapathaftab aau division tclq 6517" *) 32'd1;
  assign \datapathaftab.aau.division.tclq.aout  = \datapathaftab.aau.division.enq  ? (* hdlname = "datapathaftab aau division tclq 6518" *) _0957_ : \datapathaftab.aau.division.tclq.ainp ;
  assign _0958_ = ~ (* hdlname = "datapathaftab aau division tclrem 6514" *) \datapathaftab.aau.division.unsigneddiv.datapathdiv.rprev [31:0];
  assign \datapathaftab.aau.division.tclrem.ainp  = \datapathaftab.aau.division.endd  ? (* hdlname = "datapathaftab aau division tclrem 6515" *) _0958_ : \datapathaftab.aau.division.unsigneddiv.datapathdiv.rprev [31:0];
  assign _0959_ = \datapathaftab.aau.division.tclrem.ainp  + (* hdlname = "datapathaftab aau division tclrem 6517" *) 32'd1;
  assign \datapathaftab.aau.division.tclrem.aout  = \datapathaftab.aau.division.endd  ? (* hdlname = "datapathaftab aau division tclrem 6518" *) _0959_ : \datapathaftab.aau.division.tclrem.ainp ;
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.qq0  = ~ (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv 6693" *) \datapathaftab.aau.division.unsigneddiv.datapathdiv.sub [32];
  assign _0961_ = \datapathaftab.aau.division.safestart  ? (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv 6698" *) 2'h1 : 2'h0;
  assign _0963_ = \datapathaftab.aau.division.unsigneddiv.controllerdiv.cocnt  ? (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv 6703" *) 2'h0 : 2'h2;
  function [1:0] \datapathaftab.aau.division.unsigneddiv.controllerdiv.6711 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv 6711" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \datapathaftab.aau.division.unsigneddiv.controllerdiv.6711  = b[1:0];
      3'b?1?:
        \datapathaftab.aau.division.unsigneddiv.controllerdiv.6711  = b[3:2];
      3'b1??:
        \datapathaftab.aau.division.unsigneddiv.controllerdiv.6711  = b[5:4];
      default:
        \datapathaftab.aau.division.unsigneddiv.controllerdiv.6711  = a;
    endcase
  endfunction
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.nstate  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.6711 (2'hx, { 2'h1, _0963_, _0961_ }, { _0965_, _0964_, _0962_ });
  assign _0962_ = ! (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv 6717" *) \datapathaftab.aau.division.unsigneddiv.controllerdiv.pstate ;
  assign _0966_ = \datapathaftab.aau.division.unsigneddiv.controllerdiv.cocnt  ? (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv 6720" *) 1'h1 : 1'h0;
  assign _0964_ = \datapathaftab.aau.division.unsigneddiv.controllerdiv.pstate  == (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv 6722" *) 2'h1;
  assign _0965_ = \datapathaftab.aau.division.unsigneddiv.controllerdiv.pstate  == (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv 6724" *) 2'h2;
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.donediv  = _0964_ ? (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv 6729" *) _0966_ : 1'h0;
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.shlregq  = _0964_ ? (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv 6769" *) 1'h1 : 1'h0;
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.ldregq  = _0967_ ? (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv 6775" *) 1'h1 : 1'h0;
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.inccnt  = _0965_ ? (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv 6799" *) 1'h1 : 1'h0;
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.initcnt  = _0962_ ? (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv 6805" *) 1'h1 : 1'h0;
  assign _0969_ = ~ (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv counter 6638" *) \datapathaftab.aau.division.unsigneddiv.controllerdiv.cocnt ;
  assign _0970_ = _0969_ & (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv counter 6639" *) \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.inccnt ;
  assign _0971_ = \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.temp  + (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv counter 6641" *) 6'h01;
  assign _0972_ = _0970_ ? (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv counter 6642" *) _0971_ : \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.temp ;
  assign _0973_ = \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.initcnt  ? (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv counter 6643" *) 6'h1e : _0972_;
  assign _0974_ = \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.temp  == (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv counter 6652" *) 6'h3f;
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.cocnt  = _0974_ ? (* hdlname = "datapathaftab aau division unsigneddiv controllerdiv counter 6653" *) 1'h1 : 1'h0;
  assign { \datapathaftab.aau.division.unsigneddiv.datapathdiv.sub [32], \datapathaftab.aau.division.unsigneddiv.datapathdiv.mux34b.a [31:0] } = \datapathaftab.aau.division.unsigneddiv.datapathdiv.rprev  - (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv 6667" *) \datapathaftab.aau.division.unsigneddiv.datapathdiv.m ;
  assign _0975_ = \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.inccnt  ? (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv mux33b 4834" *) { \datapathaftab.aau.division.tclq.ain [31:1], \datapathaftab.aau.division.unsigneddiv.controllerdiv.qq0  } : 32'd0;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.mux33b.w  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.initcnt  ? (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv mux33b 4835" *) \datapathaftab.aau.division.tcldividend.aout  : _0975_;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.mux34b.w  = \datapathaftab.aau.division.unsigneddiv.datapathdiv.sub [32] ? (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv mux34b 6902" *) \datapathaftab.aau.division.unsigneddiv.datapathdiv.rprev  : { 1'h0, \datapathaftab.aau.division.unsigneddiv.datapathdiv.mux34b.a [31:0] };
  assign _0977_ = \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.initcnt  ? (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv regm 6584" *) { 1'h0, \datapathaftab.aau.division.tcldivisor.aout  } : \datapathaftab.aau.division.unsigneddiv.datapathdiv.m ;
  assign _0980_ = \datapathaftab.aau.division.unsigneddiv.controllerdiv.shlregq  ? (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shregq 6879" *) { \datapathaftab.aau.division.tclq.ain [30:0], 1'h0 } : \datapathaftab.aau.division.tclq.ain ;
  assign _0981_ = \datapathaftab.aau.division.unsigneddiv.controllerdiv.shlregq  ? (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shregq 6880" *) \datapathaftab.aau.division.tclq.ain [31] : \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregq.6866.seroutp ;
  assign _0982_ = \datapathaftab.aau.division.unsigneddiv.controllerdiv.ldregq  ? (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shregq 6881" *) \datapathaftab.aau.division.unsigneddiv.datapathdiv.mux33b.w  : _0980_;
  assign _0983_ = \datapathaftab.aau.division.unsigneddiv.controllerdiv.ldregq  ? (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shregq 6882" *) \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregq.6866.seroutp  : _0981_;
  (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shregq 6896" *)
  always @(posedge clk)
    if (rst) _0978_ <= 1'h0;
    else _0978_ <= _0983_;
  assign _0985_ = \datapathaftab.aau.division.unsigneddiv.controllerdiv.shlregq  ? (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shregr 6846" *) { \datapathaftab.aau.division.unsigneddiv.datapathdiv.rprev [31:0], \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregq.6866.seroutp  } : \datapathaftab.aau.division.unsigneddiv.datapathdiv.rprev ;
  assign _0986_ = \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.inccnt  ? (* hdlname = "datapathaftab aau division unsigneddiv datapathdiv shregr 6848" *) \datapathaftab.aau.division.unsigneddiv.datapathdiv.mux34b.w  : _0985_;
  assign _0988_ = \datapathaftab.aau.multiplication.controller.startbooth  ? (* hdlname = "datapathaftab aau multiplication controller 6407" *) 2'h2 : 2'h1;
  assign _0989_ = \datapathaftab.aau.multiplication.controller.pstate  == (* hdlname = "datapathaftab aau multiplication controller 6409" *) 2'h1;
  assign _0991_ = \datapathaftab.aau.multiplication.controller.co  ? (* hdlname = "datapathaftab aau multiplication controller 6415" *) 2'h0 : 2'h3;
  function [1:0] \datapathaftab.aau.multiplication.controller.6424 ;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    (* hdlname = "datapathaftab aau multiplication controller 6424" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        \datapathaftab.aau.multiplication.controller.6424  = b[1:0];
      4'b??1?:
        \datapathaftab.aau.multiplication.controller.6424  = b[3:2];
      4'b?1??:
        \datapathaftab.aau.multiplication.controller.6424  = b[5:4];
      4'b1???:
        \datapathaftab.aau.multiplication.controller.6424  = b[7:6];
      default:
        \datapathaftab.aau.multiplication.controller.6424  = a;
    endcase
  endfunction
  assign \datapathaftab.aau.multiplication.controller.nstate  = \datapathaftab.aau.multiplication.controller.6424 (2'h0, { 2'h1, _0991_, 2'h3, _0988_ }, { _0993_, _0992_, _0990_, _0989_ });
  assign _0993_ = ! (* hdlname = "datapathaftab aau multiplication controller 6430" *) \datapathaftab.aau.multiplication.controller.pstate ;
  assign _0990_ = \datapathaftab.aau.multiplication.controller.pstate  == (* hdlname = "datapathaftab aau multiplication controller 6432" *) 2'h2;
  assign _0994_ = \datapathaftab.aau.multiplication.datapath.mrreg.6594.outreg_t [1:0] == (* hdlname = "datapathaftab aau multiplication controller 6434" *) 2'h2;
  assign _0995_ = \datapathaftab.aau.multiplication.datapath.mrreg.6594.outreg_t [1:0] == (* hdlname = "datapathaftab aau multiplication controller 6436" *) 2'h1;
  assign _0996_ = _0995_ ? (* hdlname = "datapathaftab aau multiplication controller 6439" *) 1'h1 : 1'h0;
  assign _0997_ = _0994_ ? (* hdlname = "datapathaftab aau multiplication controller 6441" *) 1'h1 : _0996_;
  assign _0998_ = _0994_ ? (* hdlname = "datapathaftab aau multiplication controller 6444" *) 1'h1 : 1'h0;
  assign _0992_ = \datapathaftab.aau.multiplication.controller.pstate  == (* hdlname = "datapathaftab aau multiplication controller 6446" *) 2'h3;
  assign \datapathaftab.aau.multiplication.controller.sel  = _0992_ ? (* hdlname = "datapathaftab aau multiplication controller 6475" *) _0997_ : 1'h0;
  assign \datapathaftab.aau.multiplication.controller.subsel  = _0992_ ? (* hdlname = "datapathaftab aau multiplication controller 6479" *) _0998_ : 1'h0;
  assign \datapathaftab.aau.donemult  = _0993_ ? (* hdlname = "datapathaftab aau multiplication controller 6484" *) 1'h1 : 1'h0;
  assign \datapathaftab.aau.multiplication.controller.cnt_en  = _0992_ ? (* hdlname = "datapathaftab aau multiplication controller 6489" *) 1'h1 : 1'h0;
  assign \datapathaftab.aau.multiplication.controller.counter.initcnt  = _0990_ ? (* hdlname = "datapathaftab aau multiplication controller 6498" *) 1'h1 : 1'h0;
  assign _1000_ = ~ (* hdlname = "datapathaftab aau multiplication controller counter 6638" *) \datapathaftab.aau.multiplication.controller.co ;
  assign _1001_ = _1000_ & (* hdlname = "datapathaftab aau multiplication controller counter 6639" *) \datapathaftab.aau.multiplication.controller.cnt_en ;
  assign _1002_ = \datapathaftab.aau.multiplication.controller.counter.temp  + (* hdlname = "datapathaftab aau multiplication controller counter 6641" *) 6'h01;
  assign _1003_ = _1001_ ? (* hdlname = "datapathaftab aau multiplication controller counter 6642" *) _1002_ : \datapathaftab.aau.multiplication.controller.counter.temp ;
  assign _1004_ = \datapathaftab.aau.multiplication.controller.counter.initcnt  ? (* hdlname = "datapathaftab aau multiplication controller counter 6643" *) 6'h1f : _1003_;
  assign _1005_ = \datapathaftab.aau.multiplication.controller.counter.temp  == (* hdlname = "datapathaftab aau multiplication controller counter 6652" *) 6'h3f;
  assign \datapathaftab.aau.multiplication.controller.co  = _1005_ ? (* hdlname = "datapathaftab aau multiplication controller counter 6653" *) 1'h1 : 1'h0;
  assign \datapathaftab.aau.multiplication.datapath.pin  = \datapathaftab.aau.multiplication.controller.sel  ? (* hdlname = "datapathaftab aau multiplication datapath 6385" *) { \datapathaftab.aau.multiplication.datapath.addsub.add.add [32], \datapathaftab.aau.multiplication.datapath.addsub.add.add [32:1] } : { \datapathaftab.aau.multiplication.datapath.addsub.add.a [32], \datapathaftab.aau.multiplication.datapath.addsub.add.a [32:1] };
  assign \datapathaftab.aau.multiplication.datapath.mrreg.serin  = \datapathaftab.aau.multiplication.controller.sel  ? (* hdlname = "datapathaftab aau multiplication datapath 6390" *) \datapathaftab.aau.multiplication.datapath.addsub.add.add [0] : \datapathaftab.aau.multiplication.datapath.addsub.add.a [0];
  assign _1006_ = ~ (* hdlname = "datapathaftab aau multiplication datapath addsub 6627" *) \datapathaftab.aau.multiplication.datapath.addsub.b ;
  assign \datapathaftab.aau.multiplication.datapath.addsub.add.b  = \datapathaftab.aau.multiplication.controller.subsel  ? (* hdlname = "datapathaftab aau multiplication datapath addsub 6628" *) _1006_ : \datapathaftab.aau.multiplication.datapath.addsub.b ;
  assign _1007_ = { 1'h0, \datapathaftab.aau.multiplication.datapath.addsub.add.a  } + (* hdlname = "datapathaftab aau multiplication datapath addsub add 6824" *) { 1'h0, \datapathaftab.aau.multiplication.datapath.addsub.add.b  };
  assign \datapathaftab.aau.multiplication.datapath.addsub.add.add  = _1007_ + (* hdlname = "datapathaftab aau multiplication datapath addsub add 6828" *) { 33'h000000000, \datapathaftab.aau.multiplication.controller.subsel  };
  assign _1009_ = \datapathaftab.aau.multiplication.controller.counter.initcnt  ? (* hdlname = "datapathaftab aau multiplication datapath mreg 6584" *) \datapathaftab.aau.in1mult  : \datapathaftab.aau.multiplication.datapath.addsub.b ;
  assign _1011_ = \datapathaftab.aau.multiplication.controller.cnt_en  ? (* hdlname = "datapathaftab aau multiplication datapath mrreg 6605" *) { \datapathaftab.aau.multiplication.datapath.mrreg.serin , \datapathaftab.aau.multiplication.datapath.mrreg.6594.outreg_t [33:1] } : \datapathaftab.aau.multiplication.datapath.mrreg.6594.outreg_t ;
  assign _1012_ = \datapathaftab.aau.multiplication.controller.counter.initcnt  ? (* hdlname = "datapathaftab aau multiplication datapath mrreg 6609" *) { \datapathaftab.aau.in2mult , 1'h0 } : _1011_;
  assign _1014_ = \datapathaftab.aau.multiplication.controller.cnt_en  ? (* hdlname = "datapathaftab aau multiplication datapath preg 6584" *) \datapathaftab.aau.multiplication.datapath.pin  : \datapathaftab.aau.multiplication.datapath.addsub.add.a ;
  assign _0954_ = ~ (* hdlname = "datapathaftab addsub 4941" *) \datapathaftab.aau.bin ;
  assign \datapathaftab.addsub.add.b  = \datapathaftab.d2e_ctrl_word_curr [17] ? (* hdlname = "datapathaftab addsub 4942" *) _0954_ : \datapathaftab.aau.bin ;
  assign \datapathaftab.addsub.outres  = \datapathaftab.d2e_ctrl_word_curr [18] ? (* hdlname = "datapathaftab addsub 4946" *) \datapathaftab.aau.bin  : \datapathaftab.addsub.add.add [31:0];
  assign _1015_ = { 1'h0, \datapathaftab.aau.ain  } + (* hdlname = "datapathaftab addsub add 4081" *) { 1'h0, \datapathaftab.addsub.add.b  };
  assign \datapathaftab.addsub.add.add  = _1015_ + (* hdlname = "datapathaftab addsub add 4085" *) { 32'h00000000, \datapathaftab.d2e_ctrl_word_curr [17] };
  assign _1016_ = ! (* hdlname = "datapathaftab bsu 4897" *) \datapathaftab.d2e_ctrl_word_curr [16:15];
  assign _1017_ = \datapathaftab.aau.ain  << (* hdlname = "datapathaftab bsu 4900" *) { 27'h0000000, \datapathaftab.aau.bin [4:0] };
  assign _1018_ = \datapathaftab.d2e_ctrl_word_curr [16:15] == (* hdlname = "datapathaftab bsu 4902" *) 2'h2;
  assign _1020_ = \datapathaftab.d2e_ctrl_word_curr [16:15] == (* hdlname = "datapathaftab bsu 4907" *) 2'h3;
  assign _1019_ = \datapathaftab.aau.ain  >> (* hdlname = "datapathaftab bsu 4910" *) { 27'h0000000, \datapathaftab.aau.bin [4:0] };
  assign _1021_ = _1020_ ? (* hdlname = "datapathaftab bsu 4912" *) _1019_ : 32'd0;
  assign _1022_ = _1018_ ? (* hdlname = "datapathaftab bsu 4913" *) _1019_ : _1021_;
  assign \datapathaftab.bsu.shout  = _1016_ ? (* hdlname = "datapathaftab bsu 4914" *) _1017_ : _1022_;
  assign \datapathaftab.comparator.ainp [31] = \datapathaftab.comparator.ain [31] ^ (* hdlname = "datapathaftab comparator 4920" *) \datapathaftab.d2e_ctrl_word_curr [2];
  assign \datapathaftab.comparator.binp [31] = \datapathaftab.comparator.bin [31] ^ (* hdlname = "datapathaftab comparator 4922" *) \datapathaftab.d2e_ctrl_word_curr [2];
  assign _1023_ = { \datapathaftab.comparator.ainp [31], \datapathaftab.comparator.ain [30:0] } == (* hdlname = "datapathaftab comparator 4926" *) { \datapathaftab.comparator.binp [31], \datapathaftab.comparator.bin [30:0] };
  assign \datapathaftab.comparator.eq  = _1023_ ? (* hdlname = "datapathaftab comparator 4927" *) 1'h1 : 1'h0;
  assign _1024_ = { \datapathaftab.comparator.ainp [31], \datapathaftab.comparator.ain [30:0] } > (* hdlname = "datapathaftab comparator 4930" *) { \datapathaftab.comparator.binp [31], \datapathaftab.comparator.bin [30:0] };
  assign \datapathaftab.comparator.gt  = _1024_ ? (* hdlname = "datapathaftab comparator 4931" *) 1'h1 : 1'h0;
  assign _1025_ = { \datapathaftab.comparator.ainp [31], \datapathaftab.comparator.ain [30:0] } < (* hdlname = "datapathaftab comparator 4934" *) { \datapathaftab.comparator.binp [31], \datapathaftab.comparator.bin [30:0] };
  assign \datapathaftab.comparator.lt  = _1025_ ? (* hdlname = "datapathaftab comparator 4935" *) 1'h1 : 1'h0;
  assign _1026_ = \datapathaftab.addressregbank  == (* hdlname = "datapathaftab csr_address_ctrl 4767" *) 12'h300;
  assign \datapathaftab.csr_address_ctrl.validaddresscsr  = _1026_ ? (* hdlname = "datapathaftab csr_address_ctrl 4768" *) 1'h1 : _1028_;
  assign _1027_ = \datapathaftab.addressregbank  == (* hdlname = "datapathaftab csr_address_ctrl 4771" *) 12'h344;
  assign _1028_ = _1027_ ? (* hdlname = "datapathaftab csr_address_ctrl 4772" *) 1'h1 : _1030_;
  assign _1029_ = \datapathaftab.addressregbank  == (* hdlname = "datapathaftab csr_address_ctrl 4775" *) 12'h304;
  assign _1030_ = _1029_ ? (* hdlname = "datapathaftab csr_address_ctrl 4776" *) 1'h1 : _1032_;
  assign _1031_ = \datapathaftab.addressregbank  == (* hdlname = "datapathaftab csr_address_ctrl 4779" *) 12'h305;
  assign _1032_ = _1031_ ? (* hdlname = "datapathaftab csr_address_ctrl 4780" *) 1'h1 : _1034_;
  assign _1033_ = \datapathaftab.addressregbank  == (* hdlname = "datapathaftab csr_address_ctrl 4783" *) 12'h341;
  assign _1034_ = _1033_ ? (* hdlname = "datapathaftab csr_address_ctrl 4784" *) 1'h1 : _1036_;
  assign _1035_ = \datapathaftab.addressregbank  == (* hdlname = "datapathaftab csr_address_ctrl 4787" *) 12'h342;
  assign _1036_ = _1035_ ? (* hdlname = "datapathaftab csr_address_ctrl 4788" *) 1'h1 : _1038_;
  assign _1037_ = \datapathaftab.addressregbank  == (* hdlname = "datapathaftab csr_address_ctrl 4791" *) 12'h343;
  assign _1038_ = _1037_ ? (* hdlname = "datapathaftab csr_address_ctrl 4792" *) 1'h1 : _1040_;
  assign _1039_ = \datapathaftab.addressregbank  == (* hdlname = "datapathaftab csr_address_ctrl 4795" *) 12'h303;
  assign _1040_ = _1039_ ? (* hdlname = "datapathaftab csr_address_ctrl 4796" *) 1'h1 : _1042_;
  assign _1041_ = \datapathaftab.addressregbank  == (* hdlname = "datapathaftab csr_address_ctrl 4799" *) 12'h302;
  assign _1042_ = _1041_ ? (* hdlname = "datapathaftab csr_address_ctrl 4800" *) 1'h1 : _1044_;
  assign _1043_ = ! (* hdlname = "datapathaftab csr_address_ctrl 4803" *) \datapathaftab.addressregbank ;
  assign _1044_ = _1043_ ? (* hdlname = "datapathaftab csr_address_ctrl 4804" *) 1'h1 : _1046_;
  assign _1045_ = \datapathaftab.addressregbank  == (* hdlname = "datapathaftab csr_address_ctrl 4807" *) 12'h044;
  assign _1046_ = _1045_ ? (* hdlname = "datapathaftab csr_address_ctrl 4808" *) 1'h1 : _1048_;
  assign _1047_ = \datapathaftab.addressregbank  == (* hdlname = "datapathaftab csr_address_ctrl 4811" *) 12'h004;
  assign _1048_ = _1047_ ? (* hdlname = "datapathaftab csr_address_ctrl 4812" *) 1'h1 : _1050_;
  assign _1049_ = \datapathaftab.addressregbank  == (* hdlname = "datapathaftab csr_address_ctrl 4815" *) 12'h005;
  assign _1050_ = _1049_ ? (* hdlname = "datapathaftab csr_address_ctrl 4816" *) 1'h1 : _1052_;
  assign _1051_ = \datapathaftab.addressregbank  == (* hdlname = "datapathaftab csr_address_ctrl 4819" *) 12'h041;
  assign _1052_ = _1051_ ? (* hdlname = "datapathaftab csr_address_ctrl 4820" *) 1'h1 : _1054_;
  assign _1053_ = \datapathaftab.addressregbank  == (* hdlname = "datapathaftab csr_address_ctrl 4823" *) 12'h042;
  assign _1054_ = _1053_ ? (* hdlname = "datapathaftab csr_address_ctrl 4824" *) 1'h1 : _1056_;
  assign _1055_ = \datapathaftab.addressregbank  == (* hdlname = "datapathaftab csr_address_ctrl 4827" *) 12'h043;
  assign _1056_ = _1055_ ? (* hdlname = "datapathaftab csr_address_ctrl 4828" *) 1'h1 : 1'h0;
  assign \datapathaftab.csraddressingdecoder.outaddr [6] = _1057_ ? (* hdlname = "datapathaftab csraddressingdecoder 5073" *) 1'h1 : _1059_;
  assign _1059_ = _1058_ ? (* hdlname = "datapathaftab csraddressingdecoder 5077" *) 1'h1 : _1061_;
  assign _1061_ = _1060_ ? (* hdlname = "datapathaftab csraddressingdecoder 5081" *) 1'h1 : \datapathaftab.csrcounter.cocntup ;
  assign \datapathaftab.csraddressingdecoder.outaddr [2:0] = _1057_ ? (* hdlname = "datapathaftab csraddressingdecoder 5091" *) 3'h4 : _1063_;
  assign _1058_ = \datapathaftab.csraddressingdecoder.cntoutput  == (* hdlname = "datapathaftab csraddressingdecoder 5094" *) 3'h1;
  assign _1063_ = _1058_ ? (* hdlname = "datapathaftab csraddressingdecoder 5095" *) 3'h2 : _1065_;
  assign _1064_ = \datapathaftab.csraddressingdecoder.cntoutput  == (* hdlname = "datapathaftab csraddressingdecoder 5098" *) 3'h4;
  assign _1065_ = _1064_ ? (* hdlname = "datapathaftab csraddressingdecoder 5099" *) 3'h0 : _1066_;
  assign _1060_ = \datapathaftab.csraddressingdecoder.cntoutput  == (* hdlname = "datapathaftab csraddressingdecoder 5102" *) 3'h2;
  assign _1066_ = _1060_ ? (* hdlname = "datapathaftab csraddressingdecoder 5103" *) 3'h1 : _1068_;
  assign _1067_ = \datapathaftab.csraddressingdecoder.cntoutput  == (* hdlname = "datapathaftab csraddressingdecoder 5106" *) 3'h3;
  assign _1068_ = _1067_ ? (* hdlname = "datapathaftab csraddressingdecoder 5107" *) 3'h5 : _1070_;
  assign _1069_ = \datapathaftab.csraddressingdecoder.cntoutput  == (* hdlname = "datapathaftab csraddressingdecoder 5110" *) 3'h5;
  assign _1070_ = _1069_ ? (* hdlname = "datapathaftab csraddressingdecoder 5111" *) 3'h0 : _1072_;
  assign _1071_ = \datapathaftab.csraddressingdecoder.cntoutput  == (* hdlname = "datapathaftab csraddressingdecoder 5114" *) 3'h6;
  assign _1072_ = _1071_ ? (* hdlname = "datapathaftab csraddressingdecoder 5115" *) 3'h0 : _1073_;
  assign _1073_ = _1062_ ? (* hdlname = "datapathaftab csraddressingdecoder 5119" *) 3'h3 : 3'h0;
  assign _1075_ = ~ (* hdlname = "datapathaftab csrcounter 5039" *) \datapathaftab.csrcounter.cocntup ;
  assign _1076_ = _1075_ & (* hdlname = "datapathaftab csrcounter 5040" *) \controlleraftab.upcntcsr ;
  assign _1077_ = \datapathaftab.csraddressingdecoder.cntoutput  + (* hdlname = "datapathaftab csrcounter 5042" *) 3'h1;
  assign _1078_ = _1076_ ? (* hdlname = "datapathaftab csrcounter 5048" *) _1077_ : \datapathaftab.csraddressingdecoder.cntoutput ;
  assign _1079_ = \controlleraftab.ldcntcsr  ? (* hdlname = "datapathaftab csrcounter 5049" *) \controlleraftab.ldvaluecsr  : _1078_;
  assign _1062_ = \datapathaftab.csraddressingdecoder.cntoutput  == (* hdlname = "datapathaftab csrcounter 5058" *) 3'h7;
  assign \datapathaftab.csrcounter.cocntup  = _1062_ ? (* hdlname = "datapathaftab csrcounter 5059" *) 1'h1 : 1'h0;
  assign _1057_ = ! (* hdlname = "datapathaftab csrcounter 5063" *) \datapathaftab.csraddressingdecoder.cntoutput ;
  assign \datapathaftab.csrisl.regorimm  = \controlleraftab.selp1csr  ? (* hdlname = "datapathaftab csrisl 5131" *) \datapathaftab.csrisl.p1  : _1081_;
  assign _1081_ = \controlleraftab.selimmcsr  ? (* hdlname = "datapathaftab csrisl 5134" *) { 27'h0000000, \datapathaftab.m2wb_instr_curr [19:15] } : 32'd0;
  assign \datapathaftab.csrisl.orres  = \datapathaftab.csrisl.outcsr  | (* hdlname = "datapathaftab csrisl 5136" *) \datapathaftab.csrisl.regorimm ;
  assign _1082_ = ~ (* hdlname = "datapathaftab csrisl 5137" *) \datapathaftab.csrisl.regorimm ;
  assign \datapathaftab.csrisl.andres  = \datapathaftab.csrisl.outcsr  & (* hdlname = "datapathaftab csrisl 5138" *) _1082_;
  assign \datapathaftab.csrisl.preincsr  = \controlleraftab.selreadwritecsr  ? (* hdlname = "datapathaftab csrisl 5139" *) \datapathaftab.csrisl.regorimm  : _1083_;
  assign _1083_ = \controlleraftab.setcsr  ? (* hdlname = "datapathaftab csrisl 5140" *) \datapathaftab.csrisl.orres  : _1084_;
  assign _1084_ = \controlleraftab.clrcsr  ? (* hdlname = "datapathaftab csrisl 5141" *) \datapathaftab.csrisl.andres  : _1085_;
  assign _1085_ = \controlleraftab.selccmip_csr  ? (* hdlname = "datapathaftab csrisl 5142" *) \datapathaftab.csrisl.ccmip  : _1086_;
  assign _1086_ = \controlleraftab.selcause_csr  ? (* hdlname = "datapathaftab csrisl 5143" *) \datapathaftab.csrisl.causecode  : _1087_;
  assign _1087_ = \controlleraftab.selpc_csr  ? (* hdlname = "datapathaftab csrisl 5145" *) \datapathaftab.csr_pc  : _1088_;
  assign _1088_ = \controlleraftab.machinestatusalterationprecsr  ? (* hdlname = "datapathaftab csrisl 5158" *) { \datapathaftab.csrisl.outcsr [31:8], \datapathaftab.csrisl.outcsr [3], \datapathaftab.csrisl.outcsr [6:4], 1'h0, \datapathaftab.csrisl.outcsr [2:0] } : _1089_;
  assign _1089_ = \controlleraftab.userstatusalterationprecsr  ? (* hdlname = "datapathaftab csrisl 5166" *) { \datapathaftab.csrisl.outcsr [31:5], \datapathaftab.csrisl.outcsr [0], \datapathaftab.csrisl.outcsr [3:1], 1'h0 } : _1090_;
  assign _1090_ = \controlleraftab.machinestatusalterationpostcsr  ? (* hdlname = "datapathaftab csrisl 5176" *) { \datapathaftab.csrisl.outcsr [31:8], 1'h0, \datapathaftab.csrisl.outcsr [6:4], 1'h1, \datapathaftab.csrisl.outcsr [2:0] } : _1091_;
  assign _1091_ = \controlleraftab.userstatusalterationpostcsr  ? (* hdlname = "datapathaftab csrisl 5184" *) { \datapathaftab.csrisl.outcsr [31:5], 1'h0, \datapathaftab.csrisl.outcsr [3:1], 1'h1 } : 32'd0;
  assign _1092_ = \datapathaftab.csrisl.mirrorustatus  & (* hdlname = "datapathaftab csrisl 5188" *) \controlleraftab.mirrorusercu ;
  assign \datapathaftab.csrisl.incsr  = _1092_ ? (* hdlname = "datapathaftab csrisl 5189" *) { 27'h0000000, \datapathaftab.csrisl.preincsr [4], 3'h0, \datapathaftab.csrisl.preincsr [0] } : _1095_;
  assign _1093_ = \datapathaftab.csrisl.mirroruie  | (* hdlname = "datapathaftab csrisl 5192" *) \datapathaftab.csrisl.mirroruip ;
  assign _1094_ = _1093_ & (* hdlname = "datapathaftab csrisl 5193" *) \controlleraftab.mirrorusercu ;
  assign _1095_ = _1094_ ? (* hdlname = "datapathaftab csrisl 5194" *) { 23'h000000, \datapathaftab.csrisl.preincsr [8], 3'h0, \datapathaftab.csrisl.preincsr [4], 3'h0, \datapathaftab.csrisl.preincsr [0] } : \datapathaftab.csrisl.preincsr ;
  assign _1101_ = _1099_ ? (* hdlname = "datapathaftab daru1 controller 5542" *) 2'h2 : 2'h1;
  assign _1102_ = _1100_ ? (* hdlname = "datapathaftab daru1 controller 5544" *) 2'h1 : _1101_;
  assign _1097_ = \datapathaftab.daru1.controller.startdaru  ? (* hdlname = "datapathaftab daru1 controller 5553" *) 2'h1 : 2'h0;
  function [1:0] \datapathaftab.daru1.controller.5558 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* hdlname = "datapathaftab daru1 controller 5558" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \datapathaftab.daru1.controller.5558  = b[1:0];
      2'b1?:
        \datapathaftab.daru1.controller.5558  = b[3:2];
      default:
        \datapathaftab.daru1.controller.5558  = a;
    endcase
  endfunction
  assign \datapathaftab.daru1.controller.nstate  = \datapathaftab.daru1.controller.5558 (2'h0, { _1102_, _1097_ }, { _1103_, _0007_ });
  assign _1098_ = ! (* hdlname = "datapathaftab daru1 controller 5565" *) \datapathaftab.daru1.controller.pstate ;
  assign _1105_ = _1099_ ? (* hdlname = "datapathaftab daru1 controller 5574" *) 1'h1 : 1'h0;
  assign _1099_ = \datapathaftab.daru1.controller.cocnt  & (* hdlname = "datapathaftab daru1 controller 5575" *) memReady1;
  assign _1100_ = \datapathaftab.daru1.controller.startdaru  & (* hdlname = "datapathaftab daru1 controller 5576" *) _1099_;
  assign _1106_ = _1100_ ? (* hdlname = "datapathaftab daru1 controller 5586" *) \datapathaftab.daru1.controller.startdaru  : 1'h0;
  assign _1103_ = \datapathaftab.daru1.controller.pstate  == (* hdlname = "datapathaftab daru1 controller 5588" *) 2'h1;
  assign _1107_ = \datapathaftab.daru1.controller.startdaru  ? (* hdlname = "datapathaftab daru1 controller 5598" *) 1'h1 : 1'h0;
  assign _1104_ = \datapathaftab.daru1.controller.pstate  == (* hdlname = "datapathaftab daru1 controller 5600" *) 2'h2;
  function [0:0] \datapathaftab.daru1.controller.5606 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* hdlname = "datapathaftab daru1 controller 5606" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \datapathaftab.daru1.controller.5606  = b[0:0];
      3'b?1?:
        \datapathaftab.daru1.controller.5606  = b[1:1];
      3'b1??:
        \datapathaftab.daru1.controller.5606  = b[2:2];
      default:
        \datapathaftab.daru1.controller.5606  = a;
    endcase
  endfunction
  assign \datapathaftab.daru1.controller.initcnt  = \datapathaftab.daru1.controller.5606 (1'h0, { _1107_, _1106_, \datapathaftab.daru1.controller.startdaru  }, { _1104_, _1103_, _1098_ });
  assign \datapathaftab.daru1.controller.enabledata  = _1103_ ? (* hdlname = "datapathaftab daru1 controller 5624" *) memReady1 : 1'h0;
  assign \datapathaftab.daru1.controller.enableaddr  = _1103_ ? (* hdlname = "datapathaftab daru1 controller 5634" *) 1'h1 : 1'h0;
  assign \datapathaftab.daru1.controller.select_incoming_data  = _1103_ ? (* hdlname = "datapathaftab daru1 controller 5649" *) _1105_ : 1'h0;
  function [0:0] \datapathaftab.daru1.controller.5654 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "datapathaftab daru1 controller 5654" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \datapathaftab.daru1.controller.5654  = b[0:0];
      2'b1?:
        \datapathaftab.daru1.controller.5654  = b[1:1];
      default:
        \datapathaftab.daru1.controller.5654  = a;
    endcase
  endfunction
  assign \datapathaftab.completeddaru1  = \datapathaftab.daru1.controller.5654 (1'h0, { 1'h1, _1105_ }, { _1104_, _1103_ });
  assign _1109_ = ! (* hdlname = "datapathaftab daru1 datapath 5491" *) \datapathaftab.daru1.datapath.nbytereg.outreg ;
  assign \datapathaftab.daru1.datapath.bytestoread_temp  = _1109_ ? (* hdlname = "datapathaftab daru1 datapath 5492" *) 1'h0 : 1'h1;
  assign \datapathaftab.daru1.datapath.dataout [31:16] = \datapathaftab.daru1.controller.select_incoming_data  ? (* hdlname = "datapathaftab daru1 datapath 5500" *) \datapathaftab.daru1.datapath.datain  : \datapathaftab.daru1.datapath.dataouthigh_reg ;
  assign _1110_ = \datapathaftab.daru1.datapath.adder.fa2.b  == (* hdlname = "datapathaftab daru1 datapath 5503" *) \datapathaftab.daru1.datapath.bytestoread_temp ;
  assign \datapathaftab.daru1.controller.cocnt  = _1110_ ? (* hdlname = "datapathaftab daru1 datapath 5504" *) 1'h1 : 1'h0;
  assign \datapathaftab.daru1.datapath.datain  = \datapathaftab.daru1.controller.enabledata  ? memDataOut1 : 16'bz;
  assign \datapathaftab.daru1.datapath.addrout  = \datapathaftab.daru1.controller.enableaddr  ? { \datapathaftab.daru1.datapath.adder.gen_halfadder:30.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:29.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:28.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:27.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:26.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:25.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:24.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:23.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:22.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:21.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:20.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:19.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:18.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:17.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:16.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:15.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:14.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:13.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:12.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:11.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:10.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:9.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:8.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:7.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:6.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:5.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:4.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:3.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:2.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:1.ha.o_sum , \datapathaftab.daru1.datapath.adder.fa2.s , \datapathaftab.daru1.datapath.addrreg.outreg [0] } : 32'bz;
  assign \datapathaftab.daru1.datapath.adder.fa2.s  = \datapathaftab.daru1.datapath.addrreg.outreg [1] ^ (* hdlname = "datapathaftab daru1 datapath adder fa2 6569" *) \datapathaftab.daru1.datapath.adder.fa2.b ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:1.ha.i_bit2  = \datapathaftab.daru1.datapath.addrreg.outreg [1] & (* hdlname = "datapathaftab daru1 datapath adder fa2 6571" *) \datapathaftab.daru1.datapath.adder.fa2.b ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:1.ha.o_sum  = \datapathaftab.daru1.datapath.addrreg.outreg [2] ^ (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:1.ha 6578" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:1.ha.i_bit2 ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:1.ha.o_carry  = \datapathaftab.daru1.datapath.addrreg.outreg [2] & (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:1.ha 6579" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:1.ha.i_bit2 ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:10.ha.o_sum  = \datapathaftab.daru1.datapath.addrreg.outreg [11] ^ (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:10.ha 6578" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:10.ha.i_bit2 ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:10.ha.o_carry  = \datapathaftab.daru1.datapath.addrreg.outreg [11] & (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:10.ha 6579" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:10.ha.i_bit2 ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:11.ha.o_sum  = \datapathaftab.daru1.datapath.addrreg.outreg [12] ^ (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:11.ha 6578" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:10.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:11.ha.o_carry  = \datapathaftab.daru1.datapath.addrreg.outreg [12] & (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:11.ha 6579" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:10.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:12.ha.o_sum  = \datapathaftab.daru1.datapath.addrreg.outreg [13] ^ (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:12.ha 6578" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:11.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:12.ha.o_carry  = \datapathaftab.daru1.datapath.addrreg.outreg [13] & (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:12.ha 6579" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:11.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:13.ha.o_sum  = \datapathaftab.daru1.datapath.addrreg.outreg [14] ^ (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:13.ha 6578" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:12.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:13.ha.o_carry  = \datapathaftab.daru1.datapath.addrreg.outreg [14] & (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:13.ha 6579" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:12.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:14.ha.o_sum  = \datapathaftab.daru1.datapath.addrreg.outreg [15] ^ (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:14.ha 6578" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:13.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:14.ha.o_carry  = \datapathaftab.daru1.datapath.addrreg.outreg [15] & (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:14.ha 6579" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:13.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:15.ha.o_sum  = \datapathaftab.daru1.datapath.addrreg.outreg [16] ^ (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:15.ha 6578" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:14.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:15.ha.o_carry  = \datapathaftab.daru1.datapath.addrreg.outreg [16] & (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:15.ha 6579" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:14.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:16.ha.o_sum  = \datapathaftab.daru1.datapath.addrreg.outreg [17] ^ (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:16.ha 6578" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:15.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:16.ha.o_carry  = \datapathaftab.daru1.datapath.addrreg.outreg [17] & (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:16.ha 6579" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:15.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:17.ha.o_sum  = \datapathaftab.daru1.datapath.addrreg.outreg [18] ^ (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:17.ha 6578" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:16.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:17.ha.o_carry  = \datapathaftab.daru1.datapath.addrreg.outreg [18] & (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:17.ha 6579" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:16.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:18.ha.o_sum  = \datapathaftab.daru1.datapath.addrreg.outreg [19] ^ (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:18.ha 6578" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:17.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:18.ha.o_carry  = \datapathaftab.daru1.datapath.addrreg.outreg [19] & (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:18.ha 6579" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:17.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:19.ha.o_sum  = \datapathaftab.daru1.datapath.addrreg.outreg [20] ^ (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:19.ha 6578" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:18.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:19.ha.o_carry  = \datapathaftab.daru1.datapath.addrreg.outreg [20] & (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:19.ha 6579" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:18.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:2.ha.o_sum  = \datapathaftab.daru1.datapath.addrreg.outreg [3] ^ (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:2.ha 6578" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:1.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:2.ha.o_carry  = \datapathaftab.daru1.datapath.addrreg.outreg [3] & (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:2.ha 6579" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:1.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:20.ha.o_sum  = \datapathaftab.daru1.datapath.addrreg.outreg [21] ^ (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:20.ha 6578" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:19.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:20.ha.o_carry  = \datapathaftab.daru1.datapath.addrreg.outreg [21] & (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:20.ha 6579" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:19.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:21.ha.o_sum  = \datapathaftab.daru1.datapath.addrreg.outreg [22] ^ (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:21.ha 6578" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:20.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:21.ha.o_carry  = \datapathaftab.daru1.datapath.addrreg.outreg [22] & (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:21.ha 6579" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:20.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:22.ha.o_sum  = \datapathaftab.daru1.datapath.addrreg.outreg [23] ^ (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:22.ha 6578" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:21.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:22.ha.o_carry  = \datapathaftab.daru1.datapath.addrreg.outreg [23] & (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:22.ha 6579" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:21.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:23.ha.o_sum  = \datapathaftab.daru1.datapath.addrreg.outreg [24] ^ (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:23.ha 6578" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:22.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:23.ha.o_carry  = \datapathaftab.daru1.datapath.addrreg.outreg [24] & (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:23.ha 6579" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:22.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:24.ha.o_sum  = \datapathaftab.daru1.datapath.addrreg.outreg [25] ^ (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:24.ha 6578" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:23.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:24.ha.o_carry  = \datapathaftab.daru1.datapath.addrreg.outreg [25] & (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:24.ha 6579" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:23.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:25.ha.o_sum  = \datapathaftab.daru1.datapath.addrreg.outreg [26] ^ (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:25.ha 6578" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:24.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:25.ha.o_carry  = \datapathaftab.daru1.datapath.addrreg.outreg [26] & (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:25.ha 6579" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:24.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:26.ha.o_sum  = \datapathaftab.daru1.datapath.addrreg.outreg [27] ^ (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:26.ha 6578" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:25.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:26.ha.o_carry  = \datapathaftab.daru1.datapath.addrreg.outreg [27] & (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:26.ha 6579" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:25.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:27.ha.o_sum  = \datapathaftab.daru1.datapath.addrreg.outreg [28] ^ (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:27.ha 6578" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:26.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:27.ha.o_carry  = \datapathaftab.daru1.datapath.addrreg.outreg [28] & (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:27.ha 6579" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:26.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:28.ha.o_sum  = \datapathaftab.daru1.datapath.addrreg.outreg [29] ^ (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:28.ha 6578" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:27.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:28.ha.o_carry  = \datapathaftab.daru1.datapath.addrreg.outreg [29] & (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:28.ha 6579" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:27.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:29.ha.o_sum  = \datapathaftab.daru1.datapath.addrreg.outreg [30] ^ (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:29.ha 6578" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:28.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:29.ha.o_carry  = \datapathaftab.daru1.datapath.addrreg.outreg [30] & (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:29.ha 6579" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:28.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:3.ha.o_sum  = \datapathaftab.daru1.datapath.addrreg.outreg [4] ^ (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:3.ha 6578" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:2.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:3.ha.o_carry  = \datapathaftab.daru1.datapath.addrreg.outreg [4] & (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:3.ha 6579" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:2.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:30.ha.o_sum  = \datapathaftab.daru1.datapath.addrreg.outreg [31] ^ (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:30.ha 6578" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:29.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:4.ha.o_sum  = \datapathaftab.daru1.datapath.addrreg.outreg [5] ^ (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:4.ha 6578" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:3.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:4.ha.o_carry  = \datapathaftab.daru1.datapath.addrreg.outreg [5] & (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:4.ha 6579" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:3.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:5.ha.o_sum  = \datapathaftab.daru1.datapath.addrreg.outreg [6] ^ (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:5.ha 6578" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:4.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:5.ha.o_carry  = \datapathaftab.daru1.datapath.addrreg.outreg [6] & (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:5.ha 6579" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:4.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:6.ha.o_sum  = \datapathaftab.daru1.datapath.addrreg.outreg [7] ^ (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:6.ha 6578" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:5.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:6.ha.o_carry  = \datapathaftab.daru1.datapath.addrreg.outreg [7] & (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:6.ha 6579" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:5.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:7.ha.o_sum  = \datapathaftab.daru1.datapath.addrreg.outreg [8] ^ (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:7.ha 6578" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:6.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:7.ha.o_carry  = \datapathaftab.daru1.datapath.addrreg.outreg [8] & (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:7.ha 6579" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:6.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:8.ha.o_sum  = \datapathaftab.daru1.datapath.addrreg.outreg [9] ^ (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:8.ha 6578" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:7.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:8.ha.o_carry  = \datapathaftab.daru1.datapath.addrreg.outreg [9] & (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:8.ha 6579" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:7.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:9.ha.o_sum  = \datapathaftab.daru1.datapath.addrreg.outreg [10] ^ (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:9.ha 6578" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:8.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:10.ha.i_bit2  = \datapathaftab.daru1.datapath.addrreg.outreg [10] & (* hdlname = "datapathaftab daru1 datapath adder gen_halfadder:9.ha 6579" *) \datapathaftab.daru1.datapath.adder.gen_halfadder:8.ha.o_carry ;
  assign _1112_ = \datapathaftab.daru1.controller.initcnt  ? (* hdlname = "datapathaftab daru1 datapath addrreg 4067" *) \datapathaftab.daru1.datapath.addrreg.inreg  : \datapathaftab.daru1.datapath.addrreg.outreg ;
  assign _1114_ = ~ (* hdlname = "datapathaftab daru1 datapath counter 6168" *) \datapathaftab.daru1.datapath.counter.cocntp ;
  assign _1115_ = _1114_ & (* hdlname = "datapathaftab daru1 datapath counter 6169" *) \datapathaftab.daru1.controller.enabledata ;
  assign _1116_ = \datapathaftab.daru1.datapath.adder.fa2.b  + (* hdlname = "datapathaftab daru1 datapath counter 6171" *) 1'h1;
  assign _1117_ = _1115_ ? (* hdlname = "datapathaftab daru1 datapath counter 6172" *) _1116_ : \datapathaftab.daru1.datapath.adder.fa2.b ;
  assign \datapathaftab.daru1.datapath.counter.cocntp  = \datapathaftab.daru1.datapath.adder.fa2.b  ? (* hdlname = "datapathaftab daru1 datapath counter 6183" *) 1'h1 : 1'h0;
  assign _1118_ = ! (* hdlname = "datapathaftab daru1 datapath decoder 6134" *) { 1'h0, \datapathaftab.daru1.datapath.adder.fa2.b  };
  function [3:0] \datapathaftab.daru1.datapath.decoder.6147 ;
    input [3:0] a;
    input [7:0] b;
    input [1:0] s;
    (* hdlname = "datapathaftab daru1 datapath decoder 6147" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \datapathaftab.daru1.datapath.decoder.6147  = b[3:0];
      2'b1?:
        \datapathaftab.daru1.datapath.decoder.6147  = b[7:4];
      default:
        \datapathaftab.daru1.datapath.decoder.6147  = a;
    endcase
  endfunction
  assign _1119_ = \datapathaftab.daru1.datapath.decoder.6147 (4'h0, 8'h21, { \datapathaftab.daru1.datapath.adder.fa2.b , _1118_ });
  assign \datapathaftab.daru1.datapath.decoder.outdecoder  = \datapathaftab.daru1.controller.enabledata  ? (* hdlname = "datapathaftab daru1 datapath decoder 6149" *) _1119_ : 4'h0;
  assign _1120_ = \datapathaftab.daru1.datapath.addrreg.outreg [1:0] == (* hdlname = "datapathaftab daru1 datapath errordecoder 6336" *) 2'h1;
  assign \datapathaftab.daru1.datapath.errordecoder.cmp_01  = _1120_ ? (* hdlname = "datapathaftab daru1 datapath errordecoder 6337" *) 1'h1 : 1'h0;
  assign _1121_ = \datapathaftab.daru1.datapath.addrreg.outreg [1:0] == (* hdlname = "datapathaftab daru1 datapath errordecoder 6341" *) 2'h2;
  assign \datapathaftab.daru1.datapath.errordecoder.cmp_10  = _1121_ ? (* hdlname = "datapathaftab daru1 datapath errordecoder 6342" *) 1'h1 : 1'h0;
  assign _1122_ = \datapathaftab.daru1.datapath.addrreg.outreg [1:0] == (* hdlname = "datapathaftab daru1 datapath errordecoder 6346" *) 2'h3;
  assign \datapathaftab.daru1.datapath.errordecoder.cmp_11  = _1122_ ? (* hdlname = "datapathaftab daru1 datapath errordecoder 6347" *) 1'h1 : 1'h0;
  assign _1123_ = \datapathaftab.daru1.datapath.errordecoder.cmp_01  | (* hdlname = "datapathaftab daru1 datapath errordecoder 6353" *) \datapathaftab.daru1.datapath.errordecoder.cmp_10 ;
  assign \datapathaftab.gi2d_ex_flag_next  = _1123_ | (* hdlname = "datapathaftab daru1 datapath errordecoder 6354" *) \datapathaftab.daru1.datapath.errordecoder.cmp_11 ;
  assign _1125_ = \datapathaftab.daru1.controller.initcnt  ? (* hdlname = "datapathaftab daru1 datapath nbytereg 6155" *) 2'h3 : \datapathaftab.daru1.datapath.nbytereg.outreg ;
  assign _1127_ = \datapathaftab.daru1.datapath.decoder.outdecoder [0] ? (* hdlname = "datapathaftab daru1 datapath reg0 6190" *) \datapathaftab.daru1.datapath.datain  : \datapathaftab.daru1.datapath.reg0.outreg ;
  assign _1129_ = \datapathaftab.daru1.datapath.decoder.outdecoder [1] ? (* hdlname = "datapathaftab daru1 datapath reg1 6190" *) \datapathaftab.daru1.datapath.datain  : \datapathaftab.daru1.datapath.dataouthigh_reg ;
  assign _1131_ = \datapathaftab.daru2.controller.startdaru  ? (* hdlname = "datapathaftab daru2 controller 5532" *) 2'h1 : 2'h0;
  assign _1134_ = _1133_ ? (* hdlname = "datapathaftab daru2 controller 5542" *) 2'h2 : 2'h1;
  function [1:0] \datapathaftab.daru2.controller.5558 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* hdlname = "datapathaftab daru2 controller 5558" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \datapathaftab.daru2.controller.5558  = b[1:0];
      3'b?1?:
        \datapathaftab.daru2.controller.5558  = b[3:2];
      3'b1??:
        \datapathaftab.daru2.controller.5558  = b[5:4];
      default:
        \datapathaftab.daru2.controller.5558  = a;
    endcase
  endfunction
  assign \datapathaftab.daru2.controller.nstate  = \datapathaftab.daru2.controller.5558 (2'h0, { 2'h2, _1134_, _1131_ }, { _1136_, _1135_, _1132_ });
  assign _1132_ = ! (* hdlname = "datapathaftab daru2 controller 5565" *) \datapathaftab.daru2.controller.pstate ;
  assign _1133_ = \datapathaftab.daru2.controller.cocnt  & (* hdlname = "datapathaftab daru2 controller 5575" *) memReady2;
  assign _1135_ = \datapathaftab.daru2.controller.pstate  == (* hdlname = "datapathaftab daru2 controller 5588" *) 2'h1;
  assign _1136_ = \datapathaftab.daru2.controller.pstate  == (* hdlname = "datapathaftab daru2 controller 5600" *) 2'h2;
  assign \datapathaftab.daru2.controller.initcnt  = _1132_ ? (* hdlname = "datapathaftab daru2 controller 5606" *) \datapathaftab.daru2.controller.startdaru  : 1'h0;
  assign \datapathaftab.daru2.controller.enabledata  = _1135_ ? (* hdlname = "datapathaftab daru2 controller 5624" *) memReady2 : 1'h0;
  assign \datapathaftab.daru2.controller.enableaddr  = _1135_ ? (* hdlname = "datapathaftab daru2 controller 5634" *) 1'h1 : 1'h0;
  assign \datapathaftab.completeddaru2  = _1136_ ? (* hdlname = "datapathaftab daru2 controller 5654" *) 1'h1 : 1'h0;
  assign _1138_ = ! (* hdlname = "datapathaftab daru2 datapath 5491" *) \datapathaftab.daru2.datapath.nbytereg.outreg ;
  assign \datapathaftab.bytespermemaccessdaru  = _1138_ ? (* hdlname = "datapathaftab daru2 datapath 5492" *) 1'h0 : 1'h1;
  assign _1139_ = \datapathaftab.daru2.datapath.adder.fa2.b  == (* hdlname = "datapathaftab daru2 datapath 5503" *) \datapathaftab.bytespermemaccessdaru ;
  assign \datapathaftab.daru2.controller.cocnt  = _1139_ ? (* hdlname = "datapathaftab daru2 datapath 5504" *) 1'h1 : 1'h0;
  assign \datapathaftab.daru2.datapath.datain  = \datapathaftab.daru2.controller.enabledata  ? memDataOut2 : 16'bz;
  assign \datapathaftab.daru2.datapath.addrout  = \datapathaftab.daru2.controller.enableaddr  ? { \datapathaftab.daru2.datapath.adder.gen_halfadder:30.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:29.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:28.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:27.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:26.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:25.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:24.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:23.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:22.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:21.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:20.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:19.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:18.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:17.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:16.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:15.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:14.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:13.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:12.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:11.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:10.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:9.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:8.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:7.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:6.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:5.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:4.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:3.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:2.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:1.ha.o_sum , \datapathaftab.daru2.datapath.adder.fa2.s , \datapathaftab.daru2.datapath.addrreg.outreg [0] } : 32'bz;
  assign \datapathaftab.daru2.datapath.adder.fa2.s  = \datapathaftab.daru2.datapath.addrreg.outreg [1] ^ (* hdlname = "datapathaftab daru2 datapath adder fa2 6569" *) \datapathaftab.daru2.datapath.adder.fa2.b ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:1.ha.i_bit2  = \datapathaftab.daru2.datapath.addrreg.outreg [1] & (* hdlname = "datapathaftab daru2 datapath adder fa2 6571" *) \datapathaftab.daru2.datapath.adder.fa2.b ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:1.ha.o_sum  = \datapathaftab.daru2.datapath.addrreg.outreg [2] ^ (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:1.ha 6578" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:1.ha.i_bit2 ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:1.ha.o_carry  = \datapathaftab.daru2.datapath.addrreg.outreg [2] & (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:1.ha 6579" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:1.ha.i_bit2 ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:10.ha.o_sum  = \datapathaftab.daru2.datapath.addrreg.outreg [11] ^ (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:10.ha 6578" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:10.ha.i_bit2 ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:10.ha.o_carry  = \datapathaftab.daru2.datapath.addrreg.outreg [11] & (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:10.ha 6579" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:10.ha.i_bit2 ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:11.ha.o_sum  = \datapathaftab.daru2.datapath.addrreg.outreg [12] ^ (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:11.ha 6578" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:10.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:11.ha.o_carry  = \datapathaftab.daru2.datapath.addrreg.outreg [12] & (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:11.ha 6579" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:10.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:12.ha.o_sum  = \datapathaftab.daru2.datapath.addrreg.outreg [13] ^ (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:12.ha 6578" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:11.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:12.ha.o_carry  = \datapathaftab.daru2.datapath.addrreg.outreg [13] & (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:12.ha 6579" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:11.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:13.ha.o_sum  = \datapathaftab.daru2.datapath.addrreg.outreg [14] ^ (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:13.ha 6578" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:12.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:13.ha.o_carry  = \datapathaftab.daru2.datapath.addrreg.outreg [14] & (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:13.ha 6579" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:12.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:14.ha.o_sum  = \datapathaftab.daru2.datapath.addrreg.outreg [15] ^ (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:14.ha 6578" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:13.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:14.ha.o_carry  = \datapathaftab.daru2.datapath.addrreg.outreg [15] & (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:14.ha 6579" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:13.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:15.ha.o_sum  = \datapathaftab.daru2.datapath.addrreg.outreg [16] ^ (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:15.ha 6578" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:14.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:15.ha.o_carry  = \datapathaftab.daru2.datapath.addrreg.outreg [16] & (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:15.ha 6579" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:14.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:16.ha.o_sum  = \datapathaftab.daru2.datapath.addrreg.outreg [17] ^ (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:16.ha 6578" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:15.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:16.ha.o_carry  = \datapathaftab.daru2.datapath.addrreg.outreg [17] & (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:16.ha 6579" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:15.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:17.ha.o_sum  = \datapathaftab.daru2.datapath.addrreg.outreg [18] ^ (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:17.ha 6578" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:16.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:17.ha.o_carry  = \datapathaftab.daru2.datapath.addrreg.outreg [18] & (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:17.ha 6579" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:16.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:18.ha.o_sum  = \datapathaftab.daru2.datapath.addrreg.outreg [19] ^ (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:18.ha 6578" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:17.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:18.ha.o_carry  = \datapathaftab.daru2.datapath.addrreg.outreg [19] & (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:18.ha 6579" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:17.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:19.ha.o_sum  = \datapathaftab.daru2.datapath.addrreg.outreg [20] ^ (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:19.ha 6578" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:18.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:19.ha.o_carry  = \datapathaftab.daru2.datapath.addrreg.outreg [20] & (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:19.ha 6579" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:18.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:2.ha.o_sum  = \datapathaftab.daru2.datapath.addrreg.outreg [3] ^ (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:2.ha 6578" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:1.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:2.ha.o_carry  = \datapathaftab.daru2.datapath.addrreg.outreg [3] & (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:2.ha 6579" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:1.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:20.ha.o_sum  = \datapathaftab.daru2.datapath.addrreg.outreg [21] ^ (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:20.ha 6578" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:19.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:20.ha.o_carry  = \datapathaftab.daru2.datapath.addrreg.outreg [21] & (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:20.ha 6579" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:19.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:21.ha.o_sum  = \datapathaftab.daru2.datapath.addrreg.outreg [22] ^ (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:21.ha 6578" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:20.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:21.ha.o_carry  = \datapathaftab.daru2.datapath.addrreg.outreg [22] & (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:21.ha 6579" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:20.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:22.ha.o_sum  = \datapathaftab.daru2.datapath.addrreg.outreg [23] ^ (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:22.ha 6578" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:21.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:22.ha.o_carry  = \datapathaftab.daru2.datapath.addrreg.outreg [23] & (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:22.ha 6579" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:21.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:23.ha.o_sum  = \datapathaftab.daru2.datapath.addrreg.outreg [24] ^ (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:23.ha 6578" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:22.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:23.ha.o_carry  = \datapathaftab.daru2.datapath.addrreg.outreg [24] & (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:23.ha 6579" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:22.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:24.ha.o_sum  = \datapathaftab.daru2.datapath.addrreg.outreg [25] ^ (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:24.ha 6578" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:23.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:24.ha.o_carry  = \datapathaftab.daru2.datapath.addrreg.outreg [25] & (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:24.ha 6579" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:23.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:25.ha.o_sum  = \datapathaftab.daru2.datapath.addrreg.outreg [26] ^ (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:25.ha 6578" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:24.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:25.ha.o_carry  = \datapathaftab.daru2.datapath.addrreg.outreg [26] & (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:25.ha 6579" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:24.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:26.ha.o_sum  = \datapathaftab.daru2.datapath.addrreg.outreg [27] ^ (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:26.ha 6578" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:25.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:26.ha.o_carry  = \datapathaftab.daru2.datapath.addrreg.outreg [27] & (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:26.ha 6579" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:25.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:27.ha.o_sum  = \datapathaftab.daru2.datapath.addrreg.outreg [28] ^ (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:27.ha 6578" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:26.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:27.ha.o_carry  = \datapathaftab.daru2.datapath.addrreg.outreg [28] & (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:27.ha 6579" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:26.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:28.ha.o_sum  = \datapathaftab.daru2.datapath.addrreg.outreg [29] ^ (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:28.ha 6578" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:27.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:28.ha.o_carry  = \datapathaftab.daru2.datapath.addrreg.outreg [29] & (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:28.ha 6579" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:27.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:29.ha.o_sum  = \datapathaftab.daru2.datapath.addrreg.outreg [30] ^ (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:29.ha 6578" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:28.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:29.ha.o_carry  = \datapathaftab.daru2.datapath.addrreg.outreg [30] & (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:29.ha 6579" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:28.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:3.ha.o_sum  = \datapathaftab.daru2.datapath.addrreg.outreg [4] ^ (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:3.ha 6578" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:2.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:3.ha.o_carry  = \datapathaftab.daru2.datapath.addrreg.outreg [4] & (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:3.ha 6579" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:2.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:30.ha.o_sum  = \datapathaftab.daru2.datapath.addrreg.outreg [31] ^ (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:30.ha 6578" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:29.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:4.ha.o_sum  = \datapathaftab.daru2.datapath.addrreg.outreg [5] ^ (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:4.ha 6578" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:3.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:4.ha.o_carry  = \datapathaftab.daru2.datapath.addrreg.outreg [5] & (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:4.ha 6579" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:3.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:5.ha.o_sum  = \datapathaftab.daru2.datapath.addrreg.outreg [6] ^ (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:5.ha 6578" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:4.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:5.ha.o_carry  = \datapathaftab.daru2.datapath.addrreg.outreg [6] & (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:5.ha 6579" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:4.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:6.ha.o_sum  = \datapathaftab.daru2.datapath.addrreg.outreg [7] ^ (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:6.ha 6578" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:5.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:6.ha.o_carry  = \datapathaftab.daru2.datapath.addrreg.outreg [7] & (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:6.ha 6579" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:5.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:7.ha.o_sum  = \datapathaftab.daru2.datapath.addrreg.outreg [8] ^ (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:7.ha 6578" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:6.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:7.ha.o_carry  = \datapathaftab.daru2.datapath.addrreg.outreg [8] & (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:7.ha 6579" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:6.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:8.ha.o_sum  = \datapathaftab.daru2.datapath.addrreg.outreg [9] ^ (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:8.ha 6578" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:7.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:8.ha.o_carry  = \datapathaftab.daru2.datapath.addrreg.outreg [9] & (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:8.ha 6579" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:7.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:9.ha.o_sum  = \datapathaftab.daru2.datapath.addrreg.outreg [10] ^ (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:9.ha 6578" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:8.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:10.ha.i_bit2  = \datapathaftab.daru2.datapath.addrreg.outreg [10] & (* hdlname = "datapathaftab daru2 datapath adder gen_halfadder:9.ha 6579" *) \datapathaftab.daru2.datapath.adder.gen_halfadder:8.ha.o_carry ;
  assign _1141_ = \datapathaftab.daru2.controller.initcnt  ? (* hdlname = "datapathaftab daru2 datapath addrreg 4067" *) \datapathaftab.daru2.datapath.addrreg.inreg  : \datapathaftab.daru2.datapath.addrreg.outreg ;
  assign _1143_ = ~ (* hdlname = "datapathaftab daru2 datapath counter 6168" *) \datapathaftab.daru2.datapath.counter.cocntp ;
  assign _1144_ = _1143_ & (* hdlname = "datapathaftab daru2 datapath counter 6169" *) \datapathaftab.daru2.controller.enabledata ;
  assign _1145_ = \datapathaftab.daru2.datapath.adder.fa2.b  + (* hdlname = "datapathaftab daru2 datapath counter 6171" *) 1'h1;
  assign _1146_ = _1144_ ? (* hdlname = "datapathaftab daru2 datapath counter 6172" *) _1145_ : \datapathaftab.daru2.datapath.adder.fa2.b ;
  assign \datapathaftab.daru2.datapath.counter.cocntp  = \datapathaftab.daru2.datapath.adder.fa2.b  ? (* hdlname = "datapathaftab daru2 datapath counter 6183" *) 1'h1 : 1'h0;
  assign _1147_ = ! (* hdlname = "datapathaftab daru2 datapath decoder 6134" *) { 1'h0, \datapathaftab.daru2.datapath.adder.fa2.b  };
  function [3:0] \datapathaftab.daru2.datapath.decoder.6147 ;
    input [3:0] a;
    input [7:0] b;
    input [1:0] s;
    (* hdlname = "datapathaftab daru2 datapath decoder 6147" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \datapathaftab.daru2.datapath.decoder.6147  = b[3:0];
      2'b1?:
        \datapathaftab.daru2.datapath.decoder.6147  = b[7:4];
      default:
        \datapathaftab.daru2.datapath.decoder.6147  = a;
    endcase
  endfunction
  assign _1148_ = \datapathaftab.daru2.datapath.decoder.6147 (4'h0, 8'h21, { \datapathaftab.daru2.datapath.adder.fa2.b , _1147_ });
  assign \datapathaftab.daru2.datapath.decoder.outdecoder  = \datapathaftab.daru2.controller.enabledata  ? (* hdlname = "datapathaftab daru2 datapath decoder 6149" *) _1148_ : 4'h0;
  assign _1150_ = \datapathaftab.daru2.controller.initcnt  ? (* hdlname = "datapathaftab daru2 datapath nbytereg 6155" *) \datapathaftab.e2m_ctrl_word_curr [44:43] : \datapathaftab.daru2.datapath.nbytereg.outreg ;
  assign _1152_ = \datapathaftab.daru2.datapath.decoder.outdecoder [0] ? (* hdlname = "datapathaftab daru2 datapath reg0 6190" *) \datapathaftab.daru2.datapath.datain  : \datapathaftab.daru2.datapath.reg0.outreg ;
  assign _1154_ = \datapathaftab.daru2.datapath.decoder.outdecoder [1] ? (* hdlname = "datapathaftab daru2 datapath reg1 6190" *) \datapathaftab.daru2.datapath.datain  : \datapathaftab.daru2.datapath.reg1.outreg ;
  assign _1159_ = _1158_ ? (* hdlname = "datapathaftab dawu controller 6031" *) 1'h0 : 1'h1;
  function [0:0] \datapathaftab.dawu.controller.6036 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "datapathaftab dawu controller 6036" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \datapathaftab.dawu.controller.6036  = b[0:0];
      2'b1?:
        \datapathaftab.dawu.controller.6036  = b[1:1];
      default:
        \datapathaftab.dawu.controller.6036  = a;
    endcase
  endfunction
  assign \datapathaftab.dawu.controller.nstate  = \datapathaftab.dawu.controller.6036 (1'h0, { _1159_, _1156_ }, { \datapathaftab.dawu.controller.pstate , _1157_ });
  assign _1156_ = \datapathaftab.dawu.controller.startdawu  ? (* hdlname = "datapathaftab dawu controller 6052" *) 1'h1 : 1'h0;
  assign _1157_ = ~ (* hdlname = "datapathaftab dawu controller 6054" *) \datapathaftab.dawu.controller.pstate ;
  assign _1160_ = memReady2 ? (* hdlname = "datapathaftab dawu controller 6057" *) 1'h1 : 1'h0;
  assign _1158_ = memReady2 & (* hdlname = "datapathaftab dawu controller 6058" *) \datapathaftab.dawu.controller.cocnt ;
  assign _1161_ = _1158_ ? (* hdlname = "datapathaftab dawu controller 6061" *) 1'h1 : 1'h0;
  assign \datapathaftab.dawu.controller.inccnt  = \datapathaftab.dawu.controller.pstate  ? (* hdlname = "datapathaftab dawu controller 6081" *) _1160_ : 1'h0;
  assign \datapathaftab.dawu.controller.initcnt  = \datapathaftab.dawu.controller.pstate  ? (* hdlname = "datapathaftab dawu controller 6093" *) 1'h0 : _1156_;
  assign \datapathaftab.dawu.controller.enableaddr  = \datapathaftab.dawu.controller.pstate  ? (* hdlname = "datapathaftab dawu controller 6114" *) 1'h1 : 1'h0;
  assign \datapathaftab.completeddawu  = \datapathaftab.dawu.controller.pstate  ? (* hdlname = "datapathaftab dawu controller 6118" *) _1161_ : 1'h0;
  assign _1162_ = ! (* hdlname = "datapathaftab dawu datapath 5974" *) \datapathaftab.dawu.datapath.nbytesout ;
  assign \datapathaftab.bytespermemaccessdawu  = _1162_ ? (* hdlname = "datapathaftab dawu datapath 5975" *) 1'h0 : 1'h1;
  assign _1163_ = \datapathaftab.dawu.datapath.nbytesout  != (* hdlname = "datapathaftab dawu datapath 5979" *) 2'h3;
  assign \datapathaftab.dawu.datapath.totalbytecnt  = _1163_ ? (* hdlname = "datapathaftab dawu datapath 5980" *) 1'h0 : 1'h1;
  assign \datapathaftab.dawu.datapath.muxout  = \datapathaftab.dawu.datapath.adder.fa2.b  ? (* hdlname = "datapathaftab dawu datapath 5994" *) \datapathaftab.dawu.datapath.outreg1  : \datapathaftab.dawu.datapath.outreg0 ;
  assign _1164_ = \datapathaftab.dawu.datapath.adder.fa2.b  == (* hdlname = "datapathaftab dawu datapath 5996" *) \datapathaftab.dawu.datapath.totalbytecnt ;
  assign \datapathaftab.dawu.controller.cocnt  = _1164_ ? (* hdlname = "datapathaftab dawu datapath 5997" *) 1'h1 : 1'h0;
  assign \datapathaftab.dawu.datapath.dataout  = \datapathaftab.dawu.controller.enableaddr  ? \datapathaftab.dawu.datapath.muxout  : 16'bz;
  assign \datapathaftab.dawu.datapath.addrout  = \datapathaftab.dawu.controller.enableaddr  ? { \datapathaftab.dawu.datapath.adder.gen_halfadder:30.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:29.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:28.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:27.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:26.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:25.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:24.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:23.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:22.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:21.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:20.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:19.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:18.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:17.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:16.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:15.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:14.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:13.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:12.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:11.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:10.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:9.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:8.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:7.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:6.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:5.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:4.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:3.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:2.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:1.ha.o_sum , \datapathaftab.dawu.datapath.adder.fa2.s , \datapathaftab.dawu.datapath.addrreg.outreg [0] } : 32'bz;
  assign \datapathaftab.dawu.datapath.adder.fa2.s  = \datapathaftab.dawu.datapath.addrreg.outreg [1] ^ (* hdlname = "datapathaftab dawu datapath adder fa2 6569" *) \datapathaftab.dawu.datapath.adder.fa2.b ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:1.ha.i_bit2  = \datapathaftab.dawu.datapath.addrreg.outreg [1] & (* hdlname = "datapathaftab dawu datapath adder fa2 6571" *) \datapathaftab.dawu.datapath.adder.fa2.b ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:1.ha.o_sum  = \datapathaftab.dawu.datapath.addrreg.outreg [2] ^ (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:1.ha 6578" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:1.ha.i_bit2 ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:1.ha.o_carry  = \datapathaftab.dawu.datapath.addrreg.outreg [2] & (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:1.ha 6579" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:1.ha.i_bit2 ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:10.ha.o_sum  = \datapathaftab.dawu.datapath.addrreg.outreg [11] ^ (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:10.ha 6578" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:10.ha.i_bit2 ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:10.ha.o_carry  = \datapathaftab.dawu.datapath.addrreg.outreg [11] & (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:10.ha 6579" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:10.ha.i_bit2 ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:11.ha.o_sum  = \datapathaftab.dawu.datapath.addrreg.outreg [12] ^ (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:11.ha 6578" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:10.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:11.ha.o_carry  = \datapathaftab.dawu.datapath.addrreg.outreg [12] & (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:11.ha 6579" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:10.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:12.ha.o_sum  = \datapathaftab.dawu.datapath.addrreg.outreg [13] ^ (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:12.ha 6578" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:11.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:12.ha.o_carry  = \datapathaftab.dawu.datapath.addrreg.outreg [13] & (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:12.ha 6579" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:11.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:13.ha.o_sum  = \datapathaftab.dawu.datapath.addrreg.outreg [14] ^ (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:13.ha 6578" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:12.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:13.ha.o_carry  = \datapathaftab.dawu.datapath.addrreg.outreg [14] & (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:13.ha 6579" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:12.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:14.ha.o_sum  = \datapathaftab.dawu.datapath.addrreg.outreg [15] ^ (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:14.ha 6578" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:13.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:14.ha.o_carry  = \datapathaftab.dawu.datapath.addrreg.outreg [15] & (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:14.ha 6579" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:13.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:15.ha.o_sum  = \datapathaftab.dawu.datapath.addrreg.outreg [16] ^ (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:15.ha 6578" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:14.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:15.ha.o_carry  = \datapathaftab.dawu.datapath.addrreg.outreg [16] & (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:15.ha 6579" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:14.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:16.ha.o_sum  = \datapathaftab.dawu.datapath.addrreg.outreg [17] ^ (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:16.ha 6578" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:15.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:16.ha.o_carry  = \datapathaftab.dawu.datapath.addrreg.outreg [17] & (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:16.ha 6579" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:15.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:17.ha.o_sum  = \datapathaftab.dawu.datapath.addrreg.outreg [18] ^ (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:17.ha 6578" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:16.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:17.ha.o_carry  = \datapathaftab.dawu.datapath.addrreg.outreg [18] & (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:17.ha 6579" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:16.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:18.ha.o_sum  = \datapathaftab.dawu.datapath.addrreg.outreg [19] ^ (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:18.ha 6578" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:17.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:18.ha.o_carry  = \datapathaftab.dawu.datapath.addrreg.outreg [19] & (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:18.ha 6579" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:17.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:19.ha.o_sum  = \datapathaftab.dawu.datapath.addrreg.outreg [20] ^ (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:19.ha 6578" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:18.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:19.ha.o_carry  = \datapathaftab.dawu.datapath.addrreg.outreg [20] & (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:19.ha 6579" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:18.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:2.ha.o_sum  = \datapathaftab.dawu.datapath.addrreg.outreg [3] ^ (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:2.ha 6578" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:1.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:2.ha.o_carry  = \datapathaftab.dawu.datapath.addrreg.outreg [3] & (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:2.ha 6579" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:1.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:20.ha.o_sum  = \datapathaftab.dawu.datapath.addrreg.outreg [21] ^ (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:20.ha 6578" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:19.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:20.ha.o_carry  = \datapathaftab.dawu.datapath.addrreg.outreg [21] & (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:20.ha 6579" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:19.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:21.ha.o_sum  = \datapathaftab.dawu.datapath.addrreg.outreg [22] ^ (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:21.ha 6578" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:20.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:21.ha.o_carry  = \datapathaftab.dawu.datapath.addrreg.outreg [22] & (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:21.ha 6579" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:20.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:22.ha.o_sum  = \datapathaftab.dawu.datapath.addrreg.outreg [23] ^ (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:22.ha 6578" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:21.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:22.ha.o_carry  = \datapathaftab.dawu.datapath.addrreg.outreg [23] & (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:22.ha 6579" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:21.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:23.ha.o_sum  = \datapathaftab.dawu.datapath.addrreg.outreg [24] ^ (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:23.ha 6578" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:22.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:23.ha.o_carry  = \datapathaftab.dawu.datapath.addrreg.outreg [24] & (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:23.ha 6579" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:22.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:24.ha.o_sum  = \datapathaftab.dawu.datapath.addrreg.outreg [25] ^ (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:24.ha 6578" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:23.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:24.ha.o_carry  = \datapathaftab.dawu.datapath.addrreg.outreg [25] & (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:24.ha 6579" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:23.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:25.ha.o_sum  = \datapathaftab.dawu.datapath.addrreg.outreg [26] ^ (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:25.ha 6578" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:24.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:25.ha.o_carry  = \datapathaftab.dawu.datapath.addrreg.outreg [26] & (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:25.ha 6579" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:24.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:26.ha.o_sum  = \datapathaftab.dawu.datapath.addrreg.outreg [27] ^ (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:26.ha 6578" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:25.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:26.ha.o_carry  = \datapathaftab.dawu.datapath.addrreg.outreg [27] & (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:26.ha 6579" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:25.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:27.ha.o_sum  = \datapathaftab.dawu.datapath.addrreg.outreg [28] ^ (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:27.ha 6578" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:26.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:27.ha.o_carry  = \datapathaftab.dawu.datapath.addrreg.outreg [28] & (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:27.ha 6579" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:26.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:28.ha.o_sum  = \datapathaftab.dawu.datapath.addrreg.outreg [29] ^ (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:28.ha 6578" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:27.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:28.ha.o_carry  = \datapathaftab.dawu.datapath.addrreg.outreg [29] & (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:28.ha 6579" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:27.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:29.ha.o_sum  = \datapathaftab.dawu.datapath.addrreg.outreg [30] ^ (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:29.ha 6578" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:28.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:29.ha.o_carry  = \datapathaftab.dawu.datapath.addrreg.outreg [30] & (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:29.ha 6579" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:28.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:3.ha.o_sum  = \datapathaftab.dawu.datapath.addrreg.outreg [4] ^ (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:3.ha 6578" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:2.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:3.ha.o_carry  = \datapathaftab.dawu.datapath.addrreg.outreg [4] & (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:3.ha 6579" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:2.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:30.ha.o_sum  = \datapathaftab.dawu.datapath.addrreg.outreg [31] ^ (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:30.ha 6578" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:29.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:4.ha.o_sum  = \datapathaftab.dawu.datapath.addrreg.outreg [5] ^ (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:4.ha 6578" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:3.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:4.ha.o_carry  = \datapathaftab.dawu.datapath.addrreg.outreg [5] & (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:4.ha 6579" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:3.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:5.ha.o_sum  = \datapathaftab.dawu.datapath.addrreg.outreg [6] ^ (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:5.ha 6578" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:4.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:5.ha.o_carry  = \datapathaftab.dawu.datapath.addrreg.outreg [6] & (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:5.ha 6579" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:4.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:6.ha.o_sum  = \datapathaftab.dawu.datapath.addrreg.outreg [7] ^ (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:6.ha 6578" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:5.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:6.ha.o_carry  = \datapathaftab.dawu.datapath.addrreg.outreg [7] & (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:6.ha 6579" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:5.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:7.ha.o_sum  = \datapathaftab.dawu.datapath.addrreg.outreg [8] ^ (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:7.ha 6578" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:6.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:7.ha.o_carry  = \datapathaftab.dawu.datapath.addrreg.outreg [8] & (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:7.ha 6579" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:6.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:8.ha.o_sum  = \datapathaftab.dawu.datapath.addrreg.outreg [9] ^ (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:8.ha 6578" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:7.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:8.ha.o_carry  = \datapathaftab.dawu.datapath.addrreg.outreg [9] & (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:8.ha 6579" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:7.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:9.ha.o_sum  = \datapathaftab.dawu.datapath.addrreg.outreg [10] ^ (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:9.ha 6578" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:8.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:10.ha.i_bit2  = \datapathaftab.dawu.datapath.addrreg.outreg [10] & (* hdlname = "datapathaftab dawu datapath adder gen_halfadder:9.ha 6579" *) \datapathaftab.dawu.datapath.adder.gen_halfadder:8.ha.o_carry ;
  assign _1166_ = \datapathaftab.dawu.controller.initcnt  ? (* hdlname = "datapathaftab dawu datapath addrreg 4067" *) \datapathaftab.daru2.datapath.addrreg.inreg  : \datapathaftab.dawu.datapath.addrreg.outreg ;
  assign _1168_ = ~ (* hdlname = "datapathaftab dawu datapath counter 6168" *) \datapathaftab.dawu.datapath.counter.cocntp ;
  assign _1169_ = _1168_ & (* hdlname = "datapathaftab dawu datapath counter 6169" *) \datapathaftab.dawu.controller.inccnt ;
  assign _1170_ = \datapathaftab.dawu.datapath.adder.fa2.b  + (* hdlname = "datapathaftab dawu datapath counter 6171" *) 1'h1;
  assign _1171_ = _1169_ ? (* hdlname = "datapathaftab dawu datapath counter 6172" *) _1170_ : \datapathaftab.dawu.datapath.adder.fa2.b ;
  assign \datapathaftab.dawu.datapath.counter.cocntp  = \datapathaftab.dawu.datapath.adder.fa2.b  ? (* hdlname = "datapathaftab dawu datapath counter 6183" *) 1'h1 : 1'h0;
  assign _1173_ = \datapathaftab.dawu.controller.initcnt  ? (* hdlname = "datapathaftab dawu datapath nbytesreg 6155" *) \datapathaftab.e2m_ctrl_word_curr [44:43] : \datapathaftab.dawu.datapath.nbytesout ;
  assign _1175_ = \datapathaftab.dawu.controller.initcnt  ? (* hdlname = "datapathaftab dawu datapath reg0 6190" *) \datapathaftab.e2m_op2_curr [15:0] : \datapathaftab.dawu.datapath.outreg0 ;
  assign _1177_ = \datapathaftab.dawu.controller.initcnt  ? (* hdlname = "datapathaftab dawu datapath reg1 6190" *) \datapathaftab.e2m_op2_curr [31:16] : \datapathaftab.dawu.datapath.outreg1 ;
  assign \datapathaftab.i4pc.add  = { 1'h0, \datapathaftab.daru1.datapath.addrreg.inreg  } + (* hdlname = "datapathaftab i4pc 4081" *) 33'h000000004;
  assign \datapathaftab.immselsignex.imm [0] = \controlleraftab.muxcode [0] ? (* hdlname = "datapathaftab immselsignex 4121" *) \controlleraftab.ir [20] : _1178_;
  assign _1178_ = \controlleraftab.muxcode [1] ? (* hdlname = "datapathaftab immselsignex 4122" *) \datapathaftab.gi2d_instr_curr [7] : 1'h0;
  assign \datapathaftab.immselsignex.imm [4:1] = \controlleraftab.muxcode [3] ? (* hdlname = "datapathaftab immselsignex 4126" *) \controlleraftab.ir [24:21] : _1179_;
  assign _1179_ = \controlleraftab.muxcode [4] ? (* hdlname = "datapathaftab immselsignex 4127" *) \datapathaftab.gi2d_instr_curr [11:8] : 4'h0;
  assign \datapathaftab.immselsignex.imm [10:5] = \controlleraftab.muxcode [6] ? (* hdlname = "datapathaftab immselsignex 4131" *) \controlleraftab.ir [30:25] : 6'h00;
  assign \datapathaftab.immselsignex.imm [11] = \controlleraftab.muxcode [7] ? (* hdlname = "datapathaftab immselsignex 4135" *) \controlleraftab.ir [31] : _1180_;
  assign _1180_ = \controlleraftab.muxcode [8] ? (* hdlname = "datapathaftab immselsignex 4136" *) \datapathaftab.gi2d_instr_curr [7] : _1181_;
  assign _1181_ = \controlleraftab.muxcode [5] ? (* hdlname = "datapathaftab immselsignex 4138" *) 1'h0 : _1182_;
  assign _1182_ = \controlleraftab.muxcode [9] ? (* hdlname = "datapathaftab immselsignex 4139" *) \controlleraftab.ir [20] : 1'h0;
  assign \datapathaftab.immselsignex.imm [19:12] = \controlleraftab.muxcode [10] ? (* hdlname = "datapathaftab immselsignex 4144" *) { \controlleraftab.ir [31], \controlleraftab.ir [31], \controlleraftab.ir [31], \controlleraftab.ir [31], \controlleraftab.ir [31], \controlleraftab.ir [31], \controlleraftab.ir [31], \controlleraftab.ir [31] } : _1183_;
  assign _1183_ = \controlleraftab.muxcode [11] ? (* hdlname = "datapathaftab immselsignex 4145" *) { \datapathaftab.gi2d_instr_curr [19:15], \controlleraftab.ir [14:12] } : 8'h00;
  assign \datapathaftab.immselsignex.imm [30:20] = \controlleraftab.muxcode [6] ? (* hdlname = "datapathaftab immselsignex 4151" *) { \controlleraftab.ir [31], \controlleraftab.ir [31], \controlleraftab.ir [31], \controlleraftab.ir [31], \controlleraftab.ir [31], \controlleraftab.ir [31], \controlleraftab.ir [31], \controlleraftab.ir [31], \controlleraftab.ir [31], \controlleraftab.ir [31], \controlleraftab.ir [31] } : _1184_;
  assign _1184_ = \controlleraftab.muxcode [5] ? (* hdlname = "datapathaftab immselsignex 4154" *) \controlleraftab.ir [30:20] : 11'h000;
  assign _1187_ = \controlleraftab.lduser  ? (* hdlname = "datapathaftab interrcheckcausedetection 5206" *) 2'h0 : \datapathaftab.curprv ;
  assign _1188_ = ~ (* hdlname = "datapathaftab interrcheckcausedetection 5222" *) \datapathaftab.curprv [1];
  assign _1189_ = ~ (* hdlname = "datapathaftab interrcheckcausedetection 5224" *) \datapathaftab.curprv [0];
  assign \datapathaftab.interrcheckcausedetection.user  = _1188_ & (* hdlname = "datapathaftab interrcheckcausedetection 5225" *) _1189_;
  assign \datapathaftab.interrcheckcausedetection.machine  = \datapathaftab.curprv [1] & (* hdlname = "datapathaftab interrcheckcausedetection 5228" *) \datapathaftab.curprv [0];
  assign _1190_ = \datapathaftab.m2wb_illegal_instruction_flag_curr  | (* hdlname = "datapathaftab interrcheckcausedetection 5235" *) \datapathaftab.m2wb_instr_misaligned_flag_curr ;
  assign _1191_ = \datapathaftab.m2wb_divided_by_zero_flag_curr  | (* hdlname = "datapathaftab interrcheckcausedetection 5238" *) \datapathaftab.m2wb_ecall_flag_curr ;
  assign \datapathaftab.exceptionraisetemp  = _1190_ | (* hdlname = "datapathaftab interrcheckcausedetection 5239" *) _1191_;
  assign _1194_ = \datapathaftab.csrisl.ccmip [11] & (* hdlname = "datapathaftab interrcheckcausedetection 5244" *) \datapathaftab.interrcheckcausedetection.miecc [11];
  assign \datapathaftab.interrcheckcausedetection.interraisemachineexternal  = _1193_ & (* hdlname = "datapathaftab interrcheckcausedetection 5245" *) _1194_;
  assign _1195_ = \datapathaftab.csrisl.ccmip [3] & (* hdlname = "datapathaftab interrcheckcausedetection 5250" *) \datapathaftab.interrcheckcausedetection.miecc [3];
  assign \datapathaftab.interrcheckcausedetection.interraisemachinesoftware  = _1193_ & (* hdlname = "datapathaftab interrcheckcausedetection 5251" *) _1195_;
  assign _1192_ = \datapathaftab.interrcheckcausedetection.machine  & (* hdlname = "datapathaftab interrcheckcausedetection 5252" *) \datapathaftab.interrcheckcausedetection.miefieldcc ;
  assign _1193_ = \datapathaftab.interrcheckcausedetection.user  | (* hdlname = "datapathaftab interrcheckcausedetection 5253" *) _1192_;
  assign _1196_ = \datapathaftab.csrisl.ccmip [7] & (* hdlname = "datapathaftab interrcheckcausedetection 5256" *) \datapathaftab.interrcheckcausedetection.miecc [7];
  assign \datapathaftab.interrcheckcausedetection.interraisemachinetimer  = _1193_ & (* hdlname = "datapathaftab interrcheckcausedetection 5257" *) _1196_;
  assign _1198_ = \datapathaftab.csrisl.ccmip [8] & (* hdlname = "datapathaftab interrcheckcausedetection 5261" *) \datapathaftab.interrcheckcausedetection.miecc [8];
  assign \datapathaftab.interrcheckcausedetection.interraiseuserexternal  = _1197_ & (* hdlname = "datapathaftab interrcheckcausedetection 5262" *) _1198_;
  assign _1199_ = \datapathaftab.csrisl.ccmip [0] & (* hdlname = "datapathaftab interrcheckcausedetection 5266" *) \datapathaftab.interrcheckcausedetection.miecc [0];
  assign \datapathaftab.interrcheckcausedetection.interraiseusersoftware  = _1197_ & (* hdlname = "datapathaftab interrcheckcausedetection 5267" *) _1199_;
  assign _1197_ = \datapathaftab.interrcheckcausedetection.user  & (* hdlname = "datapathaftab interrcheckcausedetection 5268" *) \datapathaftab.interrcheckcausedetection.uiefieldcc ;
  assign _1200_ = \datapathaftab.csrisl.ccmip [4] & (* hdlname = "datapathaftab interrcheckcausedetection 5271" *) \datapathaftab.interrcheckcausedetection.miecc [4];
  assign \datapathaftab.interrcheckcausedetection.interraiseusertimer  = _1197_ & (* hdlname = "datapathaftab interrcheckcausedetection 5272" *) _1200_;
  assign \datapathaftab.interrcheckcausedetection.interreserved  = \datapathaftab.csrisl.ccmip [31:16] & (* hdlname = "datapathaftab interrcheckcausedetection 5275" *) \datapathaftab.interrcheckcausedetection.miecc [31:16];
  assign _1201_ = \datapathaftab.interrcheckcausedetection.interreserved [15] | (* hdlname = "datapathaftab interrcheckcausedetection 5278" *) \datapathaftab.interrcheckcausedetection.interreserved [14];
  assign _1202_ = _1201_ | (* hdlname = "datapathaftab interrcheckcausedetection 5280" *) \datapathaftab.interrcheckcausedetection.interreserved [13];
  assign _1203_ = _1202_ | (* hdlname = "datapathaftab interrcheckcausedetection 5282" *) \datapathaftab.interrcheckcausedetection.interreserved [12];
  assign _1204_ = _1203_ | (* hdlname = "datapathaftab interrcheckcausedetection 5284" *) \datapathaftab.interrcheckcausedetection.interreserved [11];
  assign _1205_ = _1204_ | (* hdlname = "datapathaftab interrcheckcausedetection 5286" *) \datapathaftab.interrcheckcausedetection.interreserved [10];
  assign _1206_ = _1205_ | (* hdlname = "datapathaftab interrcheckcausedetection 5288" *) \datapathaftab.interrcheckcausedetection.interreserved [9];
  assign _1207_ = _1206_ | (* hdlname = "datapathaftab interrcheckcausedetection 5290" *) \datapathaftab.interrcheckcausedetection.interreserved [8];
  assign _1208_ = _1207_ | (* hdlname = "datapathaftab interrcheckcausedetection 5292" *) \datapathaftab.interrcheckcausedetection.interreserved [7];
  assign _1209_ = _1208_ | (* hdlname = "datapathaftab interrcheckcausedetection 5294" *) \datapathaftab.interrcheckcausedetection.interreserved [6];
  assign _1210_ = _1209_ | (* hdlname = "datapathaftab interrcheckcausedetection 5296" *) \datapathaftab.interrcheckcausedetection.interreserved [5];
  assign _1211_ = _1210_ | (* hdlname = "datapathaftab interrcheckcausedetection 5298" *) \datapathaftab.interrcheckcausedetection.interreserved [4];
  assign _1212_ = _1211_ | (* hdlname = "datapathaftab interrcheckcausedetection 5300" *) \datapathaftab.interrcheckcausedetection.interreserved [3];
  assign _1213_ = _1212_ | (* hdlname = "datapathaftab interrcheckcausedetection 5302" *) \datapathaftab.interrcheckcausedetection.interreserved [2];
  assign _1214_ = _1213_ | (* hdlname = "datapathaftab interrcheckcausedetection 5304" *) \datapathaftab.interrcheckcausedetection.interreserved [1];
  assign _1215_ = _1214_ | (* hdlname = "datapathaftab interrcheckcausedetection 5306" *) \datapathaftab.interrcheckcausedetection.interreserved [0];
  assign \datapathaftab.interrcheckcausedetection.interraisereserved  = \datapathaftab.interrcheckcausedetection.miefieldcc  & (* hdlname = "datapathaftab interrcheckcausedetection 5307" *) _1215_;
  assign _1216_ = \datapathaftab.interrcheckcausedetection.interraisemachineexternal  | (* hdlname = "datapathaftab interrcheckcausedetection 5308" *) \datapathaftab.interrcheckcausedetection.interraisemachinesoftware ;
  assign _1217_ = _1216_ | (* hdlname = "datapathaftab interrcheckcausedetection 5309" *) \datapathaftab.interrcheckcausedetection.interraisemachinetimer ;
  assign _1218_ = _1217_ | (* hdlname = "datapathaftab interrcheckcausedetection 5310" *) \datapathaftab.interrcheckcausedetection.interraiseuserexternal ;
  assign _1219_ = _1218_ | (* hdlname = "datapathaftab interrcheckcausedetection 5311" *) \datapathaftab.interrcheckcausedetection.interraiseusersoftware ;
  assign _1220_ = _1219_ | (* hdlname = "datapathaftab interrcheckcausedetection 5312" *) \datapathaftab.interrcheckcausedetection.interraiseusertimer ;
  assign \datapathaftab.interrcheckcausedetection.interraisetemp  = _1220_ | (* hdlname = "datapathaftab interrcheckcausedetection 5313" *) \datapathaftab.interrcheckcausedetection.interraisereserved ;
  assign _1221_ = \datapathaftab.m2wb_illegal_instruction_flag_curr  | (* hdlname = "datapathaftab interrcheckcausedetection 5315" *) \datapathaftab.m2wb_divided_by_zero_flag_curr ;
  assign _1222_ = \datapathaftab.m2wb_ecall_flag_curr  ? (* hdlname = "datapathaftab interrcheckcausedetection 5318" *) 32'd8 : 32'd0;
  assign _1223_ = _1221_ ? (* hdlname = "datapathaftab interrcheckcausedetection 5324" *) 32'd2 : _1222_;
  assign _1224_ = \datapathaftab.m2wb_instr_misaligned_flag_curr  ? (* hdlname = "datapathaftab interrcheckcausedetection 5326" *) 32'd0 : _1223_;
  assign _1225_ = \datapathaftab.csrisl.ccmip [31] ? (* hdlname = "datapathaftab interrcheckcausedetection 5351" *) 32'd2147483679 : 32'd0;
  assign _1226_ = \datapathaftab.csrisl.ccmip [30] ? (* hdlname = "datapathaftab interrcheckcausedetection 5353" *) 32'd2147483678 : _1225_;
  assign _1227_ = \datapathaftab.csrisl.ccmip [29] ? (* hdlname = "datapathaftab interrcheckcausedetection 5355" *) 32'd2147483677 : _1226_;
  assign _1228_ = \datapathaftab.csrisl.ccmip [28] ? (* hdlname = "datapathaftab interrcheckcausedetection 5357" *) 32'd2147483676 : _1227_;
  assign _1229_ = \datapathaftab.csrisl.ccmip [27] ? (* hdlname = "datapathaftab interrcheckcausedetection 5359" *) 32'd2147483675 : _1228_;
  assign _1230_ = \datapathaftab.csrisl.ccmip [26] ? (* hdlname = "datapathaftab interrcheckcausedetection 5361" *) 32'd2147483674 : _1229_;
  assign _1231_ = \datapathaftab.csrisl.ccmip [25] ? (* hdlname = "datapathaftab interrcheckcausedetection 5363" *) 32'd2147483673 : _1230_;
  assign _1232_ = \datapathaftab.csrisl.ccmip [24] ? (* hdlname = "datapathaftab interrcheckcausedetection 5365" *) 32'd2147483672 : _1231_;
  assign _1233_ = \datapathaftab.csrisl.ccmip [23] ? (* hdlname = "datapathaftab interrcheckcausedetection 5367" *) 32'd2147483671 : _1232_;
  assign _1234_ = \datapathaftab.csrisl.ccmip [22] ? (* hdlname = "datapathaftab interrcheckcausedetection 5369" *) 32'd2147483670 : _1233_;
  assign _1235_ = \datapathaftab.csrisl.ccmip [21] ? (* hdlname = "datapathaftab interrcheckcausedetection 5371" *) 32'd2147483669 : _1234_;
  assign _1236_ = \datapathaftab.csrisl.ccmip [20] ? (* hdlname = "datapathaftab interrcheckcausedetection 5373" *) 32'd2147483668 : _1235_;
  assign _1237_ = \datapathaftab.csrisl.ccmip [19] ? (* hdlname = "datapathaftab interrcheckcausedetection 5375" *) 32'd2147483667 : _1236_;
  assign _1238_ = \datapathaftab.csrisl.ccmip [18] ? (* hdlname = "datapathaftab interrcheckcausedetection 5377" *) 32'd2147483666 : _1237_;
  assign _1239_ = \datapathaftab.csrisl.ccmip [17] ? (* hdlname = "datapathaftab interrcheckcausedetection 5379" *) 32'd2147483665 : _1238_;
  assign _1240_ = \datapathaftab.csrisl.ccmip [16] ? (* hdlname = "datapathaftab interrcheckcausedetection 5381" *) 32'd2147483664 : _1239_;
  assign _1241_ = \datapathaftab.csrisl.ccmip [4] ? (* hdlname = "datapathaftab interrcheckcausedetection 5383" *) 32'd2147483652 : _1240_;
  assign _1242_ = \datapathaftab.csrisl.ccmip [0] ? (* hdlname = "datapathaftab interrcheckcausedetection 5385" *) 32'd2147483648 : _1241_;
  assign _1243_ = \datapathaftab.csrisl.ccmip [8] ? (* hdlname = "datapathaftab interrcheckcausedetection 5387" *) 32'd2147483656 : _1242_;
  assign _1244_ = \datapathaftab.csrisl.ccmip [7] ? (* hdlname = "datapathaftab interrcheckcausedetection 5389" *) 32'd2147483655 : _1243_;
  assign _1245_ = \datapathaftab.csrisl.ccmip [3] ? (* hdlname = "datapathaftab interrcheckcausedetection 5391" *) 32'd2147483651 : _1244_;
  assign _1246_ = \datapathaftab.csrisl.ccmip [11] ? (* hdlname = "datapathaftab interrcheckcausedetection 5393" *) 32'd2147483659 : _1245_;
  assign _1247_ = \datapathaftab.interrcheckcausedetection.interraisetemp  ? (* hdlname = "datapathaftab interrcheckcausedetection 5395" *) _1246_ : 32'd0;
  assign \datapathaftab.csrisl.causecode  = \datapathaftab.exceptionraisetemp  ? (* hdlname = "datapathaftab interrcheckcausedetection 5396" *) _1224_ : _1247_;
  assign _1248_ = \datapathaftab.interrcheckcausedetection.user  & (* hdlname = "datapathaftab interrcheckcausedetection 5399" *) \datapathaftab.m2wb_illegal_instruction_flag_curr ;
  assign _1249_ = \datapathaftab.d2e_outcsr_next [2] & (* hdlname = "datapathaftab interrcheckcausedetection 5401" *) _1248_;
  assign _1250_ = \datapathaftab.interrcheckcausedetection.user  & (* hdlname = "datapathaftab interrcheckcausedetection 5402" *) \datapathaftab.m2wb_instr_misaligned_flag_curr ;
  assign _1251_ = \datapathaftab.d2e_outcsr_next [0] & (* hdlname = "datapathaftab interrcheckcausedetection 5404" *) _1250_;
  assign _1252_ = \datapathaftab.interrcheckcausedetection.user  & (* hdlname = "datapathaftab interrcheckcausedetection 5411" *) \datapathaftab.m2wb_divided_by_zero_flag_curr ;
  assign _1253_ = \datapathaftab.d2e_outcsr_next [2] & (* hdlname = "datapathaftab interrcheckcausedetection 5413" *) _1252_;
  assign _1254_ = \datapathaftab.interrcheckcausedetection.user  & (* hdlname = "datapathaftab interrcheckcausedetection 5414" *) \datapathaftab.m2wb_ecall_flag_curr ;
  assign _1255_ = \datapathaftab.d2e_outcsr_next [11] & (* hdlname = "datapathaftab interrcheckcausedetection 5416" *) _1254_;
  assign _1256_ = _1255_ ? (* hdlname = "datapathaftab interrcheckcausedetection 5419" *) 2'h0 : 2'h3;
  assign _1257_ = _1253_ ? (* hdlname = "datapathaftab interrcheckcausedetection 5421" *) 2'h0 : _1256_;
  assign _1258_ = _1251_ ? (* hdlname = "datapathaftab interrcheckcausedetection 5427" *) 2'h0 : _1257_;
  assign _1259_ = _1249_ ? (* hdlname = "datapathaftab interrcheckcausedetection 5429" *) 2'h0 : _1258_;
  assign _1260_ = \datapathaftab.interrcheckcausedetection.user  & (* hdlname = "datapathaftab interrcheckcausedetection 5431" *) \datapathaftab.csrisl.ccmip [8];
  assign _1261_ = \datapathaftab.d2e_outcsr_next [8] & (* hdlname = "datapathaftab interrcheckcausedetection 5433" *) _1260_;
  assign _1262_ = \datapathaftab.interrcheckcausedetection.user  & (* hdlname = "datapathaftab interrcheckcausedetection 5435" *) \datapathaftab.csrisl.ccmip [0];
  assign _1263_ = \datapathaftab.d2e_outcsr_next [0] & (* hdlname = "datapathaftab interrcheckcausedetection 5437" *) _1262_;
  assign _1264_ = \datapathaftab.interrcheckcausedetection.user  & (* hdlname = "datapathaftab interrcheckcausedetection 5439" *) \datapathaftab.csrisl.ccmip [4];
  assign _1265_ = \datapathaftab.d2e_outcsr_next [4] & (* hdlname = "datapathaftab interrcheckcausedetection 5441" *) _1264_;
  assign _1266_ = _1265_ ? (* hdlname = "datapathaftab interrcheckcausedetection 5444" *) 2'h0 : 2'h3;
  assign _1267_ = _1263_ ? (* hdlname = "datapathaftab interrcheckcausedetection 5446" *) 2'h0 : _1266_;
  assign _1268_ = _1261_ ? (* hdlname = "datapathaftab interrcheckcausedetection 5448" *) 2'h0 : _1267_;
  assign _1269_ = \datapathaftab.interrcheckcausedetection.interraisetemp  ? (* hdlname = "datapathaftab interrcheckcausedetection 5450" *) _1268_ : 2'h3;
  assign \datapathaftab.interrcheckcausedetection.delegationreg  = \datapathaftab.exceptionraisetemp  ? (* hdlname = "datapathaftab interrcheckcausedetection 5451" *) _1259_ : _1269_;
  assign _1270_ = \controlleraftab.lddelegation  ? (* hdlname = "datapathaftab interrcheckcausedetection 5459" *) \datapathaftab.interrcheckcausedetection.delegationreg  : { \datapathaftab.interrcheckcausedetection.delegationmode [1], \controlleraftab.delegationmode [0] };
  assign \datapathaftab.interruptstartaddressgenerator.interruptstartaddressvectored [29:0] = \datapathaftab.d2e_outcsr_next [31:2] + (* hdlname = "datapathaftab interruptstartaddressgenerator 5469" *) { 22'h000000, \datapathaftab.csrisl.causecode [31], \datapathaftab.csrisl.causecode [4:0], 2'h0 };
  assign _1273_ = \controlleraftab.mipcclddisable  ? (* hdlname = "datapathaftab intersrcsynchreg 4067" *) \datapathaftab.csrisl.ccmip  : { platformInterruptSignals, 4'h0, machineExternalInterrupt, 2'h0, userExternalInterrupt, machineTimerInterrupt, 2'h0, userTimerInterrupt, machineSoftwareInterrupt, 2'h0, userSoftwareInterrupt };
  assign _1274_ = \datapathaftab.aau.ain  ^ (* hdlname = "datapathaftab llu 4880" *) \datapathaftab.aau.bin ;
  assign _1275_ = ! (* hdlname = "datapathaftab llu 4882" *) \datapathaftab.d2e_ctrl_word_curr [33:32];
  assign _1276_ = \datapathaftab.aau.ain  | (* hdlname = "datapathaftab llu 4883" *) \datapathaftab.aau.bin ;
  assign _1277_ = \datapathaftab.d2e_ctrl_word_curr [33:32] == (* hdlname = "datapathaftab llu 4885" *) 2'h2;
  assign _1278_ = \datapathaftab.aau.ain  & (* hdlname = "datapathaftab llu 4886" *) \datapathaftab.aau.bin ;
  assign _1279_ = \datapathaftab.d2e_ctrl_word_curr [33:32] == (* hdlname = "datapathaftab llu 4888" *) 2'h3;
  function [31:0] \datapathaftab.llu.4891 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* hdlname = "datapathaftab llu 4891" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \datapathaftab.llu.4891  = b[31:0];
      3'b?1?:
        \datapathaftab.llu.4891  = b[63:32];
      3'b1??:
        \datapathaftab.llu.4891  = b[95:64];
      default:
        \datapathaftab.llu.4891  = a;
    endcase
  endfunction
  assign \datapathaftab.llu.result  = \datapathaftab.llu.4891 (32'd0, { _1278_, _1276_, _1274_ }, { _1279_, _1277_, _1275_ });
  assign _1280_ = \controlleraftab.selpc  ? (* hdlname = "datapathaftab mux2 4834" *) \datapathaftab.gi2d_pc_curr  : 32'd0;
  assign \datapathaftab.d2e_alu_op1_next  = \controlleraftab.seljl  ? (* hdlname = "datapathaftab mux2 4835" *) \datapathaftab.mux2.a  : _1280_;
  assign _1281_ = \controlleraftab.selimm  ? (* hdlname = "datapathaftab mux5 4834" *) { \controlleraftab.ir [31], \datapathaftab.immselsignex.imm [30:0] } : 32'd0;
  assign \datapathaftab.d2e_alu_op2_next  = \controlleraftab.selp2  ? (* hdlname = "datapathaftab mux5 4835" *) \datapathaftab.d2e_op2_next  : _1281_;
  assign _1282_ = \controlleraftab.selauipc  ? (* hdlname = "datapathaftab mux6 4834" *) \datapathaftab.gi2d_pc_curr  : 32'd0;
  assign \datapathaftab.mux2.a  = \controlleraftab.selp1  ? (* hdlname = "datapathaftab mux6 4835" *) \datapathaftab.d2e_op1_next  : _1282_;
  assign \datapathaftab.mux8.w  = \controlleraftab.mirrorusercu  ? (* hdlname = "datapathaftab mux8 5127" *) { 4'h0, \datapathaftab.mux8.a [7:0] } : \datapathaftab.mux8.a ;
  assign _1283_ = \datapathaftab.d2e_ctrl_word_curr [58] ? (* hdlname = "datapathaftab muxcmp 4834" *) \datapathaftab.d2e_op2_curr  : 32'd0;
  assign \datapathaftab.comparator.bin  = \datapathaftab.d2e_ctrl_word_curr [57] ? (* hdlname = "datapathaftab muxcmp 4835" *) \datapathaftab.aau.bin  : _1283_;
  assign _1285_ = \datapathaftab.mux8.w  == (* hdlname = "datapathaftab register_bank csr_address_logic 5884" *) 12'h304;
  assign \controlleraftab.ldmiereg  = _1285_ ? (* hdlname = "datapathaftab register_bank csr_address_logic 5885" *) 1'h1 : 1'h0;
  assign _1286_ = \datapathaftab.mux8.w  == (* hdlname = "datapathaftab register_bank csr_address_logic 5889" *) 12'h300;
  assign \controlleraftab.ldmieuiefield  = _1286_ ? (* hdlname = "datapathaftab register_bank csr_address_logic 5890" *) 1'h1 : 1'h0;
  assign _1287_ = ! (* hdlname = "datapathaftab register_bank csr_address_logic 5895" *) \datapathaftab.mux8.w [7:0];
  assign \datapathaftab.csrisl.mirrorustatus  = _1287_ ? (* hdlname = "datapathaftab register_bank csr_address_logic 5896" *) 1'h1 : 1'h0;
  assign _1288_ = \datapathaftab.mux8.w [7:0] == (* hdlname = "datapathaftab register_bank csr_address_logic 5901" *) 8'h04;
  assign \datapathaftab.csrisl.mirroruie  = _1288_ ? (* hdlname = "datapathaftab register_bank csr_address_logic 5902" *) 1'h1 : 1'h0;
  assign _1289_ = \datapathaftab.mux8.w [7:0] == (* hdlname = "datapathaftab register_bank csr_address_logic 5907" *) 8'h44;
  assign \datapathaftab.csrisl.mirroruip  = _1289_ ? (* hdlname = "datapathaftab register_bank csr_address_logic 5908" *) 1'h1 : 1'h0;
  assign _1290_ = \datapathaftab.csrisl.mirrorustatus  | (* hdlname = "datapathaftab register_bank csr_address_logic 5910" *) \datapathaftab.csrisl.mirroruie ;
  assign \controlleraftab.mirror  = _1290_ | (* hdlname = "datapathaftab register_bank csr_address_logic 5911" *) \datapathaftab.csrisl.mirroruip ;
  assign _1312_ = 5'h1f - (* hdlname = "datapathaftab register_bank csr_registers 5670" *) { \datapathaftab.addressregbank [8], \datapathaftab.addressregbank [6], \datapathaftab.addressregbank [2:0] };
  assign _1313_ = 5'h1f - (* hdlname = "datapathaftab register_bank csr_registers 5677" *) { \datapathaftab.mux8.w [8], \datapathaftab.mux8.w [6], \datapathaftab.mux8.w [2:0] };
  assign _1314_ = \controlleraftab.writeregbank  ? (* hdlname = "datapathaftab register_bank csr_registers 5685" *) { _1421_, _1420_, _1419_, _1418_, _1417_, _1416_, _1415_, _1414_, _1413_, _1412_, _1411_, _1410_, _1409_, _1408_, _1407_, _1406_, _1405_, _1404_, _1403_, _1402_, _1401_, _1400_, _1399_, _1398_, _1397_, _1396_, _1395_, _1394_, _1393_, _1392_, _1391_, _1390_ } : \datapathaftab.register_bank.csr_registers.rdata ;
  (* hdlname = "datapathaftab register_bank csr_registers 5686" *)
  always @(posedge clk)
    if (rst) _1291_ <= 1024'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    else _1291_ <= _1314_;
  assign \datapathaftab.d2e_outcsr_next_pre_bypass  = _1312_[4] ? (* hdlname = "datapathaftab register_bank csr_registers 5740" *) _1324_ : _1323_;
  assign _1325_ = ~ (* hdlname = "datapathaftab register_bank csr_registers 5742" *) _1313_[4];
  assign _1326_ = ~ (* hdlname = "datapathaftab register_bank csr_registers 5744" *) _1313_[3];
  assign _1327_ = _1325_ & (* hdlname = "datapathaftab register_bank csr_registers 5745" *) _1326_;
  assign _1328_ = _1325_ & (* hdlname = "datapathaftab register_bank csr_registers 5746" *) _1313_[3];
  assign _1329_ = _1313_[4] & (* hdlname = "datapathaftab register_bank csr_registers 5747" *) _1326_;
  assign _1330_ = _1313_[4] & (* hdlname = "datapathaftab register_bank csr_registers 5748" *) _1313_[3];
  assign _1331_ = ~ (* hdlname = "datapathaftab register_bank csr_registers 5750" *) _1313_[2];
  assign _1332_ = _1327_ & (* hdlname = "datapathaftab register_bank csr_registers 5751" *) _1331_;
  assign _1333_ = _1327_ & (* hdlname = "datapathaftab register_bank csr_registers 5752" *) _1313_[2];
  assign _1334_ = _1328_ & (* hdlname = "datapathaftab register_bank csr_registers 5753" *) _1331_;
  assign _1335_ = _1328_ & (* hdlname = "datapathaftab register_bank csr_registers 5754" *) _1313_[2];
  assign _1336_ = _1329_ & (* hdlname = "datapathaftab register_bank csr_registers 5755" *) _1331_;
  assign _1337_ = _1329_ & (* hdlname = "datapathaftab register_bank csr_registers 5756" *) _1313_[2];
  assign _1338_ = _1330_ & (* hdlname = "datapathaftab register_bank csr_registers 5757" *) _1331_;
  assign _1339_ = _1330_ & (* hdlname = "datapathaftab register_bank csr_registers 5758" *) _1313_[2];
  assign _1340_ = ~ (* hdlname = "datapathaftab register_bank csr_registers 5760" *) _1313_[1];
  assign _1341_ = _1332_ & (* hdlname = "datapathaftab register_bank csr_registers 5761" *) _1340_;
  assign _1342_ = _1332_ & (* hdlname = "datapathaftab register_bank csr_registers 5762" *) _1313_[1];
  assign _1343_ = _1333_ & (* hdlname = "datapathaftab register_bank csr_registers 5763" *) _1340_;
  assign _1344_ = _1333_ & (* hdlname = "datapathaftab register_bank csr_registers 5764" *) _1313_[1];
  assign _1345_ = _1334_ & (* hdlname = "datapathaftab register_bank csr_registers 5765" *) _1340_;
  assign _1346_ = _1334_ & (* hdlname = "datapathaftab register_bank csr_registers 5766" *) _1313_[1];
  assign _1347_ = _1335_ & (* hdlname = "datapathaftab register_bank csr_registers 5767" *) _1340_;
  assign _1348_ = _1335_ & (* hdlname = "datapathaftab register_bank csr_registers 5768" *) _1313_[1];
  assign _1349_ = _1336_ & (* hdlname = "datapathaftab register_bank csr_registers 5769" *) _1340_;
  assign _1350_ = _1336_ & (* hdlname = "datapathaftab register_bank csr_registers 5770" *) _1313_[1];
  assign _1351_ = _1337_ & (* hdlname = "datapathaftab register_bank csr_registers 5771" *) _1340_;
  assign _1352_ = _1337_ & (* hdlname = "datapathaftab register_bank csr_registers 5772" *) _1313_[1];
  assign _1353_ = _1338_ & (* hdlname = "datapathaftab register_bank csr_registers 5773" *) _1340_;
  assign _1354_ = _1338_ & (* hdlname = "datapathaftab register_bank csr_registers 5774" *) _1313_[1];
  assign _1355_ = _1339_ & (* hdlname = "datapathaftab register_bank csr_registers 5775" *) _1340_;
  assign _1356_ = _1339_ & (* hdlname = "datapathaftab register_bank csr_registers 5776" *) _1313_[1];
  assign _1357_ = ~ (* hdlname = "datapathaftab register_bank csr_registers 5778" *) _1313_[0];
  assign _1358_ = _1341_ & (* hdlname = "datapathaftab register_bank csr_registers 5779" *) _1357_;
  assign _1359_ = _1341_ & (* hdlname = "datapathaftab register_bank csr_registers 5780" *) _1313_[0];
  assign _1360_ = _1342_ & (* hdlname = "datapathaftab register_bank csr_registers 5781" *) _1357_;
  assign _1361_ = _1342_ & (* hdlname = "datapathaftab register_bank csr_registers 5782" *) _1313_[0];
  assign _1362_ = _1343_ & (* hdlname = "datapathaftab register_bank csr_registers 5783" *) _1357_;
  assign _1363_ = _1343_ & (* hdlname = "datapathaftab register_bank csr_registers 5784" *) _1313_[0];
  assign _1364_ = _1344_ & (* hdlname = "datapathaftab register_bank csr_registers 5785" *) _1357_;
  assign _1365_ = _1344_ & (* hdlname = "datapathaftab register_bank csr_registers 5786" *) _1313_[0];
  assign _1366_ = _1345_ & (* hdlname = "datapathaftab register_bank csr_registers 5787" *) _1357_;
  assign _1367_ = _1345_ & (* hdlname = "datapathaftab register_bank csr_registers 5788" *) _1313_[0];
  assign _1368_ = _1346_ & (* hdlname = "datapathaftab register_bank csr_registers 5789" *) _1357_;
  assign _1369_ = _1346_ & (* hdlname = "datapathaftab register_bank csr_registers 5790" *) _1313_[0];
  assign _1370_ = _1347_ & (* hdlname = "datapathaftab register_bank csr_registers 5791" *) _1357_;
  assign _1371_ = _1347_ & (* hdlname = "datapathaftab register_bank csr_registers 5792" *) _1313_[0];
  assign _1372_ = _1348_ & (* hdlname = "datapathaftab register_bank csr_registers 5793" *) _1357_;
  assign _1373_ = _1348_ & (* hdlname = "datapathaftab register_bank csr_registers 5794" *) _1313_[0];
  assign _1374_ = _1349_ & (* hdlname = "datapathaftab register_bank csr_registers 5795" *) _1357_;
  assign _1375_ = _1349_ & (* hdlname = "datapathaftab register_bank csr_registers 5796" *) _1313_[0];
  assign _1376_ = _1350_ & (* hdlname = "datapathaftab register_bank csr_registers 5797" *) _1357_;
  assign _1377_ = _1350_ & (* hdlname = "datapathaftab register_bank csr_registers 5798" *) _1313_[0];
  assign _1378_ = _1351_ & (* hdlname = "datapathaftab register_bank csr_registers 5799" *) _1357_;
  assign _1379_ = _1351_ & (* hdlname = "datapathaftab register_bank csr_registers 5800" *) _1313_[0];
  assign _1380_ = _1352_ & (* hdlname = "datapathaftab register_bank csr_registers 5801" *) _1357_;
  assign _1381_ = _1352_ & (* hdlname = "datapathaftab register_bank csr_registers 5802" *) _1313_[0];
  assign _1382_ = _1353_ & (* hdlname = "datapathaftab register_bank csr_registers 5803" *) _1357_;
  assign _1383_ = _1353_ & (* hdlname = "datapathaftab register_bank csr_registers 5804" *) _1313_[0];
  assign _1384_ = _1354_ & (* hdlname = "datapathaftab register_bank csr_registers 5805" *) _1357_;
  assign _1385_ = _1354_ & (* hdlname = "datapathaftab register_bank csr_registers 5806" *) _1313_[0];
  assign _1386_ = _1355_ & (* hdlname = "datapathaftab register_bank csr_registers 5807" *) _1357_;
  assign _1387_ = _1355_ & (* hdlname = "datapathaftab register_bank csr_registers 5808" *) _1313_[0];
  assign _1388_ = _1356_ & (* hdlname = "datapathaftab register_bank csr_registers 5809" *) _1357_;
  assign _1389_ = _1356_ & (* hdlname = "datapathaftab register_bank csr_registers 5810" *) _1313_[0];
  assign _1390_ = _1358_ ? (* hdlname = "datapathaftab register_bank csr_registers 5812" *) \datapathaftab.csrisl.incsr  : \datapathaftab.register_bank.csr_registers.rdata [31:0];
  assign _1391_ = _1359_ ? (* hdlname = "datapathaftab register_bank csr_registers 5814" *) \datapathaftab.csrisl.incsr  : \datapathaftab.register_bank.csr_registers.rdata [63:32];
  assign _1392_ = _1360_ ? (* hdlname = "datapathaftab register_bank csr_registers 5816" *) \datapathaftab.csrisl.incsr  : \datapathaftab.register_bank.csr_registers.rdata [95:64];
  assign _1393_ = _1361_ ? (* hdlname = "datapathaftab register_bank csr_registers 5818" *) \datapathaftab.csrisl.incsr  : \datapathaftab.register_bank.csr_registers.rdata [127:96];
  assign _1394_ = _1362_ ? (* hdlname = "datapathaftab register_bank csr_registers 5820" *) \datapathaftab.csrisl.incsr  : \datapathaftab.register_bank.csr_registers.rdata [159:128];
  assign _1395_ = _1363_ ? (* hdlname = "datapathaftab register_bank csr_registers 5822" *) \datapathaftab.csrisl.incsr  : \datapathaftab.register_bank.csr_registers.rdata [191:160];
  assign _1396_ = _1364_ ? (* hdlname = "datapathaftab register_bank csr_registers 5824" *) \datapathaftab.csrisl.incsr  : \datapathaftab.register_bank.csr_registers.rdata [223:192];
  assign _1397_ = _1365_ ? (* hdlname = "datapathaftab register_bank csr_registers 5826" *) \datapathaftab.csrisl.incsr  : \datapathaftab.register_bank.csr_registers.rdata [255:224];
  assign _1398_ = _1366_ ? (* hdlname = "datapathaftab register_bank csr_registers 5828" *) \datapathaftab.csrisl.incsr  : \datapathaftab.register_bank.csr_registers.rdata [287:256];
  assign _1399_ = _1367_ ? (* hdlname = "datapathaftab register_bank csr_registers 5830" *) \datapathaftab.csrisl.incsr  : \datapathaftab.register_bank.csr_registers.rdata [319:288];
  assign _1400_ = _1368_ ? (* hdlname = "datapathaftab register_bank csr_registers 5832" *) \datapathaftab.csrisl.incsr  : \datapathaftab.register_bank.csr_registers.rdata [351:320];
  assign _1401_ = _1369_ ? (* hdlname = "datapathaftab register_bank csr_registers 5834" *) \datapathaftab.csrisl.incsr  : \datapathaftab.register_bank.csr_registers.rdata [383:352];
  assign _1402_ = _1370_ ? (* hdlname = "datapathaftab register_bank csr_registers 5836" *) \datapathaftab.csrisl.incsr  : \datapathaftab.register_bank.csr_registers.rdata [415:384];
  assign _1403_ = _1371_ ? (* hdlname = "datapathaftab register_bank csr_registers 5838" *) \datapathaftab.csrisl.incsr  : \datapathaftab.register_bank.csr_registers.rdata [447:416];
  assign _1404_ = _1372_ ? (* hdlname = "datapathaftab register_bank csr_registers 5840" *) \datapathaftab.csrisl.incsr  : \datapathaftab.register_bank.csr_registers.rdata [479:448];
  assign _1405_ = _1373_ ? (* hdlname = "datapathaftab register_bank csr_registers 5842" *) \datapathaftab.csrisl.incsr  : \datapathaftab.register_bank.csr_registers.rdata [511:480];
  assign _1406_ = _1374_ ? (* hdlname = "datapathaftab register_bank csr_registers 5844" *) \datapathaftab.csrisl.incsr  : \datapathaftab.register_bank.csr_registers.rdata [543:512];
  assign _1407_ = _1375_ ? (* hdlname = "datapathaftab register_bank csr_registers 5846" *) \datapathaftab.csrisl.incsr  : \datapathaftab.register_bank.csr_registers.rdata [575:544];
  assign _1408_ = _1376_ ? (* hdlname = "datapathaftab register_bank csr_registers 5848" *) \datapathaftab.csrisl.incsr  : \datapathaftab.register_bank.csr_registers.rdata [607:576];
  assign _1409_ = _1377_ ? (* hdlname = "datapathaftab register_bank csr_registers 5850" *) \datapathaftab.csrisl.incsr  : \datapathaftab.register_bank.csr_registers.rdata [639:608];
  assign _1410_ = _1378_ ? (* hdlname = "datapathaftab register_bank csr_registers 5852" *) \datapathaftab.csrisl.incsr  : \datapathaftab.register_bank.csr_registers.rdata [671:640];
  assign _1411_ = _1379_ ? (* hdlname = "datapathaftab register_bank csr_registers 5854" *) \datapathaftab.csrisl.incsr  : \datapathaftab.register_bank.csr_registers.rdata [703:672];
  assign _1412_ = _1380_ ? (* hdlname = "datapathaftab register_bank csr_registers 5856" *) \datapathaftab.csrisl.incsr  : \datapathaftab.register_bank.csr_registers.rdata [735:704];
  assign _1413_ = _1381_ ? (* hdlname = "datapathaftab register_bank csr_registers 5858" *) \datapathaftab.csrisl.incsr  : \datapathaftab.register_bank.csr_registers.rdata [767:736];
  assign _1414_ = _1382_ ? (* hdlname = "datapathaftab register_bank csr_registers 5860" *) \datapathaftab.csrisl.incsr  : \datapathaftab.register_bank.csr_registers.rdata [799:768];
  assign _1415_ = _1383_ ? (* hdlname = "datapathaftab register_bank csr_registers 5862" *) \datapathaftab.csrisl.incsr  : \datapathaftab.register_bank.csr_registers.rdata [831:800];
  assign _1416_ = _1384_ ? (* hdlname = "datapathaftab register_bank csr_registers 5864" *) \datapathaftab.csrisl.incsr  : \datapathaftab.register_bank.csr_registers.rdata [863:832];
  assign _1417_ = _1385_ ? (* hdlname = "datapathaftab register_bank csr_registers 5866" *) \datapathaftab.csrisl.incsr  : \datapathaftab.register_bank.csr_registers.rdata [895:864];
  assign _1418_ = _1386_ ? (* hdlname = "datapathaftab register_bank csr_registers 5868" *) \datapathaftab.csrisl.incsr  : \datapathaftab.register_bank.csr_registers.rdata [927:896];
  assign _1419_ = _1387_ ? (* hdlname = "datapathaftab register_bank csr_registers 5870" *) \datapathaftab.csrisl.incsr  : \datapathaftab.register_bank.csr_registers.rdata [959:928];
  assign _1420_ = _1388_ ? (* hdlname = "datapathaftab register_bank csr_registers 5872" *) \datapathaftab.csrisl.incsr  : \datapathaftab.register_bank.csr_registers.rdata [991:960];
  assign _1421_ = _1389_ ? (* hdlname = "datapathaftab register_bank csr_registers 5874" *) \datapathaftab.csrisl.incsr  : \datapathaftab.register_bank.csr_registers.rdata [1023:992];
  assign _1423_ = \controlleraftab.loadmiereg  ? (* hdlname = "datapathaftab register_bank mieccregister 4067" *) \datapathaftab.csrisl.incsr  : { \datapathaftab.interrcheckcausedetection.miecc [31:16], \datapathaftab.register_bank.mieccregister.outreg [15:12], \datapathaftab.interrcheckcausedetection.miecc [11], \datapathaftab.register_bank.mieccregister.outreg [10:9], \datapathaftab.interrcheckcausedetection.miecc [8:7], \datapathaftab.register_bank.mieccregister.outreg [6:5], \datapathaftab.interrcheckcausedetection.miecc [4:3], \datapathaftab.register_bank.mieccregister.outreg [2:1], \datapathaftab.interrcheckcausedetection.miecc [0] };
  assign _1425_ = \controlleraftab.loadmieuiefield  ? (* hdlname = "datapathaftab register_bank miefieldccregister 5916" *) \datapathaftab.csrisl.incsr [3] : \datapathaftab.interrcheckcausedetection.miefieldcc ;
  assign _1427_ = \controlleraftab.loadmieuiefield  ? (* hdlname = "datapathaftab register_bank uiefieldccregister 5916" *) \datapathaftab.csrisl.incsr [0] : \datapathaftab.interrcheckcausedetection.uiefieldcc ;
  assign _1469_ = 5'h1f - (* hdlname = "datapathaftab registerfile 4161" *) \datapathaftab.gi2d_instr_curr [19:15];
  assign _1470_ = | (* hdlname = "datapathaftab registerfile 4165" *) \datapathaftab.gi2d_instr_curr [19:15];
  assign \datapathaftab.p1  = _1470_ ? (* hdlname = "datapathaftab registerfile 4166" *) _1489_ : 32'd0;
  assign _1471_ = 5'h1f - (* hdlname = "datapathaftab registerfile 4170" *) \controlleraftab.ir [24:20];
  assign _1472_ = | (* hdlname = "datapathaftab registerfile 4174" *) \controlleraftab.ir [24:20];
  assign \datapathaftab.p2  = _1472_ ? (* hdlname = "datapathaftab registerfile 4175" *) _1500_ : 32'd0;
  assign _1473_ = | (* hdlname = "datapathaftab registerfile 4180" *) \datapathaftab.m2wb_instr_curr [11:7];
  assign _1474_ = 5'h1f - (* hdlname = "datapathaftab registerfile 4195" *) \datapathaftab.m2wb_instr_curr [11:7];
  assign _1475_ = \datapathaftab.registerfile.writeregfile  ? (* hdlname = "datapathaftab registerfile 4198" *) { _1661_, _1660_, _1659_, _1658_, _1657_, _1656_, _1655_, _1654_, _1653_, _1652_, _1651_, _1650_, _1649_, _1648_, _1647_, _1646_, _1645_, _1644_, _1643_, _1642_, _1641_, _1640_, _1639_, _1638_, _1637_, _1636_, _1635_, _1634_, _1633_, _1632_, _1631_, _1630_ } : \datapathaftab.registerfile.rdata ;
  assign _1476_ = \datapathaftab.registerfile.setzero  ? (* hdlname = "datapathaftab registerfile 4199" *) { _1629_, _1628_, _1627_, _1626_, _1625_, _1624_, _1623_, _1622_, _1621_, _1620_, _1619_, _1618_, _1617_, _1616_, _1615_, _1614_, _1613_, _1612_, _1611_, _1610_, _1609_, _1608_, _1607_, _1606_, _1605_, _1604_, _1603_, _1602_, _1601_, _1600_, _1599_, _1598_ } : _1475_;
  assign _1477_ = \datapathaftab.registerfile.setone  ? (* hdlname = "datapathaftab registerfile 4200" *) { _1597_, _1596_, _1595_, _1594_, _1593_, _1592_, _1591_, _1590_, _1589_, _1588_, _1587_, _1586_, _1585_, _1584_, _1583_, _1582_, _1581_, _1580_, _1579_, _1578_, _1577_, _1576_, _1575_, _1574_, _1573_, _1572_, _1571_, _1570_, _1569_, _1568_, _1567_, _1566_ } : _1476_;
  assign _1478_ = _1473_ ? (* hdlname = "datapathaftab registerfile 4206" *) _1477_ : \datapathaftab.registerfile.rdata ;
  (* hdlname = "datapathaftab registerfile 4207" *)
  always @(posedge clk)
    if (rst) _1428_ <= 1024'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    else _1428_ <= _1478_;
  assign _1489_ = _1469_[4] ? (* hdlname = "datapathaftab registerfile 4261" *) _1488_ : _1487_;
  assign _1500_ = _1471_[4] ? (* hdlname = "datapathaftab registerfile 4315" *) _1499_ : _1498_;
  assign _1566_ = _1534_ ? (* hdlname = "datapathaftab registerfile 4387" *) 32'd1 : \datapathaftab.registerfile.rdata [31:0];
  assign _1567_ = _1535_ ? (* hdlname = "datapathaftab registerfile 4389" *) 32'd1 : \datapathaftab.registerfile.rdata [63:32];
  assign _1568_ = _1536_ ? (* hdlname = "datapathaftab registerfile 4391" *) 32'd1 : \datapathaftab.registerfile.rdata [95:64];
  assign _1569_ = _1537_ ? (* hdlname = "datapathaftab registerfile 4393" *) 32'd1 : \datapathaftab.registerfile.rdata [127:96];
  assign _1570_ = _1538_ ? (* hdlname = "datapathaftab registerfile 4395" *) 32'd1 : \datapathaftab.registerfile.rdata [159:128];
  assign _1571_ = _1539_ ? (* hdlname = "datapathaftab registerfile 4397" *) 32'd1 : \datapathaftab.registerfile.rdata [191:160];
  assign _1572_ = _1540_ ? (* hdlname = "datapathaftab registerfile 4399" *) 32'd1 : \datapathaftab.registerfile.rdata [223:192];
  assign _1573_ = _1541_ ? (* hdlname = "datapathaftab registerfile 4401" *) 32'd1 : \datapathaftab.registerfile.rdata [255:224];
  assign _1574_ = _1542_ ? (* hdlname = "datapathaftab registerfile 4403" *) 32'd1 : \datapathaftab.registerfile.rdata [287:256];
  assign _1575_ = _1543_ ? (* hdlname = "datapathaftab registerfile 4405" *) 32'd1 : \datapathaftab.registerfile.rdata [319:288];
  assign _1576_ = _1544_ ? (* hdlname = "datapathaftab registerfile 4407" *) 32'd1 : \datapathaftab.registerfile.rdata [351:320];
  assign _1577_ = _1545_ ? (* hdlname = "datapathaftab registerfile 4409" *) 32'd1 : \datapathaftab.registerfile.rdata [383:352];
  assign _1578_ = _1546_ ? (* hdlname = "datapathaftab registerfile 4411" *) 32'd1 : \datapathaftab.registerfile.rdata [415:384];
  assign _1579_ = _1547_ ? (* hdlname = "datapathaftab registerfile 4413" *) 32'd1 : \datapathaftab.registerfile.rdata [447:416];
  assign _1580_ = _1548_ ? (* hdlname = "datapathaftab registerfile 4415" *) 32'd1 : \datapathaftab.registerfile.rdata [479:448];
  assign _1581_ = _1549_ ? (* hdlname = "datapathaftab registerfile 4417" *) 32'd1 : \datapathaftab.registerfile.rdata [511:480];
  assign _1582_ = _1550_ ? (* hdlname = "datapathaftab registerfile 4419" *) 32'd1 : \datapathaftab.registerfile.rdata [543:512];
  assign _1583_ = _1551_ ? (* hdlname = "datapathaftab registerfile 4421" *) 32'd1 : \datapathaftab.registerfile.rdata [575:544];
  assign _1584_ = _1552_ ? (* hdlname = "datapathaftab registerfile 4423" *) 32'd1 : \datapathaftab.registerfile.rdata [607:576];
  assign _1585_ = _1553_ ? (* hdlname = "datapathaftab registerfile 4425" *) 32'd1 : \datapathaftab.registerfile.rdata [639:608];
  assign _1586_ = _1554_ ? (* hdlname = "datapathaftab registerfile 4427" *) 32'd1 : \datapathaftab.registerfile.rdata [671:640];
  assign _1587_ = _1555_ ? (* hdlname = "datapathaftab registerfile 4429" *) 32'd1 : \datapathaftab.registerfile.rdata [703:672];
  assign _1588_ = _1556_ ? (* hdlname = "datapathaftab registerfile 4431" *) 32'd1 : \datapathaftab.registerfile.rdata [735:704];
  assign _1589_ = _1557_ ? (* hdlname = "datapathaftab registerfile 4433" *) 32'd1 : \datapathaftab.registerfile.rdata [767:736];
  assign _1590_ = _1558_ ? (* hdlname = "datapathaftab registerfile 4435" *) 32'd1 : \datapathaftab.registerfile.rdata [799:768];
  assign _1591_ = _1559_ ? (* hdlname = "datapathaftab registerfile 4437" *) 32'd1 : \datapathaftab.registerfile.rdata [831:800];
  assign _1592_ = _1560_ ? (* hdlname = "datapathaftab registerfile 4439" *) 32'd1 : \datapathaftab.registerfile.rdata [863:832];
  assign _1593_ = _1561_ ? (* hdlname = "datapathaftab registerfile 4441" *) 32'd1 : \datapathaftab.registerfile.rdata [895:864];
  assign _1594_ = _1562_ ? (* hdlname = "datapathaftab registerfile 4443" *) 32'd1 : \datapathaftab.registerfile.rdata [927:896];
  assign _1595_ = _1563_ ? (* hdlname = "datapathaftab registerfile 4445" *) 32'd1 : \datapathaftab.registerfile.rdata [959:928];
  assign _1596_ = _1564_ ? (* hdlname = "datapathaftab registerfile 4447" *) 32'd1 : \datapathaftab.registerfile.rdata [991:960];
  assign _1597_ = _1565_ ? (* hdlname = "datapathaftab registerfile 4449" *) 32'd1 : \datapathaftab.registerfile.rdata [1023:992];
  assign _1534_ = _1517_ & (* hdlname = "datapathaftab registerfile 4489" *) _1533_;
  assign _1535_ = _1517_ & (* hdlname = "datapathaftab registerfile 4490" *) _1474_[0];
  assign _1536_ = _1518_ & (* hdlname = "datapathaftab registerfile 4491" *) _1533_;
  assign _1537_ = _1518_ & (* hdlname = "datapathaftab registerfile 4492" *) _1474_[0];
  assign _1538_ = _1519_ & (* hdlname = "datapathaftab registerfile 4493" *) _1533_;
  assign _1539_ = _1519_ & (* hdlname = "datapathaftab registerfile 4494" *) _1474_[0];
  assign _1540_ = _1520_ & (* hdlname = "datapathaftab registerfile 4495" *) _1533_;
  assign _1541_ = _1520_ & (* hdlname = "datapathaftab registerfile 4496" *) _1474_[0];
  assign _1542_ = _1521_ & (* hdlname = "datapathaftab registerfile 4497" *) _1533_;
  assign _1543_ = _1521_ & (* hdlname = "datapathaftab registerfile 4498" *) _1474_[0];
  assign _1544_ = _1522_ & (* hdlname = "datapathaftab registerfile 4499" *) _1533_;
  assign _1545_ = _1522_ & (* hdlname = "datapathaftab registerfile 4500" *) _1474_[0];
  assign _1546_ = _1523_ & (* hdlname = "datapathaftab registerfile 4501" *) _1533_;
  assign _1547_ = _1523_ & (* hdlname = "datapathaftab registerfile 4502" *) _1474_[0];
  assign _1548_ = _1524_ & (* hdlname = "datapathaftab registerfile 4503" *) _1533_;
  assign _1549_ = _1524_ & (* hdlname = "datapathaftab registerfile 4504" *) _1474_[0];
  assign _1550_ = _1525_ & (* hdlname = "datapathaftab registerfile 4505" *) _1533_;
  assign _1551_ = _1525_ & (* hdlname = "datapathaftab registerfile 4506" *) _1474_[0];
  assign _1552_ = _1526_ & (* hdlname = "datapathaftab registerfile 4507" *) _1533_;
  assign _1553_ = _1526_ & (* hdlname = "datapathaftab registerfile 4508" *) _1474_[0];
  assign _1554_ = _1527_ & (* hdlname = "datapathaftab registerfile 4509" *) _1533_;
  assign _1555_ = _1527_ & (* hdlname = "datapathaftab registerfile 4510" *) _1474_[0];
  assign _1556_ = _1528_ & (* hdlname = "datapathaftab registerfile 4511" *) _1533_;
  assign _1557_ = _1528_ & (* hdlname = "datapathaftab registerfile 4512" *) _1474_[0];
  assign _1558_ = _1529_ & (* hdlname = "datapathaftab registerfile 4513" *) _1533_;
  assign _1559_ = _1529_ & (* hdlname = "datapathaftab registerfile 4514" *) _1474_[0];
  assign _1560_ = _1530_ & (* hdlname = "datapathaftab registerfile 4515" *) _1533_;
  assign _1561_ = _1530_ & (* hdlname = "datapathaftab registerfile 4516" *) _1474_[0];
  assign _1562_ = _1531_ & (* hdlname = "datapathaftab registerfile 4517" *) _1533_;
  assign _1563_ = _1531_ & (* hdlname = "datapathaftab registerfile 4518" *) _1474_[0];
  assign _1564_ = _1532_ & (* hdlname = "datapathaftab registerfile 4519" *) _1533_;
  assign _1565_ = _1532_ & (* hdlname = "datapathaftab registerfile 4520" *) _1474_[0];
  assign _1598_ = _1534_ ? (* hdlname = "datapathaftab registerfile 4522" *) 32'd0 : \datapathaftab.registerfile.rdata [31:0];
  assign _1599_ = _1535_ ? (* hdlname = "datapathaftab registerfile 4524" *) 32'd0 : \datapathaftab.registerfile.rdata [63:32];
  assign _1600_ = _1536_ ? (* hdlname = "datapathaftab registerfile 4526" *) 32'd0 : \datapathaftab.registerfile.rdata [95:64];
  assign _1601_ = _1537_ ? (* hdlname = "datapathaftab registerfile 4528" *) 32'd0 : \datapathaftab.registerfile.rdata [127:96];
  assign _1602_ = _1538_ ? (* hdlname = "datapathaftab registerfile 4530" *) 32'd0 : \datapathaftab.registerfile.rdata [159:128];
  assign _1603_ = _1539_ ? (* hdlname = "datapathaftab registerfile 4532" *) 32'd0 : \datapathaftab.registerfile.rdata [191:160];
  assign _1604_ = _1540_ ? (* hdlname = "datapathaftab registerfile 4534" *) 32'd0 : \datapathaftab.registerfile.rdata [223:192];
  assign _1605_ = _1541_ ? (* hdlname = "datapathaftab registerfile 4536" *) 32'd0 : \datapathaftab.registerfile.rdata [255:224];
  assign _1606_ = _1542_ ? (* hdlname = "datapathaftab registerfile 4538" *) 32'd0 : \datapathaftab.registerfile.rdata [287:256];
  assign _1607_ = _1543_ ? (* hdlname = "datapathaftab registerfile 4540" *) 32'd0 : \datapathaftab.registerfile.rdata [319:288];
  assign _1608_ = _1544_ ? (* hdlname = "datapathaftab registerfile 4542" *) 32'd0 : \datapathaftab.registerfile.rdata [351:320];
  assign _1609_ = _1545_ ? (* hdlname = "datapathaftab registerfile 4544" *) 32'd0 : \datapathaftab.registerfile.rdata [383:352];
  assign _1610_ = _1546_ ? (* hdlname = "datapathaftab registerfile 4546" *) 32'd0 : \datapathaftab.registerfile.rdata [415:384];
  assign _1611_ = _1547_ ? (* hdlname = "datapathaftab registerfile 4548" *) 32'd0 : \datapathaftab.registerfile.rdata [447:416];
  assign _1612_ = _1548_ ? (* hdlname = "datapathaftab registerfile 4550" *) 32'd0 : \datapathaftab.registerfile.rdata [479:448];
  assign _1613_ = _1549_ ? (* hdlname = "datapathaftab registerfile 4552" *) 32'd0 : \datapathaftab.registerfile.rdata [511:480];
  assign _1614_ = _1550_ ? (* hdlname = "datapathaftab registerfile 4554" *) 32'd0 : \datapathaftab.registerfile.rdata [543:512];
  assign _1615_ = _1551_ ? (* hdlname = "datapathaftab registerfile 4556" *) 32'd0 : \datapathaftab.registerfile.rdata [575:544];
  assign _1616_ = _1552_ ? (* hdlname = "datapathaftab registerfile 4558" *) 32'd0 : \datapathaftab.registerfile.rdata [607:576];
  assign _1617_ = _1553_ ? (* hdlname = "datapathaftab registerfile 4560" *) 32'd0 : \datapathaftab.registerfile.rdata [639:608];
  assign _1618_ = _1554_ ? (* hdlname = "datapathaftab registerfile 4562" *) 32'd0 : \datapathaftab.registerfile.rdata [671:640];
  assign _1619_ = _1555_ ? (* hdlname = "datapathaftab registerfile 4564" *) 32'd0 : \datapathaftab.registerfile.rdata [703:672];
  assign _1620_ = _1556_ ? (* hdlname = "datapathaftab registerfile 4566" *) 32'd0 : \datapathaftab.registerfile.rdata [735:704];
  assign _1621_ = _1557_ ? (* hdlname = "datapathaftab registerfile 4568" *) 32'd0 : \datapathaftab.registerfile.rdata [767:736];
  assign _1622_ = _1558_ ? (* hdlname = "datapathaftab registerfile 4570" *) 32'd0 : \datapathaftab.registerfile.rdata [799:768];
  assign _1623_ = _1559_ ? (* hdlname = "datapathaftab registerfile 4572" *) 32'd0 : \datapathaftab.registerfile.rdata [831:800];
  assign _1624_ = _1560_ ? (* hdlname = "datapathaftab registerfile 4574" *) 32'd0 : \datapathaftab.registerfile.rdata [863:832];
  assign _1625_ = _1561_ ? (* hdlname = "datapathaftab registerfile 4576" *) 32'd0 : \datapathaftab.registerfile.rdata [895:864];
  assign _1626_ = _1562_ ? (* hdlname = "datapathaftab registerfile 4578" *) 32'd0 : \datapathaftab.registerfile.rdata [927:896];
  assign _1627_ = _1563_ ? (* hdlname = "datapathaftab registerfile 4580" *) 32'd0 : \datapathaftab.registerfile.rdata [959:928];
  assign _1628_ = _1564_ ? (* hdlname = "datapathaftab registerfile 4582" *) 32'd0 : \datapathaftab.registerfile.rdata [991:960];
  assign _1629_ = _1565_ ? (* hdlname = "datapathaftab registerfile 4584" *) 32'd0 : \datapathaftab.registerfile.rdata [1023:992];
  assign _1501_ = ~ (* hdlname = "datapathaftab registerfile 4587" *) _1474_[4];
  assign _1502_ = ~ (* hdlname = "datapathaftab registerfile 4589" *) _1474_[3];
  assign _1503_ = _1501_ & (* hdlname = "datapathaftab registerfile 4590" *) _1502_;
  assign _1504_ = _1501_ & (* hdlname = "datapathaftab registerfile 4591" *) _1474_[3];
  assign _1505_ = _1474_[4] & (* hdlname = "datapathaftab registerfile 4592" *) _1502_;
  assign _1506_ = _1474_[4] & (* hdlname = "datapathaftab registerfile 4593" *) _1474_[3];
  assign _1507_ = ~ (* hdlname = "datapathaftab registerfile 4595" *) _1474_[2];
  assign _1508_ = _1503_ & (* hdlname = "datapathaftab registerfile 4596" *) _1507_;
  assign _1509_ = _1503_ & (* hdlname = "datapathaftab registerfile 4597" *) _1474_[2];
  assign _1510_ = _1504_ & (* hdlname = "datapathaftab registerfile 4598" *) _1507_;
  assign _1511_ = _1504_ & (* hdlname = "datapathaftab registerfile 4599" *) _1474_[2];
  assign _1512_ = _1505_ & (* hdlname = "datapathaftab registerfile 4600" *) _1507_;
  assign _1513_ = _1505_ & (* hdlname = "datapathaftab registerfile 4601" *) _1474_[2];
  assign _1514_ = _1506_ & (* hdlname = "datapathaftab registerfile 4602" *) _1507_;
  assign _1515_ = _1506_ & (* hdlname = "datapathaftab registerfile 4603" *) _1474_[2];
  assign _1516_ = ~ (* hdlname = "datapathaftab registerfile 4605" *) _1474_[1];
  assign _1517_ = _1508_ & (* hdlname = "datapathaftab registerfile 4606" *) _1516_;
  assign _1518_ = _1508_ & (* hdlname = "datapathaftab registerfile 4607" *) _1474_[1];
  assign _1519_ = _1509_ & (* hdlname = "datapathaftab registerfile 4608" *) _1516_;
  assign _1520_ = _1509_ & (* hdlname = "datapathaftab registerfile 4609" *) _1474_[1];
  assign _1521_ = _1510_ & (* hdlname = "datapathaftab registerfile 4610" *) _1516_;
  assign _1522_ = _1510_ & (* hdlname = "datapathaftab registerfile 4611" *) _1474_[1];
  assign _1523_ = _1511_ & (* hdlname = "datapathaftab registerfile 4612" *) _1516_;
  assign _1524_ = _1511_ & (* hdlname = "datapathaftab registerfile 4613" *) _1474_[1];
  assign _1525_ = _1512_ & (* hdlname = "datapathaftab registerfile 4614" *) _1516_;
  assign _1526_ = _1512_ & (* hdlname = "datapathaftab registerfile 4615" *) _1474_[1];
  assign _1527_ = _1513_ & (* hdlname = "datapathaftab registerfile 4616" *) _1516_;
  assign _1528_ = _1513_ & (* hdlname = "datapathaftab registerfile 4617" *) _1474_[1];
  assign _1529_ = _1514_ & (* hdlname = "datapathaftab registerfile 4618" *) _1516_;
  assign _1530_ = _1514_ & (* hdlname = "datapathaftab registerfile 4619" *) _1474_[1];
  assign _1531_ = _1515_ & (* hdlname = "datapathaftab registerfile 4620" *) _1516_;
  assign _1532_ = _1515_ & (* hdlname = "datapathaftab registerfile 4621" *) _1474_[1];
  assign _1533_ = ~ (* hdlname = "datapathaftab registerfile 4623" *) _1474_[0];
  assign _1630_ = _1534_ ? (* hdlname = "datapathaftab registerfile 4657" *) \datapathaftab.registerfile.writedata  : \datapathaftab.registerfile.rdata [31:0];
  assign _1631_ = _1535_ ? (* hdlname = "datapathaftab registerfile 4659" *) \datapathaftab.registerfile.writedata  : \datapathaftab.registerfile.rdata [63:32];
  assign _1632_ = _1536_ ? (* hdlname = "datapathaftab registerfile 4661" *) \datapathaftab.registerfile.writedata  : \datapathaftab.registerfile.rdata [95:64];
  assign _1633_ = _1537_ ? (* hdlname = "datapathaftab registerfile 4663" *) \datapathaftab.registerfile.writedata  : \datapathaftab.registerfile.rdata [127:96];
  assign _1634_ = _1538_ ? (* hdlname = "datapathaftab registerfile 4665" *) \datapathaftab.registerfile.writedata  : \datapathaftab.registerfile.rdata [159:128];
  assign _1635_ = _1539_ ? (* hdlname = "datapathaftab registerfile 4667" *) \datapathaftab.registerfile.writedata  : \datapathaftab.registerfile.rdata [191:160];
  assign _1636_ = _1540_ ? (* hdlname = "datapathaftab registerfile 4669" *) \datapathaftab.registerfile.writedata  : \datapathaftab.registerfile.rdata [223:192];
  assign _1637_ = _1541_ ? (* hdlname = "datapathaftab registerfile 4671" *) \datapathaftab.registerfile.writedata  : \datapathaftab.registerfile.rdata [255:224];
  assign _1638_ = _1542_ ? (* hdlname = "datapathaftab registerfile 4673" *) \datapathaftab.registerfile.writedata  : \datapathaftab.registerfile.rdata [287:256];
  assign _1639_ = _1543_ ? (* hdlname = "datapathaftab registerfile 4675" *) \datapathaftab.registerfile.writedata  : \datapathaftab.registerfile.rdata [319:288];
  assign _1640_ = _1544_ ? (* hdlname = "datapathaftab registerfile 4677" *) \datapathaftab.registerfile.writedata  : \datapathaftab.registerfile.rdata [351:320];
  assign _1641_ = _1545_ ? (* hdlname = "datapathaftab registerfile 4679" *) \datapathaftab.registerfile.writedata  : \datapathaftab.registerfile.rdata [383:352];
  assign _1642_ = _1546_ ? (* hdlname = "datapathaftab registerfile 4681" *) \datapathaftab.registerfile.writedata  : \datapathaftab.registerfile.rdata [415:384];
  assign _1643_ = _1547_ ? (* hdlname = "datapathaftab registerfile 4683" *) \datapathaftab.registerfile.writedata  : \datapathaftab.registerfile.rdata [447:416];
  assign _1644_ = _1548_ ? (* hdlname = "datapathaftab registerfile 4685" *) \datapathaftab.registerfile.writedata  : \datapathaftab.registerfile.rdata [479:448];
  assign _1645_ = _1549_ ? (* hdlname = "datapathaftab registerfile 4687" *) \datapathaftab.registerfile.writedata  : \datapathaftab.registerfile.rdata [511:480];
  assign _1646_ = _1550_ ? (* hdlname = "datapathaftab registerfile 4689" *) \datapathaftab.registerfile.writedata  : \datapathaftab.registerfile.rdata [543:512];
  assign _1647_ = _1551_ ? (* hdlname = "datapathaftab registerfile 4691" *) \datapathaftab.registerfile.writedata  : \datapathaftab.registerfile.rdata [575:544];
  assign _1648_ = _1552_ ? (* hdlname = "datapathaftab registerfile 4693" *) \datapathaftab.registerfile.writedata  : \datapathaftab.registerfile.rdata [607:576];
  assign _1649_ = _1553_ ? (* hdlname = "datapathaftab registerfile 4695" *) \datapathaftab.registerfile.writedata  : \datapathaftab.registerfile.rdata [639:608];
  assign _1650_ = _1554_ ? (* hdlname = "datapathaftab registerfile 4697" *) \datapathaftab.registerfile.writedata  : \datapathaftab.registerfile.rdata [671:640];
  assign _1651_ = _1555_ ? (* hdlname = "datapathaftab registerfile 4699" *) \datapathaftab.registerfile.writedata  : \datapathaftab.registerfile.rdata [703:672];
  assign _1652_ = _1556_ ? (* hdlname = "datapathaftab registerfile 4701" *) \datapathaftab.registerfile.writedata  : \datapathaftab.registerfile.rdata [735:704];
  assign _1653_ = _1557_ ? (* hdlname = "datapathaftab registerfile 4703" *) \datapathaftab.registerfile.writedata  : \datapathaftab.registerfile.rdata [767:736];
  assign _1654_ = _1558_ ? (* hdlname = "datapathaftab registerfile 4705" *) \datapathaftab.registerfile.writedata  : \datapathaftab.registerfile.rdata [799:768];
  assign _1655_ = _1559_ ? (* hdlname = "datapathaftab registerfile 4707" *) \datapathaftab.registerfile.writedata  : \datapathaftab.registerfile.rdata [831:800];
  assign _1656_ = _1560_ ? (* hdlname = "datapathaftab registerfile 4709" *) \datapathaftab.registerfile.writedata  : \datapathaftab.registerfile.rdata [863:832];
  assign _1657_ = _1561_ ? (* hdlname = "datapathaftab registerfile 4711" *) \datapathaftab.registerfile.writedata  : \datapathaftab.registerfile.rdata [895:864];
  assign _1658_ = _1562_ ? (* hdlname = "datapathaftab registerfile 4713" *) \datapathaftab.registerfile.writedata  : \datapathaftab.registerfile.rdata [927:896];
  assign _1659_ = _1563_ ? (* hdlname = "datapathaftab registerfile 4715" *) \datapathaftab.registerfile.writedata  : \datapathaftab.registerfile.rdata [959:928];
  assign _1660_ = _1564_ ? (* hdlname = "datapathaftab registerfile 4717" *) \datapathaftab.registerfile.writedata  : \datapathaftab.registerfile.rdata [991:960];
  assign _1661_ = _1565_ ? (* hdlname = "datapathaftab registerfile 4719" *) \datapathaftab.registerfile.writedata  : \datapathaftab.registerfile.rdata [1023:992];
  assign _1663_ = \datapathaftab.ldpc  ? (* hdlname = "datapathaftab regpc 4067" *) \datapathaftab.inpc  : \datapathaftab.daru1.datapath.addrreg.inreg ;
  assign \datapathaftab.m2wb_mem_res_next  = \datapathaftab.e2m_ctrl_word_curr [12] ? (* hdlname = "datapathaftab sulu 5008" *) { \datapathaftab.daru2.datapath.reg0.outreg [7], \datapathaftab.daru2.datapath.reg0.outreg [7], \datapathaftab.daru2.datapath.reg0.outreg [7], \datapathaftab.daru2.datapath.reg0.outreg [7], \datapathaftab.daru2.datapath.reg0.outreg [7], \datapathaftab.daru2.datapath.reg0.outreg [7], \datapathaftab.daru2.datapath.reg0.outreg [7], \datapathaftab.daru2.datapath.reg0.outreg [7], \datapathaftab.daru2.datapath.reg0.outreg [7], \datapathaftab.daru2.datapath.reg0.outreg [7], \datapathaftab.daru2.datapath.reg0.outreg [7], \datapathaftab.daru2.datapath.reg0.outreg [7], \datapathaftab.daru2.datapath.reg0.outreg [7], \datapathaftab.daru2.datapath.reg0.outreg [7], \datapathaftab.daru2.datapath.reg0.outreg [7], \datapathaftab.daru2.datapath.reg0.outreg [7], \datapathaftab.daru2.datapath.reg0.outreg [7], \datapathaftab.daru2.datapath.reg0.outreg [7], \datapathaftab.daru2.datapath.reg0.outreg [7], \datapathaftab.daru2.datapath.reg0.outreg [7], \datapathaftab.daru2.datapath.reg0.outreg [7], \datapathaftab.daru2.datapath.reg0.outreg [7], \datapathaftab.daru2.datapath.reg0.outreg [7], \datapathaftab.daru2.datapath.reg0.outreg [7], \datapathaftab.daru2.datapath.reg0.outreg [7:0] } : _1664_;
  assign _1664_ = \datapathaftab.e2m_ctrl_word_curr [13] ? (* hdlname = "datapathaftab sulu 5032" *) { \datapathaftab.daru2.datapath.reg0.outreg [15], \datapathaftab.daru2.datapath.reg0.outreg [15], \datapathaftab.daru2.datapath.reg0.outreg [15], \datapathaftab.daru2.datapath.reg0.outreg [15], \datapathaftab.daru2.datapath.reg0.outreg [15], \datapathaftab.daru2.datapath.reg0.outreg [15], \datapathaftab.daru2.datapath.reg0.outreg [15], \datapathaftab.daru2.datapath.reg0.outreg [15], \datapathaftab.daru2.datapath.reg0.outreg [15], \datapathaftab.daru2.datapath.reg0.outreg [15], \datapathaftab.daru2.datapath.reg0.outreg [15], \datapathaftab.daru2.datapath.reg0.outreg [15], \datapathaftab.daru2.datapath.reg0.outreg [15], \datapathaftab.daru2.datapath.reg0.outreg [15], \datapathaftab.daru2.datapath.reg0.outreg [15], \datapathaftab.daru2.datapath.reg0.outreg [15], \datapathaftab.daru2.datapath.reg0.outreg  } : _1665_;
  assign _1665_ = \datapathaftab.e2m_ctrl_word_curr [14] ? (* hdlname = "datapathaftab sulu 5033" *) { \datapathaftab.daru2.datapath.reg1.outreg , \datapathaftab.daru2.datapath.reg0.outreg  } : 32'd0;
  assign addsubbar = \controlleraftab.addsubbar ;
  assign branch_taken = \controlleraftab.branch_taken ;
  assign bytesPort1 = \datapathaftab.daru1.datapath.bytestoread_temp ;
  assign bytesPort2 = \datapathaftab.bytespermemaccess ;
  assign checkmisaligneddawu = \controlleraftab.checkmisaligneddawu ;
  assign clrcsr = \controlleraftab.clrcsr ;
  assign cmp_selaluop2 = \controlleraftab.cmp_selaluop2 ;
  assign cmp_selop2 = \controlleraftab.cmp_selop2 ;
  assign comparedsignedunsignedbar = \controlleraftab.comparedsignedunsignedbar ;
  assign completedaau = \controlleraftab.completedaau ;
  assign completeddaru1 = \controlleraftab.completeddaru1 ;
  assign completeddaru2 = \controlleraftab.completeddaru2 ;
  assign completeddawu = \controlleraftab.completeddawu ;
  assign \controlleraftab.clk  = clk;
  assign \controlleraftab.d2e_en  = \controlleraftab.d2e_en_temp ;
  assign \controlleraftab.delegationmode [1] = \datapathaftab.interrcheckcausedetection.delegationmode [1];
  assign \controlleraftab.dncntcsr  = 1'h0;
  assign \controlleraftab.e2m_en  = \controlleraftab.e2m_en_temp ;
  assign \controlleraftab.func12  = \controlleraftab.ir [31:20];
  assign \controlleraftab.func3  = \controlleraftab.ir [14:12];
  assign \controlleraftab.func7  = \controlleraftab.ir [31:25];
  assign \controlleraftab.gi2d_en_temp  = \controlleraftab.gi2d_en ;
  assign { \controlleraftab.ir [19:15], \controlleraftab.ir [11:7] } = { \datapathaftab.gi2d_instr_curr [19:15], \datapathaftab.gi2d_instr_curr [11:7] };
  assign \controlleraftab.is_load_in_mem  = \datapathaftab.e2m_ctrl_word_curr [35];
  assign \controlleraftab.is_store_in_mem  = \datapathaftab.e2m_ctrl_word_curr [34];
  assign \controlleraftab.m2wb_en  = \controlleraftab.m2wb_en_temp ;
  assign \controlleraftab.modetvec  = \datapathaftab.d2e_outcsr_next [1:0];
  assign \controlleraftab.mretoruretbar  = \datapathaftab.m2wb_instr_curr [29];
  assign \controlleraftab.opcode  = \controlleraftab.ir [6:0];
  assign \controlleraftab.previousprv  = \datapathaftab.csrisl.outcsr [12:11];
  assign \controlleraftab.rst  = rst;
  assign \controlleraftab.selcsraddrfrominst  = \controlleraftab.iscsrinstruction ;
  assign \controlleraftab.setzeroorone  = \controlleraftab.cmp_selaluop2 ;
  assign \controlleraftab.startdaru  = \controlleraftab.selmem ;
  assign \controlleraftab.startdawu  = \controlleraftab.checkmisaligneddawu ;
  assign \controlleraftab.wb_func3  = \datapathaftab.m2wb_instr_curr [14:12];
  assign \controlleraftab.wb_iscsrinstruction  = \datapathaftab.m2wb_ctrl_word_curr [59];
  assign \controlleraftab.wb_mreturetbar  = \datapathaftab.m2wb_instr_curr [29];
  assign \controlleraftab.wb_ret_from_epc  = \datapathaftab.m2wb_ctrl_word_curr [53];
  assign \controlleraftab.writerb_inst  = 1'h0;
  assign csr_from_wb = \controlleraftab.csr_from_wb ;
  assign d2e_en = \controlleraftab.d2e_en_temp ;
  assign d2e_rst = \controlleraftab.d2e_rst ;
  assign \datapathaftab.aau.clk  = clk;
  assign \datapathaftab.aau.completeaau  = \controlleraftab.completedaau ;
  assign \datapathaftab.aau.dividedbyzeroflag  = \datapathaftab.aau.division.dividedbyzeroflag ;
  assign \datapathaftab.aau.division.clk  = clk;
  assign \datapathaftab.aau.division.ddin  = \datapathaftab.aau.division.tcldividend.aout ;
  assign \datapathaftab.aau.division.dividend  = \datapathaftab.aau.ain ;
  assign \datapathaftab.aau.division.divisor  = \datapathaftab.aau.bin ;
  assign \datapathaftab.aau.division.donesdiv  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.donediv ;
  assign \datapathaftab.aau.division.drin  = \datapathaftab.aau.division.tcldivisor.aout ;
  assign \datapathaftab.aau.division.enr  = \datapathaftab.aau.division.endd ;
  assign \datapathaftab.aau.division.qout  = \datapathaftab.aau.division.tclq.aout ;
  assign \datapathaftab.aau.division.qp  = \datapathaftab.aau.division.tclq.ain ;
  assign \datapathaftab.aau.division.remout  = \datapathaftab.aau.division.tclrem.aout ;
  assign \datapathaftab.aau.division.remp  = \datapathaftab.aau.division.unsigneddiv.datapathdiv.rprev ;
  assign \datapathaftab.aau.division.rst  = rst;
  assign \datapathaftab.aau.division.sync_rst  = \datapathaftab.d2e_rst_def ;
  assign \datapathaftab.aau.division.tcldividend.ain  = \datapathaftab.aau.ain ;
  assign \datapathaftab.aau.division.tcldividend.en  = \datapathaftab.aau.division.endd ;
  assign \datapathaftab.aau.division.tcldivisor.ain  = \datapathaftab.aau.bin ;
  assign \datapathaftab.aau.division.tcldivisor.en  = \datapathaftab.aau.division.endr ;
  assign \datapathaftab.aau.division.tclq.en  = \datapathaftab.aau.division.enq ;
  assign \datapathaftab.aau.division.tclrem.ain  = \datapathaftab.aau.division.unsigneddiv.datapathdiv.rprev [31:0];
  assign \datapathaftab.aau.division.tclrem.en  = \datapathaftab.aau.division.endd ;
  assign \datapathaftab.aau.division.unsigneddiv.clk  = clk;
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.clk  = clk;
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.clk  = clk;
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.cocnt  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.cocnt ;
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.cocntp  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.cocnt ;
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.initvalue  = 6'h1e;
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.outcnt  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.temp ;
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.rst  = rst;
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.zerocnt  = 1'h0;
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.inccnt  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.inccnt ;
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.initcnt  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.ldregm  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.ldregr  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.inccnt ;
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.r33  = \datapathaftab.aau.division.unsigneddiv.datapathdiv.sub [32];
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.rst  = rst;
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.seldividend  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.selline1  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.inccnt ;
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.shlregr  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.shlregq ;
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.shrregq  = 1'h0;
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.shrregr  = 1'h0;
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.startdiv  = \datapathaftab.aau.division.safestart ;
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.sync_rst  = \datapathaftab.d2e_rst_def ;
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.zerocnt  = 1'h0;
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.zeroregm  = 1'h0;
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.zeroregq  = 1'h0;
  assign \datapathaftab.aau.division.unsigneddiv.controllerdiv.zeroregr  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.addresult  = \datapathaftab.aau.division.unsigneddiv.datapathdiv.mux34b.w ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.clk  = clk;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.dividend  = \datapathaftab.aau.division.tcldividend.aout ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.divisor  = \datapathaftab.aau.division.tcldivisor.aout ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.divisorp  = { 1'h0, \datapathaftab.aau.division.tcldivisor.aout  };
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.ldregm  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.ldregq  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.ldregq ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.ldregr  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.inccnt ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.leftbitoutq  = \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregq.6866.seroutp ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.line1  = { \datapathaftab.aau.division.tclq.ain [31:1], \datapathaftab.aau.division.unsigneddiv.controllerdiv.qq0  };
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.mux33b.a  = \datapathaftab.aau.division.tcldividend.aout ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.mux33b.b  = { \datapathaftab.aau.division.tclq.ain [31:1], \datapathaftab.aau.division.unsigneddiv.controllerdiv.qq0  };
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.mux33b.s0  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.mux33b.s1  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.inccnt ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.mux34b.a [32] = \datapathaftab.aau.division.unsigneddiv.datapathdiv.sub [32];
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.mux34b.b  = \datapathaftab.aau.division.unsigneddiv.datapathdiv.rprev ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.mux34b.s0  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.qq0 ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.mux34b.s1  = \datapathaftab.aau.division.unsigneddiv.datapathdiv.sub [32];
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.outmux1  = \datapathaftab.aau.division.unsigneddiv.datapathdiv.mux33b.w ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.q  = \datapathaftab.aau.division.tclq.ain ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.qprev  = \datapathaftab.aau.division.tclq.ain ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.qq0  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.qq0 ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.r33  = \datapathaftab.aau.division.unsigneddiv.datapathdiv.sub [32];
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.regm.clk  = clk;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.regm.inreg  = { 1'h0, \datapathaftab.aau.division.tcldivisor.aout  };
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.regm.load  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.regm.outreg  = \datapathaftab.aau.division.unsigneddiv.datapathdiv.m ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.regm.rst  = rst;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.regm.zero  = 1'h0;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.remainder  = \datapathaftab.aau.division.unsigneddiv.datapathdiv.rprev ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.rst  = rst;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.seldividend  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.selline1  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.inccnt ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.shlregq  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.shlregq ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.shlregr  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.shlregq ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregq.6866.outreg_t  = \datapathaftab.aau.division.tclq.ain ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregq.clk  = clk;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregq.inreg  = \datapathaftab.aau.division.unsigneddiv.datapathdiv.mux33b.w ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregq.load  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.ldregq ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregq.outreg  = \datapathaftab.aau.division.tclq.ain ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregq.rst  = rst;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregq.serin  = 1'h0;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregq.serout  = \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregq.6866.seroutp ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregq.shiftl  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.shlregq ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregq.shiftr  = 1'h0;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregq.zero  = 1'h0;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregr.6833.outreg_t  = \datapathaftab.aau.division.unsigneddiv.datapathdiv.rprev ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregr.clk  = clk;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregr.inreg  = \datapathaftab.aau.division.unsigneddiv.datapathdiv.mux34b.w ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregr.load  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.inccnt ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregr.outreg  = \datapathaftab.aau.division.unsigneddiv.datapathdiv.rprev ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregr.rst  = rst;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregr.serin  = \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregq.6866.seroutp ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregr.shiftl  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.shlregq ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregr.shiftr  = 1'h0;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.shregr.zero  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.shrregq  = 1'h0;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.shrregr  = 1'h0;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.smux  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.qq0 ;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.sub [31:0] = \datapathaftab.aau.division.unsigneddiv.datapathdiv.mux34b.a [31:0];
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.zeroregm  = 1'h0;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.zeroregq  = 1'h0;
  assign \datapathaftab.aau.division.unsigneddiv.datapathdiv.zeroregr  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \datapathaftab.aau.division.unsigneddiv.dividend  = \datapathaftab.aau.division.tcldividend.aout ;
  assign \datapathaftab.aau.division.unsigneddiv.divisor  = \datapathaftab.aau.division.tcldivisor.aout ;
  assign \datapathaftab.aau.division.unsigneddiv.donediv  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.donediv ;
  assign \datapathaftab.aau.division.unsigneddiv.ldregm  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \datapathaftab.aau.division.unsigneddiv.ldregq  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.ldregq ;
  assign \datapathaftab.aau.division.unsigneddiv.ldregr  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.inccnt ;
  assign \datapathaftab.aau.division.unsigneddiv.q  = \datapathaftab.aau.division.tclq.ain ;
  assign \datapathaftab.aau.division.unsigneddiv.qq0  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.qq0 ;
  assign \datapathaftab.aau.division.unsigneddiv.r33  = \datapathaftab.aau.division.unsigneddiv.datapathdiv.sub [32];
  assign \datapathaftab.aau.division.unsigneddiv.remainder  = \datapathaftab.aau.division.unsigneddiv.datapathdiv.rprev ;
  assign \datapathaftab.aau.division.unsigneddiv.rst  = rst;
  assign \datapathaftab.aau.division.unsigneddiv.seldividend  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \datapathaftab.aau.division.unsigneddiv.selline1  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.inccnt ;
  assign \datapathaftab.aau.division.unsigneddiv.shlregq  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.shlregq ;
  assign \datapathaftab.aau.division.unsigneddiv.shlregr  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.shlregq ;
  assign \datapathaftab.aau.division.unsigneddiv.shrregq  = 1'h0;
  assign \datapathaftab.aau.division.unsigneddiv.shrregr  = 1'h0;
  assign \datapathaftab.aau.division.unsigneddiv.startdiv  = \datapathaftab.aau.division.safestart ;
  assign \datapathaftab.aau.division.unsigneddiv.sync_rst  = \datapathaftab.d2e_rst_def ;
  assign \datapathaftab.aau.division.unsigneddiv.zeroregm  = 1'h0;
  assign \datapathaftab.aau.division.unsigneddiv.zeroregq  = 1'h0;
  assign \datapathaftab.aau.division.unsigneddiv.zeroregr  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \datapathaftab.aau.donediv  = \datapathaftab.aau.division.unsigneddiv.controllerdiv.donediv ;
  assign \datapathaftab.aau.multiplication.clk  = clk;
  assign \datapathaftab.aau.multiplication.controller.clk  = clk;
  assign \datapathaftab.aau.multiplication.controller.cnt_rst  = 1'h0;
  assign \datapathaftab.aau.multiplication.controller.counter.clk  = clk;
  assign \datapathaftab.aau.multiplication.controller.counter.cocnt  = \datapathaftab.aau.multiplication.controller.co ;
  assign \datapathaftab.aau.multiplication.controller.counter.cocntp  = \datapathaftab.aau.multiplication.controller.co ;
  assign \datapathaftab.aau.multiplication.controller.counter.inccnt  = \datapathaftab.aau.multiplication.controller.cnt_en ;
  assign \datapathaftab.aau.multiplication.controller.counter.initvalue  = 6'h1f;
  assign \datapathaftab.aau.multiplication.controller.counter.outcnt  = \datapathaftab.aau.multiplication.controller.counter.temp ;
  assign \datapathaftab.aau.multiplication.controller.counter.rst  = rst;
  assign \datapathaftab.aau.multiplication.controller.counter.zerocnt  = 1'h0;
  assign \datapathaftab.aau.multiplication.controller.done  = \datapathaftab.aau.donemult ;
  assign \datapathaftab.aau.multiplication.controller.initcnt  = \datapathaftab.aau.multiplication.controller.counter.initcnt ;
  assign \datapathaftab.aau.multiplication.controller.ldm  = \datapathaftab.aau.multiplication.controller.counter.initcnt ;
  assign \datapathaftab.aau.multiplication.controller.ldmr  = \datapathaftab.aau.multiplication.controller.counter.initcnt ;
  assign \datapathaftab.aau.multiplication.controller.ldp  = \datapathaftab.aau.multiplication.controller.cnt_en ;
  assign \datapathaftab.aau.multiplication.controller.op  = \datapathaftab.aau.multiplication.datapath.mrreg.6594.outreg_t [1:0];
  assign \datapathaftab.aau.multiplication.controller.rst  = rst;
  assign \datapathaftab.aau.multiplication.controller.shrmr  = \datapathaftab.aau.multiplication.controller.cnt_en ;
  assign \datapathaftab.aau.multiplication.controller.sync_rst  = \datapathaftab.d2e_rst_def ;
  assign \datapathaftab.aau.multiplication.controller.zerop  = \datapathaftab.aau.multiplication.controller.counter.initcnt ;
  assign \datapathaftab.aau.multiplication.datapath.addsub.a  = \datapathaftab.aau.multiplication.datapath.addsub.add.a ;
  assign \datapathaftab.aau.multiplication.datapath.addsub.add.addresult  = \datapathaftab.aau.multiplication.datapath.addsub.add.add [32:0];
  assign \datapathaftab.aau.multiplication.datapath.addsub.add.carryout  = \datapathaftab.aau.multiplication.datapath.addsub.add.add [33];
  assign \datapathaftab.aau.multiplication.datapath.addsub.add.cin  = \datapathaftab.aau.multiplication.controller.subsel ;
  assign \datapathaftab.aau.multiplication.datapath.addsub.addsubresult  = \datapathaftab.aau.multiplication.datapath.addsub.add.add [32:0];
  assign \datapathaftab.aau.multiplication.datapath.addsub.bsel  = \datapathaftab.aau.multiplication.datapath.addsub.add.b ;
  assign \datapathaftab.aau.multiplication.datapath.addsub.cout  = \datapathaftab.aau.multiplication.datapath.addsub.add.add [33];
  assign \datapathaftab.aau.multiplication.datapath.addsub.outres  = \datapathaftab.aau.multiplication.datapath.addsub.add.add [32:0];
  assign \datapathaftab.aau.multiplication.datapath.addsub.pass  = 1'h0;
  assign \datapathaftab.aau.multiplication.datapath.addsub.subsel  = \datapathaftab.aau.multiplication.controller.subsel ;
  assign \datapathaftab.aau.multiplication.datapath.clk  = clk;
  assign \datapathaftab.aau.multiplication.datapath.ldm  = \datapathaftab.aau.multiplication.controller.counter.initcnt ;
  assign \datapathaftab.aau.multiplication.datapath.ldmr  = \datapathaftab.aau.multiplication.controller.counter.initcnt ;
  assign \datapathaftab.aau.multiplication.datapath.ldp  = \datapathaftab.aau.multiplication.controller.cnt_en ;
  assign \datapathaftab.aau.multiplication.datapath.m  = \datapathaftab.aau.in1mult ;
  assign \datapathaftab.aau.multiplication.datapath.mr  = \datapathaftab.aau.in2mult ;
  assign \datapathaftab.aau.multiplication.datapath.mreg.clk  = clk;
  assign \datapathaftab.aau.multiplication.datapath.mreg.inreg  = \datapathaftab.aau.in1mult ;
  assign \datapathaftab.aau.multiplication.datapath.mreg.load  = \datapathaftab.aau.multiplication.controller.counter.initcnt ;
  assign \datapathaftab.aau.multiplication.datapath.mreg.outreg  = \datapathaftab.aau.multiplication.datapath.addsub.b ;
  assign \datapathaftab.aau.multiplication.datapath.mreg.rst  = rst;
  assign \datapathaftab.aau.multiplication.datapath.mreg.zero  = 1'h0;
  assign \datapathaftab.aau.multiplication.datapath.mrreg.clk  = clk;
  assign \datapathaftab.aau.multiplication.datapath.mrreg.inreg  = { \datapathaftab.aau.in2mult , 1'h0 };
  assign \datapathaftab.aau.multiplication.datapath.mrreg.load  = \datapathaftab.aau.multiplication.controller.counter.initcnt ;
  assign \datapathaftab.aau.multiplication.datapath.mrreg.outreg  = \datapathaftab.aau.multiplication.datapath.mrreg.6594.outreg_t ;
  assign \datapathaftab.aau.multiplication.datapath.mrreg.rst  = rst;
  assign \datapathaftab.aau.multiplication.datapath.mrreg.shiftl  = 1'h0;
  assign \datapathaftab.aau.multiplication.datapath.mrreg.shiftr  = \datapathaftab.aau.multiplication.controller.cnt_en ;
  assign \datapathaftab.aau.multiplication.datapath.mrreg.zero  = 1'h0;
  assign \datapathaftab.aau.multiplication.datapath.op  = \datapathaftab.aau.multiplication.datapath.mrreg.6594.outreg_t [1:0];
  assign \datapathaftab.aau.multiplication.datapath.outm  = \datapathaftab.aau.multiplication.datapath.addsub.b ;
  assign \datapathaftab.aau.multiplication.datapath.outmr  = \datapathaftab.aau.multiplication.datapath.mrreg.6594.outreg_t ;
  assign \datapathaftab.aau.multiplication.datapath.p  = { \datapathaftab.aau.multiplication.datapath.addsub.add.a , \datapathaftab.aau.multiplication.datapath.mrreg.6594.outreg_t [33:1] };
  assign \datapathaftab.aau.multiplication.datapath.pout  = \datapathaftab.aau.multiplication.datapath.addsub.add.a ;
  assign \datapathaftab.aau.multiplication.datapath.preg.clk  = clk;
  assign \datapathaftab.aau.multiplication.datapath.preg.inreg  = \datapathaftab.aau.multiplication.datapath.pin ;
  assign \datapathaftab.aau.multiplication.datapath.preg.load  = \datapathaftab.aau.multiplication.controller.cnt_en ;
  assign \datapathaftab.aau.multiplication.datapath.preg.outreg  = \datapathaftab.aau.multiplication.datapath.addsub.add.a ;
  assign \datapathaftab.aau.multiplication.datapath.preg.rst  = rst;
  assign \datapathaftab.aau.multiplication.datapath.preg.zero  = \datapathaftab.aau.multiplication.controller.counter.initcnt ;
  assign \datapathaftab.aau.multiplication.datapath.result  = \datapathaftab.aau.multiplication.datapath.addsub.add.add [32:0];
  assign \datapathaftab.aau.multiplication.datapath.rst  = rst;
  assign \datapathaftab.aau.multiplication.datapath.seimr  = \datapathaftab.aau.multiplication.datapath.mrreg.serin ;
  assign \datapathaftab.aau.multiplication.datapath.sel  = \datapathaftab.aau.multiplication.controller.sel ;
  assign \datapathaftab.aau.multiplication.datapath.shmr  = { \datapathaftab.aau.in2mult , 1'h0 };
  assign \datapathaftab.aau.multiplication.datapath.shrmr  = \datapathaftab.aau.multiplication.controller.cnt_en ;
  assign \datapathaftab.aau.multiplication.datapath.subsel  = \datapathaftab.aau.multiplication.controller.subsel ;
  assign \datapathaftab.aau.multiplication.datapath.zerop  = \datapathaftab.aau.multiplication.controller.counter.initcnt ;
  assign \datapathaftab.aau.multiplication.donebooth  = \datapathaftab.aau.donemult ;
  assign \datapathaftab.aau.multiplication.ldm  = \datapathaftab.aau.multiplication.controller.counter.initcnt ;
  assign \datapathaftab.aau.multiplication.ldmr  = \datapathaftab.aau.multiplication.controller.counter.initcnt ;
  assign \datapathaftab.aau.multiplication.ldp  = \datapathaftab.aau.multiplication.controller.cnt_en ;
  assign \datapathaftab.aau.multiplication.m  = \datapathaftab.aau.in1mult ;
  assign \datapathaftab.aau.multiplication.mr  = \datapathaftab.aau.in2mult ;
  assign \datapathaftab.aau.multiplication.op  = \datapathaftab.aau.multiplication.datapath.mrreg.6594.outreg_t [1:0];
  assign \datapathaftab.aau.multiplication.p  = { \datapathaftab.aau.multiplication.datapath.addsub.add.a , \datapathaftab.aau.multiplication.datapath.mrreg.6594.outreg_t [33:1] };
  assign \datapathaftab.aau.multiplication.rst  = rst;
  assign \datapathaftab.aau.multiplication.sel  = \datapathaftab.aau.multiplication.controller.sel ;
  assign \datapathaftab.aau.multiplication.shrmr  = \datapathaftab.aau.multiplication.controller.cnt_en ;
  assign \datapathaftab.aau.multiplication.startbooth  = \datapathaftab.aau.multiplication.controller.startbooth ;
  assign \datapathaftab.aau.multiplication.subsel  = \datapathaftab.aau.multiplication.controller.subsel ;
  assign \datapathaftab.aau.multiplication.sync_rst  = \datapathaftab.d2e_rst_def ;
  assign \datapathaftab.aau.multiplication.zerop  = \datapathaftab.aau.multiplication.controller.counter.initcnt ;
  assign \datapathaftab.aau.quotient  = \datapathaftab.aau.division.tclq.aout ;
  assign \datapathaftab.aau.remainder  = \datapathaftab.aau.division.tclrem.aout ;
  assign \datapathaftab.aau.resmult  = { \datapathaftab.aau.multiplication.datapath.addsub.add.a , \datapathaftab.aau.multiplication.datapath.mrreg.6594.outreg_t [33:1] };
  assign \datapathaftab.aau.resmulth  = { \datapathaftab.aau.multiplication.datapath.addsub.add.a [30:0], \datapathaftab.aau.multiplication.datapath.mrreg.6594.outreg_t [33] };
  assign \datapathaftab.aau.resmultl  = \datapathaftab.aau.multiplication.datapath.mrreg.6594.outreg_t [32:1];
  assign \datapathaftab.aau.rst  = rst;
  assign \datapathaftab.aau.signedsigned  = \datapathaftab.d2e_ctrl_word_curr [38];
  assign \datapathaftab.aau.signedunsigned  = \datapathaftab.d2e_ctrl_word_curr [39];
  assign \datapathaftab.aau.signedunsignedbardiv  = \datapathaftab.aau.division.signedunsignedbar ;
  assign \datapathaftab.aau.startdivideaau  = \datapathaftab.aau.division.startsdiv ;
  assign \datapathaftab.aau.startmultaau  = \datapathaftab.aau.multiplication.controller.startbooth ;
  assign \datapathaftab.aau.sync_rst  = \datapathaftab.d2e_rst_def ;
  assign \datapathaftab.aau.unsignedunsigned  = \datapathaftab.d2e_ctrl_word_curr [40];
  assign \datapathaftab.addsub.a  = \datapathaftab.aau.ain ;
  assign \datapathaftab.addsub.add.a  = \datapathaftab.aau.ain ;
  assign \datapathaftab.addsub.add.addresult  = \datapathaftab.addsub.add.add [31:0];
  assign \datapathaftab.addsub.add.carryout  = \datapathaftab.addsub.add.add [32];
  assign \datapathaftab.addsub.add.cin  = \datapathaftab.d2e_ctrl_word_curr [17];
  assign \datapathaftab.addsub.addsubresult  = \datapathaftab.addsub.add.add [31:0];
  assign \datapathaftab.addsub.b  = \datapathaftab.aau.bin ;
  assign \datapathaftab.addsub.bsel  = \datapathaftab.addsub.add.b ;
  assign \datapathaftab.addsub.cout  = \datapathaftab.addsub.add.add [32];
  assign \datapathaftab.addsub.pass  = \datapathaftab.d2e_ctrl_word_curr [18];
  assign \datapathaftab.addsub.subsel  = \datapathaftab.d2e_ctrl_word_curr [17];
  assign \datapathaftab.addsubbar  = \controlleraftab.addsubbar ;
  assign \datapathaftab.asuresult  = \datapathaftab.addsub.outres ;
  assign \datapathaftab.branch_taken  = \controlleraftab.branch_taken ;
  assign \datapathaftab.branch_taken_int  = \controlleraftab.branch_taken ;
  assign \datapathaftab.bsu.nsh  = \datapathaftab.aau.bin [4:0];
  assign \datapathaftab.bsu.selsh  = \datapathaftab.d2e_ctrl_word_curr [16:15];
  assign \datapathaftab.bsu.shin  = \datapathaftab.aau.ain ;
  assign \datapathaftab.bsuresult  = \datapathaftab.bsu.shout ;
  assign \datapathaftab.bypass_zero_first_operand  = \datapathaftab.hazm_zero_first_operand ;
  assign \datapathaftab.bypass_zero_second_operand  = \datapathaftab.hazm_zero_second_operand ;
  assign \datapathaftab.bytestoreaddaru1  = \datapathaftab.daru1.datapath.bytestoread_temp ;
  assign \datapathaftab.causecode  = \datapathaftab.csrisl.causecode ;
  assign \datapathaftab.causecodetemp  = { \datapathaftab.csrisl.causecode [31], \datapathaftab.csrisl.causecode [4:0] };
  assign \datapathaftab.ccmie  = { \datapathaftab.interrcheckcausedetection.miecc [31:16], \datapathaftab.register_bank.mieccregister.outreg [15:12], \datapathaftab.interrcheckcausedetection.miecc [11], \datapathaftab.register_bank.mieccregister.outreg [10:9], \datapathaftab.interrcheckcausedetection.miecc [8:7], \datapathaftab.register_bank.mieccregister.outreg [6:5], \datapathaftab.interrcheckcausedetection.miecc [4:3], \datapathaftab.register_bank.mieccregister.outreg [2:1], \datapathaftab.interrcheckcausedetection.miecc [0] };
  assign \datapathaftab.ccmiefield  = \datapathaftab.interrcheckcausedetection.miefieldcc ;
  assign \datapathaftab.ccmip  = \datapathaftab.csrisl.ccmip ;
  assign \datapathaftab.ccuiefield  = \datapathaftab.interrcheckcausedetection.uiefieldcc ;
  assign \datapathaftab.checkmisaligneddawu  = \controlleraftab.checkmisaligneddawu ;
  assign \datapathaftab.clk  = clk;
  assign \datapathaftab.clrcsr  = \controlleraftab.clrcsr ;
  assign \datapathaftab.cmp_op2  = \datapathaftab.comparator.bin ;
  assign \datapathaftab.cmp_selaluop2  = \controlleraftab.cmp_selaluop2 ;
  assign \datapathaftab.cmp_selop2  = \controlleraftab.cmp_selop2 ;
  assign \datapathaftab.cntoutput  = \datapathaftab.csraddressingdecoder.cntoutput ;
  assign \datapathaftab.comparator.ainp [30:0] = \datapathaftab.comparator.ain [30:0];
  assign \datapathaftab.comparator.binp [30:0] = \datapathaftab.comparator.bin [30:0];
  assign \datapathaftab.comparator.comparesignedunsignedbar  = \datapathaftab.d2e_ctrl_word_curr [2];
  assign \datapathaftab.comparedsignedunsignedbar  = \controlleraftab.comparedsignedunsignedbar ;
  assign \datapathaftab.comparisonresult  = { 31'h00000000, \datapathaftab.registerfile.setone  };
  assign \datapathaftab.completedaau  = \controlleraftab.completedaau ;
  assign \datapathaftab.completedaau_aau  = \controlleraftab.completedaau ;
  assign \datapathaftab.completedaau_int  = \controlleraftab.completedaau ;
  assign \datapathaftab.completeddaru1_def  = \controlleraftab.completeddaru1 ;
  assign \datapathaftab.completeddaru1_def_int  = \controlleraftab.completeddaru1 ;
  assign \datapathaftab.completeddaru2_def  = \controlleraftab.completeddaru2 ;
  assign \datapathaftab.completeddawu_def  = \controlleraftab.completeddawu ;
  assign \datapathaftab.csr_address_ctrl.addressregbank  = \datapathaftab.addressregbank ;
  assign \datapathaftab.csr_from_wb  = \controlleraftab.csr_from_wb ;
  assign { \datapathaftab.csraddressingdecoder.outaddr [11:7], \datapathaftab.csraddressingdecoder.outaddr [5:3] } = 8'h30;
  assign \datapathaftab.csrcounter.clk  = clk;
  assign \datapathaftab.csrcounter.dncnt  = 1'h0;
  assign \datapathaftab.csrcounter.ldcnt  = \controlleraftab.ldcntcsr ;
  assign \datapathaftab.csrcounter.ldvalue  = \controlleraftab.ldvaluecsr ;
  assign \datapathaftab.csrcounter.outcnt  = \datapathaftab.csraddressingdecoder.cntoutput ;
  assign \datapathaftab.csrcounter.rst  = rst;
  assign \datapathaftab.csrcounter.temp  = \datapathaftab.csraddressingdecoder.cntoutput ;
  assign \datapathaftab.csrcounter.upcnt  = \controlleraftab.upcntcsr ;
  assign \datapathaftab.csrcounter.zerocnt  = \controlleraftab.zerocntcsr ;
  assign \datapathaftab.csrisl.clr  = \controlleraftab.clrcsr ;
  assign \datapathaftab.csrisl.curprv  = \datapathaftab.curprv ;
  assign \datapathaftab.csrisl.ir19_15  = \datapathaftab.m2wb_instr_curr [19:15];
  assign \datapathaftab.csrisl.machinestatusalterationpostcsr  = \controlleraftab.machinestatusalterationpostcsr ;
  assign \datapathaftab.csrisl.machinestatusalterationprecsr  = \controlleraftab.machinestatusalterationprecsr ;
  assign \datapathaftab.csrisl.mirroruser  = \controlleraftab.mirrorusercu ;
  assign \datapathaftab.csrisl.pc  = \datapathaftab.csr_pc ;
  assign \datapathaftab.csrisl.previousprv  = \datapathaftab.csrisl.outcsr [12:11];
  assign \datapathaftab.csrisl.previousprv_int  = \datapathaftab.csrisl.outcsr [12:11];
  assign \datapathaftab.csrisl.selcause  = \controlleraftab.selcause_csr ;
  assign \datapathaftab.csrisl.selim  = \controlleraftab.selimmcsr ;
  assign \datapathaftab.csrisl.selmip  = \controlleraftab.selccmip_csr ;
  assign \datapathaftab.csrisl.selp1  = \controlleraftab.selp1csr ;
  assign \datapathaftab.csrisl.selpc  = \controlleraftab.selpc_csr ;
  assign \datapathaftab.csrisl.selreadwrite  = \controlleraftab.selreadwritecsr ;
  assign \datapathaftab.csrisl.seltval  = 1'hx;
  assign \datapathaftab.csrisl.set  = \controlleraftab.setcsr ;
  assign \datapathaftab.csrisl.userstatusalterationpostcsr  = \controlleraftab.userstatusalterationpostcsr ;
  assign \datapathaftab.csrisl.userstatusalterationprecsr  = \controlleraftab.userstatusalterationprecsr ;
  assign \datapathaftab.d2e_alu_op1_curr  = \datapathaftab.aau.ain ;
  assign \datapathaftab.d2e_alu_op2_curr  = \datapathaftab.aau.bin ;
  assign \datapathaftab.d2e_ctrl_word_next  = { 4'hz, \controlleraftab.iscsrinstruction , \controlleraftab.cmp_selop2 , \controlleraftab.cmp_selaluop2 , \controlleraftab.selmem , \controlleraftab.selpc4 , \controlleraftab.selalu , \controlleraftab.ret_from_epc , \controlleraftab.inst_type , \controlleraftab.forced_rb_read , \controlleraftab.iscsrinstruction , \controlleraftab.checkmisaligneddawu , 1'h0, \controlleraftab.selcsr , \controlleraftab.nbytes , \controlleraftab.selaah , \controlleraftab.selaal , \controlleraftab.unsignedunsigned , \controlleraftab.signedunsigned , \controlleraftab.signedsigned , \controlleraftab.startdivideaau , \controlleraftab.startmultiplyaau , \controlleraftab.selmem , \controlleraftab.checkmisaligneddawu , \controlleraftab.sellogic , \controlleraftab.muxcode , \controlleraftab.selauipc , \controlleraftab.pass , \controlleraftab.addsubbar , \controlleraftab.selshift , \controlleraftab.load , \controlleraftab.ldhalfsigned , \controlleraftab.ldbytesigned , \controlleraftab.selimm , \controlleraftab.selp2 , \controlleraftab.selp1 , \controlleraftab.selaau , \controlleraftab.selasu , \controlleraftab.selllu , \controlleraftab.selbsu , \controlleraftab.seljl , \controlleraftab.selpc , \controlleraftab.comparedsignedunsignedbar , \controlleraftab.cmp_selaluop2 , \controlleraftab.writeregfile  };
  assign \datapathaftab.d2e_en  = \controlleraftab.d2e_en_temp ;
  assign \datapathaftab.d2e_op1_curr  = \datapathaftab.comparator.ain ;
  assign \datapathaftab.d2e_rst  = \controlleraftab.d2e_rst ;
  assign \datapathaftab.d2e_valid_curr  = \controlleraftab.ex_valid ;
  assign \datapathaftab.daru1.addrin  = \datapathaftab.daru1.datapath.addrreg.inreg ;
  assign \datapathaftab.daru1.addrout  = \datapathaftab.daru1.datapath.addrout ;
  assign \datapathaftab.daru1.bytestoread  = \datapathaftab.daru1.datapath.bytestoread_temp ;
  assign \datapathaftab.daru1.checkmisaligneddaru  = 1'h1;
  assign \datapathaftab.daru1.clk  = clk;
  assign \datapathaftab.daru1.cocnt  = \datapathaftab.daru1.controller.cocnt ;
  assign \datapathaftab.daru1.completedaru  = \datapathaftab.completeddaru1 ;
  assign \datapathaftab.daru1.controller.clk  = clk;
  assign \datapathaftab.daru1.controller.completedaru  = \datapathaftab.completeddaru1 ;
  assign \datapathaftab.daru1.controller.datainstrbar  = 1'h0;
  assign \datapathaftab.daru1.controller.inccnt  = \datapathaftab.daru1.controller.enabledata ;
  assign \datapathaftab.daru1.controller.initreading  = \datapathaftab.daru1.controller.initcnt ;
  assign \datapathaftab.daru1.controller.ldaddr  = \datapathaftab.daru1.controller.initcnt ;
  assign \datapathaftab.daru1.controller.ldnumbytes  = \datapathaftab.daru1.controller.initcnt ;
  assign \datapathaftab.daru1.controller.memready  = memReady1;
  assign \datapathaftab.daru1.controller.readmem  = \datapathaftab.daru1.controller.enableaddr ;
  assign \datapathaftab.daru1.controller.rst  = rst;
  assign \datapathaftab.daru1.controller.sellden  = \datapathaftab.daru1.controller.enabledata ;
  assign \datapathaftab.daru1.controller.sync_rst  = \controlleraftab.gi2d_rst ;
  assign \datapathaftab.daru1.controller.zerocnt  = 1'h0;
  assign \datapathaftab.daru1.controller.zeronumbytes  = 1'h0;
  assign \datapathaftab.daru1.datainstrbar  = 1'h0;
  assign \datapathaftab.daru1.dataout  = { \datapathaftab.daru1.datapath.dataout [31:16], \datapathaftab.daru1.datapath.reg0.outreg  };
  assign \datapathaftab.daru1.datapath.adder.a  = \datapathaftab.daru1.datapath.addrreg.outreg ;
  assign \datapathaftab.daru1.datapath.adder.b  = { \datapathaftab.daru1.datapath.adder.fa2.b , 1'h0 };
  assign \datapathaftab.daru1.datapath.adder.cout [30:0] = { \datapathaftab.daru1.datapath.adder.gen_halfadder:29.ha.o_carry , \datapathaftab.daru1.datapath.adder.gen_halfadder:28.ha.o_carry , \datapathaftab.daru1.datapath.adder.gen_halfadder:27.ha.o_carry , \datapathaftab.daru1.datapath.adder.gen_halfadder:26.ha.o_carry , \datapathaftab.daru1.datapath.adder.gen_halfadder:25.ha.o_carry , \datapathaftab.daru1.datapath.adder.gen_halfadder:24.ha.o_carry , \datapathaftab.daru1.datapath.adder.gen_halfadder:23.ha.o_carry , \datapathaftab.daru1.datapath.adder.gen_halfadder:22.ha.o_carry , \datapathaftab.daru1.datapath.adder.gen_halfadder:21.ha.o_carry , \datapathaftab.daru1.datapath.adder.gen_halfadder:20.ha.o_carry , \datapathaftab.daru1.datapath.adder.gen_halfadder:19.ha.o_carry , \datapathaftab.daru1.datapath.adder.gen_halfadder:18.ha.o_carry , \datapathaftab.daru1.datapath.adder.gen_halfadder:17.ha.o_carry , \datapathaftab.daru1.datapath.adder.gen_halfadder:16.ha.o_carry , \datapathaftab.daru1.datapath.adder.gen_halfadder:15.ha.o_carry , \datapathaftab.daru1.datapath.adder.gen_halfadder:14.ha.o_carry , \datapathaftab.daru1.datapath.adder.gen_halfadder:13.ha.o_carry , \datapathaftab.daru1.datapath.adder.gen_halfadder:12.ha.o_carry , \datapathaftab.daru1.datapath.adder.gen_halfadder:11.ha.o_carry , \datapathaftab.daru1.datapath.adder.gen_halfadder:10.ha.o_carry , \datapathaftab.daru1.datapath.adder.gen_halfadder:10.ha.i_bit2 , \datapathaftab.daru1.datapath.adder.gen_halfadder:8.ha.o_carry , \datapathaftab.daru1.datapath.adder.gen_halfadder:7.ha.o_carry , \datapathaftab.daru1.datapath.adder.gen_halfadder:6.ha.o_carry , \datapathaftab.daru1.datapath.adder.gen_halfadder:5.ha.o_carry , \datapathaftab.daru1.datapath.adder.gen_halfadder:4.ha.o_carry , \datapathaftab.daru1.datapath.adder.gen_halfadder:3.ha.o_carry , \datapathaftab.daru1.datapath.adder.gen_halfadder:2.ha.o_carry , \datapathaftab.daru1.datapath.adder.gen_halfadder:1.ha.o_carry , \datapathaftab.daru1.datapath.adder.gen_halfadder:1.ha.i_bit2 , 1'h0 };
  assign \datapathaftab.daru1.datapath.adder.fa1.a  = \datapathaftab.daru1.datapath.addrreg.outreg [0];
  assign \datapathaftab.daru1.datapath.adder.fa1.b  = 1'h0;
  assign \datapathaftab.daru1.datapath.adder.fa1.cin  = 1'h0;
  assign \datapathaftab.daru1.datapath.adder.fa1.cout  = 1'h0;
  assign \datapathaftab.daru1.datapath.adder.fa1.s  = \datapathaftab.daru1.datapath.addrreg.outreg [0];
  assign \datapathaftab.daru1.datapath.adder.fa2.a  = \datapathaftab.daru1.datapath.addrreg.outreg [1];
  assign \datapathaftab.daru1.datapath.adder.fa2.cin  = 1'h0;
  assign \datapathaftab.daru1.datapath.adder.fa2.cout  = \datapathaftab.daru1.datapath.adder.gen_halfadder:1.ha.i_bit2 ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:1.ha.i_bit1  = \datapathaftab.daru1.datapath.addrreg.outreg [2];
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:10.ha.i_bit1  = \datapathaftab.daru1.datapath.addrreg.outreg [11];
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:11.ha.i_bit1  = \datapathaftab.daru1.datapath.addrreg.outreg [12];
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:11.ha.i_bit2  = \datapathaftab.daru1.datapath.adder.gen_halfadder:10.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:12.ha.i_bit1  = \datapathaftab.daru1.datapath.addrreg.outreg [13];
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:12.ha.i_bit2  = \datapathaftab.daru1.datapath.adder.gen_halfadder:11.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:13.ha.i_bit1  = \datapathaftab.daru1.datapath.addrreg.outreg [14];
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:13.ha.i_bit2  = \datapathaftab.daru1.datapath.adder.gen_halfadder:12.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:14.ha.i_bit1  = \datapathaftab.daru1.datapath.addrreg.outreg [15];
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:14.ha.i_bit2  = \datapathaftab.daru1.datapath.adder.gen_halfadder:13.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:15.ha.i_bit1  = \datapathaftab.daru1.datapath.addrreg.outreg [16];
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:15.ha.i_bit2  = \datapathaftab.daru1.datapath.adder.gen_halfadder:14.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:16.ha.i_bit1  = \datapathaftab.daru1.datapath.addrreg.outreg [17];
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:16.ha.i_bit2  = \datapathaftab.daru1.datapath.adder.gen_halfadder:15.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:17.ha.i_bit1  = \datapathaftab.daru1.datapath.addrreg.outreg [18];
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:17.ha.i_bit2  = \datapathaftab.daru1.datapath.adder.gen_halfadder:16.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:18.ha.i_bit1  = \datapathaftab.daru1.datapath.addrreg.outreg [19];
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:18.ha.i_bit2  = \datapathaftab.daru1.datapath.adder.gen_halfadder:17.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:19.ha.i_bit1  = \datapathaftab.daru1.datapath.addrreg.outreg [20];
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:19.ha.i_bit2  = \datapathaftab.daru1.datapath.adder.gen_halfadder:18.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:2.ha.i_bit1  = \datapathaftab.daru1.datapath.addrreg.outreg [3];
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:2.ha.i_bit2  = \datapathaftab.daru1.datapath.adder.gen_halfadder:1.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:20.ha.i_bit1  = \datapathaftab.daru1.datapath.addrreg.outreg [21];
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:20.ha.i_bit2  = \datapathaftab.daru1.datapath.adder.gen_halfadder:19.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:21.ha.i_bit1  = \datapathaftab.daru1.datapath.addrreg.outreg [22];
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:21.ha.i_bit2  = \datapathaftab.daru1.datapath.adder.gen_halfadder:20.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:22.ha.i_bit1  = \datapathaftab.daru1.datapath.addrreg.outreg [23];
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:22.ha.i_bit2  = \datapathaftab.daru1.datapath.adder.gen_halfadder:21.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:23.ha.i_bit1  = \datapathaftab.daru1.datapath.addrreg.outreg [24];
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:23.ha.i_bit2  = \datapathaftab.daru1.datapath.adder.gen_halfadder:22.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:24.ha.i_bit1  = \datapathaftab.daru1.datapath.addrreg.outreg [25];
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:24.ha.i_bit2  = \datapathaftab.daru1.datapath.adder.gen_halfadder:23.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:25.ha.i_bit1  = \datapathaftab.daru1.datapath.addrreg.outreg [26];
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:25.ha.i_bit2  = \datapathaftab.daru1.datapath.adder.gen_halfadder:24.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:26.ha.i_bit1  = \datapathaftab.daru1.datapath.addrreg.outreg [27];
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:26.ha.i_bit2  = \datapathaftab.daru1.datapath.adder.gen_halfadder:25.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:27.ha.i_bit1  = \datapathaftab.daru1.datapath.addrreg.outreg [28];
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:27.ha.i_bit2  = \datapathaftab.daru1.datapath.adder.gen_halfadder:26.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:28.ha.i_bit1  = \datapathaftab.daru1.datapath.addrreg.outreg [29];
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:28.ha.i_bit2  = \datapathaftab.daru1.datapath.adder.gen_halfadder:27.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:29.ha.i_bit1  = \datapathaftab.daru1.datapath.addrreg.outreg [30];
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:29.ha.i_bit2  = \datapathaftab.daru1.datapath.adder.gen_halfadder:28.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:3.ha.i_bit1  = \datapathaftab.daru1.datapath.addrreg.outreg [4];
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:3.ha.i_bit2  = \datapathaftab.daru1.datapath.adder.gen_halfadder:2.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:30.ha.i_bit1  = \datapathaftab.daru1.datapath.addrreg.outreg [31];
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:30.ha.i_bit2  = \datapathaftab.daru1.datapath.adder.gen_halfadder:29.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:30.ha.o_carry  = \datapathaftab.daru1.datapath.adder.cout [31];
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:4.ha.i_bit1  = \datapathaftab.daru1.datapath.addrreg.outreg [5];
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:4.ha.i_bit2  = \datapathaftab.daru1.datapath.adder.gen_halfadder:3.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:5.ha.i_bit1  = \datapathaftab.daru1.datapath.addrreg.outreg [6];
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:5.ha.i_bit2  = \datapathaftab.daru1.datapath.adder.gen_halfadder:4.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:6.ha.i_bit1  = \datapathaftab.daru1.datapath.addrreg.outreg [7];
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:6.ha.i_bit2  = \datapathaftab.daru1.datapath.adder.gen_halfadder:5.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:7.ha.i_bit1  = \datapathaftab.daru1.datapath.addrreg.outreg [8];
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:7.ha.i_bit2  = \datapathaftab.daru1.datapath.adder.gen_halfadder:6.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:8.ha.i_bit1  = \datapathaftab.daru1.datapath.addrreg.outreg [9];
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:8.ha.i_bit2  = \datapathaftab.daru1.datapath.adder.gen_halfadder:7.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:9.ha.i_bit1  = \datapathaftab.daru1.datapath.addrreg.outreg [10];
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:9.ha.i_bit2  = \datapathaftab.daru1.datapath.adder.gen_halfadder:8.ha.o_carry ;
  assign \datapathaftab.daru1.datapath.adder.gen_halfadder:9.ha.o_carry  = \datapathaftab.daru1.datapath.adder.gen_halfadder:10.ha.i_bit2 ;
  assign \datapathaftab.daru1.datapath.adder.sum  = { \datapathaftab.daru1.datapath.adder.gen_halfadder:30.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:29.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:28.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:27.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:26.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:25.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:24.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:23.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:22.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:21.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:20.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:19.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:18.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:17.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:16.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:15.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:14.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:13.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:12.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:11.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:10.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:9.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:8.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:7.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:6.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:5.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:4.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:3.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:2.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:1.ha.o_sum , \datapathaftab.daru1.datapath.adder.fa2.s , \datapathaftab.daru1.datapath.addrreg.outreg [0] };
  assign \datapathaftab.daru1.datapath.addrin  = \datapathaftab.daru1.datapath.addrreg.inreg ;
  assign \datapathaftab.daru1.datapath.addrreg.clk  = clk;
  assign \datapathaftab.daru1.datapath.addrreg.load  = \datapathaftab.daru1.controller.initcnt ;
  assign \datapathaftab.daru1.datapath.addrreg.rst  = rst;
  assign \datapathaftab.daru1.datapath.addrreg.zero  = 1'h0;
  assign \datapathaftab.daru1.datapath.bytecnt  = { \datapathaftab.daru1.datapath.adder.fa2.b , 1'h0 };
  assign \datapathaftab.daru1.datapath.bytestoread  = \datapathaftab.daru1.datapath.bytestoread_temp ;
  assign \datapathaftab.daru1.datapath.checkmisaligneddaru  = 1'h1;
  assign \datapathaftab.daru1.datapath.clk  = clk;
  assign \datapathaftab.daru1.datapath.cocnt  = \datapathaftab.daru1.controller.cocnt ;
  assign \datapathaftab.daru1.datapath.counter.clk  = clk;
  assign \datapathaftab.daru1.datapath.counter.cocnt  = \datapathaftab.daru1.datapath.counter.cocntp ;
  assign \datapathaftab.daru1.datapath.counter.inccnt  = \datapathaftab.daru1.controller.enabledata ;
  assign \datapathaftab.daru1.datapath.counter.initcnt  = \datapathaftab.daru1.controller.initcnt ;
  assign \datapathaftab.daru1.datapath.counter.initvalue  = 1'h0;
  assign \datapathaftab.daru1.datapath.counter.outcnt  = \datapathaftab.daru1.datapath.adder.fa2.b ;
  assign \datapathaftab.daru1.datapath.counter.rst  = rst;
  assign \datapathaftab.daru1.datapath.counter.temp  = \datapathaftab.daru1.datapath.adder.fa2.b ;
  assign \datapathaftab.daru1.datapath.counter.zerocnt  = 1'h0;
  assign \datapathaftab.daru1.datapath.datainstrbar  = 1'h0;
  assign \datapathaftab.daru1.datapath.dataout [15:0] = \datapathaftab.daru1.datapath.reg0.outreg ;
  assign \datapathaftab.daru1.datapath.decoder.en  = \datapathaftab.daru1.controller.enabledata ;
  assign \datapathaftab.daru1.datapath.decoder.indecoder  = { 1'h0, \datapathaftab.daru1.datapath.adder.fa2.b  };
  assign \datapathaftab.daru1.datapath.enableaddr  = \datapathaftab.daru1.controller.enableaddr ;
  assign \datapathaftab.daru1.datapath.enabledata  = \datapathaftab.daru1.controller.enabledata ;
  assign \datapathaftab.daru1.datapath.errordecoder.addrin  = \datapathaftab.daru1.datapath.addrreg.outreg [1:0];
  assign \datapathaftab.daru1.datapath.errordecoder.checkmisaligneddaru  = 1'h1;
  assign \datapathaftab.daru1.datapath.errordecoder.datainstrbar  = 1'h0;
  assign \datapathaftab.daru1.datapath.errordecoder.instrmisalignedflag  = \datapathaftab.gi2d_ex_flag_next ;
  assign \datapathaftab.daru1.datapath.errordecoder.loadmisalignedflag  = 1'h0;
  assign \datapathaftab.daru1.datapath.errordecoder.misalignederrorp  = \datapathaftab.gi2d_ex_flag_next ;
  assign \datapathaftab.daru1.datapath.errordecoder.nbytes  = 2'h3;
  assign \datapathaftab.daru1.datapath.inccnt  = \datapathaftab.daru1.controller.enabledata ;
  assign \datapathaftab.daru1.datapath.initcnt  = \datapathaftab.daru1.controller.initcnt ;
  assign \datapathaftab.daru1.datapath.initreading  = \datapathaftab.daru1.controller.initcnt ;
  assign \datapathaftab.daru1.datapath.initvaluecnt  = 2'h0;
  assign \datapathaftab.daru1.datapath.instrmisalignedflag  = \datapathaftab.gi2d_ex_flag_next ;
  assign \datapathaftab.daru1.datapath.ldaddr  = \datapathaftab.daru1.controller.initcnt ;
  assign \datapathaftab.daru1.datapath.ldnumbytes  = \datapathaftab.daru1.controller.initcnt ;
  assign \datapathaftab.daru1.datapath.loadmisalignedflag  = 1'h0;
  assign \datapathaftab.daru1.datapath.memdata  = memDataOut1;
  assign \datapathaftab.daru1.datapath.nbytereg.clk  = clk;
  assign \datapathaftab.daru1.datapath.nbytereg.inreg  = 2'h3;
  assign \datapathaftab.daru1.datapath.nbytereg.load  = \datapathaftab.daru1.controller.initcnt ;
  assign \datapathaftab.daru1.datapath.nbytereg.rst  = rst;
  assign \datapathaftab.daru1.datapath.nbytereg.zero  = 1'h0;
  assign \datapathaftab.daru1.datapath.nbytes  = 2'h3;
  assign \datapathaftab.daru1.datapath.nbytesout  = \datapathaftab.daru1.datapath.nbytereg.outreg ;
  assign \datapathaftab.daru1.datapath.outcnt  = \datapathaftab.daru1.datapath.adder.fa2.b ;
  assign \datapathaftab.daru1.datapath.outcnt_ext  = { 1'h0, \datapathaftab.daru1.datapath.adder.fa2.b  };
  assign \datapathaftab.daru1.datapath.outdecoder  = \datapathaftab.daru1.datapath.decoder.outdecoder ;
  assign \datapathaftab.daru1.datapath.readaddr  = \datapathaftab.daru1.datapath.addrreg.outreg ;
  assign \datapathaftab.daru1.datapath.readaddrout  = \datapathaftab.daru1.datapath.addrreg.outreg ;
  assign \datapathaftab.daru1.datapath.readaddrp  = { \datapathaftab.daru1.datapath.adder.gen_halfadder:30.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:29.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:28.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:27.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:26.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:25.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:24.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:23.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:22.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:21.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:20.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:19.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:18.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:17.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:16.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:15.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:14.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:13.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:12.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:11.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:10.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:9.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:8.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:7.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:6.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:5.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:4.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:3.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:2.ha.o_sum , \datapathaftab.daru1.datapath.adder.gen_halfadder:1.ha.o_sum , \datapathaftab.daru1.datapath.adder.fa2.s , \datapathaftab.daru1.datapath.addrreg.outreg [0] };
  assign \datapathaftab.daru1.datapath.reg0.clk  = clk;
  assign \datapathaftab.daru1.datapath.reg0.inreg  = \datapathaftab.daru1.datapath.datain ;
  assign \datapathaftab.daru1.datapath.reg0.load  = \datapathaftab.daru1.datapath.decoder.outdecoder [0];
  assign \datapathaftab.daru1.datapath.reg0.rst  = rst;
  assign \datapathaftab.daru1.datapath.reg0.zero  = \datapathaftab.daru1.controller.initcnt ;
  assign \datapathaftab.daru1.datapath.reg1.clk  = clk;
  assign \datapathaftab.daru1.datapath.reg1.inreg  = \datapathaftab.daru1.datapath.datain ;
  assign \datapathaftab.daru1.datapath.reg1.load  = \datapathaftab.daru1.datapath.decoder.outdecoder [1];
  assign \datapathaftab.daru1.datapath.reg1.outreg  = \datapathaftab.daru1.datapath.dataouthigh_reg ;
  assign \datapathaftab.daru1.datapath.reg1.rst  = rst;
  assign \datapathaftab.daru1.datapath.reg1.zero  = \datapathaftab.daru1.controller.initcnt ;
  assign \datapathaftab.daru1.datapath.rst  = rst;
  assign \datapathaftab.daru1.datapath.select_incoming_data  = \datapathaftab.daru1.controller.select_incoming_data ;
  assign \datapathaftab.daru1.datapath.sellden  = \datapathaftab.daru1.controller.enabledata ;
  assign \datapathaftab.daru1.datapath.zerocnt  = 1'h0;
  assign \datapathaftab.daru1.datapath.zeronumbytes  = 1'h0;
  assign \datapathaftab.daru1.enableaddr  = \datapathaftab.daru1.controller.enableaddr ;
  assign \datapathaftab.daru1.enabledata  = \datapathaftab.daru1.controller.enabledata ;
  assign \datapathaftab.daru1.inccnt  = \datapathaftab.daru1.controller.enabledata ;
  assign \datapathaftab.daru1.initcnt  = \datapathaftab.daru1.controller.initcnt ;
  assign \datapathaftab.daru1.initreading  = \datapathaftab.daru1.controller.initcnt ;
  assign \datapathaftab.daru1.instrmisalignedflag  = \datapathaftab.gi2d_ex_flag_next ;
  assign \datapathaftab.daru1.ldaddr  = \datapathaftab.daru1.controller.initcnt ;
  assign \datapathaftab.daru1.ldnumbytes  = \datapathaftab.daru1.controller.initcnt ;
  assign \datapathaftab.daru1.loadmisalignedflag  = 1'h0;
  assign \datapathaftab.daru1.memdata  = memDataOut1;
  assign \datapathaftab.daru1.memready  = memReady1;
  assign \datapathaftab.daru1.nbytes  = 2'h3;
  assign \datapathaftab.daru1.readaddrout  = \datapathaftab.daru1.datapath.addrreg.outreg ;
  assign \datapathaftab.daru1.readmem  = \datapathaftab.daru1.controller.enableaddr ;
  assign \datapathaftab.daru1.rst  = rst;
  assign \datapathaftab.daru1.select_incoming_data  = \datapathaftab.daru1.controller.select_incoming_data ;
  assign \datapathaftab.daru1.sellden  = \datapathaftab.daru1.controller.enabledata ;
  assign \datapathaftab.daru1.startdaru  = \datapathaftab.daru1.controller.startdaru ;
  assign \datapathaftab.daru1.sync_rst  = \controlleraftab.gi2d_rst ;
  assign \datapathaftab.daru1.zerocnt  = 1'h0;
  assign \datapathaftab.daru1.zeronumbytes  = 1'h0;
  assign \datapathaftab.daru1_en_def  = \datapathaftab.daru1.controller.startdaru ;
  assign \datapathaftab.daru2.addrin  = \datapathaftab.daru2.datapath.addrreg.inreg ;
  assign \datapathaftab.daru2.addrout  = \datapathaftab.daru2.datapath.addrout ;
  assign \datapathaftab.daru2.bytestoread  = \datapathaftab.bytespermemaccessdaru ;
  assign \datapathaftab.daru2.checkmisaligneddaru  = 1'h0;
  assign \datapathaftab.daru2.clk  = clk;
  assign \datapathaftab.daru2.cocnt  = \datapathaftab.daru2.controller.cocnt ;
  assign \datapathaftab.daru2.completedaru  = \datapathaftab.completeddaru2 ;
  assign \datapathaftab.daru2.controller.clk  = clk;
  assign \datapathaftab.daru2.controller.completedaru  = \datapathaftab.completeddaru2 ;
  assign \datapathaftab.daru2.controller.datainstrbar  = 1'h1;
  assign \datapathaftab.daru2.controller.inccnt  = \datapathaftab.daru2.controller.enabledata ;
  assign \datapathaftab.daru2.controller.initreading  = \datapathaftab.daru2.controller.initcnt ;
  assign \datapathaftab.daru2.controller.ldaddr  = \datapathaftab.daru2.controller.initcnt ;
  assign \datapathaftab.daru2.controller.ldnumbytes  = \datapathaftab.daru2.controller.initcnt ;
  assign \datapathaftab.daru2.controller.memready  = memReady2;
  assign \datapathaftab.daru2.controller.readmem  = \datapathaftab.daru2.controller.enableaddr ;
  assign \datapathaftab.daru2.controller.rst  = rst;
  assign \datapathaftab.daru2.controller.select_incoming_data  = 1'h0;
  assign \datapathaftab.daru2.controller.sellden  = \datapathaftab.daru2.controller.enabledata ;
  assign \datapathaftab.daru2.controller.sync_rst  = \controlleraftab.m2wb_en_temp ;
  assign \datapathaftab.daru2.controller.zerocnt  = 1'h0;
  assign \datapathaftab.daru2.controller.zeronumbytes  = 1'h0;
  assign \datapathaftab.daru2.datainstrbar  = 1'h1;
  assign \datapathaftab.daru2.dataout  = { \datapathaftab.daru2.datapath.reg1.outreg , \datapathaftab.daru2.datapath.reg0.outreg  };
  assign \datapathaftab.daru2.datapath.adder.a  = \datapathaftab.daru2.datapath.addrreg.outreg ;
  assign \datapathaftab.daru2.datapath.adder.b  = { \datapathaftab.daru2.datapath.adder.fa2.b , 1'h0 };
  assign \datapathaftab.daru2.datapath.adder.cout [30:0] = { \datapathaftab.daru2.datapath.adder.gen_halfadder:29.ha.o_carry , \datapathaftab.daru2.datapath.adder.gen_halfadder:28.ha.o_carry , \datapathaftab.daru2.datapath.adder.gen_halfadder:27.ha.o_carry , \datapathaftab.daru2.datapath.adder.gen_halfadder:26.ha.o_carry , \datapathaftab.daru2.datapath.adder.gen_halfadder:25.ha.o_carry , \datapathaftab.daru2.datapath.adder.gen_halfadder:24.ha.o_carry , \datapathaftab.daru2.datapath.adder.gen_halfadder:23.ha.o_carry , \datapathaftab.daru2.datapath.adder.gen_halfadder:22.ha.o_carry , \datapathaftab.daru2.datapath.adder.gen_halfadder:21.ha.o_carry , \datapathaftab.daru2.datapath.adder.gen_halfadder:20.ha.o_carry , \datapathaftab.daru2.datapath.adder.gen_halfadder:19.ha.o_carry , \datapathaftab.daru2.datapath.adder.gen_halfadder:18.ha.o_carry , \datapathaftab.daru2.datapath.adder.gen_halfadder:17.ha.o_carry , \datapathaftab.daru2.datapath.adder.gen_halfadder:16.ha.o_carry , \datapathaftab.daru2.datapath.adder.gen_halfadder:15.ha.o_carry , \datapathaftab.daru2.datapath.adder.gen_halfadder:14.ha.o_carry , \datapathaftab.daru2.datapath.adder.gen_halfadder:13.ha.o_carry , \datapathaftab.daru2.datapath.adder.gen_halfadder:12.ha.o_carry , \datapathaftab.daru2.datapath.adder.gen_halfadder:11.ha.o_carry , \datapathaftab.daru2.datapath.adder.gen_halfadder:10.ha.o_carry , \datapathaftab.daru2.datapath.adder.gen_halfadder:10.ha.i_bit2 , \datapathaftab.daru2.datapath.adder.gen_halfadder:8.ha.o_carry , \datapathaftab.daru2.datapath.adder.gen_halfadder:7.ha.o_carry , \datapathaftab.daru2.datapath.adder.gen_halfadder:6.ha.o_carry , \datapathaftab.daru2.datapath.adder.gen_halfadder:5.ha.o_carry , \datapathaftab.daru2.datapath.adder.gen_halfadder:4.ha.o_carry , \datapathaftab.daru2.datapath.adder.gen_halfadder:3.ha.o_carry , \datapathaftab.daru2.datapath.adder.gen_halfadder:2.ha.o_carry , \datapathaftab.daru2.datapath.adder.gen_halfadder:1.ha.o_carry , \datapathaftab.daru2.datapath.adder.gen_halfadder:1.ha.i_bit2 , 1'h0 };
  assign \datapathaftab.daru2.datapath.adder.fa1.a  = \datapathaftab.daru2.datapath.addrreg.outreg [0];
  assign \datapathaftab.daru2.datapath.adder.fa1.b  = 1'h0;
  assign \datapathaftab.daru2.datapath.adder.fa1.cin  = 1'h0;
  assign \datapathaftab.daru2.datapath.adder.fa1.cout  = 1'h0;
  assign \datapathaftab.daru2.datapath.adder.fa1.s  = \datapathaftab.daru2.datapath.addrreg.outreg [0];
  assign \datapathaftab.daru2.datapath.adder.fa2.a  = \datapathaftab.daru2.datapath.addrreg.outreg [1];
  assign \datapathaftab.daru2.datapath.adder.fa2.cin  = 1'h0;
  assign \datapathaftab.daru2.datapath.adder.fa2.cout  = \datapathaftab.daru2.datapath.adder.gen_halfadder:1.ha.i_bit2 ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:1.ha.i_bit1  = \datapathaftab.daru2.datapath.addrreg.outreg [2];
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:10.ha.i_bit1  = \datapathaftab.daru2.datapath.addrreg.outreg [11];
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:11.ha.i_bit1  = \datapathaftab.daru2.datapath.addrreg.outreg [12];
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:11.ha.i_bit2  = \datapathaftab.daru2.datapath.adder.gen_halfadder:10.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:12.ha.i_bit1  = \datapathaftab.daru2.datapath.addrreg.outreg [13];
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:12.ha.i_bit2  = \datapathaftab.daru2.datapath.adder.gen_halfadder:11.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:13.ha.i_bit1  = \datapathaftab.daru2.datapath.addrreg.outreg [14];
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:13.ha.i_bit2  = \datapathaftab.daru2.datapath.adder.gen_halfadder:12.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:14.ha.i_bit1  = \datapathaftab.daru2.datapath.addrreg.outreg [15];
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:14.ha.i_bit2  = \datapathaftab.daru2.datapath.adder.gen_halfadder:13.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:15.ha.i_bit1  = \datapathaftab.daru2.datapath.addrreg.outreg [16];
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:15.ha.i_bit2  = \datapathaftab.daru2.datapath.adder.gen_halfadder:14.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:16.ha.i_bit1  = \datapathaftab.daru2.datapath.addrreg.outreg [17];
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:16.ha.i_bit2  = \datapathaftab.daru2.datapath.adder.gen_halfadder:15.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:17.ha.i_bit1  = \datapathaftab.daru2.datapath.addrreg.outreg [18];
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:17.ha.i_bit2  = \datapathaftab.daru2.datapath.adder.gen_halfadder:16.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:18.ha.i_bit1  = \datapathaftab.daru2.datapath.addrreg.outreg [19];
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:18.ha.i_bit2  = \datapathaftab.daru2.datapath.adder.gen_halfadder:17.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:19.ha.i_bit1  = \datapathaftab.daru2.datapath.addrreg.outreg [20];
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:19.ha.i_bit2  = \datapathaftab.daru2.datapath.adder.gen_halfadder:18.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:2.ha.i_bit1  = \datapathaftab.daru2.datapath.addrreg.outreg [3];
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:2.ha.i_bit2  = \datapathaftab.daru2.datapath.adder.gen_halfadder:1.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:20.ha.i_bit1  = \datapathaftab.daru2.datapath.addrreg.outreg [21];
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:20.ha.i_bit2  = \datapathaftab.daru2.datapath.adder.gen_halfadder:19.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:21.ha.i_bit1  = \datapathaftab.daru2.datapath.addrreg.outreg [22];
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:21.ha.i_bit2  = \datapathaftab.daru2.datapath.adder.gen_halfadder:20.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:22.ha.i_bit1  = \datapathaftab.daru2.datapath.addrreg.outreg [23];
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:22.ha.i_bit2  = \datapathaftab.daru2.datapath.adder.gen_halfadder:21.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:23.ha.i_bit1  = \datapathaftab.daru2.datapath.addrreg.outreg [24];
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:23.ha.i_bit2  = \datapathaftab.daru2.datapath.adder.gen_halfadder:22.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:24.ha.i_bit1  = \datapathaftab.daru2.datapath.addrreg.outreg [25];
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:24.ha.i_bit2  = \datapathaftab.daru2.datapath.adder.gen_halfadder:23.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:25.ha.i_bit1  = \datapathaftab.daru2.datapath.addrreg.outreg [26];
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:25.ha.i_bit2  = \datapathaftab.daru2.datapath.adder.gen_halfadder:24.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:26.ha.i_bit1  = \datapathaftab.daru2.datapath.addrreg.outreg [27];
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:26.ha.i_bit2  = \datapathaftab.daru2.datapath.adder.gen_halfadder:25.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:27.ha.i_bit1  = \datapathaftab.daru2.datapath.addrreg.outreg [28];
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:27.ha.i_bit2  = \datapathaftab.daru2.datapath.adder.gen_halfadder:26.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:28.ha.i_bit1  = \datapathaftab.daru2.datapath.addrreg.outreg [29];
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:28.ha.i_bit2  = \datapathaftab.daru2.datapath.adder.gen_halfadder:27.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:29.ha.i_bit1  = \datapathaftab.daru2.datapath.addrreg.outreg [30];
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:29.ha.i_bit2  = \datapathaftab.daru2.datapath.adder.gen_halfadder:28.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:3.ha.i_bit1  = \datapathaftab.daru2.datapath.addrreg.outreg [4];
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:3.ha.i_bit2  = \datapathaftab.daru2.datapath.adder.gen_halfadder:2.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:30.ha.i_bit1  = \datapathaftab.daru2.datapath.addrreg.outreg [31];
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:30.ha.i_bit2  = \datapathaftab.daru2.datapath.adder.gen_halfadder:29.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:30.ha.o_carry  = \datapathaftab.daru2.datapath.adder.cout [31];
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:4.ha.i_bit1  = \datapathaftab.daru2.datapath.addrreg.outreg [5];
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:4.ha.i_bit2  = \datapathaftab.daru2.datapath.adder.gen_halfadder:3.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:5.ha.i_bit1  = \datapathaftab.daru2.datapath.addrreg.outreg [6];
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:5.ha.i_bit2  = \datapathaftab.daru2.datapath.adder.gen_halfadder:4.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:6.ha.i_bit1  = \datapathaftab.daru2.datapath.addrreg.outreg [7];
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:6.ha.i_bit2  = \datapathaftab.daru2.datapath.adder.gen_halfadder:5.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:7.ha.i_bit1  = \datapathaftab.daru2.datapath.addrreg.outreg [8];
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:7.ha.i_bit2  = \datapathaftab.daru2.datapath.adder.gen_halfadder:6.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:8.ha.i_bit1  = \datapathaftab.daru2.datapath.addrreg.outreg [9];
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:8.ha.i_bit2  = \datapathaftab.daru2.datapath.adder.gen_halfadder:7.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:9.ha.i_bit1  = \datapathaftab.daru2.datapath.addrreg.outreg [10];
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:9.ha.i_bit2  = \datapathaftab.daru2.datapath.adder.gen_halfadder:8.ha.o_carry ;
  assign \datapathaftab.daru2.datapath.adder.gen_halfadder:9.ha.o_carry  = \datapathaftab.daru2.datapath.adder.gen_halfadder:10.ha.i_bit2 ;
  assign \datapathaftab.daru2.datapath.adder.sum  = { \datapathaftab.daru2.datapath.adder.gen_halfadder:30.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:29.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:28.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:27.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:26.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:25.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:24.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:23.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:22.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:21.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:20.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:19.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:18.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:17.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:16.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:15.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:14.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:13.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:12.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:11.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:10.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:9.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:8.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:7.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:6.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:5.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:4.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:3.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:2.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:1.ha.o_sum , \datapathaftab.daru2.datapath.adder.fa2.s , \datapathaftab.daru2.datapath.addrreg.outreg [0] };
  assign \datapathaftab.daru2.datapath.addrin  = \datapathaftab.daru2.datapath.addrreg.inreg ;
  assign \datapathaftab.daru2.datapath.addrreg.clk  = clk;
  assign \datapathaftab.daru2.datapath.addrreg.load  = \datapathaftab.daru2.controller.initcnt ;
  assign \datapathaftab.daru2.datapath.addrreg.rst  = rst;
  assign \datapathaftab.daru2.datapath.addrreg.zero  = 1'h0;
  assign \datapathaftab.daru2.datapath.bytecnt  = { \datapathaftab.daru2.datapath.adder.fa2.b , 1'h0 };
  assign \datapathaftab.daru2.datapath.bytestoread  = \datapathaftab.bytespermemaccessdaru ;
  assign \datapathaftab.daru2.datapath.bytestoread_temp  = \datapathaftab.bytespermemaccessdaru ;
  assign \datapathaftab.daru2.datapath.checkmisaligneddaru  = 1'h0;
  assign \datapathaftab.daru2.datapath.clk  = clk;
  assign \datapathaftab.daru2.datapath.cocnt  = \datapathaftab.daru2.controller.cocnt ;
  assign \datapathaftab.daru2.datapath.counter.clk  = clk;
  assign \datapathaftab.daru2.datapath.counter.cocnt  = \datapathaftab.daru2.datapath.counter.cocntp ;
  assign \datapathaftab.daru2.datapath.counter.inccnt  = \datapathaftab.daru2.controller.enabledata ;
  assign \datapathaftab.daru2.datapath.counter.initcnt  = \datapathaftab.daru2.controller.initcnt ;
  assign \datapathaftab.daru2.datapath.counter.initvalue  = 1'h0;
  assign \datapathaftab.daru2.datapath.counter.outcnt  = \datapathaftab.daru2.datapath.adder.fa2.b ;
  assign \datapathaftab.daru2.datapath.counter.rst  = rst;
  assign \datapathaftab.daru2.datapath.counter.temp  = \datapathaftab.daru2.datapath.adder.fa2.b ;
  assign \datapathaftab.daru2.datapath.counter.zerocnt  = 1'h0;
  assign \datapathaftab.daru2.datapath.datainstrbar  = 1'h1;
  assign \datapathaftab.daru2.datapath.dataout  = { \datapathaftab.daru2.datapath.reg1.outreg , \datapathaftab.daru2.datapath.reg0.outreg  };
  assign \datapathaftab.daru2.datapath.dataouthigh_reg  = \datapathaftab.daru2.datapath.reg1.outreg ;
  assign \datapathaftab.daru2.datapath.decoder.en  = \datapathaftab.daru2.controller.enabledata ;
  assign \datapathaftab.daru2.datapath.decoder.indecoder  = { 1'h0, \datapathaftab.daru2.datapath.adder.fa2.b  };
  assign \datapathaftab.daru2.datapath.enableaddr  = \datapathaftab.daru2.controller.enableaddr ;
  assign \datapathaftab.daru2.datapath.enabledata  = \datapathaftab.daru2.controller.enabledata ;
  assign \datapathaftab.daru2.datapath.errordecoder.addrin  = \datapathaftab.daru2.datapath.addrreg.outreg [1:0];
  assign \datapathaftab.daru2.datapath.errordecoder.checkmisaligneddaru  = 1'h0;
  assign \datapathaftab.daru2.datapath.errordecoder.datainstrbar  = 1'h1;
  assign \datapathaftab.daru2.datapath.errordecoder.instrmisalignedflag  = 1'h0;
  assign \datapathaftab.daru2.datapath.errordecoder.loadmisalignedflag  = 1'h0;
  assign \datapathaftab.daru2.datapath.errordecoder.nbytes  = \datapathaftab.e2m_ctrl_word_curr [44:43];
  assign \datapathaftab.daru2.datapath.inccnt  = \datapathaftab.daru2.controller.enabledata ;
  assign \datapathaftab.daru2.datapath.initcnt  = \datapathaftab.daru2.controller.initcnt ;
  assign \datapathaftab.daru2.datapath.initreading  = \datapathaftab.daru2.controller.initcnt ;
  assign \datapathaftab.daru2.datapath.initvaluecnt  = 2'h0;
  assign \datapathaftab.daru2.datapath.instrmisalignedflag  = 1'h0;
  assign \datapathaftab.daru2.datapath.ldaddr  = \datapathaftab.daru2.controller.initcnt ;
  assign \datapathaftab.daru2.datapath.ldnumbytes  = \datapathaftab.daru2.controller.initcnt ;
  assign \datapathaftab.daru2.datapath.loadmisalignedflag  = 1'h0;
  assign \datapathaftab.daru2.datapath.memdata  = memDataOut2;
  assign \datapathaftab.daru2.datapath.nbytereg.clk  = clk;
  assign \datapathaftab.daru2.datapath.nbytereg.inreg  = \datapathaftab.e2m_ctrl_word_curr [44:43];
  assign \datapathaftab.daru2.datapath.nbytereg.load  = \datapathaftab.daru2.controller.initcnt ;
  assign \datapathaftab.daru2.datapath.nbytereg.rst  = rst;
  assign \datapathaftab.daru2.datapath.nbytereg.zero  = 1'h0;
  assign \datapathaftab.daru2.datapath.nbytes  = \datapathaftab.e2m_ctrl_word_curr [44:43];
  assign \datapathaftab.daru2.datapath.nbytesout  = \datapathaftab.daru2.datapath.nbytereg.outreg ;
  assign \datapathaftab.daru2.datapath.outcnt  = \datapathaftab.daru2.datapath.adder.fa2.b ;
  assign \datapathaftab.daru2.datapath.outcnt_ext  = { 1'h0, \datapathaftab.daru2.datapath.adder.fa2.b  };
  assign \datapathaftab.daru2.datapath.outdecoder  = \datapathaftab.daru2.datapath.decoder.outdecoder ;
  assign \datapathaftab.daru2.datapath.readaddr  = \datapathaftab.daru2.datapath.addrreg.outreg ;
  assign \datapathaftab.daru2.datapath.readaddrout  = \datapathaftab.daru2.datapath.addrreg.outreg ;
  assign \datapathaftab.daru2.datapath.readaddrp  = { \datapathaftab.daru2.datapath.adder.gen_halfadder:30.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:29.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:28.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:27.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:26.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:25.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:24.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:23.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:22.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:21.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:20.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:19.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:18.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:17.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:16.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:15.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:14.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:13.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:12.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:11.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:10.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:9.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:8.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:7.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:6.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:5.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:4.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:3.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:2.ha.o_sum , \datapathaftab.daru2.datapath.adder.gen_halfadder:1.ha.o_sum , \datapathaftab.daru2.datapath.adder.fa2.s , \datapathaftab.daru2.datapath.addrreg.outreg [0] };
  assign \datapathaftab.daru2.datapath.reg0.clk  = clk;
  assign \datapathaftab.daru2.datapath.reg0.inreg  = \datapathaftab.daru2.datapath.datain ;
  assign \datapathaftab.daru2.datapath.reg0.load  = \datapathaftab.daru2.datapath.decoder.outdecoder [0];
  assign \datapathaftab.daru2.datapath.reg0.rst  = rst;
  assign \datapathaftab.daru2.datapath.reg0.zero  = \datapathaftab.daru2.controller.initcnt ;
  assign \datapathaftab.daru2.datapath.reg1.clk  = clk;
  assign \datapathaftab.daru2.datapath.reg1.inreg  = \datapathaftab.daru2.datapath.datain ;
  assign \datapathaftab.daru2.datapath.reg1.load  = \datapathaftab.daru2.datapath.decoder.outdecoder [1];
  assign \datapathaftab.daru2.datapath.reg1.rst  = rst;
  assign \datapathaftab.daru2.datapath.reg1.zero  = \datapathaftab.daru2.controller.initcnt ;
  assign \datapathaftab.daru2.datapath.rst  = rst;
  assign \datapathaftab.daru2.datapath.select_incoming_data  = 1'h0;
  assign \datapathaftab.daru2.datapath.sellden  = \datapathaftab.daru2.controller.enabledata ;
  assign \datapathaftab.daru2.datapath.zerocnt  = 1'h0;
  assign \datapathaftab.daru2.datapath.zeronumbytes  = 1'h0;
  assign \datapathaftab.daru2.enableaddr  = \datapathaftab.daru2.controller.enableaddr ;
  assign \datapathaftab.daru2.enabledata  = \datapathaftab.daru2.controller.enabledata ;
  assign \datapathaftab.daru2.inccnt  = \datapathaftab.daru2.controller.enabledata ;
  assign \datapathaftab.daru2.initcnt  = \datapathaftab.daru2.controller.initcnt ;
  assign \datapathaftab.daru2.initreading  = \datapathaftab.daru2.controller.initcnt ;
  assign \datapathaftab.daru2.instrmisalignedflag  = 1'h0;
  assign \datapathaftab.daru2.ldaddr  = \datapathaftab.daru2.controller.initcnt ;
  assign \datapathaftab.daru2.ldnumbytes  = \datapathaftab.daru2.controller.initcnt ;
  assign \datapathaftab.daru2.loadmisalignedflag  = 1'h0;
  assign \datapathaftab.daru2.memdata  = memDataOut2;
  assign \datapathaftab.daru2.memready  = memReady2;
  assign \datapathaftab.daru2.nbytes  = \datapathaftab.e2m_ctrl_word_curr [44:43];
  assign \datapathaftab.daru2.readaddrout  = \datapathaftab.daru2.datapath.addrreg.outreg ;
  assign \datapathaftab.daru2.readmem  = \datapathaftab.daru2.controller.enableaddr ;
  assign \datapathaftab.daru2.rst  = rst;
  assign \datapathaftab.daru2.select_incoming_data  = 1'h0;
  assign \datapathaftab.daru2.sellden  = \datapathaftab.daru2.controller.enabledata ;
  assign \datapathaftab.daru2.startdaru  = \datapathaftab.daru2.controller.startdaru ;
  assign \datapathaftab.daru2.sync_rst  = \controlleraftab.m2wb_en_temp ;
  assign \datapathaftab.daru2.zerocnt  = 1'h0;
  assign \datapathaftab.daru2.zeronumbytes  = 1'h0;
  assign \datapathaftab.daru2_en  = \datapathaftab.daru2.controller.startdaru ;
  assign \datapathaftab.datadaru1  = { \datapathaftab.daru1.datapath.dataout [31:16], \datapathaftab.daru1.datapath.reg0.outreg  };
  assign \datapathaftab.datadaru2  = { \datapathaftab.daru2.datapath.reg1.outreg , \datapathaftab.daru2.datapath.reg0.outreg  };
  assign \datapathaftab.datadawu  = \datapathaftab.dawu.datapath.dataout ;
  assign \datapathaftab.dawu.addrin  = \datapathaftab.daru2.datapath.addrreg.inreg ;
  assign \datapathaftab.dawu.addrout  = \datapathaftab.dawu.datapath.addrout ;
  assign \datapathaftab.dawu.bytestowrite  = \datapathaftab.bytespermemaccessdawu ;
  assign \datapathaftab.dawu.checkmisaligneddawu  = \datapathaftab.e2m_ctrl_word_curr [47];
  assign \datapathaftab.dawu.clk  = clk;
  assign \datapathaftab.dawu.cocnt  = \datapathaftab.dawu.controller.cocnt ;
  assign \datapathaftab.dawu.completedawu  = \datapathaftab.completeddawu ;
  assign \datapathaftab.dawu.controller.clk  = clk;
  assign \datapathaftab.dawu.controller.completedawu  = \datapathaftab.completeddawu ;
  assign \datapathaftab.dawu.controller.enabledata  = \datapathaftab.dawu.controller.enableaddr ;
  assign \datapathaftab.dawu.controller.ldaddr  = \datapathaftab.dawu.controller.initcnt ;
  assign \datapathaftab.dawu.controller.lddata  = \datapathaftab.dawu.controller.initcnt ;
  assign \datapathaftab.dawu.controller.ldnumbytes  = \datapathaftab.dawu.controller.initcnt ;
  assign \datapathaftab.dawu.controller.memready  = memReady2;
  assign \datapathaftab.dawu.controller.rst  = rst;
  assign \datapathaftab.dawu.controller.sync_rst  = \controlleraftab.m2wb_en_temp ;
  assign \datapathaftab.dawu.controller.writemem  = \datapathaftab.dawu.controller.enableaddr ;
  assign \datapathaftab.dawu.controller.zeroaddr  = 1'h0;
  assign \datapathaftab.dawu.controller.zerocnt  = 1'h0;
  assign \datapathaftab.dawu.controller.zerodata  = 1'h0;
  assign \datapathaftab.dawu.controller.zeronumbytes  = 1'h0;
  assign \datapathaftab.dawu.datain  = \datapathaftab.e2m_op2_curr ;
  assign \datapathaftab.dawu.dataout  = \datapathaftab.dawu.datapath.dataout ;
  assign \datapathaftab.dawu.datapath.adder.a  = \datapathaftab.dawu.datapath.addrreg.outreg ;
  assign \datapathaftab.dawu.datapath.adder.b  = { \datapathaftab.dawu.datapath.adder.fa2.b , 1'h0 };
  assign \datapathaftab.dawu.datapath.adder.cout [30:0] = { \datapathaftab.dawu.datapath.adder.gen_halfadder:29.ha.o_carry , \datapathaftab.dawu.datapath.adder.gen_halfadder:28.ha.o_carry , \datapathaftab.dawu.datapath.adder.gen_halfadder:27.ha.o_carry , \datapathaftab.dawu.datapath.adder.gen_halfadder:26.ha.o_carry , \datapathaftab.dawu.datapath.adder.gen_halfadder:25.ha.o_carry , \datapathaftab.dawu.datapath.adder.gen_halfadder:24.ha.o_carry , \datapathaftab.dawu.datapath.adder.gen_halfadder:23.ha.o_carry , \datapathaftab.dawu.datapath.adder.gen_halfadder:22.ha.o_carry , \datapathaftab.dawu.datapath.adder.gen_halfadder:21.ha.o_carry , \datapathaftab.dawu.datapath.adder.gen_halfadder:20.ha.o_carry , \datapathaftab.dawu.datapath.adder.gen_halfadder:19.ha.o_carry , \datapathaftab.dawu.datapath.adder.gen_halfadder:18.ha.o_carry , \datapathaftab.dawu.datapath.adder.gen_halfadder:17.ha.o_carry , \datapathaftab.dawu.datapath.adder.gen_halfadder:16.ha.o_carry , \datapathaftab.dawu.datapath.adder.gen_halfadder:15.ha.o_carry , \datapathaftab.dawu.datapath.adder.gen_halfadder:14.ha.o_carry , \datapathaftab.dawu.datapath.adder.gen_halfadder:13.ha.o_carry , \datapathaftab.dawu.datapath.adder.gen_halfadder:12.ha.o_carry , \datapathaftab.dawu.datapath.adder.gen_halfadder:11.ha.o_carry , \datapathaftab.dawu.datapath.adder.gen_halfadder:10.ha.o_carry , \datapathaftab.dawu.datapath.adder.gen_halfadder:10.ha.i_bit2 , \datapathaftab.dawu.datapath.adder.gen_halfadder:8.ha.o_carry , \datapathaftab.dawu.datapath.adder.gen_halfadder:7.ha.o_carry , \datapathaftab.dawu.datapath.adder.gen_halfadder:6.ha.o_carry , \datapathaftab.dawu.datapath.adder.gen_halfadder:5.ha.o_carry , \datapathaftab.dawu.datapath.adder.gen_halfadder:4.ha.o_carry , \datapathaftab.dawu.datapath.adder.gen_halfadder:3.ha.o_carry , \datapathaftab.dawu.datapath.adder.gen_halfadder:2.ha.o_carry , \datapathaftab.dawu.datapath.adder.gen_halfadder:1.ha.o_carry , \datapathaftab.dawu.datapath.adder.gen_halfadder:1.ha.i_bit2 , 1'h0 };
  assign \datapathaftab.dawu.datapath.adder.fa1.a  = \datapathaftab.dawu.datapath.addrreg.outreg [0];
  assign \datapathaftab.dawu.datapath.adder.fa1.b  = 1'h0;
  assign \datapathaftab.dawu.datapath.adder.fa1.cin  = 1'h0;
  assign \datapathaftab.dawu.datapath.adder.fa1.cout  = 1'h0;
  assign \datapathaftab.dawu.datapath.adder.fa1.s  = \datapathaftab.dawu.datapath.addrreg.outreg [0];
  assign \datapathaftab.dawu.datapath.adder.fa2.a  = \datapathaftab.dawu.datapath.addrreg.outreg [1];
  assign \datapathaftab.dawu.datapath.adder.fa2.cin  = 1'h0;
  assign \datapathaftab.dawu.datapath.adder.fa2.cout  = \datapathaftab.dawu.datapath.adder.gen_halfadder:1.ha.i_bit2 ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:1.ha.i_bit1  = \datapathaftab.dawu.datapath.addrreg.outreg [2];
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:10.ha.i_bit1  = \datapathaftab.dawu.datapath.addrreg.outreg [11];
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:11.ha.i_bit1  = \datapathaftab.dawu.datapath.addrreg.outreg [12];
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:11.ha.i_bit2  = \datapathaftab.dawu.datapath.adder.gen_halfadder:10.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:12.ha.i_bit1  = \datapathaftab.dawu.datapath.addrreg.outreg [13];
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:12.ha.i_bit2  = \datapathaftab.dawu.datapath.adder.gen_halfadder:11.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:13.ha.i_bit1  = \datapathaftab.dawu.datapath.addrreg.outreg [14];
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:13.ha.i_bit2  = \datapathaftab.dawu.datapath.adder.gen_halfadder:12.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:14.ha.i_bit1  = \datapathaftab.dawu.datapath.addrreg.outreg [15];
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:14.ha.i_bit2  = \datapathaftab.dawu.datapath.adder.gen_halfadder:13.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:15.ha.i_bit1  = \datapathaftab.dawu.datapath.addrreg.outreg [16];
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:15.ha.i_bit2  = \datapathaftab.dawu.datapath.adder.gen_halfadder:14.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:16.ha.i_bit1  = \datapathaftab.dawu.datapath.addrreg.outreg [17];
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:16.ha.i_bit2  = \datapathaftab.dawu.datapath.adder.gen_halfadder:15.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:17.ha.i_bit1  = \datapathaftab.dawu.datapath.addrreg.outreg [18];
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:17.ha.i_bit2  = \datapathaftab.dawu.datapath.adder.gen_halfadder:16.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:18.ha.i_bit1  = \datapathaftab.dawu.datapath.addrreg.outreg [19];
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:18.ha.i_bit2  = \datapathaftab.dawu.datapath.adder.gen_halfadder:17.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:19.ha.i_bit1  = \datapathaftab.dawu.datapath.addrreg.outreg [20];
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:19.ha.i_bit2  = \datapathaftab.dawu.datapath.adder.gen_halfadder:18.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:2.ha.i_bit1  = \datapathaftab.dawu.datapath.addrreg.outreg [3];
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:2.ha.i_bit2  = \datapathaftab.dawu.datapath.adder.gen_halfadder:1.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:20.ha.i_bit1  = \datapathaftab.dawu.datapath.addrreg.outreg [21];
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:20.ha.i_bit2  = \datapathaftab.dawu.datapath.adder.gen_halfadder:19.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:21.ha.i_bit1  = \datapathaftab.dawu.datapath.addrreg.outreg [22];
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:21.ha.i_bit2  = \datapathaftab.dawu.datapath.adder.gen_halfadder:20.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:22.ha.i_bit1  = \datapathaftab.dawu.datapath.addrreg.outreg [23];
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:22.ha.i_bit2  = \datapathaftab.dawu.datapath.adder.gen_halfadder:21.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:23.ha.i_bit1  = \datapathaftab.dawu.datapath.addrreg.outreg [24];
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:23.ha.i_bit2  = \datapathaftab.dawu.datapath.adder.gen_halfadder:22.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:24.ha.i_bit1  = \datapathaftab.dawu.datapath.addrreg.outreg [25];
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:24.ha.i_bit2  = \datapathaftab.dawu.datapath.adder.gen_halfadder:23.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:25.ha.i_bit1  = \datapathaftab.dawu.datapath.addrreg.outreg [26];
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:25.ha.i_bit2  = \datapathaftab.dawu.datapath.adder.gen_halfadder:24.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:26.ha.i_bit1  = \datapathaftab.dawu.datapath.addrreg.outreg [27];
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:26.ha.i_bit2  = \datapathaftab.dawu.datapath.adder.gen_halfadder:25.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:27.ha.i_bit1  = \datapathaftab.dawu.datapath.addrreg.outreg [28];
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:27.ha.i_bit2  = \datapathaftab.dawu.datapath.adder.gen_halfadder:26.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:28.ha.i_bit1  = \datapathaftab.dawu.datapath.addrreg.outreg [29];
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:28.ha.i_bit2  = \datapathaftab.dawu.datapath.adder.gen_halfadder:27.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:29.ha.i_bit1  = \datapathaftab.dawu.datapath.addrreg.outreg [30];
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:29.ha.i_bit2  = \datapathaftab.dawu.datapath.adder.gen_halfadder:28.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:3.ha.i_bit1  = \datapathaftab.dawu.datapath.addrreg.outreg [4];
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:3.ha.i_bit2  = \datapathaftab.dawu.datapath.adder.gen_halfadder:2.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:30.ha.i_bit1  = \datapathaftab.dawu.datapath.addrreg.outreg [31];
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:30.ha.i_bit2  = \datapathaftab.dawu.datapath.adder.gen_halfadder:29.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:30.ha.o_carry  = \datapathaftab.dawu.datapath.adder.cout [31];
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:4.ha.i_bit1  = \datapathaftab.dawu.datapath.addrreg.outreg [5];
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:4.ha.i_bit2  = \datapathaftab.dawu.datapath.adder.gen_halfadder:3.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:5.ha.i_bit1  = \datapathaftab.dawu.datapath.addrreg.outreg [6];
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:5.ha.i_bit2  = \datapathaftab.dawu.datapath.adder.gen_halfadder:4.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:6.ha.i_bit1  = \datapathaftab.dawu.datapath.addrreg.outreg [7];
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:6.ha.i_bit2  = \datapathaftab.dawu.datapath.adder.gen_halfadder:5.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:7.ha.i_bit1  = \datapathaftab.dawu.datapath.addrreg.outreg [8];
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:7.ha.i_bit2  = \datapathaftab.dawu.datapath.adder.gen_halfadder:6.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:8.ha.i_bit1  = \datapathaftab.dawu.datapath.addrreg.outreg [9];
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:8.ha.i_bit2  = \datapathaftab.dawu.datapath.adder.gen_halfadder:7.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:9.ha.i_bit1  = \datapathaftab.dawu.datapath.addrreg.outreg [10];
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:9.ha.i_bit2  = \datapathaftab.dawu.datapath.adder.gen_halfadder:8.ha.o_carry ;
  assign \datapathaftab.dawu.datapath.adder.gen_halfadder:9.ha.o_carry  = \datapathaftab.dawu.datapath.adder.gen_halfadder:10.ha.i_bit2 ;
  assign \datapathaftab.dawu.datapath.adder.sum  = { \datapathaftab.dawu.datapath.adder.gen_halfadder:30.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:29.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:28.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:27.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:26.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:25.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:24.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:23.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:22.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:21.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:20.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:19.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:18.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:17.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:16.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:15.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:14.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:13.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:12.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:11.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:10.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:9.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:8.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:7.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:6.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:5.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:4.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:3.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:2.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:1.ha.o_sum , \datapathaftab.dawu.datapath.adder.fa2.s , \datapathaftab.dawu.datapath.addrreg.outreg [0] };
  assign \datapathaftab.dawu.datapath.addrin  = \datapathaftab.daru2.datapath.addrreg.inreg ;
  assign \datapathaftab.dawu.datapath.addroutreg  = \datapathaftab.dawu.datapath.addrreg.outreg ;
  assign \datapathaftab.dawu.datapath.addrreg.clk  = clk;
  assign \datapathaftab.dawu.datapath.addrreg.inreg  = \datapathaftab.daru2.datapath.addrreg.inreg ;
  assign \datapathaftab.dawu.datapath.addrreg.load  = \datapathaftab.dawu.controller.initcnt ;
  assign \datapathaftab.dawu.datapath.addrreg.rst  = rst;
  assign \datapathaftab.dawu.datapath.addrreg.zero  = 1'h0;
  assign \datapathaftab.dawu.datapath.bytecnt  = { \datapathaftab.dawu.datapath.adder.fa2.b , 1'h0 };
  assign \datapathaftab.dawu.datapath.bytestowrite  = \datapathaftab.bytespermemaccessdawu ;
  assign \datapathaftab.dawu.datapath.bytestowrite_temp  = \datapathaftab.bytespermemaccessdawu ;
  assign \datapathaftab.dawu.datapath.checkmisaligneddawu  = \datapathaftab.e2m_ctrl_word_curr [47];
  assign \datapathaftab.dawu.datapath.clk  = clk;
  assign \datapathaftab.dawu.datapath.cocnt  = \datapathaftab.dawu.controller.cocnt ;
  assign \datapathaftab.dawu.datapath.counter.clk  = clk;
  assign \datapathaftab.dawu.datapath.counter.cocnt  = \datapathaftab.dawu.datapath.counter.cocntp ;
  assign \datapathaftab.dawu.datapath.counter.inccnt  = \datapathaftab.dawu.controller.inccnt ;
  assign \datapathaftab.dawu.datapath.counter.initcnt  = \datapathaftab.dawu.controller.initcnt ;
  assign \datapathaftab.dawu.datapath.counter.initvalue  = 1'h0;
  assign \datapathaftab.dawu.datapath.counter.outcnt  = \datapathaftab.dawu.datapath.adder.fa2.b ;
  assign \datapathaftab.dawu.datapath.counter.rst  = rst;
  assign \datapathaftab.dawu.datapath.counter.temp  = \datapathaftab.dawu.datapath.adder.fa2.b ;
  assign \datapathaftab.dawu.datapath.counter.zerocnt  = 1'h0;
  assign \datapathaftab.dawu.datapath.datain  = \datapathaftab.e2m_op2_curr ;
  assign \datapathaftab.dawu.datapath.enableaddr  = \datapathaftab.dawu.controller.enableaddr ;
  assign \datapathaftab.dawu.datapath.enabledata  = \datapathaftab.dawu.controller.enableaddr ;
  assign \datapathaftab.dawu.datapath.errordecoder.addrin  = \datapathaftab.daru2.datapath.addrreg.inreg [1:0];
  assign \datapathaftab.dawu.datapath.errordecoder.checkmisaligneddawu  = \datapathaftab.e2m_ctrl_word_curr [47];
  assign \datapathaftab.dawu.datapath.errordecoder.nbytes  = \datapathaftab.e2m_ctrl_word_curr [44:43];
  assign \datapathaftab.dawu.datapath.inccnt  = \datapathaftab.dawu.controller.inccnt ;
  assign \datapathaftab.dawu.datapath.initcnt  = \datapathaftab.dawu.controller.initcnt ;
  assign \datapathaftab.dawu.datapath.initvaluecnt  = 2'h0;
  assign \datapathaftab.dawu.datapath.ldaddr  = \datapathaftab.dawu.controller.initcnt ;
  assign \datapathaftab.dawu.datapath.lddata  = \datapathaftab.dawu.controller.initcnt ;
  assign \datapathaftab.dawu.datapath.ldnumbytes  = \datapathaftab.dawu.controller.initcnt ;
  assign \datapathaftab.dawu.datapath.nbytesin  = \datapathaftab.e2m_ctrl_word_curr [44:43];
  assign \datapathaftab.dawu.datapath.nbytesreg.clk  = clk;
  assign \datapathaftab.dawu.datapath.nbytesreg.inreg  = \datapathaftab.e2m_ctrl_word_curr [44:43];
  assign \datapathaftab.dawu.datapath.nbytesreg.load  = \datapathaftab.dawu.controller.initcnt ;
  assign \datapathaftab.dawu.datapath.nbytesreg.outreg  = \datapathaftab.dawu.datapath.nbytesout ;
  assign \datapathaftab.dawu.datapath.nbytesreg.rst  = rst;
  assign \datapathaftab.dawu.datapath.nbytesreg.zero  = 1'h0;
  assign \datapathaftab.dawu.datapath.outcnt  = \datapathaftab.dawu.datapath.adder.fa2.b ;
  assign \datapathaftab.dawu.datapath.reg0.clk  = clk;
  assign \datapathaftab.dawu.datapath.reg0.inreg  = \datapathaftab.e2m_op2_curr [15:0];
  assign \datapathaftab.dawu.datapath.reg0.load  = \datapathaftab.dawu.controller.initcnt ;
  assign \datapathaftab.dawu.datapath.reg0.outreg  = \datapathaftab.dawu.datapath.outreg0 ;
  assign \datapathaftab.dawu.datapath.reg0.rst  = rst;
  assign \datapathaftab.dawu.datapath.reg0.zero  = 1'h0;
  assign \datapathaftab.dawu.datapath.reg1.clk  = clk;
  assign \datapathaftab.dawu.datapath.reg1.inreg  = \datapathaftab.e2m_op2_curr [31:16];
  assign \datapathaftab.dawu.datapath.reg1.load  = \datapathaftab.dawu.controller.initcnt ;
  assign \datapathaftab.dawu.datapath.reg1.outreg  = \datapathaftab.dawu.datapath.outreg1 ;
  assign \datapathaftab.dawu.datapath.reg1.rst  = rst;
  assign \datapathaftab.dawu.datapath.reg1.zero  = 1'h0;
  assign \datapathaftab.dawu.datapath.rst  = rst;
  assign \datapathaftab.dawu.datapath.writeaddr  = { \datapathaftab.dawu.datapath.adder.gen_halfadder:30.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:29.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:28.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:27.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:26.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:25.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:24.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:23.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:22.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:21.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:20.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:19.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:18.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:17.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:16.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:15.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:14.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:13.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:12.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:11.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:10.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:9.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:8.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:7.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:6.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:5.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:4.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:3.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:2.ha.o_sum , \datapathaftab.dawu.datapath.adder.gen_halfadder:1.ha.o_sum , \datapathaftab.dawu.datapath.adder.fa2.s , \datapathaftab.dawu.datapath.addrreg.outreg [0] };
  assign \datapathaftab.dawu.datapath.zeroaddr  = 1'h0;
  assign \datapathaftab.dawu.datapath.zerocnt  = 1'h0;
  assign \datapathaftab.dawu.datapath.zerodata  = 1'h0;
  assign \datapathaftab.dawu.datapath.zeronumbytes  = 1'h0;
  assign \datapathaftab.dawu.enableaddr  = \datapathaftab.dawu.controller.enableaddr ;
  assign \datapathaftab.dawu.enabledata  = \datapathaftab.dawu.controller.enableaddr ;
  assign \datapathaftab.dawu.inccnt  = \datapathaftab.dawu.controller.inccnt ;
  assign \datapathaftab.dawu.initcnt  = \datapathaftab.dawu.controller.initcnt ;
  assign \datapathaftab.dawu.ldaddr  = \datapathaftab.dawu.controller.initcnt ;
  assign \datapathaftab.dawu.lddata  = \datapathaftab.dawu.controller.initcnt ;
  assign \datapathaftab.dawu.ldnumbytes  = \datapathaftab.dawu.controller.initcnt ;
  assign \datapathaftab.dawu.memready  = memReady2;
  assign \datapathaftab.dawu.nbytes  = \datapathaftab.e2m_ctrl_word_curr [44:43];
  assign \datapathaftab.dawu.rst  = rst;
  assign \datapathaftab.dawu.startdawu  = \datapathaftab.dawu.controller.startdawu ;
  assign \datapathaftab.dawu.sync_rst  = \controlleraftab.m2wb_en_temp ;
  assign \datapathaftab.dawu.writemem  = \datapathaftab.dawu.controller.enableaddr ;
  assign \datapathaftab.dawu.zeroaddr  = 1'h0;
  assign \datapathaftab.dawu.zerocnt  = 1'h0;
  assign \datapathaftab.dawu.zerodata  = 1'h0;
  assign \datapathaftab.dawu.zeronumbytes  = 1'h0;
  assign \datapathaftab.dawu_en  = \datapathaftab.dawu.controller.startdawu ;
  assign \datapathaftab.dec_valid  = \controlleraftab.dec_valid ;
  assign \datapathaftab.delegationmode  = { \datapathaftab.interrcheckcausedetection.delegationmode [1], \controlleraftab.delegationmode [0] };
  assign \datapathaftab.dividedbyzeroflag  = \datapathaftab.aau.division.dividedbyzeroflag ;
  assign \datapathaftab.dncntcsr  = 1'h0;
  assign \datapathaftab.e2m_alu_res_curr  = \datapathaftab.daru2.datapath.addrreg.inreg ;
  assign \datapathaftab.e2m_en  = \controlleraftab.e2m_en_temp ;
  assign \datapathaftab.e2m_en_def  = \controlleraftab.e2m_en_temp ;
  assign \datapathaftab.e2m_eq_next  = \datapathaftab.comparator.eq ;
  assign \datapathaftab.e2m_gt_next  = \datapathaftab.comparator.gt ;
  assign \datapathaftab.e2m_lt_next  = \datapathaftab.comparator.lt ;
  assign \datapathaftab.e2m_rst  = \controlleraftab.e2m_rst ;
  assign \datapathaftab.e2m_valid_curr  = \controlleraftab.m_valid ;
  assign \datapathaftab.e_addsubbar  = \datapathaftab.d2e_ctrl_word_curr [17];
  assign \datapathaftab.e_cmp_selaluop2  = \datapathaftab.d2e_ctrl_word_curr [57];
  assign \datapathaftab.e_cmp_selop2  = \datapathaftab.d2e_ctrl_word_curr [58];
  assign \datapathaftab.e_comparedsignedunsignedbar  = \datapathaftab.d2e_ctrl_word_curr [2];
  assign \datapathaftab.e_pass  = \datapathaftab.d2e_ctrl_word_curr [18];
  assign \datapathaftab.e_selaah  = \datapathaftab.d2e_ctrl_word_curr [42];
  assign \datapathaftab.e_selaal  = \datapathaftab.d2e_ctrl_word_curr [41];
  assign \datapathaftab.e_selaau  = \datapathaftab.d2e_ctrl_word_curr [8];
  assign \datapathaftab.e_selasu  = \datapathaftab.d2e_ctrl_word_curr [7];
  assign \datapathaftab.e_selbsu  = \datapathaftab.d2e_ctrl_word_curr [5];
  assign \datapathaftab.e_selcsr  = \datapathaftab.d2e_ctrl_word_curr [45];
  assign \datapathaftab.e_selllu  = \datapathaftab.d2e_ctrl_word_curr [6];
  assign \datapathaftab.e_sellogic  = \datapathaftab.d2e_ctrl_word_curr [33:32];
  assign \datapathaftab.e_selshift  = \datapathaftab.d2e_ctrl_word_curr [16:15];
  assign \datapathaftab.e_signedsigned  = \datapathaftab.d2e_ctrl_word_curr [38];
  assign \datapathaftab.e_signedunsigned  = \datapathaftab.d2e_ctrl_word_curr [39];
  assign \datapathaftab.e_startdivideaau  = \datapathaftab.d2e_ctrl_word_curr [37];
  assign \datapathaftab.e_startmultiplyaau  = \datapathaftab.d2e_ctrl_word_curr [36];
  assign \datapathaftab.e_unsignedunsigned  = \datapathaftab.d2e_ctrl_word_curr [40];
  assign \datapathaftab.ecallflag  = \controlleraftab.ecallflag ;
  assign \datapathaftab.ex_valid  = \controlleraftab.ex_valid ;
  assign \datapathaftab.exceptionraise  = \controlleraftab.exceptionraise ;
  assign \datapathaftab.exceptionraise_int  = \controlleraftab.exceptionraise ;
  assign \datapathaftab.f2gi_pc_plus4_next  = \datapathaftab.i4pc.add [31:0];
  assign \datapathaftab.forced_rb_read  = \controlleraftab.forced_rb_read ;
  assign \datapathaftab.gi2d_en  = \controlleraftab.gi2d_en ;
  assign { \datapathaftab.gi2d_instr_curr [31:20], \datapathaftab.gi2d_instr_curr [14:12], \datapathaftab.gi2d_instr_curr [6:0] } = { \controlleraftab.ir [31:20], \controlleraftab.ir [14:12], \controlleraftab.ir [6:0] };
  assign \datapathaftab.gi2d_instr_next  = { \datapathaftab.daru1.datapath.dataout [31:16], \datapathaftab.daru1.datapath.reg0.outreg  };
  assign \datapathaftab.gi2d_pc_next  = \datapathaftab.daru1.datapath.addrreg.outreg ;
  assign \datapathaftab.gi2d_pc_plus4_next  = \datapathaftab.f2gi_pc_plus4_curr ;
  assign \datapathaftab.gi2d_rst  = \controlleraftab.gi2d_rst ;
  assign \datapathaftab.gi2d_valid_curr  = \controlleraftab.dec_valid ;
  assign \datapathaftab.hazard_solved  = \controlleraftab.hazard_solved ;
  assign \datapathaftab.hazex  = \controlleraftab.hazex ;
  assign \datapathaftab.hazex_csr_second_operand  = \datapathaftab.bypass_csr_second_operand ;
  assign \datapathaftab.hazex_csr_second_operand_en  = \datapathaftab.bypass_csr_second_operand_en ;
  assign \datapathaftab.hazex_first_operand  = \datapathaftab.bypass_first_operand ;
  assign \datapathaftab.hazex_first_operand_en  = \datapathaftab.bypass_first_operand_en ;
  assign \datapathaftab.hazex_int  = \controlleraftab.hazex ;
  assign \datapathaftab.hazex_second_operand  = \datapathaftab.bypass_second_operand ;
  assign \datapathaftab.hazex_second_operand_en  = \datapathaftab.bypass_second_operand_en ;
  assign \datapathaftab.hazex_zero_first_operand  = \datapathaftab.hazm_zero_first_operand ;
  assign \datapathaftab.hazex_zero_second_operand  = \datapathaftab.hazm_zero_second_operand ;
  assign \datapathaftab.hazm  = \controlleraftab.hazm ;
  assign \datapathaftab.hazm_csr_second_operand  = \datapathaftab.bypass_csr_second_operand ;
  assign \datapathaftab.hazm_csr_second_operand_en  = \datapathaftab.bypass_csr_second_operand_en ;
  assign \datapathaftab.hazm_first_operand  = \datapathaftab.bypass_first_operand ;
  assign \datapathaftab.hazm_first_operand_en  = \datapathaftab.bypass_first_operand_en ;
  assign \datapathaftab.hazm_int  = \controlleraftab.hazm ;
  assign \datapathaftab.hazm_second_operand  = \datapathaftab.bypass_second_operand ;
  assign \datapathaftab.hazm_second_operand_en  = \datapathaftab.bypass_second_operand_en ;
  assign \datapathaftab.i4pc.a  = \datapathaftab.daru1.datapath.addrreg.inreg ;
  assign \datapathaftab.i4pc.addresult  = \datapathaftab.i4pc.add [31:0];
  assign \datapathaftab.i4pc.b  = 32'd4;
  assign \datapathaftab.i4pc.carryout  = \datapathaftab.i4pc.add [32];
  assign \datapathaftab.i4pc.cin  = 1'h0;
  assign \datapathaftab.illegalinstrflag  = \controlleraftab.illegalinstrflag ;
  assign \datapathaftab.immediate  = { \controlleraftab.ir [31], \datapathaftab.immselsignex.imm [30:0] };
  assign \datapathaftab.immselsignex.imm [31] = \controlleraftab.ir [31];
  assign \datapathaftab.immselsignex.ir11_8  = \datapathaftab.gi2d_instr_curr [11:8];
  assign \datapathaftab.immselsignex.ir19_12  = { \datapathaftab.gi2d_instr_curr [19:15], \controlleraftab.ir [14:12] };
  assign \datapathaftab.immselsignex.ir20  = \controlleraftab.ir [20];
  assign \datapathaftab.immselsignex.ir24_21  = \controlleraftab.ir [24:21];
  assign \datapathaftab.immselsignex.ir30_25  = \controlleraftab.ir [30:25];
  assign \datapathaftab.immselsignex.ir31  = \controlleraftab.ir [31];
  assign \datapathaftab.immselsignex.ir7  = \datapathaftab.gi2d_instr_curr [7];
  assign \datapathaftab.immselsignex.selb  = \controlleraftab.muxcode [8];
  assign \datapathaftab.immselsignex.selbuj  = \controlleraftab.muxcode [2];
  assign \datapathaftab.immselsignex.seli  = \controlleraftab.muxcode [0];
  assign \datapathaftab.immselsignex.selij  = \controlleraftab.muxcode [3];
  assign \datapathaftab.immselsignex.selis  = \controlleraftab.muxcode [7];
  assign \datapathaftab.immselsignex.selisb  = \controlleraftab.muxcode [10];
  assign \datapathaftab.immselsignex.selisbj  = \controlleraftab.muxcode [6];
  assign \datapathaftab.immselsignex.selj  = \controlleraftab.muxcode [9];
  assign \datapathaftab.immselsignex.sels  = \controlleraftab.muxcode [1];
  assign \datapathaftab.immselsignex.selsb  = \controlleraftab.muxcode [4];
  assign \datapathaftab.immselsignex.selu  = \controlleraftab.muxcode [5];
  assign \datapathaftab.immselsignex.seluj  = \controlleraftab.muxcode [11];
  assign \datapathaftab.inc4pc  = \datapathaftab.i4pc.add [31:0];
  assign \datapathaftab.incsr  = \datapathaftab.csrisl.incsr ;
  assign \datapathaftab.inst  = { \controlleraftab.ir [31:20], \datapathaftab.gi2d_instr_curr [19:15], \controlleraftab.ir [14:12], \datapathaftab.gi2d_instr_curr [11:7], \controlleraftab.ir [6:0] };
  assign \datapathaftab.inst_type  = \controlleraftab.inst_type ;
  assign \datapathaftab.instrmisalignedflag  = \datapathaftab.gi2d_ex_flag_next ;
  assign \datapathaftab.instructiondone  = \controlleraftab.instructiondone ;
  assign \datapathaftab.instructiondone_int  = \controlleraftab.instructiondone ;
  assign \datapathaftab.instructiondonecsr  = \controlleraftab.instructiondonecsr ;
  assign \datapathaftab.interrcheckcausedetection.causecode  = \datapathaftab.csrisl.causecode ;
  assign \datapathaftab.interrcheckcausedetection.clk  = clk;
  assign \datapathaftab.interrcheckcausedetection.curprv  = \datapathaftab.curprv ;
  assign \datapathaftab.interrcheckcausedetection.currentprv  = \datapathaftab.curprv ;
  assign \datapathaftab.interrcheckcausedetection.delegationmode [0] = \controlleraftab.delegationmode [0];
  assign \datapathaftab.interrcheckcausedetection.exceptionraise  = \datapathaftab.exceptionraisetemp ;
  assign \datapathaftab.interrcheckcausedetection.exceptionraisetemp  = \datapathaftab.exceptionraisetemp ;
  assign \datapathaftab.interrcheckcausedetection.inst  = { \controlleraftab.ir [31:20], \datapathaftab.gi2d_instr_curr [19:15], \controlleraftab.ir [14:12], \datapathaftab.gi2d_instr_curr [11:7], \controlleraftab.ir [6:0] };
  assign \datapathaftab.interrcheckcausedetection.interruptraise  = \datapathaftab.interrcheckcausedetection.interraisetemp ;
  assign \datapathaftab.interrcheckcausedetection.lddelegation  = \controlleraftab.lddelegation ;
  assign \datapathaftab.interrcheckcausedetection.ldmachine  = \controlleraftab.ldmachine ;
  assign \datapathaftab.interrcheckcausedetection.lduser  = \controlleraftab.lduser ;
  assign \datapathaftab.interrcheckcausedetection.medelegcsr  = \datapathaftab.d2e_outcsr_next ;
  assign \datapathaftab.interrcheckcausedetection.midelegcsr  = \datapathaftab.d2e_outcsr_next ;
  assign { \datapathaftab.interrcheckcausedetection.miecc [15:12], \datapathaftab.interrcheckcausedetection.miecc [10:9], \datapathaftab.interrcheckcausedetection.miecc [6:5], \datapathaftab.interrcheckcausedetection.miecc [2:1] } = { \datapathaftab.register_bank.mieccregister.outreg [15:12], \datapathaftab.register_bank.mieccregister.outreg [10:9], \datapathaftab.register_bank.mieccregister.outreg [6:5], \datapathaftab.register_bank.mieccregister.outreg [2:1] };
  assign \datapathaftab.interrcheckcausedetection.mipcc  = \datapathaftab.csrisl.ccmip ;
  assign \datapathaftab.interrcheckcausedetection.outadr  = \datapathaftab.m2wb_alu_res_curr ;
  assign \datapathaftab.interrcheckcausedetection.outpc  = \datapathaftab.m2wb_pc_curr ;
  assign \datapathaftab.interrcheckcausedetection.rst  = rst;
  assign \datapathaftab.interrcheckcausedetection.tempdividedbyzero  = \datapathaftab.m2wb_divided_by_zero_flag_curr ;
  assign \datapathaftab.interrcheckcausedetection.tempecallflag  = \datapathaftab.m2wb_ecall_flag_curr ;
  assign \datapathaftab.interrcheckcausedetection.tempflags  = { \datapathaftab.m2wb_ecall_flag_curr , \datapathaftab.m2wb_divided_by_zero_flag_curr , \datapathaftab.m2wb_illegal_instruction_flag_curr , \datapathaftab.m2wb_instr_misaligned_flag_curr , 2'h0 };
  assign \datapathaftab.interrcheckcausedetection.tempillegalinstr  = \datapathaftab.m2wb_illegal_instruction_flag_curr ;
  assign \datapathaftab.interrcheckcausedetection.tempinstraddrmisaligned  = \datapathaftab.m2wb_instr_misaligned_flag_curr ;
  assign \datapathaftab.interrcheckcausedetection.temploadaddrmisaligned  = 1'h0;
  assign \datapathaftab.interrcheckcausedetection.tempstoreaddrmisaligned  = 1'h0;
  assign \datapathaftab.interruptraise  = \controlleraftab.interruptraise ;
  assign \datapathaftab.interruptraise_int  = \controlleraftab.interruptraise ;
  assign \datapathaftab.interruptraisetemp  = \datapathaftab.interrcheckcausedetection.interraisetemp ;
  assign \datapathaftab.interruptsources  = { platformInterruptSignals, 4'h0, machineExternalInterrupt, 2'h0, userExternalInterrupt, machineTimerInterrupt, 2'h0, userTimerInterrupt, machineSoftwareInterrupt, 2'h0, userSoftwareInterrupt };
  assign \datapathaftab.interruptstartaddressdirect  = \datapathaftab.d2e_outcsr_next ;
  assign \datapathaftab.interruptstartaddressgenerator.causecode  = { \datapathaftab.csrisl.causecode [31], \datapathaftab.csrisl.causecode [4:0] };
  assign \datapathaftab.interruptstartaddressgenerator.interruptstartaddressdirect  = \datapathaftab.d2e_outcsr_next ;
  assign \datapathaftab.interruptstartaddressgenerator.interruptstartaddressvectored [31:30] = 2'h0;
  assign \datapathaftab.interruptstartaddressgenerator.modetvec  = \datapathaftab.d2e_outcsr_next [1:0];
  assign \datapathaftab.interruptstartaddressgenerator.tvecbase  = \datapathaftab.d2e_outcsr_next ;
  assign \datapathaftab.interruptstartaddressvectored  = { 2'h0, \datapathaftab.interruptstartaddressgenerator.interruptstartaddressvectored [29:0] };
  assign \datapathaftab.intersrcsynchreg.clk  = clk;
  assign \datapathaftab.intersrcsynchreg.inreg  = { platformInterruptSignals, 4'h0, machineExternalInterrupt, 2'h0, userExternalInterrupt, machineTimerInterrupt, 2'h0, userTimerInterrupt, machineSoftwareInterrupt, 2'h0, userSoftwareInterrupt };
  assign \datapathaftab.intersrcsynchreg.outreg  = \datapathaftab.csrisl.ccmip ;
  assign \datapathaftab.intersrcsynchreg.rst  = rst;
  assign \datapathaftab.intersrcsynchreg.zero  = 1'h0;
  assign \datapathaftab.ir  = { \controlleraftab.ir [31:20], \datapathaftab.gi2d_instr_curr [19:15], \controlleraftab.ir [14:12], \datapathaftab.gi2d_instr_curr [11:7], \controlleraftab.ir [6:0] };
  assign \datapathaftab.is_aau_used  = \controlleraftab.is_aau_used ;
  assign \datapathaftab.is_load_in_mem  = \datapathaftab.e2m_ctrl_word_curr [35];
  assign \datapathaftab.is_store_in_mem  = \datapathaftab.e2m_ctrl_word_curr [34];
  assign \datapathaftab.iscsrinstruction  = \controlleraftab.iscsrinstruction ;
  assign \datapathaftab.ldbytesigned  = \controlleraftab.ldbytesigned ;
  assign \datapathaftab.ldcntcsr  = \controlleraftab.ldcntcsr ;
  assign \datapathaftab.lddelegation  = \controlleraftab.lddelegation ;
  assign \datapathaftab.ldhalfsigned  = \controlleraftab.ldhalfsigned ;
  assign \datapathaftab.ldmachine  = \controlleraftab.ldmachine ;
  assign \datapathaftab.ldmiereg  = \controlleraftab.ldmiereg ;
  assign \datapathaftab.ldmieuiefield  = \controlleraftab.ldmieuiefield ;
  assign \datapathaftab.lduser  = \controlleraftab.lduser ;
  assign \datapathaftab.ldvaluecsr  = \controlleraftab.ldvaluecsr ;
  assign \datapathaftab.llu.ain  = \datapathaftab.aau.ain ;
  assign \datapathaftab.llu.bin  = \datapathaftab.aau.bin ;
  assign \datapathaftab.llu.sellogic  = \datapathaftab.d2e_ctrl_word_curr [33:32];
  assign \datapathaftab.llu.y  = \datapathaftab.llu.result ;
  assign \datapathaftab.lluresult  = \datapathaftab.llu.result ;
  assign \datapathaftab.load  = \controlleraftab.load ;
  assign \datapathaftab.loadmiereg  = \controlleraftab.loadmiereg ;
  assign \datapathaftab.loadmieuiefield  = \controlleraftab.loadmieuiefield ;
  assign \datapathaftab.m2wb_en  = \controlleraftab.m2wb_en_temp ;
  assign \datapathaftab.m2wb_op1_curr  = \datapathaftab.csrisl.p1 ;
  assign \datapathaftab.m2wb_rst  = \controlleraftab.m2wb_rst ;
  assign \datapathaftab.m2wb_valid_curr  = \controlleraftab.wb_valid ;
  assign \datapathaftab.m2wb_validaccesscsr_curr  = \controlleraftab.wb_validaccesscsr ;
  assign \datapathaftab.m_checkmisaligneddawu  = \datapathaftab.e2m_ctrl_word_curr [47];
  assign \datapathaftab.m_func3  = \datapathaftab.e2m_instr_curr [14:12];
  assign \datapathaftab.m_ldbytesigned  = \datapathaftab.e2m_ctrl_word_curr [12];
  assign \datapathaftab.m_ldhalfsigned  = \datapathaftab.e2m_ctrl_word_curr [13];
  assign \datapathaftab.m_load  = \datapathaftab.e2m_ctrl_word_curr [14];
  assign \datapathaftab.m_nbytes  = \datapathaftab.e2m_ctrl_word_curr [44:43];
  assign \datapathaftab.m_opcode  = \datapathaftab.e2m_instr_curr [6:0];
  assign \datapathaftab.m_startdaru  = \datapathaftab.e2m_ctrl_word_curr [35];
  assign \datapathaftab.m_startdawu  = \datapathaftab.e2m_ctrl_word_curr [34];
  assign \datapathaftab.m_valid  = \controlleraftab.m_valid ;
  assign \datapathaftab.machineexternalinterrupt  = machineExternalInterrupt;
  assign \datapathaftab.machinesoftwareinterrupt  = machineSoftwareInterrupt;
  assign \datapathaftab.machinestatusalterationpostcsr  = \controlleraftab.machinestatusalterationpostcsr ;
  assign \datapathaftab.machinestatusalterationprecsr  = \controlleraftab.machinestatusalterationprecsr ;
  assign \datapathaftab.machinetimerinterrupt  = machineTimerInterrupt;
  assign \datapathaftab.memaddr1  = \datapathaftab.daru1.datapath.addrout ;
  assign \datapathaftab.memaddrdaru2  = \datapathaftab.daru2.datapath.addrout ;
  assign \datapathaftab.memaddrdawu  = \datapathaftab.dawu.datapath.addrout ;
  assign \datapathaftab.memdataout1  = memDataOut1;
  assign \datapathaftab.memdataout2  = memDataOut2;
  assign \datapathaftab.memready1  = memReady1;
  assign \datapathaftab.memready2  = memReady2;
  assign \datapathaftab.mipcclddisable  = \controlleraftab.mipcclddisable ;
  assign \datapathaftab.mirror  = \controlleraftab.mirror ;
  assign \datapathaftab.mirror_int  = \controlleraftab.mirror ;
  assign \datapathaftab.mirroraddress  = { 4'h0, \datapathaftab.mux8.a [7:0] };
  assign \datapathaftab.mirroruie  = \datapathaftab.csrisl.mirroruie ;
  assign \datapathaftab.mirroruip  = \datapathaftab.csrisl.mirroruip ;
  assign \datapathaftab.mirrorusercu  = \controlleraftab.mirrorusercu ;
  assign \datapathaftab.mirrorustatus  = \datapathaftab.csrisl.mirrorustatus ;
  assign \datapathaftab.modetvec  = \datapathaftab.d2e_outcsr_next [1:0];
  assign \datapathaftab.mux2.b  = \datapathaftab.gi2d_pc_curr ;
  assign \datapathaftab.mux2.s0  = \controlleraftab.seljl ;
  assign \datapathaftab.mux2.s1  = \controlleraftab.selpc ;
  assign \datapathaftab.mux2.w  = \datapathaftab.d2e_alu_op1_next ;
  assign \datapathaftab.mux5.a  = \datapathaftab.d2e_op2_next ;
  assign \datapathaftab.mux5.b  = { \controlleraftab.ir [31], \datapathaftab.immselsignex.imm [30:0] };
  assign \datapathaftab.mux5.s0  = \controlleraftab.selp2 ;
  assign \datapathaftab.mux5.s1  = \controlleraftab.selimm ;
  assign \datapathaftab.mux5.w  = \datapathaftab.d2e_alu_op2_next ;
  assign \datapathaftab.mux6.a  = \datapathaftab.d2e_op1_next ;
  assign \datapathaftab.mux6.b  = \datapathaftab.gi2d_pc_curr ;
  assign \datapathaftab.mux6.s0  = \controlleraftab.selp1 ;
  assign \datapathaftab.mux6.s1  = \controlleraftab.selauipc ;
  assign \datapathaftab.mux6.w  = \datapathaftab.mux2.a ;
  assign \datapathaftab.mux8.b  = { 4'h0, \datapathaftab.mux8.a [7:0] };
  assign \datapathaftab.mux8.s1  = \controlleraftab.mirrorusercu ;
  assign \datapathaftab.muxcmp.a  = \datapathaftab.aau.bin ;
  assign \datapathaftab.muxcmp.b  = \datapathaftab.d2e_op2_curr ;
  assign \datapathaftab.muxcmp.s0  = \datapathaftab.d2e_ctrl_word_curr [57];
  assign \datapathaftab.muxcmp.s1  = \datapathaftab.d2e_ctrl_word_curr [58];
  assign \datapathaftab.muxcmp.w  = \datapathaftab.comparator.bin ;
  assign \datapathaftab.muxcode  = \controlleraftab.muxcode ;
  assign \datapathaftab.nbytes  = \controlleraftab.nbytes ;
  assign \datapathaftab.op1_p1_pc  = \datapathaftab.mux2.a ;
  assign \datapathaftab.outaddr  = { 5'h06, \datapathaftab.csraddressingdecoder.outaddr [6], 3'h0, \datapathaftab.csraddressingdecoder.outaddr [2:0] };
  assign \datapathaftab.outcsr_register.clk  = clk;
  assign \datapathaftab.outcsr_register.inreg  = \datapathaftab.d2e_outcsr_next ;
  assign \datapathaftab.outcsr_register.load  = 1'h1;
  assign \datapathaftab.outcsr_register.outreg  = \datapathaftab.outcsr_reg ;
  assign \datapathaftab.outcsr_register.rst  = rst;
  assign \datapathaftab.outcsr_register.zero  = 1'h0;
  assign \datapathaftab.outcsr_write_val  = \datapathaftab.csrisl.outcsr ;
  assign \datapathaftab.outpc  = \datapathaftab.daru1.datapath.addrreg.inreg ;
  assign \datapathaftab.pass  = \controlleraftab.pass ;
  assign \datapathaftab.platforminterruptsignals  = platformInterruptSignals;
  assign \datapathaftab.preaddressregbank  = \datapathaftab.mux8.a ;
  assign \datapathaftab.previousprv  = \datapathaftab.csrisl.outcsr [12:11];
  assign \datapathaftab.readmemdaru1  = \datapathaftab.daru1.controller.enableaddr ;
  assign \datapathaftab.readmemdaru1_int  = \datapathaftab.daru1.controller.enableaddr ;
  assign \datapathaftab.readmemdaru2  = \datapathaftab.daru2.controller.enableaddr ;
  assign \datapathaftab.readmemdaru2_int  = \datapathaftab.daru2.controller.enableaddr ;
  assign \datapathaftab.readonlycsr  = \controlleraftab.readonlycsr ;
  assign \datapathaftab.register_bank.addressregbank  = \datapathaftab.addressregbank ;
  assign \datapathaftab.register_bank.clk  = clk;
  assign \datapathaftab.register_bank.csr_address_logic.addressregbank  = \datapathaftab.mux8.w ;
  assign \datapathaftab.register_bank.csr_address_logic.ldmiereg  = \controlleraftab.ldmiereg ;
  assign \datapathaftab.register_bank.csr_address_logic.ldmieuiefield  = \controlleraftab.ldmieuiefield ;
  assign \datapathaftab.register_bank.csr_address_logic.mirror  = \controlleraftab.mirror ;
  assign \datapathaftab.register_bank.csr_address_logic.mirroruie  = \datapathaftab.csrisl.mirroruie ;
  assign \datapathaftab.register_bank.csr_address_logic.mirroruietemp  = \datapathaftab.csrisl.mirroruie ;
  assign \datapathaftab.register_bank.csr_address_logic.mirroruip  = \datapathaftab.csrisl.mirroruip ;
  assign \datapathaftab.register_bank.csr_address_logic.mirroruiptemp  = \datapathaftab.csrisl.mirroruip ;
  assign \datapathaftab.register_bank.csr_address_logic.mirrorustatus  = \datapathaftab.csrisl.mirrorustatus ;
  assign \datapathaftab.register_bank.csr_address_logic.mirrorustatustemp  = \datapathaftab.csrisl.mirrorustatus ;
  assign \datapathaftab.register_bank.csr_registers.addressregbank  = { \datapathaftab.addressregbank [8], \datapathaftab.addressregbank [6], \datapathaftab.addressregbank [2:0] };
  assign \datapathaftab.register_bank.csr_registers.clk  = clk;
  assign \datapathaftab.register_bank.csr_registers.inputregbank  = \datapathaftab.csrisl.incsr ;
  assign \datapathaftab.register_bank.csr_registers.outregbank  = \datapathaftab.d2e_outcsr_next_pre_bypass ;
  assign \datapathaftab.register_bank.csr_registers.rst  = rst;
  assign \datapathaftab.register_bank.csr_registers.writeaddressregbank  = { \datapathaftab.mux8.w [8], \datapathaftab.mux8.w [6], \datapathaftab.mux8.w [2:0] };
  assign \datapathaftab.register_bank.csr_registers.writeregbank  = \controlleraftab.writeregbank ;
  assign \datapathaftab.register_bank.inputregbank  = \datapathaftab.csrisl.incsr ;
  assign \datapathaftab.register_bank.ldmiereg  = \controlleraftab.ldmiereg ;
  assign \datapathaftab.register_bank.ldmieuiefield  = \controlleraftab.ldmieuiefield ;
  assign \datapathaftab.register_bank.loadmiereg  = \controlleraftab.loadmiereg ;
  assign \datapathaftab.register_bank.loadmieuiefield  = \controlleraftab.loadmieuiefield ;
  assign \datapathaftab.register_bank.mieccregister.clk  = clk;
  assign \datapathaftab.register_bank.mieccregister.inreg  = \datapathaftab.csrisl.incsr ;
  assign \datapathaftab.register_bank.mieccregister.load  = \controlleraftab.loadmiereg ;
  assign { \datapathaftab.register_bank.mieccregister.outreg [31:16], \datapathaftab.register_bank.mieccregister.outreg [11], \datapathaftab.register_bank.mieccregister.outreg [8:7], \datapathaftab.register_bank.mieccregister.outreg [4:3], \datapathaftab.register_bank.mieccregister.outreg [0] } = { \datapathaftab.interrcheckcausedetection.miecc [31:16], \datapathaftab.interrcheckcausedetection.miecc [11], \datapathaftab.interrcheckcausedetection.miecc [8:7], \datapathaftab.interrcheckcausedetection.miecc [4:3], \datapathaftab.interrcheckcausedetection.miecc [0] };
  assign \datapathaftab.register_bank.mieccregister.rst  = rst;
  assign \datapathaftab.register_bank.mieccregister.zero  = 1'h0;
  assign \datapathaftab.register_bank.miefieldccregister.clk  = clk;
  assign \datapathaftab.register_bank.miefieldccregister.inreg  = \datapathaftab.csrisl.incsr [3];
  assign \datapathaftab.register_bank.miefieldccregister.load  = \controlleraftab.loadmieuiefield ;
  assign \datapathaftab.register_bank.miefieldccregister.outreg  = \datapathaftab.interrcheckcausedetection.miefieldcc ;
  assign \datapathaftab.register_bank.miefieldccregister.rst  = rst;
  assign \datapathaftab.register_bank.miefieldccregister.zero  = 1'h0;
  assign \datapathaftab.register_bank.mirror  = \controlleraftab.mirror ;
  assign \datapathaftab.register_bank.mirroruie  = \datapathaftab.csrisl.mirroruie ;
  assign \datapathaftab.register_bank.mirroruip  = \datapathaftab.csrisl.mirroruip ;
  assign \datapathaftab.register_bank.mirrorustatus  = \datapathaftab.csrisl.mirrorustatus ;
  assign \datapathaftab.register_bank.outmieccreg  = { \datapathaftab.interrcheckcausedetection.miecc [31:16], \datapathaftab.register_bank.mieccregister.outreg [15:12], \datapathaftab.interrcheckcausedetection.miecc [11], \datapathaftab.register_bank.mieccregister.outreg [10:9], \datapathaftab.interrcheckcausedetection.miecc [8:7], \datapathaftab.register_bank.mieccregister.outreg [6:5], \datapathaftab.interrcheckcausedetection.miecc [4:3], \datapathaftab.register_bank.mieccregister.outreg [2:1], \datapathaftab.interrcheckcausedetection.miecc [0] };
  assign \datapathaftab.register_bank.outmiefieldccreg  = \datapathaftab.interrcheckcausedetection.miefieldcc ;
  assign \datapathaftab.register_bank.outregbank  = \datapathaftab.d2e_outcsr_next_pre_bypass ;
  assign \datapathaftab.register_bank.outuiefieldccreg  = \datapathaftab.interrcheckcausedetection.uiefieldcc ;
  assign \datapathaftab.register_bank.rst  = rst;
  assign \datapathaftab.register_bank.translatedaddress  = { \datapathaftab.addressregbank [8], \datapathaftab.addressregbank [6], \datapathaftab.addressregbank [2:0] };
  assign \datapathaftab.register_bank.translatedwriteaddress  = { \datapathaftab.mux8.w [8], \datapathaftab.mux8.w [6], \datapathaftab.mux8.w [2:0] };
  assign \datapathaftab.register_bank.uiefieldccregister.clk  = clk;
  assign \datapathaftab.register_bank.uiefieldccregister.inreg  = \datapathaftab.csrisl.incsr [0];
  assign \datapathaftab.register_bank.uiefieldccregister.load  = \controlleraftab.loadmieuiefield ;
  assign \datapathaftab.register_bank.uiefieldccregister.outreg  = \datapathaftab.interrcheckcausedetection.uiefieldcc ;
  assign \datapathaftab.register_bank.uiefieldccregister.rst  = rst;
  assign \datapathaftab.register_bank.uiefieldccregister.zero  = 1'h0;
  assign \datapathaftab.register_bank.writeaddressregbank  = \datapathaftab.mux8.w ;
  assign \datapathaftab.register_bank.writeregbank  = \controlleraftab.writeregbank ;
  assign \datapathaftab.registerfile.clk  = clk;
  assign \datapathaftab.registerfile.p1  = \datapathaftab.p1 ;
  assign \datapathaftab.registerfile.p2  = \datapathaftab.p2 ;
  assign \datapathaftab.registerfile.rd  = \datapathaftab.m2wb_instr_curr [11:7];
  assign \datapathaftab.registerfile.rs1  = \datapathaftab.gi2d_instr_curr [19:15];
  assign \datapathaftab.registerfile.rs2  = \controlleraftab.ir [24:20];
  assign \datapathaftab.registerfile.rst  = rst;
  assign \datapathaftab.regpc.clk  = clk;
  assign \datapathaftab.regpc.inreg  = \datapathaftab.inpc ;
  assign \datapathaftab.regpc.load  = \datapathaftab.ldpc ;
  assign \datapathaftab.regpc.outreg  = \datapathaftab.daru1.datapath.addrreg.inreg ;
  assign \datapathaftab.regpc.rst  = rst;
  assign \datapathaftab.regpc.zero  = 1'h0;
  assign \datapathaftab.resaah  = \datapathaftab.aau.resaau1 ;
  assign \datapathaftab.resaal  = \datapathaftab.aau.resaau2 ;
  assign \datapathaftab.ret_from_epc  = \controlleraftab.ret_from_epc ;
  assign \datapathaftab.rst  = rst;
  assign \datapathaftab.selaah  = \controlleraftab.selaah ;
  assign \datapathaftab.selaal  = \controlleraftab.selaal ;
  assign \datapathaftab.selaau  = \controlleraftab.selaau ;
  assign \datapathaftab.selalu  = \controlleraftab.selalu ;
  assign \datapathaftab.selasu  = \controlleraftab.selasu ;
  assign \datapathaftab.selauipc  = \controlleraftab.selauipc ;
  assign \datapathaftab.selbsu  = \controlleraftab.selbsu ;
  assign \datapathaftab.selcause_csr  = \controlleraftab.selcause_csr ;
  assign \datapathaftab.selccmip_csr  = \controlleraftab.selccmip_csr ;
  assign \datapathaftab.selcsr  = \controlleraftab.selcsr ;
  assign \datapathaftab.selcsraddrfrominst  = \controlleraftab.iscsrinstruction ;
  assign \datapathaftab.selimm  = \controlleraftab.selimm ;
  assign \datapathaftab.selimmcsr  = \controlleraftab.selimmcsr ;
  assign \datapathaftab.selinterruptaddressdirect  = \controlleraftab.selinterruptaddressdirect ;
  assign \datapathaftab.selinterruptaddressvectored  = \controlleraftab.selinterruptaddressvectored ;
  assign \datapathaftab.seljl  = \controlleraftab.seljl ;
  assign \datapathaftab.selllu  = \controlleraftab.selllu ;
  assign \datapathaftab.sellogic  = \controlleraftab.sellogic ;
  assign \datapathaftab.selmedeleg_csr  = \controlleraftab.selmedeleg_csr ;
  assign \datapathaftab.selmem  = \controlleraftab.selmem ;
  assign \datapathaftab.selmepc_csr  = \controlleraftab.selmepc_csr ;
  assign \datapathaftab.selmideleg_csr  = \controlleraftab.selmideleg_csr ;
  assign \datapathaftab.selp1  = \controlleraftab.selp1 ;
  assign \datapathaftab.selp1csr  = \controlleraftab.selp1csr ;
  assign \datapathaftab.selp2  = \controlleraftab.selp2 ;
  assign \datapathaftab.selpc  = \controlleraftab.selpc ;
  assign \datapathaftab.selpc4  = \controlleraftab.selpc4 ;
  assign \datapathaftab.selpc_csr  = \controlleraftab.selpc_csr ;
  assign \datapathaftab.selreadwritecsr  = \controlleraftab.selreadwritecsr ;
  assign \datapathaftab.selromaddress  = \controlleraftab.selromaddress ;
  assign \datapathaftab.selshift  = \controlleraftab.selshift ;
  assign \datapathaftab.seltval_csr  = 1'hx;
  assign \datapathaftab.setcsr  = \controlleraftab.setcsr ;
  assign \datapathaftab.setone_in  = \datapathaftab.registerfile.setone ;
  assign \datapathaftab.setzero_in  = \datapathaftab.registerfile.setzero ;
  assign \datapathaftab.setzeroorone  = \controlleraftab.cmp_selaluop2 ;
  assign \datapathaftab.signedsigned  = \controlleraftab.signedsigned ;
  assign \datapathaftab.signedunsigned  = \controlleraftab.signedunsigned ;
  assign \datapathaftab.startdaru  = \controlleraftab.selmem ;
  assign \datapathaftab.startdawu  = \controlleraftab.checkmisaligneddawu ;
  assign \datapathaftab.startdivideaau  = \controlleraftab.startdivideaau ;
  assign \datapathaftab.startdivideaau_def  = \datapathaftab.aau.division.startsdiv ;
  assign \datapathaftab.startmultiplyaau  = \controlleraftab.startmultiplyaau ;
  assign \datapathaftab.startmultiplyaau_def  = \datapathaftab.aau.multiplication.controller.startbooth ;
  assign \datapathaftab.sulu.datain  = { \datapathaftab.daru2.datapath.reg1.outreg , \datapathaftab.daru2.datapath.reg0.outreg  };
  assign \datapathaftab.sulu.dataout  = \datapathaftab.m2wb_mem_res_next ;
  assign \datapathaftab.sulu.load  = \datapathaftab.e2m_ctrl_word_curr [14];
  assign \datapathaftab.sulu.loadbytesigned  = \datapathaftab.e2m_ctrl_word_curr [12];
  assign \datapathaftab.sulu.loadhalfsigned  = \datapathaftab.e2m_ctrl_word_curr [13];
  assign \datapathaftab.tempflags  = { \datapathaftab.m2wb_ecall_flag_curr , \datapathaftab.m2wb_divided_by_zero_flag_curr , \datapathaftab.m2wb_illegal_instruction_flag_curr , \datapathaftab.m2wb_instr_misaligned_flag_curr , 2'h0 };
  assign \datapathaftab.unsignedunsigned  = \controlleraftab.unsignedunsigned ;
  assign \datapathaftab.upcntcsr  = \controlleraftab.upcntcsr ;
  assign \datapathaftab.userexternalinterrupt  = userExternalInterrupt;
  assign \datapathaftab.usersoftwareinterrupt  = userSoftwareInterrupt;
  assign \datapathaftab.userstatusalterationpostcsr  = \controlleraftab.userstatusalterationpostcsr ;
  assign \datapathaftab.userstatusalterationprecsr  = \controlleraftab.userstatusalterationprecsr ;
  assign \datapathaftab.usertimerinterrupt  = userTimerInterrupt;
  assign \datapathaftab.validaccesscsr  = \controlleraftab.validaccesscsr ;
  assign \datapathaftab.validaccesscsr_int  = \controlleraftab.validaccesscsr ;
  assign \datapathaftab.validaddresscsr  = \datapathaftab.csr_address_ctrl.validaddresscsr ;
  assign \datapathaftab.wb_addressregbank  = \datapathaftab.mux8.w ;
  assign \datapathaftab.wb_func3  = \datapathaftab.m2wb_instr_curr [14:12];
  assign \datapathaftab.wb_iscsrinstruction  = \datapathaftab.m2wb_ctrl_word_curr [59];
  assign \datapathaftab.wb_mreturetbar  = \datapathaftab.m2wb_instr_curr [29];
  assign \datapathaftab.wb_ret_from_epc  = \datapathaftab.m2wb_ctrl_word_curr [53];
  assign \datapathaftab.wb_ret_from_epc_int  = \datapathaftab.m2wb_ctrl_word_curr [53];
  assign \datapathaftab.wb_selalu  = \datapathaftab.m2wb_ctrl_word_curr [54];
  assign \datapathaftab.wb_selcsraddrfrominst  = \datapathaftab.m2wb_ctrl_word_curr [48];
  assign \datapathaftab.wb_selmem  = \datapathaftab.m2wb_ctrl_word_curr [56];
  assign \datapathaftab.wb_selpc4  = \datapathaftab.m2wb_ctrl_word_curr [55];
  assign \datapathaftab.wb_setzeroorone  = \datapathaftab.m2wb_ctrl_word_curr [1];
  assign \datapathaftab.wb_valid  = \controlleraftab.wb_valid ;
  assign \datapathaftab.wb_validaccesscsr  = \controlleraftab.wb_validaccesscsr ;
  assign \datapathaftab.wb_writeregfile  = \datapathaftab.m2wb_ctrl_word_curr [0];
  assign \datapathaftab.writeaddressregbank  = \datapathaftab.mux8.w ;
  assign \datapathaftab.writedata  = \datapathaftab.registerfile.writedata ;
  assign \datapathaftab.writememdawu  = \datapathaftab.dawu.controller.enableaddr ;
  assign \datapathaftab.writememdawu_int  = \datapathaftab.dawu.controller.enableaddr ;
  assign \datapathaftab.writerb_inst  = 1'h0;
  assign \datapathaftab.writeregbank  = \controlleraftab.writeregbank ;
  assign \datapathaftab.writeregfile  = \controlleraftab.writeregfile ;
  assign \datapathaftab.writeregfile_in  = \datapathaftab.registerfile.writeregfile ;
  assign \datapathaftab.zerocntcsr  = \controlleraftab.zerocntcsr ;
  assign dec_valid = \controlleraftab.dec_valid ;
  assign delegationmode = { \datapathaftab.interrcheckcausedetection.delegationmode [1], \controlleraftab.delegationmode [0] };
  assign dncntcsr = 1'h0;
  assign e2m_en = \controlleraftab.e2m_en_temp ;
  assign e2m_rst = \controlleraftab.e2m_rst ;
  assign ecallflag = \controlleraftab.ecallflag ;
  assign ex_valid = \controlleraftab.ex_valid ;
  assign exceptionraise = \controlleraftab.exceptionraise ;
  assign forced_rb_read = \controlleraftab.forced_rb_read ;
  assign gi2d_en = \controlleraftab.gi2d_en ;
  assign gi2d_rst = \controlleraftab.gi2d_rst ;
  assign hazard_solved = \controlleraftab.hazard_solved ;
  assign hazex = \controlleraftab.hazex ;
  assign hazm = \controlleraftab.hazm ;
  assign illegalinstrflag = \controlleraftab.illegalinstrflag ;
  assign inst_type = \controlleraftab.inst_type ;
  assign instructiondone = \controlleraftab.instructiondone ;
  assign instructiondonecsr = \controlleraftab.instructiondonecsr ;
  assign interruptProcessing = \controlleraftab.mipcclddisable ;
  assign interruptraise = \controlleraftab.interruptraise ;
  assign ir = { \controlleraftab.ir [31:20], \datapathaftab.gi2d_instr_curr [19:15], \controlleraftab.ir [14:12], \datapathaftab.gi2d_instr_curr [11:7], \controlleraftab.ir [6:0] };
  assign is_aau_used = \controlleraftab.is_aau_used ;
  assign is_load_in_mem = \datapathaftab.e2m_ctrl_word_curr [35];
  assign is_store_in_mem = \datapathaftab.e2m_ctrl_word_curr [34];
  assign iscsrinstruction = \controlleraftab.iscsrinstruction ;
  assign ldbytesigned = \controlleraftab.ldbytesigned ;
  assign ldcntcsr = \controlleraftab.ldcntcsr ;
  assign lddelegation = \controlleraftab.lddelegation ;
  assign ldhalfsigned = \controlleraftab.ldhalfsigned ;
  assign ldmachine = \controlleraftab.ldmachine ;
  assign ldmiereg = \controlleraftab.ldmiereg ;
  assign ldmieuiefield = \controlleraftab.ldmieuiefield ;
  assign lduser = \controlleraftab.lduser ;
  assign ldvaluecsr = \controlleraftab.ldvaluecsr ;
  assign load = \controlleraftab.load ;
  assign loadmiereg = \controlleraftab.loadmiereg ;
  assign loadmieuiefield = \controlleraftab.loadmieuiefield ;
  assign m2wb_en = \controlleraftab.m2wb_en_temp ;
  assign m2wb_rst = \controlleraftab.m2wb_rst ;
  assign m_valid = \controlleraftab.m_valid ;
  assign machinestatusalterationpostcsr = \controlleraftab.machinestatusalterationpostcsr ;
  assign machinestatusalterationprecsr = \controlleraftab.machinestatusalterationprecsr ;
  assign memAddr1 = \datapathaftab.daru1.datapath.addrout ;
  assign memAddr2 = \datapathaftab.memaddr2 ;
  assign memDataIn2 = \datapathaftab.dawu.datapath.dataout ;
  assign memRead1 = \datapathaftab.daru1.controller.enableaddr ;
  assign memRead2 = \datapathaftab.daru2.controller.enableaddr ;
  assign memWrite = \datapathaftab.dawu.controller.enableaddr ;
  assign mipcclddisable = \controlleraftab.mipcclddisable ;
  assign mirror = \controlleraftab.mirror ;
  assign mirrorusercu = \controlleraftab.mirrorusercu ;
  assign modetvec = \datapathaftab.d2e_outcsr_next [1:0];
  assign muxcode = \controlleraftab.muxcode ;
  assign nbytes = \controlleraftab.nbytes ;
  assign pass = \controlleraftab.pass ;
  assign previousprv = \datapathaftab.csrisl.outcsr [12:11];
  assign readonlycsr = \controlleraftab.readonlycsr ;
  assign ret_from_epc = \controlleraftab.ret_from_epc ;
  assign sel_tval_csr = 1'hx;
  assign selaah = \controlleraftab.selaah ;
  assign selaal = \controlleraftab.selaal ;
  assign selaau = \controlleraftab.selaau ;
  assign selalu = \controlleraftab.selalu ;
  assign selasu = \controlleraftab.selasu ;
  assign selauipc = \controlleraftab.selauipc ;
  assign selbsu = \controlleraftab.selbsu ;
  assign selcause_csr = \controlleraftab.selcause_csr ;
  assign selccmip_csr = \controlleraftab.selccmip_csr ;
  assign selcsr = \controlleraftab.selcsr ;
  assign selcsraddrfrominst = \controlleraftab.iscsrinstruction ;
  assign selimm = \controlleraftab.selimm ;
  assign selimmcsr = \controlleraftab.selimmcsr ;
  assign selinterruptaddressdirect = \controlleraftab.selinterruptaddressdirect ;
  assign selinterruptaddressvectored = \controlleraftab.selinterruptaddressvectored ;
  assign seljl = \controlleraftab.seljl ;
  assign selllu = \controlleraftab.selllu ;
  assign sellogic = \controlleraftab.sellogic ;
  assign selmedeleg_csr = \controlleraftab.selmedeleg_csr ;
  assign selmem = \controlleraftab.selmem ;
  assign selmepc_csr = \controlleraftab.selmepc_csr ;
  assign selmideleg_csr = \controlleraftab.selmideleg_csr ;
  assign selp1 = \controlleraftab.selp1 ;
  assign selp1csr = \controlleraftab.selp1csr ;
  assign selp2 = \controlleraftab.selp2 ;
  assign selpc = \controlleraftab.selpc ;
  assign selpc4 = \controlleraftab.selpc4 ;
  assign selpc_csr = \controlleraftab.selpc_csr ;
  assign selreadwritecsr = \controlleraftab.selreadwritecsr ;
  assign selromaddress = \controlleraftab.selromaddress ;
  assign selshift = \controlleraftab.selshift ;
  assign setcsr = \controlleraftab.setcsr ;
  assign setzeroorone = \controlleraftab.cmp_selaluop2 ;
  assign signedsigned = \controlleraftab.signedsigned ;
  assign signedunsigned = \controlleraftab.signedunsigned ;
  assign startdaru = \controlleraftab.selmem ;
  assign startdawu = \controlleraftab.checkmisaligneddawu ;
  assign startdivideaau = \controlleraftab.startdivideaau ;
  assign startmultiplyaau = \controlleraftab.startmultiplyaau ;
  assign unsignedunsigned = \controlleraftab.unsignedunsigned ;
  assign upcntcsr = \controlleraftab.upcntcsr ;
  assign userstatusalterationpostcsr = \controlleraftab.userstatusalterationpostcsr ;
  assign userstatusalterationprecsr = \controlleraftab.userstatusalterationprecsr ;
  assign validaccesscsr = \controlleraftab.validaccesscsr ;
  assign wb_func3 = \datapathaftab.m2wb_instr_curr [14:12];
  assign wb_iscsrinstruction = \datapathaftab.m2wb_ctrl_word_curr [59];
  assign wb_mreturetbar = \datapathaftab.m2wb_instr_curr [29];
  assign wb_ret_from_epc = \datapathaftab.m2wb_ctrl_word_curr [53];
  assign wb_valid = \controlleraftab.wb_valid ;
  assign wb_validaccesscsr = \controlleraftab.wb_validaccesscsr ;
  assign writerb_inst = 1'h0;
  assign writeregbank = \controlleraftab.writeregbank ;
  assign writeregfile = \controlleraftab.writeregfile ;
  assign zerocntcsr = \controlleraftab.zerocntcsr ;
endmodule

module aftab_counter_1(clk, rst, zerocnt, inccnt, initcnt, initvalue, outcnt, cocnt);
  reg _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  wire _4_;
  wire _5_;
  wire _6_;
  input clk;
  wire clk;
  output cocnt;
  wire cocnt;
  wire cocntp;
  input inccnt;
  wire inccnt;
  input initcnt;
  wire initcnt;
  input initvalue;
  wire initvalue;
  output outcnt;
  wire outcnt;
  input rst;
  wire rst;
  wire temp;
  input zerocnt;
  wire zerocnt;
  assign temp = rst ? 1'h0 : _0_;
  always @(posedge clk)
    if (_6_) _0_ <= 1'h0;
    else _0_ <= _5_;
  assign _6_ = | { zerocnt, rst };
  assign _1_ = ~ cocntp;
  assign _2_ = _1_ & inccnt;
  assign _3_ = temp + 1'h1;
  assign _4_ = _2_ ? _3_ : temp;
  assign _5_ = initcnt ? initvalue : _4_;
  assign cocntp = temp ? 1'h1 : 1'h0;
  assign cocnt = cocntp;
  assign outcnt = temp;
endmodule

module aftab_counter_6(clk, rst, zerocnt, inccnt, initcnt, initvalue, outcnt, cocnt);
  reg [5:0] _00_;
  wire _01_;
  wire _02_;
  wire [5:0] _03_;
  wire [5:0] _04_;
  wire [5:0] _05_;
  wire _06_;
  wire _07_;
  input clk;
  wire clk;
  output cocnt;
  wire cocnt;
  wire cocntp;
  input inccnt;
  wire inccnt;
  input initcnt;
  wire initcnt;
  input [5:0] initvalue;
  wire [5:0] initvalue;
  output [5:0] outcnt;
  wire [5:0] outcnt;
  input rst;
  wire rst;
  wire [5:0] temp;
  input zerocnt;
  wire zerocnt;
  assign temp = rst ? 6'h00 : _00_;
  always @(posedge clk)
    if (_07_) _00_ <= 6'h00;
    else _00_ <= _05_;
  assign _07_ = | { zerocnt, rst };
  assign _01_ = ~ cocntp;
  assign _02_ = _01_ & inccnt;
  assign _03_ = temp + 6'h01;
  assign _04_ = _02_ ? _03_ : temp;
  assign _05_ = initcnt ? initvalue : _04_;
  assign _06_ = temp == 6'h3f;
  assign cocntp = _06_ ? 1'h1 : 1'h0;
  assign cocnt = cocntp;
  assign outcnt = temp;
endmodule

module aftab_csr_address_ctrl(addressregbank, validaddresscsr);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire _30_;
  input [11:0] addressregbank;
  wire [11:0] addressregbank;
  output validaddresscsr;
  wire validaddresscsr;
  assign _00_ = addressregbank == 12'h300;
  assign validaddresscsr = _00_ ? 1'h1 : _02_;
  assign _01_ = addressregbank == 12'h344;
  assign _02_ = _01_ ? 1'h1 : _04_;
  assign _03_ = addressregbank == 12'h304;
  assign _04_ = _03_ ? 1'h1 : _06_;
  assign _05_ = addressregbank == 12'h305;
  assign _06_ = _05_ ? 1'h1 : _08_;
  assign _07_ = addressregbank == 12'h341;
  assign _08_ = _07_ ? 1'h1 : _10_;
  assign _09_ = addressregbank == 12'h342;
  assign _10_ = _09_ ? 1'h1 : _12_;
  assign _11_ = addressregbank == 12'h343;
  assign _12_ = _11_ ? 1'h1 : _14_;
  assign _13_ = addressregbank == 12'h303;
  assign _14_ = _13_ ? 1'h1 : _16_;
  assign _15_ = addressregbank == 12'h302;
  assign _16_ = _15_ ? 1'h1 : _18_;
  assign _17_ = ! addressregbank;
  assign _18_ = _17_ ? 1'h1 : _20_;
  assign _19_ = addressregbank == 12'h044;
  assign _20_ = _19_ ? 1'h1 : _22_;
  assign _21_ = addressregbank == 12'h004;
  assign _22_ = _21_ ? 1'h1 : _24_;
  assign _23_ = addressregbank == 12'h005;
  assign _24_ = _23_ ? 1'h1 : _26_;
  assign _25_ = addressregbank == 12'h041;
  assign _26_ = _25_ ? 1'h1 : _28_;
  assign _27_ = addressregbank == 12'h042;
  assign _28_ = _27_ ? 1'h1 : _30_;
  assign _29_ = addressregbank == 12'h043;
  assign _30_ = _29_ ? 1'h1 : 1'h0;
endmodule

module aftab_csr_address_logic(addressregbank, ldmiereg, ldmieuiefield, mirrorustatus, mirroruie, mirroruip, mirror);
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  wire _4_;
  wire _5_;
  input [11:0] addressregbank;
  wire [11:0] addressregbank;
  output ldmiereg;
  wire ldmiereg;
  output ldmieuiefield;
  wire ldmieuiefield;
  output mirror;
  wire mirror;
  output mirroruie;
  wire mirroruie;
  wire mirroruietemp;
  output mirroruip;
  wire mirroruip;
  wire mirroruiptemp;
  output mirrorustatus;
  wire mirrorustatus;
  wire mirrorustatustemp;
  assign _0_ = addressregbank == 12'h304;
  assign ldmiereg = _0_ ? 1'h1 : 1'h0;
  assign _1_ = addressregbank == 12'h300;
  assign ldmieuiefield = _1_ ? 1'h1 : 1'h0;
  assign _2_ = ! addressregbank[7:0];
  assign mirrorustatustemp = _2_ ? 1'h1 : 1'h0;
  assign _3_ = addressregbank[7:0] == 8'h04;
  assign mirroruietemp = _3_ ? 1'h1 : 1'h0;
  assign _4_ = addressregbank[7:0] == 8'h44;
  assign mirroruiptemp = _4_ ? 1'h1 : 1'h0;
  assign _5_ = mirrorustatustemp | mirroruietemp;
  assign mirror = _5_ | mirroruiptemp;
  assign mirroruie = mirroruietemp;
  assign mirroruip = mirroruiptemp;
  assign mirrorustatus = mirrorustatustemp;
endmodule

module aftab_csr_addressing_decoder(cntoutput, outaddr);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire [2:0] _07_;
  wire _08_;
  wire [2:0] _09_;
  wire [2:0] _10_;
  wire _11_;
  wire [2:0] _12_;
  wire _13_;
  wire [2:0] _14_;
  wire _15_;
  wire [2:0] _16_;
  wire [2:0] _17_;
  input [2:0] cntoutput;
  wire [2:0] cntoutput;
  output [11:0] outaddr;
  wire [11:0] outaddr;
  assign outaddr[6] = _00_ ? 1'h1 : _02_;
  assign _02_ = _01_ ? 1'h1 : _04_;
  assign _04_ = _03_ ? 1'h1 : _06_;
  assign _06_ = _05_ ? 1'h1 : 1'h0;
  assign _00_ = ! cntoutput;
  assign outaddr[2:0] = _00_ ? 3'h4 : _07_;
  assign _01_ = cntoutput == 3'h1;
  assign _07_ = _01_ ? 3'h2 : _09_;
  assign _08_ = cntoutput == 3'h4;
  assign _09_ = _08_ ? 3'h0 : _10_;
  assign _03_ = cntoutput == 3'h2;
  assign _10_ = _03_ ? 3'h1 : _12_;
  assign _11_ = cntoutput == 3'h3;
  assign _12_ = _11_ ? 3'h5 : _14_;
  assign _13_ = cntoutput == 3'h5;
  assign _14_ = _13_ ? 3'h0 : _16_;
  assign _15_ = cntoutput == 3'h6;
  assign _16_ = _15_ ? 3'h0 : _17_;
  assign _05_ = cntoutput == 3'h7;
  assign _17_ = _05_ ? 3'h3 : 3'h0;
  assign { outaddr[11:7], outaddr[5:3] } = 8'h30;
endmodule

module aftab_csr_counter_3(clk, rst, dncnt, upcnt, ldcnt, zerocnt, ldvalue, outcnt);
  reg [2:0] _00_;
  wire _01_;
  wire _02_;
  wire [2:0] _03_;
  wire _04_;
  wire _05_;
  wire [2:0] _06_;
  wire [2:0] _07_;
  wire [2:0] _08_;
  wire [2:0] _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  input clk;
  wire clk;
  wire cocntdn;
  wire cocntup;
  input dncnt;
  wire dncnt;
  input ldcnt;
  wire ldcnt;
  input [2:0] ldvalue;
  wire [2:0] ldvalue;
  output [2:0] outcnt;
  wire [2:0] outcnt;
  input rst;
  wire rst;
  wire [2:0] temp;
  input upcnt;
  wire upcnt;
  input zerocnt;
  wire zerocnt;
  assign temp = rst ? 3'h0 : _00_;
  always @(posedge clk)
    if (_12_) _00_ <= 3'h0;
    else _00_ <= _09_;
  assign _12_ = | { zerocnt, rst };
  assign _01_ = ~ cocntup;
  assign _02_ = _01_ & upcnt;
  assign _03_ = temp + 3'h1;
  assign _04_ = ~ cocntdn;
  assign _05_ = _04_ & dncnt;
  assign _06_ = temp - 3'h1;
  assign _07_ = _05_ ? _06_ : temp;
  assign _08_ = _02_ ? _03_ : _07_;
  assign _09_ = ldcnt ? ldvalue : _08_;
  assign _10_ = temp == 3'h7;
  assign cocntup = _10_ ? 1'h1 : 1'h0;
  assign _11_ = ! temp;
  assign cocntdn = _11_ ? 1'h1 : 1'h0;
  assign outcnt = temp;
endmodule

module aftab_csr_isl_32(selp1, selim, selreadwrite, clr, set, selpc, selmip, selcause, seltval, machinestatusalterationprecsr, userstatusalterationprecsr, machinestatusalterationpostcsr, userstatusalterationpostcsr, mirrorustatus, mirroruie, mirroruip, mirroruser, curprv, ir19_15, ccmip, causecode
, trapvalue, p1, pc, outcsr, previousprv, incsr);
  wire [31:0] _00_;
  wire [31:0] _01_;
  wire [31:0] _02_;
  wire [31:0] _03_;
  wire [31:0] _04_;
  wire [31:0] _05_;
  wire [31:0] _06_;
  wire [31:0] _07_;
  wire [31:0] _08_;
  wire [31:0] _09_;
  wire [31:0] _10_;
  wire [31:0] _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire [31:0] _15_;
  wire [31:0] andres;
  input [31:0] causecode;
  wire [31:0] causecode;
  input [31:0] ccmip;
  wire [31:0] ccmip;
  input clr;
  wire clr;
  input [1:0] curprv;
  wire [1:0] curprv;
  output [31:0] incsr;
  wire [31:0] incsr;
  input [4:0] ir19_15;
  wire [4:0] ir19_15;
  input machinestatusalterationpostcsr;
  wire machinestatusalterationpostcsr;
  input machinestatusalterationprecsr;
  wire machinestatusalterationprecsr;
  input mirroruie;
  wire mirroruie;
  input mirroruip;
  wire mirroruip;
  input mirroruser;
  wire mirroruser;
  input mirrorustatus;
  wire mirrorustatus;
  wire [31:0] orres;
  input [31:0] outcsr;
  wire [31:0] outcsr;
  input [31:0] p1;
  wire [31:0] p1;
  input [31:0] pc;
  wire [31:0] pc;
  wire [31:0] preincsr;
  output [1:0] previousprv;
  wire [1:0] previousprv;
  wire [1:0] previousprv_int;
  wire [31:0] regorimm;
  input selcause;
  wire selcause;
  input selim;
  wire selim;
  input selmip;
  wire selmip;
  input selp1;
  wire selp1;
  input selpc;
  wire selpc;
  input selreadwrite;
  wire selreadwrite;
  input seltval;
  wire seltval;
  input set;
  wire set;
  input [31:0] trapvalue;
  wire [31:0] trapvalue;
  input userstatusalterationpostcsr;
  wire userstatusalterationpostcsr;
  input userstatusalterationprecsr;
  wire userstatusalterationprecsr;
  assign regorimm = selp1 ? p1 : _00_;
  assign _00_ = selim ? { 27'h0000000, ir19_15 } : 32'd0;
  assign orres = outcsr | regorimm;
  assign _01_ = ~ regorimm;
  assign andres = outcsr & _01_;
  assign preincsr = selreadwrite ? regorimm : _02_;
  assign _02_ = set ? orres : _03_;
  assign _03_ = clr ? andres : _04_;
  assign _04_ = selmip ? ccmip : _05_;
  assign _05_ = selcause ? causecode : _06_;
  assign _06_ = seltval ? trapvalue : _07_;
  assign _07_ = selpc ? pc : _08_;
  assign _08_ = machinestatusalterationprecsr ? { outcsr[31:8], outcsr[3], outcsr[6:4], 1'h0, outcsr[2:0] } : _09_;
  assign _09_ = userstatusalterationprecsr ? { outcsr[31:5], outcsr[0], outcsr[3:1], 1'h0 } : _10_;
  assign _10_ = machinestatusalterationpostcsr ? { outcsr[31:8], 1'h0, outcsr[6:4], 1'h1, outcsr[2:0] } : _11_;
  assign _11_ = userstatusalterationpostcsr ? { outcsr[31:5], 1'h0, outcsr[3:1], 1'h1 } : 32'd0;
  assign _12_ = mirrorustatus & mirroruser;
  assign incsr = _12_ ? { 27'h0000000, preincsr[4], 3'h0, preincsr[0] } : _15_;
  assign _13_ = mirroruie | mirroruip;
  assign _14_ = _13_ & mirroruser;
  assign _15_ = _14_ ? { 23'h000000, preincsr[8], 3'h0, preincsr[4], 3'h0, preincsr[0] } : preincsr;
  assign previousprv = outcsr[12:11];
  assign previousprv_int = outcsr[12:11];
endmodule

module aftab_csr_registers_32(clk, rst, writeregbank, addressregbank, writeaddressregbank, inputregbank, outregbank);
  reg [1023:0] _000_;
  wire [31:0] _001_;
  wire [31:0] _002_;
  wire [31:0] _003_;
  wire [31:0] _004_;
  wire [31:0] _005_;
  wire [31:0] _006_;
  wire [31:0] _007_;
  wire [31:0] _008_;
  wire [31:0] _009_;
  wire [31:0] _010_;
  wire [31:0] _011_;
  wire [31:0] _012_;
  wire [31:0] _013_;
  wire [31:0] _014_;
  wire [31:0] _015_;
  wire [31:0] _016_;
  wire [31:0] _017_;
  wire [31:0] _018_;
  wire [31:0] _019_;
  wire [31:0] _020_;
  wire [4:0] _021_;
  wire [4:0] _022_;
  wire [1023:0] _023_;
  wire [31:0] _024_;
  wire [31:0] _025_;
  wire [31:0] _026_;
  wire [31:0] _027_;
  wire [31:0] _028_;
  wire [31:0] _029_;
  wire [31:0] _030_;
  wire [31:0] _031_;
  wire [31:0] _032_;
  wire [31:0] _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire [31:0] _099_;
  wire [31:0] _100_;
  wire [31:0] _101_;
  wire [31:0] _102_;
  wire [31:0] _103_;
  wire [31:0] _104_;
  wire [31:0] _105_;
  wire [31:0] _106_;
  wire [31:0] _107_;
  wire [31:0] _108_;
  wire [31:0] _109_;
  wire [31:0] _110_;
  wire [31:0] _111_;
  wire [31:0] _112_;
  wire [31:0] _113_;
  wire [31:0] _114_;
  wire [31:0] _115_;
  wire [31:0] _116_;
  wire [31:0] _117_;
  wire [31:0] _118_;
  wire [31:0] _119_;
  wire [31:0] _120_;
  wire [31:0] _121_;
  wire [31:0] _122_;
  wire [31:0] _123_;
  wire [31:0] _124_;
  wire [31:0] _125_;
  wire [31:0] _126_;
  wire [31:0] _127_;
  wire [31:0] _128_;
  wire [31:0] _129_;
  wire [31:0] _130_;
  input [4:0] addressregbank;
  wire [4:0] addressregbank;
  input clk;
  wire clk;
  input [31:0] inputregbank;
  wire [31:0] inputregbank;
  output [31:0] outregbank;
  wire [31:0] outregbank;
  (* ramstyle = "M9K" *)
  wire [1023:0] rdata;
  input rst;
  wire rst;
  input [4:0] writeaddressregbank;
  wire [4:0] writeaddressregbank;
  input writeregbank;
  wire writeregbank;
  assign rdata = rst ? 1024'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : _000_;
  assign _001_ = _021_[0] ? rdata[63:32] : rdata[31:0];
  assign _002_ = _021_[0] ? rdata[191:160] : rdata[159:128];
  assign _003_ = _021_[0] ? rdata[319:288] : rdata[287:256];
  assign _004_ = _021_[0] ? rdata[447:416] : rdata[415:384];
  assign _005_ = _021_[0] ? rdata[575:544] : rdata[543:512];
  assign _006_ = _021_[0] ? rdata[703:672] : rdata[671:640];
  assign _007_ = _021_[0] ? rdata[831:800] : rdata[799:768];
  assign _008_ = _021_[0] ? rdata[959:928] : rdata[927:896];
  assign _009_ = _021_[2] ? _025_ : _024_;
  assign _010_ = _021_[2] ? _029_ : _028_;
  assign _011_ = _021_[0] ? rdata[127:96] : rdata[95:64];
  assign _012_ = _021_[0] ? rdata[255:224] : rdata[223:192];
  assign _013_ = _021_[0] ? rdata[383:352] : rdata[351:320];
  assign _014_ = _021_[0] ? rdata[511:480] : rdata[479:448];
  assign _015_ = _021_[0] ? rdata[639:608] : rdata[607:576];
  assign _016_ = _021_[0] ? rdata[767:736] : rdata[735:704];
  assign _017_ = _021_[0] ? rdata[895:864] : rdata[863:832];
  assign _018_ = _021_[0] ? rdata[1023:992] : rdata[991:960];
  assign _019_ = _021_[2] ? _027_ : _026_;
  assign _020_ = _021_[2] ? _031_ : _030_;
  assign _024_ = _021_[1] ? _011_ : _001_;
  assign _025_ = _021_[1] ? _012_ : _002_;
  assign _026_ = _021_[1] ? _013_ : _003_;
  assign _027_ = _021_[1] ? _014_ : _004_;
  assign _028_ = _021_[1] ? _015_ : _005_;
  assign _029_ = _021_[1] ? _016_ : _006_;
  assign _030_ = _021_[1] ? _017_ : _007_;
  assign _031_ = _021_[1] ? _018_ : _008_;
  assign _032_ = _021_[3] ? _019_ : _009_;
  assign _033_ = _021_[3] ? _020_ : _010_;
  assign _021_ = 5'h1f - addressregbank;
  assign _022_ = 5'h1f - writeaddressregbank;
  assign _023_ = writeregbank ? { _130_, _129_, _128_, _127_, _126_, _125_, _124_, _123_, _122_, _121_, _120_, _119_, _118_, _117_, _116_, _115_, _114_, _113_, _112_, _111_, _110_, _109_, _108_, _107_, _106_, _105_, _104_, _103_, _102_, _101_, _100_, _099_ } : rdata;
  always @(posedge clk)
    if (rst) _000_ <= 1024'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    else _000_ <= _023_;
  assign outregbank = _021_[4] ? _033_ : _032_;
  assign _034_ = ~ _022_[4];
  assign _035_ = ~ _022_[3];
  assign _036_ = _034_ & _035_;
  assign _037_ = _034_ & _022_[3];
  assign _038_ = _022_[4] & _035_;
  assign _039_ = _022_[4] & _022_[3];
  assign _040_ = ~ _022_[2];
  assign _041_ = _036_ & _040_;
  assign _042_ = _036_ & _022_[2];
  assign _043_ = _037_ & _040_;
  assign _044_ = _037_ & _022_[2];
  assign _045_ = _038_ & _040_;
  assign _046_ = _038_ & _022_[2];
  assign _047_ = _039_ & _040_;
  assign _048_ = _039_ & _022_[2];
  assign _049_ = ~ _022_[1];
  assign _050_ = _041_ & _049_;
  assign _051_ = _041_ & _022_[1];
  assign _052_ = _042_ & _049_;
  assign _053_ = _042_ & _022_[1];
  assign _054_ = _043_ & _049_;
  assign _055_ = _043_ & _022_[1];
  assign _056_ = _044_ & _049_;
  assign _057_ = _044_ & _022_[1];
  assign _058_ = _045_ & _049_;
  assign _059_ = _045_ & _022_[1];
  assign _060_ = _046_ & _049_;
  assign _061_ = _046_ & _022_[1];
  assign _062_ = _047_ & _049_;
  assign _063_ = _047_ & _022_[1];
  assign _064_ = _048_ & _049_;
  assign _065_ = _048_ & _022_[1];
  assign _066_ = ~ _022_[0];
  assign _067_ = _050_ & _066_;
  assign _068_ = _050_ & _022_[0];
  assign _069_ = _051_ & _066_;
  assign _070_ = _051_ & _022_[0];
  assign _071_ = _052_ & _066_;
  assign _072_ = _052_ & _022_[0];
  assign _073_ = _053_ & _066_;
  assign _074_ = _053_ & _022_[0];
  assign _075_ = _054_ & _066_;
  assign _076_ = _054_ & _022_[0];
  assign _077_ = _055_ & _066_;
  assign _078_ = _055_ & _022_[0];
  assign _079_ = _056_ & _066_;
  assign _080_ = _056_ & _022_[0];
  assign _081_ = _057_ & _066_;
  assign _082_ = _057_ & _022_[0];
  assign _083_ = _058_ & _066_;
  assign _084_ = _058_ & _022_[0];
  assign _085_ = _059_ & _066_;
  assign _086_ = _059_ & _022_[0];
  assign _087_ = _060_ & _066_;
  assign _088_ = _060_ & _022_[0];
  assign _089_ = _061_ & _066_;
  assign _090_ = _061_ & _022_[0];
  assign _091_ = _062_ & _066_;
  assign _092_ = _062_ & _022_[0];
  assign _093_ = _063_ & _066_;
  assign _094_ = _063_ & _022_[0];
  assign _095_ = _064_ & _066_;
  assign _096_ = _064_ & _022_[0];
  assign _097_ = _065_ & _066_;
  assign _098_ = _065_ & _022_[0];
  assign _099_ = _067_ ? inputregbank : rdata[31:0];
  assign _100_ = _068_ ? inputregbank : rdata[63:32];
  assign _101_ = _069_ ? inputregbank : rdata[95:64];
  assign _102_ = _070_ ? inputregbank : rdata[127:96];
  assign _103_ = _071_ ? inputregbank : rdata[159:128];
  assign _104_ = _072_ ? inputregbank : rdata[191:160];
  assign _105_ = _073_ ? inputregbank : rdata[223:192];
  assign _106_ = _074_ ? inputregbank : rdata[255:224];
  assign _107_ = _075_ ? inputregbank : rdata[287:256];
  assign _108_ = _076_ ? inputregbank : rdata[319:288];
  assign _109_ = _077_ ? inputregbank : rdata[351:320];
  assign _110_ = _078_ ? inputregbank : rdata[383:352];
  assign _111_ = _079_ ? inputregbank : rdata[415:384];
  assign _112_ = _080_ ? inputregbank : rdata[447:416];
  assign _113_ = _081_ ? inputregbank : rdata[479:448];
  assign _114_ = _082_ ? inputregbank : rdata[511:480];
  assign _115_ = _083_ ? inputregbank : rdata[543:512];
  assign _116_ = _084_ ? inputregbank : rdata[575:544];
  assign _117_ = _085_ ? inputregbank : rdata[607:576];
  assign _118_ = _086_ ? inputregbank : rdata[639:608];
  assign _119_ = _087_ ? inputregbank : rdata[671:640];
  assign _120_ = _088_ ? inputregbank : rdata[703:672];
  assign _121_ = _089_ ? inputregbank : rdata[735:704];
  assign _122_ = _090_ ? inputregbank : rdata[767:736];
  assign _123_ = _091_ ? inputregbank : rdata[799:768];
  assign _124_ = _092_ ? inputregbank : rdata[831:800];
  assign _125_ = _093_ ? inputregbank : rdata[863:832];
  assign _126_ = _094_ ? inputregbank : rdata[895:864];
  assign _127_ = _095_ ? inputregbank : rdata[927:896];
  assign _128_ = _096_ ? inputregbank : rdata[959:928];
  assign _129_ = _097_ ? inputregbank : rdata[991:960];
  assign _130_ = _098_ ? inputregbank : rdata[1023:992];
endmodule

module aftab_daru(clk, rst, sync_rst, startdaru, nbytes, addrin, memdata, memready, datainstrbar, checkmisaligneddaru, instrmisalignedflag, loadmisalignedflag, completedaru, dataout, addrout, readaddrout, readmem, bytestoread);
  wire _00_;
  reg [1:0] _01_;
  wire [1:0] _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire [1:0] _08_;
  wire [1:0] _09_;
  wire _10_;
  wire _11_;
  wire [1:0] _12_;
  wire [1:0] _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  reg [31:0] _22_;
  wire [31:0] _23_;
  reg _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  wire [3:0] _30_;
  wire _31_;
  wire _32_;
  wire _33_;
  wire _34_;
  wire _35_;
  wire _36_;
  wire _37_;
  wire _38_;
  wire _39_;
  wire _40_;
  reg [1:0] _41_;
  wire [1:0] _42_;
  reg [15:0] _43_;
  wire [15:0] _44_;
  reg [15:0] _45_;
  wire [15:0] _46_;
  input [31:0] addrin;
  wire [31:0] addrin;
  output [31:0] addrout;
  wire [31:0] addrout;
  output bytestoread;
  wire bytestoread;
  input checkmisaligneddaru;
  wire checkmisaligneddaru;
  input clk;
  wire clk;
  wire cocnt;
  output completedaru;
  wire completedaru;
  (* hdlname = "controller clk" *)
  wire \controller.clk ;
  (* hdlname = "controller cocnt" *)
  wire \controller.cocnt ;
  (* hdlname = "controller completedaru" *)
  wire \controller.completedaru ;
  (* hdlname = "controller datainstrbar" *)
  wire \controller.datainstrbar ;
  (* hdlname = "controller enableaddr" *)
  wire \controller.enableaddr ;
  (* hdlname = "controller enabledata" *)
  wire \controller.enabledata ;
  (* hdlname = "controller inccnt" *)
  wire \controller.inccnt ;
  (* hdlname = "controller initcnt" *)
  wire \controller.initcnt ;
  (* hdlname = "controller initreading" *)
  wire \controller.initreading ;
  (* hdlname = "controller ldaddr" *)
  wire \controller.ldaddr ;
  (* hdlname = "controller ldnumbytes" *)
  wire \controller.ldnumbytes ;
  (* hdlname = "controller memready" *)
  wire \controller.memready ;
  (* hdlname = "controller nstate" *)
  wire [1:0] \controller.nstate ;
  (* hdlname = "controller pstate" *)
  wire [1:0] \controller.pstate ;
  (* hdlname = "controller readmem" *)
  wire \controller.readmem ;
  (* hdlname = "controller rst" *)
  wire \controller.rst ;
  (* hdlname = "controller select_incoming_data" *)
  wire \controller.select_incoming_data ;
  (* hdlname = "controller sellden" *)
  wire \controller.sellden ;
  (* hdlname = "controller startdaru" *)
  wire \controller.startdaru ;
  (* hdlname = "controller sync_rst" *)
  wire \controller.sync_rst ;
  (* hdlname = "controller zerocnt" *)
  wire \controller.zerocnt ;
  (* hdlname = "controller zeronumbytes" *)
  wire \controller.zeronumbytes ;
  input datainstrbar;
  wire datainstrbar;
  output [31:0] dataout;
  wire [31:0] dataout;
  (* hdlname = "datapath adder a" *)
  wire [31:0] \datapath.adder.a ;
  (* hdlname = "datapath adder b" *)
  wire [1:0] \datapath.adder.b ;
  (* hdlname = "datapath adder cout" *)
  (* unused_bits = "31" *)
  wire [31:0] \datapath.adder.cout ;
  (* hdlname = "datapath adder fa1 a" *)
  wire \datapath.adder.fa1.a ;
  (* hdlname = "datapath adder fa1 b" *)
  wire \datapath.adder.fa1.b ;
  (* hdlname = "datapath adder fa1 cin" *)
  wire \datapath.adder.fa1.cin ;
  (* hdlname = "datapath adder fa1 cout" *)
  wire \datapath.adder.fa1.cout ;
  (* hdlname = "datapath adder fa1 s" *)
  wire \datapath.adder.fa1.s ;
  (* hdlname = "datapath adder fa2 a" *)
  wire \datapath.adder.fa2.a ;
  (* hdlname = "datapath adder fa2 b" *)
  wire \datapath.adder.fa2.b ;
  (* hdlname = "datapath adder fa2 cin" *)
  wire \datapath.adder.fa2.cin ;
  (* hdlname = "datapath adder fa2 cout" *)
  wire \datapath.adder.fa2.cout ;
  (* hdlname = "datapath adder fa2 s" *)
  wire \datapath.adder.fa2.s ;
  (* hdlname = "datapath adder gen_halfadder:1.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:1.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:1.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:1.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:1.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:1.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:1.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:1.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:10.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:10.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:10.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:10.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:10.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:10.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:10.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:10.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:11.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:11.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:11.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:11.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:11.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:11.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:11.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:11.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:12.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:12.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:12.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:12.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:12.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:12.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:12.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:12.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:13.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:13.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:13.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:13.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:13.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:13.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:13.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:13.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:14.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:14.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:14.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:14.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:14.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:14.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:14.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:14.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:15.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:15.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:15.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:15.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:15.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:15.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:15.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:15.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:16.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:16.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:16.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:16.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:16.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:16.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:16.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:16.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:17.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:17.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:17.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:17.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:17.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:17.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:17.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:17.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:18.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:18.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:18.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:18.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:18.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:18.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:18.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:18.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:19.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:19.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:19.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:19.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:19.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:19.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:19.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:19.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:2.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:2.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:2.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:2.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:2.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:2.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:2.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:2.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:20.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:20.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:20.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:20.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:20.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:20.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:20.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:20.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:21.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:21.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:21.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:21.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:21.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:21.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:21.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:21.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:22.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:22.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:22.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:22.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:22.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:22.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:22.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:22.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:23.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:23.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:23.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:23.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:23.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:23.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:23.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:23.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:24.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:24.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:24.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:24.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:24.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:24.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:24.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:24.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:25.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:25.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:25.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:25.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:25.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:25.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:25.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:25.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:26.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:26.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:26.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:26.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:26.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:26.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:26.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:26.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:27.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:27.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:27.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:27.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:27.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:27.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:27.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:27.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:28.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:28.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:28.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:28.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:28.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:28.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:28.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:28.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:29.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:29.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:29.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:29.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:29.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:29.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:29.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:29.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:3.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:3.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:3.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:3.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:3.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:3.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:3.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:3.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:30.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:30.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:30.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:30.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:30.ha o_carry" *)
  (* unused_bits = "0" *)
  wire \datapath.adder.gen_halfadder:30.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:30.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:30.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:4.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:4.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:4.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:4.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:4.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:4.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:4.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:4.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:5.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:5.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:5.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:5.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:5.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:5.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:5.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:5.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:6.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:6.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:6.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:6.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:6.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:6.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:6.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:6.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:7.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:7.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:7.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:7.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:7.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:7.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:7.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:7.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:8.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:8.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:8.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:8.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:8.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:8.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:8.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:8.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:9.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:9.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:9.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:9.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:9.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:9.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:9.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:9.ha.o_sum ;
  (* hdlname = "datapath adder sum" *)
  wire [31:0] \datapath.adder.sum ;
  (* hdlname = "datapath addrin" *)
  wire [31:0] \datapath.addrin ;
  (* hdlname = "datapath addrout" *)
  wire [31:0] \datapath.addrout ;
  (* hdlname = "datapath addrreg clk" *)
  wire \datapath.addrreg.clk ;
  (* hdlname = "datapath addrreg inreg" *)
  wire [31:0] \datapath.addrreg.inreg ;
  (* hdlname = "datapath addrreg load" *)
  wire \datapath.addrreg.load ;
  (* hdlname = "datapath addrreg outreg" *)
  wire [31:0] \datapath.addrreg.outreg ;
  (* hdlname = "datapath addrreg rst" *)
  wire \datapath.addrreg.rst ;
  (* hdlname = "datapath addrreg zero" *)
  wire \datapath.addrreg.zero ;
  (* hdlname = "datapath bytecnt" *)
  wire [1:0] \datapath.bytecnt ;
  (* hdlname = "datapath bytestoread" *)
  wire \datapath.bytestoread ;
  (* hdlname = "datapath bytestoread_temp" *)
  wire \datapath.bytestoread_temp ;
  (* hdlname = "datapath checkmisaligneddaru" *)
  wire \datapath.checkmisaligneddaru ;
  (* hdlname = "datapath clk" *)
  wire \datapath.clk ;
  (* hdlname = "datapath cocnt" *)
  wire \datapath.cocnt ;
  (* hdlname = "datapath counter clk" *)
  wire \datapath.counter.clk ;
  (* hdlname = "datapath counter cocnt" *)
  wire \datapath.counter.cocnt ;
  (* hdlname = "datapath counter cocntp" *)
  wire \datapath.counter.cocntp ;
  (* hdlname = "datapath counter inccnt" *)
  wire \datapath.counter.inccnt ;
  (* hdlname = "datapath counter initcnt" *)
  wire \datapath.counter.initcnt ;
  (* hdlname = "datapath counter initvalue" *)
  wire \datapath.counter.initvalue ;
  (* hdlname = "datapath counter outcnt" *)
  wire \datapath.counter.outcnt ;
  (* hdlname = "datapath counter rst" *)
  wire \datapath.counter.rst ;
  (* hdlname = "datapath counter temp" *)
  wire \datapath.counter.temp ;
  (* hdlname = "datapath counter zerocnt" *)
  wire \datapath.counter.zerocnt ;
  (* hdlname = "datapath datain" *)
  wire [15:0] \datapath.datain ;
  (* hdlname = "datapath datainstrbar" *)
  wire \datapath.datainstrbar ;
  (* hdlname = "datapath dataout" *)
  wire [31:0] \datapath.dataout ;
  (* hdlname = "datapath dataouthigh_reg" *)
  wire [15:0] \datapath.dataouthigh_reg ;
  (* hdlname = "datapath decoder en" *)
  wire \datapath.decoder.en ;
  (* hdlname = "datapath decoder indecoder" *)
  wire [1:0] \datapath.decoder.indecoder ;
  (* hdlname = "datapath decoder outdecoder" *)
  (* unused_bits = "2 3" *)
  wire [3:0] \datapath.decoder.outdecoder ;
  (* hdlname = "datapath enableaddr" *)
  wire \datapath.enableaddr ;
  (* hdlname = "datapath enabledata" *)
  wire \datapath.enabledata ;
  (* hdlname = "datapath errordecoder addrin" *)
  wire [1:0] \datapath.errordecoder.addrin ;
  (* hdlname = "datapath errordecoder checkmisaligneddaru" *)
  wire \datapath.errordecoder.checkmisaligneddaru ;
  (* hdlname = "datapath errordecoder cmp_01" *)
  wire \datapath.errordecoder.cmp_01 ;
  (* hdlname = "datapath errordecoder cmp_10" *)
  wire \datapath.errordecoder.cmp_10 ;
  (* hdlname = "datapath errordecoder cmp_11" *)
  wire \datapath.errordecoder.cmp_11 ;
  (* hdlname = "datapath errordecoder datainstrbar" *)
  wire \datapath.errordecoder.datainstrbar ;
  (* hdlname = "datapath errordecoder instrmisalignedflag" *)
  wire \datapath.errordecoder.instrmisalignedflag ;
  (* hdlname = "datapath errordecoder loadmisalignedflag" *)
  wire \datapath.errordecoder.loadmisalignedflag ;
  (* hdlname = "datapath errordecoder misalignederrorp" *)
  wire \datapath.errordecoder.misalignederrorp ;
  (* hdlname = "datapath errordecoder nbytes" *)
  wire [1:0] \datapath.errordecoder.nbytes ;
  (* hdlname = "datapath inccnt" *)
  wire \datapath.inccnt ;
  (* hdlname = "datapath initcnt" *)
  wire \datapath.initcnt ;
  (* hdlname = "datapath initreading" *)
  wire \datapath.initreading ;
  (* hdlname = "datapath initvaluecnt" *)
  wire [1:0] \datapath.initvaluecnt ;
  (* hdlname = "datapath instrmisalignedflag" *)
  wire \datapath.instrmisalignedflag ;
  (* hdlname = "datapath ldaddr" *)
  wire \datapath.ldaddr ;
  (* hdlname = "datapath ldnumbytes" *)
  wire \datapath.ldnumbytes ;
  (* hdlname = "datapath loadmisalignedflag" *)
  wire \datapath.loadmisalignedflag ;
  (* hdlname = "datapath memdata" *)
  wire [15:0] \datapath.memdata ;
  (* hdlname = "datapath nbytereg clk" *)
  wire \datapath.nbytereg.clk ;
  (* hdlname = "datapath nbytereg inreg" *)
  wire [1:0] \datapath.nbytereg.inreg ;
  (* hdlname = "datapath nbytereg load" *)
  wire \datapath.nbytereg.load ;
  (* hdlname = "datapath nbytereg outreg" *)
  wire [1:0] \datapath.nbytereg.outreg ;
  (* hdlname = "datapath nbytereg rst" *)
  wire \datapath.nbytereg.rst ;
  (* hdlname = "datapath nbytereg zero" *)
  wire \datapath.nbytereg.zero ;
  (* hdlname = "datapath nbytes" *)
  wire [1:0] \datapath.nbytes ;
  (* hdlname = "datapath nbytesout" *)
  wire [1:0] \datapath.nbytesout ;
  (* hdlname = "datapath outcnt" *)
  wire \datapath.outcnt ;
  (* hdlname = "datapath outcnt_ext" *)
  wire [1:0] \datapath.outcnt_ext ;
  (* hdlname = "datapath outdecoder" *)
  (* unused_bits = "2 3" *)
  wire [3:0] \datapath.outdecoder ;
  (* hdlname = "datapath readaddr" *)
  wire [31:0] \datapath.readaddr ;
  (* hdlname = "datapath readaddrout" *)
  wire [31:0] \datapath.readaddrout ;
  (* hdlname = "datapath readaddrp" *)
  wire [31:0] \datapath.readaddrp ;
  (* hdlname = "datapath reg0 clk" *)
  wire \datapath.reg0.clk ;
  (* hdlname = "datapath reg0 inreg" *)
  wire [15:0] \datapath.reg0.inreg ;
  (* hdlname = "datapath reg0 load" *)
  wire \datapath.reg0.load ;
  (* hdlname = "datapath reg0 outreg" *)
  wire [15:0] \datapath.reg0.outreg ;
  (* hdlname = "datapath reg0 rst" *)
  wire \datapath.reg0.rst ;
  (* hdlname = "datapath reg0 zero" *)
  wire \datapath.reg0.zero ;
  (* hdlname = "datapath reg1 clk" *)
  wire \datapath.reg1.clk ;
  (* hdlname = "datapath reg1 inreg" *)
  wire [15:0] \datapath.reg1.inreg ;
  (* hdlname = "datapath reg1 load" *)
  wire \datapath.reg1.load ;
  (* hdlname = "datapath reg1 outreg" *)
  wire [15:0] \datapath.reg1.outreg ;
  (* hdlname = "datapath reg1 rst" *)
  wire \datapath.reg1.rst ;
  (* hdlname = "datapath reg1 zero" *)
  wire \datapath.reg1.zero ;
  (* hdlname = "datapath rst" *)
  wire \datapath.rst ;
  (* hdlname = "datapath select_incoming_data" *)
  wire \datapath.select_incoming_data ;
  (* hdlname = "datapath sellden" *)
  wire \datapath.sellden ;
  (* hdlname = "datapath zerocnt" *)
  wire \datapath.zerocnt ;
  (* hdlname = "datapath zeronumbytes" *)
  wire \datapath.zeronumbytes ;
  wire enableaddr;
  wire enabledata;
  wire inccnt;
  wire initcnt;
  wire initreading;
  output instrmisalignedflag;
  wire instrmisalignedflag;
  wire ldaddr;
  wire ldnumbytes;
  output loadmisalignedflag;
  wire loadmisalignedflag;
  input [15:0] memdata;
  wire [15:0] memdata;
  input memready;
  wire memready;
  input [1:0] nbytes;
  wire [1:0] nbytes;
  output [31:0] readaddrout;
  wire [31:0] readaddrout;
  output readmem;
  wire readmem;
  input rst;
  wire rst;
  wire select_incoming_data;
  wire sellden;
  input startdaru;
  wire startdaru;
  input sync_rst;
  wire sync_rst;
  wire zerocnt;
  wire zeronumbytes;
  always @(posedge clk)
    if (_00_) _24_ <= 1'h0;
    else _24_ <= _28_;
  assign \controller.pstate  = rst ? 2'h0 : _01_;
  always @(posedge clk)
    if (_19_) _01_ <= 2'h0;
    else _01_ <= \controller.nstate ;
  assign _19_ = | { sync_rst, rst };
  assign \datapath.addrreg.outreg  = rst ? 32'd0 : _22_;
  always @(posedge clk)
    if (rst) _22_ <= 32'd0;
    else _22_ <= _23_;
  assign \datapath.adder.fa2.b  = rst ? 1'h0 : _24_;
  assign \datapath.nbytereg.outreg  = rst ? 2'h0 : _41_;
  always @(posedge clk)
    if (rst) _41_ <= 2'h0;
    else _41_ <= _42_;
  assign \datapath.reg0.outreg  = rst ? 16'h0000 : _43_;
  always @(posedge clk)
    if (_00_) _43_ <= 16'h0000;
    else _43_ <= _44_;
  assign \datapath.dataouthigh_reg  = rst ? 16'h0000 : _45_;
  always @(posedge clk)
    if (_00_) _45_ <= 16'h0000;
    else _45_ <= _46_;
  assign _00_ = | { \controller.initcnt , rst };
  assign _02_ = startdaru ? (* hdlname = "controller 5532" *) 2'h1 : 2'h0;
  assign _08_ = _04_ ? (* hdlname = "controller 5542" *) 2'h2 : 2'h1;
  assign _09_ = _07_ ? (* hdlname = "controller 5544" *) 2'h1 : _08_;
  assign _12_ = datainstrbar ? (* hdlname = "controller 5551" *) 2'h2 : 2'h0;
  assign _13_ = _11_ ? (* hdlname = "controller 5553" *) 2'h1 : _12_;
  function [1:0] \controller.5558 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* hdlname = "controller 5558" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \controller.5558  = b[1:0];
      3'b?1?:
        \controller.5558  = b[3:2];
      3'b1??:
        \controller.5558  = b[5:4];
      default:
        \controller.5558  = a;
    endcase
  endfunction
  assign \controller.nstate  = \controller.5558 (2'h0, { _13_, _09_, _02_ }, { _14_, _10_, _03_ });
  assign _03_ = ! (* hdlname = "controller 5565" *) \controller.pstate ;
  assign _15_ = _06_ & (* hdlname = "controller 5568" *) _04_;
  assign _16_ = _15_ ? (* hdlname = "controller 5574" *) 1'h1 : 1'h0;
  assign _04_ = \controller.cocnt  & (* hdlname = "controller 5575" *) memready;
  assign _05_ = startdaru & (* hdlname = "controller 5576" *) _04_;
  assign _07_ = _06_ & (* hdlname = "controller 5578" *) _05_;
  assign _17_ = _07_ ? (* hdlname = "controller 5586" *) startdaru : 1'h0;
  assign _10_ = \controller.pstate  == (* hdlname = "controller 5588" *) 2'h1;
  assign _06_ = ~ (* hdlname = "controller 5589" *) datainstrbar;
  assign _11_ = _06_ & (* hdlname = "controller 5590" *) startdaru;
  assign _18_ = _11_ ? (* hdlname = "controller 5598" *) startdaru : 1'h0;
  assign _14_ = \controller.pstate  == (* hdlname = "controller 5600" *) 2'h2;
  function [0:0] \controller.5606 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* hdlname = "controller 5606" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \controller.5606  = b[0:0];
      3'b?1?:
        \controller.5606  = b[1:1];
      3'b1??:
        \controller.5606  = b[2:2];
      default:
        \controller.5606  = a;
    endcase
  endfunction
  assign \controller.initcnt  = \controller.5606 (1'h0, { _18_, _17_, startdaru }, { _14_, _10_, _03_ });
  assign \controller.enabledata  = _10_ ? (* hdlname = "controller 5624" *) memready : 1'h0;
  assign \controller.enableaddr  = _10_ ? (* hdlname = "controller 5634" *) 1'h1 : 1'h0;
  assign \controller.select_incoming_data  = _10_ ? (* hdlname = "controller 5649" *) _16_ : 1'h0;
  function [0:0] \controller.5654 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controller 5654" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controller.5654  = b[0:0];
      2'b1?:
        \controller.5654  = b[1:1];
      default:
        \controller.5654  = a;
    endcase
  endfunction
  assign \controller.completedaru  = \controller.5654 (1'h0, { 1'h1, _16_ }, { _14_, _10_ });
  assign _20_ = ! (* hdlname = "datapath 5491" *) \datapath.nbytereg.outreg ;
  assign \datapath.bytestoread_temp  = _20_ ? (* hdlname = "datapath 5492" *) 1'h0 : 1'h1;
  assign \datapath.dataout [31:16] = \controller.select_incoming_data  ? (* hdlname = "datapath 5500" *) \datapath.datain  : \datapath.dataouthigh_reg ;
  assign _21_ = \datapath.adder.fa2.b  == (* hdlname = "datapath 5503" *) \datapath.bytestoread_temp ;
  assign \controller.cocnt  = _21_ ? (* hdlname = "datapath 5504" *) 1'h1 : 1'h0;
  assign \datapath.datain  = \controller.enabledata  ? memdata : 16'bz;
  assign \datapath.addrout  = \controller.enableaddr  ? { \datapath.adder.gen_halfadder:30.ha.o_sum , \datapath.adder.gen_halfadder:29.ha.o_sum , \datapath.adder.gen_halfadder:28.ha.o_sum , \datapath.adder.gen_halfadder:27.ha.o_sum , \datapath.adder.gen_halfadder:26.ha.o_sum , \datapath.adder.gen_halfadder:25.ha.o_sum , \datapath.adder.gen_halfadder:24.ha.o_sum , \datapath.adder.gen_halfadder:23.ha.o_sum , \datapath.adder.gen_halfadder:22.ha.o_sum , \datapath.adder.gen_halfadder:21.ha.o_sum , \datapath.adder.gen_halfadder:20.ha.o_sum , \datapath.adder.gen_halfadder:19.ha.o_sum , \datapath.adder.gen_halfadder:18.ha.o_sum , \datapath.adder.gen_halfadder:17.ha.o_sum , \datapath.adder.gen_halfadder:16.ha.o_sum , \datapath.adder.gen_halfadder:15.ha.o_sum , \datapath.adder.gen_halfadder:14.ha.o_sum , \datapath.adder.gen_halfadder:13.ha.o_sum , \datapath.adder.gen_halfadder:12.ha.o_sum , \datapath.adder.gen_halfadder:11.ha.o_sum , \datapath.adder.gen_halfadder:10.ha.o_sum , \datapath.adder.gen_halfadder:9.ha.o_sum , \datapath.adder.gen_halfadder:8.ha.o_sum , \datapath.adder.gen_halfadder:7.ha.o_sum , \datapath.adder.gen_halfadder:6.ha.o_sum , \datapath.adder.gen_halfadder:5.ha.o_sum , \datapath.adder.gen_halfadder:4.ha.o_sum , \datapath.adder.gen_halfadder:3.ha.o_sum , \datapath.adder.gen_halfadder:2.ha.o_sum , \datapath.adder.gen_halfadder:1.ha.o_sum , \datapath.adder.fa2.s , \datapath.addrreg.outreg [0] } : 32'bz;
  assign \datapath.adder.fa2.s  = \datapath.addrreg.outreg [1] ^ (* hdlname = "datapath adder fa2 6569" *) \datapath.adder.fa2.b ;
  assign \datapath.adder.gen_halfadder:1.ha.i_bit2  = \datapath.addrreg.outreg [1] & (* hdlname = "datapath adder fa2 6571" *) \datapath.adder.fa2.b ;
  assign \datapath.adder.gen_halfadder:1.ha.o_sum  = \datapath.addrreg.outreg [2] ^ (* hdlname = "datapath adder gen_halfadder:1.ha 6578" *) \datapath.adder.gen_halfadder:1.ha.i_bit2 ;
  assign \datapath.adder.gen_halfadder:1.ha.o_carry  = \datapath.addrreg.outreg [2] & (* hdlname = "datapath adder gen_halfadder:1.ha 6579" *) \datapath.adder.gen_halfadder:1.ha.i_bit2 ;
  assign \datapath.adder.gen_halfadder:10.ha.o_sum  = \datapath.addrreg.outreg [11] ^ (* hdlname = "datapath adder gen_halfadder:10.ha 6578" *) \datapath.adder.gen_halfadder:10.ha.i_bit2 ;
  assign \datapath.adder.gen_halfadder:10.ha.o_carry  = \datapath.addrreg.outreg [11] & (* hdlname = "datapath adder gen_halfadder:10.ha 6579" *) \datapath.adder.gen_halfadder:10.ha.i_bit2 ;
  assign \datapath.adder.gen_halfadder:11.ha.o_sum  = \datapath.addrreg.outreg [12] ^ (* hdlname = "datapath adder gen_halfadder:11.ha 6578" *) \datapath.adder.gen_halfadder:10.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:11.ha.o_carry  = \datapath.addrreg.outreg [12] & (* hdlname = "datapath adder gen_halfadder:11.ha 6579" *) \datapath.adder.gen_halfadder:10.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:12.ha.o_sum  = \datapath.addrreg.outreg [13] ^ (* hdlname = "datapath adder gen_halfadder:12.ha 6578" *) \datapath.adder.gen_halfadder:11.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:12.ha.o_carry  = \datapath.addrreg.outreg [13] & (* hdlname = "datapath adder gen_halfadder:12.ha 6579" *) \datapath.adder.gen_halfadder:11.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:13.ha.o_sum  = \datapath.addrreg.outreg [14] ^ (* hdlname = "datapath adder gen_halfadder:13.ha 6578" *) \datapath.adder.gen_halfadder:12.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:13.ha.o_carry  = \datapath.addrreg.outreg [14] & (* hdlname = "datapath adder gen_halfadder:13.ha 6579" *) \datapath.adder.gen_halfadder:12.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:14.ha.o_sum  = \datapath.addrreg.outreg [15] ^ (* hdlname = "datapath adder gen_halfadder:14.ha 6578" *) \datapath.adder.gen_halfadder:13.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:14.ha.o_carry  = \datapath.addrreg.outreg [15] & (* hdlname = "datapath adder gen_halfadder:14.ha 6579" *) \datapath.adder.gen_halfadder:13.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:15.ha.o_sum  = \datapath.addrreg.outreg [16] ^ (* hdlname = "datapath adder gen_halfadder:15.ha 6578" *) \datapath.adder.gen_halfadder:14.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:15.ha.o_carry  = \datapath.addrreg.outreg [16] & (* hdlname = "datapath adder gen_halfadder:15.ha 6579" *) \datapath.adder.gen_halfadder:14.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:16.ha.o_sum  = \datapath.addrreg.outreg [17] ^ (* hdlname = "datapath adder gen_halfadder:16.ha 6578" *) \datapath.adder.gen_halfadder:15.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:16.ha.o_carry  = \datapath.addrreg.outreg [17] & (* hdlname = "datapath adder gen_halfadder:16.ha 6579" *) \datapath.adder.gen_halfadder:15.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:17.ha.o_sum  = \datapath.addrreg.outreg [18] ^ (* hdlname = "datapath adder gen_halfadder:17.ha 6578" *) \datapath.adder.gen_halfadder:16.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:17.ha.o_carry  = \datapath.addrreg.outreg [18] & (* hdlname = "datapath adder gen_halfadder:17.ha 6579" *) \datapath.adder.gen_halfadder:16.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:18.ha.o_sum  = \datapath.addrreg.outreg [19] ^ (* hdlname = "datapath adder gen_halfadder:18.ha 6578" *) \datapath.adder.gen_halfadder:17.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:18.ha.o_carry  = \datapath.addrreg.outreg [19] & (* hdlname = "datapath adder gen_halfadder:18.ha 6579" *) \datapath.adder.gen_halfadder:17.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:19.ha.o_sum  = \datapath.addrreg.outreg [20] ^ (* hdlname = "datapath adder gen_halfadder:19.ha 6578" *) \datapath.adder.gen_halfadder:18.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:19.ha.o_carry  = \datapath.addrreg.outreg [20] & (* hdlname = "datapath adder gen_halfadder:19.ha 6579" *) \datapath.adder.gen_halfadder:18.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:2.ha.o_sum  = \datapath.addrreg.outreg [3] ^ (* hdlname = "datapath adder gen_halfadder:2.ha 6578" *) \datapath.adder.gen_halfadder:1.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:2.ha.o_carry  = \datapath.addrreg.outreg [3] & (* hdlname = "datapath adder gen_halfadder:2.ha 6579" *) \datapath.adder.gen_halfadder:1.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:20.ha.o_sum  = \datapath.addrreg.outreg [21] ^ (* hdlname = "datapath adder gen_halfadder:20.ha 6578" *) \datapath.adder.gen_halfadder:19.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:20.ha.o_carry  = \datapath.addrreg.outreg [21] & (* hdlname = "datapath adder gen_halfadder:20.ha 6579" *) \datapath.adder.gen_halfadder:19.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:21.ha.o_sum  = \datapath.addrreg.outreg [22] ^ (* hdlname = "datapath adder gen_halfadder:21.ha 6578" *) \datapath.adder.gen_halfadder:20.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:21.ha.o_carry  = \datapath.addrreg.outreg [22] & (* hdlname = "datapath adder gen_halfadder:21.ha 6579" *) \datapath.adder.gen_halfadder:20.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:22.ha.o_sum  = \datapath.addrreg.outreg [23] ^ (* hdlname = "datapath adder gen_halfadder:22.ha 6578" *) \datapath.adder.gen_halfadder:21.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:22.ha.o_carry  = \datapath.addrreg.outreg [23] & (* hdlname = "datapath adder gen_halfadder:22.ha 6579" *) \datapath.adder.gen_halfadder:21.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:23.ha.o_sum  = \datapath.addrreg.outreg [24] ^ (* hdlname = "datapath adder gen_halfadder:23.ha 6578" *) \datapath.adder.gen_halfadder:22.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:23.ha.o_carry  = \datapath.addrreg.outreg [24] & (* hdlname = "datapath adder gen_halfadder:23.ha 6579" *) \datapath.adder.gen_halfadder:22.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:24.ha.o_sum  = \datapath.addrreg.outreg [25] ^ (* hdlname = "datapath adder gen_halfadder:24.ha 6578" *) \datapath.adder.gen_halfadder:23.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:24.ha.o_carry  = \datapath.addrreg.outreg [25] & (* hdlname = "datapath adder gen_halfadder:24.ha 6579" *) \datapath.adder.gen_halfadder:23.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:25.ha.o_sum  = \datapath.addrreg.outreg [26] ^ (* hdlname = "datapath adder gen_halfadder:25.ha 6578" *) \datapath.adder.gen_halfadder:24.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:25.ha.o_carry  = \datapath.addrreg.outreg [26] & (* hdlname = "datapath adder gen_halfadder:25.ha 6579" *) \datapath.adder.gen_halfadder:24.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:26.ha.o_sum  = \datapath.addrreg.outreg [27] ^ (* hdlname = "datapath adder gen_halfadder:26.ha 6578" *) \datapath.adder.gen_halfadder:25.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:26.ha.o_carry  = \datapath.addrreg.outreg [27] & (* hdlname = "datapath adder gen_halfadder:26.ha 6579" *) \datapath.adder.gen_halfadder:25.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:27.ha.o_sum  = \datapath.addrreg.outreg [28] ^ (* hdlname = "datapath adder gen_halfadder:27.ha 6578" *) \datapath.adder.gen_halfadder:26.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:27.ha.o_carry  = \datapath.addrreg.outreg [28] & (* hdlname = "datapath adder gen_halfadder:27.ha 6579" *) \datapath.adder.gen_halfadder:26.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:28.ha.o_sum  = \datapath.addrreg.outreg [29] ^ (* hdlname = "datapath adder gen_halfadder:28.ha 6578" *) \datapath.adder.gen_halfadder:27.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:28.ha.o_carry  = \datapath.addrreg.outreg [29] & (* hdlname = "datapath adder gen_halfadder:28.ha 6579" *) \datapath.adder.gen_halfadder:27.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:29.ha.o_sum  = \datapath.addrreg.outreg [30] ^ (* hdlname = "datapath adder gen_halfadder:29.ha 6578" *) \datapath.adder.gen_halfadder:28.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:29.ha.o_carry  = \datapath.addrreg.outreg [30] & (* hdlname = "datapath adder gen_halfadder:29.ha 6579" *) \datapath.adder.gen_halfadder:28.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:3.ha.o_sum  = \datapath.addrreg.outreg [4] ^ (* hdlname = "datapath adder gen_halfadder:3.ha 6578" *) \datapath.adder.gen_halfadder:2.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:3.ha.o_carry  = \datapath.addrreg.outreg [4] & (* hdlname = "datapath adder gen_halfadder:3.ha 6579" *) \datapath.adder.gen_halfadder:2.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:30.ha.o_sum  = \datapath.addrreg.outreg [31] ^ (* hdlname = "datapath adder gen_halfadder:30.ha 6578" *) \datapath.adder.gen_halfadder:29.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:4.ha.o_sum  = \datapath.addrreg.outreg [5] ^ (* hdlname = "datapath adder gen_halfadder:4.ha 6578" *) \datapath.adder.gen_halfadder:3.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:4.ha.o_carry  = \datapath.addrreg.outreg [5] & (* hdlname = "datapath adder gen_halfadder:4.ha 6579" *) \datapath.adder.gen_halfadder:3.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:5.ha.o_sum  = \datapath.addrreg.outreg [6] ^ (* hdlname = "datapath adder gen_halfadder:5.ha 6578" *) \datapath.adder.gen_halfadder:4.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:5.ha.o_carry  = \datapath.addrreg.outreg [6] & (* hdlname = "datapath adder gen_halfadder:5.ha 6579" *) \datapath.adder.gen_halfadder:4.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:6.ha.o_sum  = \datapath.addrreg.outreg [7] ^ (* hdlname = "datapath adder gen_halfadder:6.ha 6578" *) \datapath.adder.gen_halfadder:5.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:6.ha.o_carry  = \datapath.addrreg.outreg [7] & (* hdlname = "datapath adder gen_halfadder:6.ha 6579" *) \datapath.adder.gen_halfadder:5.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:7.ha.o_sum  = \datapath.addrreg.outreg [8] ^ (* hdlname = "datapath adder gen_halfadder:7.ha 6578" *) \datapath.adder.gen_halfadder:6.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:7.ha.o_carry  = \datapath.addrreg.outreg [8] & (* hdlname = "datapath adder gen_halfadder:7.ha 6579" *) \datapath.adder.gen_halfadder:6.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:8.ha.o_sum  = \datapath.addrreg.outreg [9] ^ (* hdlname = "datapath adder gen_halfadder:8.ha 6578" *) \datapath.adder.gen_halfadder:7.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:8.ha.o_carry  = \datapath.addrreg.outreg [9] & (* hdlname = "datapath adder gen_halfadder:8.ha 6579" *) \datapath.adder.gen_halfadder:7.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:9.ha.o_sum  = \datapath.addrreg.outreg [10] ^ (* hdlname = "datapath adder gen_halfadder:9.ha 6578" *) \datapath.adder.gen_halfadder:8.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:10.ha.i_bit2  = \datapath.addrreg.outreg [10] & (* hdlname = "datapath adder gen_halfadder:9.ha 6579" *) \datapath.adder.gen_halfadder:8.ha.o_carry ;
  assign _23_ = \controller.initcnt  ? (* hdlname = "datapath addrreg 4067" *) addrin : \datapath.addrreg.outreg ;
  assign _25_ = ~ (* hdlname = "datapath counter 6168" *) \datapath.counter.cocntp ;
  assign _26_ = _25_ & (* hdlname = "datapath counter 6169" *) \controller.enabledata ;
  assign _27_ = \datapath.adder.fa2.b  + (* hdlname = "datapath counter 6171" *) 1'h1;
  assign _28_ = _26_ ? (* hdlname = "datapath counter 6172" *) _27_ : \datapath.adder.fa2.b ;
  assign \datapath.counter.cocntp  = \datapath.adder.fa2.b  ? (* hdlname = "datapath counter 6183" *) 1'h1 : 1'h0;
  assign _29_ = ! (* hdlname = "datapath decoder 6134" *) { 1'h0, \datapath.adder.fa2.b  };
  function [3:0] \datapath.decoder.6147 ;
    input [3:0] a;
    input [7:0] b;
    input [1:0] s;
    (* hdlname = "datapath decoder 6147" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \datapath.decoder.6147  = b[3:0];
      2'b1?:
        \datapath.decoder.6147  = b[7:4];
      default:
        \datapath.decoder.6147  = a;
    endcase
  endfunction
  assign _30_ = \datapath.decoder.6147 (4'h0, 8'h21, { \datapath.adder.fa2.b , _29_ });
  assign \datapath.decoder.outdecoder  = \controller.enabledata  ? (* hdlname = "datapath decoder 6149" *) _30_ : 4'h0;
  assign _31_ = \datapath.addrreg.outreg [1:0] == (* hdlname = "datapath errordecoder 6336" *) 2'h1;
  assign \datapath.errordecoder.cmp_01  = _31_ ? (* hdlname = "datapath errordecoder 6337" *) 1'h1 : 1'h0;
  assign _32_ = \datapath.addrreg.outreg [1:0] == (* hdlname = "datapath errordecoder 6341" *) 2'h2;
  assign \datapath.errordecoder.cmp_10  = _32_ ? (* hdlname = "datapath errordecoder 6342" *) 1'h1 : 1'h0;
  assign _33_ = \datapath.addrreg.outreg [1:0] == (* hdlname = "datapath errordecoder 6346" *) 2'h3;
  assign \datapath.errordecoder.cmp_11  = _33_ ? (* hdlname = "datapath errordecoder 6347" *) 1'h1 : 1'h0;
  assign _34_ = \datapath.errordecoder.cmp_01  | (* hdlname = "datapath errordecoder 6349" *) \datapath.errordecoder.cmp_11 ;
  assign _35_ = nbytes == (* hdlname = "datapath errordecoder 6351" *) 2'h1;
  assign \datapath.errordecoder.misalignederrorp  = _35_ ? (* hdlname = "datapath errordecoder 6352" *) _34_ : _39_;
  assign _36_ = \datapath.errordecoder.cmp_01  | (* hdlname = "datapath errordecoder 6353" *) \datapath.errordecoder.cmp_10 ;
  assign _37_ = _36_ | (* hdlname = "datapath errordecoder 6354" *) \datapath.errordecoder.cmp_11 ;
  assign _38_ = nbytes == (* hdlname = "datapath errordecoder 6356" *) 2'h3;
  assign _39_ = _38_ ? (* hdlname = "datapath errordecoder 6357" *) _37_ : 1'h0;
  assign \datapath.errordecoder.loadmisalignedflag  = datainstrbar ? (* hdlname = "datapath errordecoder 6360" *) _40_ : 1'h0;
  assign _40_ = \datapath.errordecoder.misalignederrorp  & (* hdlname = "datapath errordecoder 6362" *) checkmisaligneddaru;
  assign \datapath.errordecoder.instrmisalignedflag  = datainstrbar ? (* hdlname = "datapath errordecoder 6364" *) 1'h0 : _40_;
  assign _42_ = \controller.initcnt  ? (* hdlname = "datapath nbytereg 6155" *) nbytes : \datapath.nbytereg.outreg ;
  assign _44_ = \datapath.decoder.outdecoder [0] ? (* hdlname = "datapath reg0 6190" *) \datapath.datain  : \datapath.reg0.outreg ;
  assign _46_ = \datapath.decoder.outdecoder [1] ? (* hdlname = "datapath reg1 6190" *) \datapath.datain  : \datapath.dataouthigh_reg ;
  assign addrout = \datapath.addrout ;
  assign bytestoread = \datapath.bytestoread_temp ;
  assign cocnt = \controller.cocnt ;
  assign completedaru = \controller.completedaru ;
  assign \controller.clk  = clk;
  assign \controller.datainstrbar  = datainstrbar;
  assign \controller.inccnt  = \controller.enabledata ;
  assign \controller.initreading  = \controller.initcnt ;
  assign \controller.ldaddr  = \controller.initcnt ;
  assign \controller.ldnumbytes  = \controller.initcnt ;
  assign \controller.memready  = memready;
  assign \controller.readmem  = \controller.enableaddr ;
  assign \controller.rst  = rst;
  assign \controller.sellden  = \controller.enabledata ;
  assign \controller.startdaru  = startdaru;
  assign \controller.sync_rst  = sync_rst;
  assign \controller.zerocnt  = 1'h0;
  assign \controller.zeronumbytes  = 1'h0;
  assign dataout = { \datapath.dataout [31:16], \datapath.reg0.outreg  };
  assign \datapath.adder.a  = \datapath.addrreg.outreg ;
  assign \datapath.adder.b  = { \datapath.adder.fa2.b , 1'h0 };
  assign \datapath.adder.cout [30:0] = { \datapath.adder.gen_halfadder:29.ha.o_carry , \datapath.adder.gen_halfadder:28.ha.o_carry , \datapath.adder.gen_halfadder:27.ha.o_carry , \datapath.adder.gen_halfadder:26.ha.o_carry , \datapath.adder.gen_halfadder:25.ha.o_carry , \datapath.adder.gen_halfadder:24.ha.o_carry , \datapath.adder.gen_halfadder:23.ha.o_carry , \datapath.adder.gen_halfadder:22.ha.o_carry , \datapath.adder.gen_halfadder:21.ha.o_carry , \datapath.adder.gen_halfadder:20.ha.o_carry , \datapath.adder.gen_halfadder:19.ha.o_carry , \datapath.adder.gen_halfadder:18.ha.o_carry , \datapath.adder.gen_halfadder:17.ha.o_carry , \datapath.adder.gen_halfadder:16.ha.o_carry , \datapath.adder.gen_halfadder:15.ha.o_carry , \datapath.adder.gen_halfadder:14.ha.o_carry , \datapath.adder.gen_halfadder:13.ha.o_carry , \datapath.adder.gen_halfadder:12.ha.o_carry , \datapath.adder.gen_halfadder:11.ha.o_carry , \datapath.adder.gen_halfadder:10.ha.o_carry , \datapath.adder.gen_halfadder:10.ha.i_bit2 , \datapath.adder.gen_halfadder:8.ha.o_carry , \datapath.adder.gen_halfadder:7.ha.o_carry , \datapath.adder.gen_halfadder:6.ha.o_carry , \datapath.adder.gen_halfadder:5.ha.o_carry , \datapath.adder.gen_halfadder:4.ha.o_carry , \datapath.adder.gen_halfadder:3.ha.o_carry , \datapath.adder.gen_halfadder:2.ha.o_carry , \datapath.adder.gen_halfadder:1.ha.o_carry , \datapath.adder.gen_halfadder:1.ha.i_bit2 , 1'h0 };
  assign \datapath.adder.fa1.a  = \datapath.addrreg.outreg [0];
  assign \datapath.adder.fa1.b  = 1'h0;
  assign \datapath.adder.fa1.cin  = 1'h0;
  assign \datapath.adder.fa1.cout  = 1'h0;
  assign \datapath.adder.fa1.s  = \datapath.addrreg.outreg [0];
  assign \datapath.adder.fa2.a  = \datapath.addrreg.outreg [1];
  assign \datapath.adder.fa2.cin  = 1'h0;
  assign \datapath.adder.fa2.cout  = \datapath.adder.gen_halfadder:1.ha.i_bit2 ;
  assign \datapath.adder.gen_halfadder:1.ha.i_bit1  = \datapath.addrreg.outreg [2];
  assign \datapath.adder.gen_halfadder:10.ha.i_bit1  = \datapath.addrreg.outreg [11];
  assign \datapath.adder.gen_halfadder:11.ha.i_bit1  = \datapath.addrreg.outreg [12];
  assign \datapath.adder.gen_halfadder:11.ha.i_bit2  = \datapath.adder.gen_halfadder:10.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:12.ha.i_bit1  = \datapath.addrreg.outreg [13];
  assign \datapath.adder.gen_halfadder:12.ha.i_bit2  = \datapath.adder.gen_halfadder:11.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:13.ha.i_bit1  = \datapath.addrreg.outreg [14];
  assign \datapath.adder.gen_halfadder:13.ha.i_bit2  = \datapath.adder.gen_halfadder:12.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:14.ha.i_bit1  = \datapath.addrreg.outreg [15];
  assign \datapath.adder.gen_halfadder:14.ha.i_bit2  = \datapath.adder.gen_halfadder:13.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:15.ha.i_bit1  = \datapath.addrreg.outreg [16];
  assign \datapath.adder.gen_halfadder:15.ha.i_bit2  = \datapath.adder.gen_halfadder:14.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:16.ha.i_bit1  = \datapath.addrreg.outreg [17];
  assign \datapath.adder.gen_halfadder:16.ha.i_bit2  = \datapath.adder.gen_halfadder:15.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:17.ha.i_bit1  = \datapath.addrreg.outreg [18];
  assign \datapath.adder.gen_halfadder:17.ha.i_bit2  = \datapath.adder.gen_halfadder:16.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:18.ha.i_bit1  = \datapath.addrreg.outreg [19];
  assign \datapath.adder.gen_halfadder:18.ha.i_bit2  = \datapath.adder.gen_halfadder:17.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:19.ha.i_bit1  = \datapath.addrreg.outreg [20];
  assign \datapath.adder.gen_halfadder:19.ha.i_bit2  = \datapath.adder.gen_halfadder:18.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:2.ha.i_bit1  = \datapath.addrreg.outreg [3];
  assign \datapath.adder.gen_halfadder:2.ha.i_bit2  = \datapath.adder.gen_halfadder:1.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:20.ha.i_bit1  = \datapath.addrreg.outreg [21];
  assign \datapath.adder.gen_halfadder:20.ha.i_bit2  = \datapath.adder.gen_halfadder:19.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:21.ha.i_bit1  = \datapath.addrreg.outreg [22];
  assign \datapath.adder.gen_halfadder:21.ha.i_bit2  = \datapath.adder.gen_halfadder:20.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:22.ha.i_bit1  = \datapath.addrreg.outreg [23];
  assign \datapath.adder.gen_halfadder:22.ha.i_bit2  = \datapath.adder.gen_halfadder:21.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:23.ha.i_bit1  = \datapath.addrreg.outreg [24];
  assign \datapath.adder.gen_halfadder:23.ha.i_bit2  = \datapath.adder.gen_halfadder:22.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:24.ha.i_bit1  = \datapath.addrreg.outreg [25];
  assign \datapath.adder.gen_halfadder:24.ha.i_bit2  = \datapath.adder.gen_halfadder:23.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:25.ha.i_bit1  = \datapath.addrreg.outreg [26];
  assign \datapath.adder.gen_halfadder:25.ha.i_bit2  = \datapath.adder.gen_halfadder:24.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:26.ha.i_bit1  = \datapath.addrreg.outreg [27];
  assign \datapath.adder.gen_halfadder:26.ha.i_bit2  = \datapath.adder.gen_halfadder:25.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:27.ha.i_bit1  = \datapath.addrreg.outreg [28];
  assign \datapath.adder.gen_halfadder:27.ha.i_bit2  = \datapath.adder.gen_halfadder:26.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:28.ha.i_bit1  = \datapath.addrreg.outreg [29];
  assign \datapath.adder.gen_halfadder:28.ha.i_bit2  = \datapath.adder.gen_halfadder:27.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:29.ha.i_bit1  = \datapath.addrreg.outreg [30];
  assign \datapath.adder.gen_halfadder:29.ha.i_bit2  = \datapath.adder.gen_halfadder:28.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:3.ha.i_bit1  = \datapath.addrreg.outreg [4];
  assign \datapath.adder.gen_halfadder:3.ha.i_bit2  = \datapath.adder.gen_halfadder:2.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:30.ha.i_bit1  = \datapath.addrreg.outreg [31];
  assign \datapath.adder.gen_halfadder:30.ha.i_bit2  = \datapath.adder.gen_halfadder:29.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:30.ha.o_carry  = \datapath.adder.cout [31];
  assign \datapath.adder.gen_halfadder:4.ha.i_bit1  = \datapath.addrreg.outreg [5];
  assign \datapath.adder.gen_halfadder:4.ha.i_bit2  = \datapath.adder.gen_halfadder:3.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:5.ha.i_bit1  = \datapath.addrreg.outreg [6];
  assign \datapath.adder.gen_halfadder:5.ha.i_bit2  = \datapath.adder.gen_halfadder:4.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:6.ha.i_bit1  = \datapath.addrreg.outreg [7];
  assign \datapath.adder.gen_halfadder:6.ha.i_bit2  = \datapath.adder.gen_halfadder:5.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:7.ha.i_bit1  = \datapath.addrreg.outreg [8];
  assign \datapath.adder.gen_halfadder:7.ha.i_bit2  = \datapath.adder.gen_halfadder:6.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:8.ha.i_bit1  = \datapath.addrreg.outreg [9];
  assign \datapath.adder.gen_halfadder:8.ha.i_bit2  = \datapath.adder.gen_halfadder:7.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:9.ha.i_bit1  = \datapath.addrreg.outreg [10];
  assign \datapath.adder.gen_halfadder:9.ha.i_bit2  = \datapath.adder.gen_halfadder:8.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:9.ha.o_carry  = \datapath.adder.gen_halfadder:10.ha.i_bit2 ;
  assign \datapath.adder.sum  = { \datapath.adder.gen_halfadder:30.ha.o_sum , \datapath.adder.gen_halfadder:29.ha.o_sum , \datapath.adder.gen_halfadder:28.ha.o_sum , \datapath.adder.gen_halfadder:27.ha.o_sum , \datapath.adder.gen_halfadder:26.ha.o_sum , \datapath.adder.gen_halfadder:25.ha.o_sum , \datapath.adder.gen_halfadder:24.ha.o_sum , \datapath.adder.gen_halfadder:23.ha.o_sum , \datapath.adder.gen_halfadder:22.ha.o_sum , \datapath.adder.gen_halfadder:21.ha.o_sum , \datapath.adder.gen_halfadder:20.ha.o_sum , \datapath.adder.gen_halfadder:19.ha.o_sum , \datapath.adder.gen_halfadder:18.ha.o_sum , \datapath.adder.gen_halfadder:17.ha.o_sum , \datapath.adder.gen_halfadder:16.ha.o_sum , \datapath.adder.gen_halfadder:15.ha.o_sum , \datapath.adder.gen_halfadder:14.ha.o_sum , \datapath.adder.gen_halfadder:13.ha.o_sum , \datapath.adder.gen_halfadder:12.ha.o_sum , \datapath.adder.gen_halfadder:11.ha.o_sum , \datapath.adder.gen_halfadder:10.ha.o_sum , \datapath.adder.gen_halfadder:9.ha.o_sum , \datapath.adder.gen_halfadder:8.ha.o_sum , \datapath.adder.gen_halfadder:7.ha.o_sum , \datapath.adder.gen_halfadder:6.ha.o_sum , \datapath.adder.gen_halfadder:5.ha.o_sum , \datapath.adder.gen_halfadder:4.ha.o_sum , \datapath.adder.gen_halfadder:3.ha.o_sum , \datapath.adder.gen_halfadder:2.ha.o_sum , \datapath.adder.gen_halfadder:1.ha.o_sum , \datapath.adder.fa2.s , \datapath.addrreg.outreg [0] };
  assign \datapath.addrin  = addrin;
  assign \datapath.addrreg.clk  = clk;
  assign \datapath.addrreg.inreg  = addrin;
  assign \datapath.addrreg.load  = \controller.initcnt ;
  assign \datapath.addrreg.rst  = rst;
  assign \datapath.addrreg.zero  = 1'h0;
  assign \datapath.bytecnt  = { \datapath.adder.fa2.b , 1'h0 };
  assign \datapath.bytestoread  = \datapath.bytestoread_temp ;
  assign \datapath.checkmisaligneddaru  = checkmisaligneddaru;
  assign \datapath.clk  = clk;
  assign \datapath.cocnt  = \controller.cocnt ;
  assign \datapath.counter.clk  = clk;
  assign \datapath.counter.cocnt  = \datapath.counter.cocntp ;
  assign \datapath.counter.inccnt  = \controller.enabledata ;
  assign \datapath.counter.initcnt  = \controller.initcnt ;
  assign \datapath.counter.initvalue  = 1'h0;
  assign \datapath.counter.outcnt  = \datapath.adder.fa2.b ;
  assign \datapath.counter.rst  = rst;
  assign \datapath.counter.temp  = \datapath.adder.fa2.b ;
  assign \datapath.counter.zerocnt  = 1'h0;
  assign \datapath.datainstrbar  = datainstrbar;
  assign \datapath.dataout [15:0] = \datapath.reg0.outreg ;
  assign \datapath.decoder.en  = \controller.enabledata ;
  assign \datapath.decoder.indecoder  = { 1'h0, \datapath.adder.fa2.b  };
  assign \datapath.enableaddr  = \controller.enableaddr ;
  assign \datapath.enabledata  = \controller.enabledata ;
  assign \datapath.errordecoder.addrin  = \datapath.addrreg.outreg [1:0];
  assign \datapath.errordecoder.checkmisaligneddaru  = checkmisaligneddaru;
  assign \datapath.errordecoder.datainstrbar  = datainstrbar;
  assign \datapath.errordecoder.nbytes  = nbytes;
  assign \datapath.inccnt  = \controller.enabledata ;
  assign \datapath.initcnt  = \controller.initcnt ;
  assign \datapath.initreading  = \controller.initcnt ;
  assign \datapath.initvaluecnt  = 2'h0;
  assign \datapath.instrmisalignedflag  = \datapath.errordecoder.instrmisalignedflag ;
  assign \datapath.ldaddr  = \controller.initcnt ;
  assign \datapath.ldnumbytes  = \controller.initcnt ;
  assign \datapath.loadmisalignedflag  = \datapath.errordecoder.loadmisalignedflag ;
  assign \datapath.memdata  = memdata;
  assign \datapath.nbytereg.clk  = clk;
  assign \datapath.nbytereg.inreg  = nbytes;
  assign \datapath.nbytereg.load  = \controller.initcnt ;
  assign \datapath.nbytereg.rst  = rst;
  assign \datapath.nbytereg.zero  = 1'h0;
  assign \datapath.nbytes  = nbytes;
  assign \datapath.nbytesout  = \datapath.nbytereg.outreg ;
  assign \datapath.outcnt  = \datapath.adder.fa2.b ;
  assign \datapath.outcnt_ext  = { 1'h0, \datapath.adder.fa2.b  };
  assign \datapath.outdecoder  = \datapath.decoder.outdecoder ;
  assign \datapath.readaddr  = \datapath.addrreg.outreg ;
  assign \datapath.readaddrout  = \datapath.addrreg.outreg ;
  assign \datapath.readaddrp  = { \datapath.adder.gen_halfadder:30.ha.o_sum , \datapath.adder.gen_halfadder:29.ha.o_sum , \datapath.adder.gen_halfadder:28.ha.o_sum , \datapath.adder.gen_halfadder:27.ha.o_sum , \datapath.adder.gen_halfadder:26.ha.o_sum , \datapath.adder.gen_halfadder:25.ha.o_sum , \datapath.adder.gen_halfadder:24.ha.o_sum , \datapath.adder.gen_halfadder:23.ha.o_sum , \datapath.adder.gen_halfadder:22.ha.o_sum , \datapath.adder.gen_halfadder:21.ha.o_sum , \datapath.adder.gen_halfadder:20.ha.o_sum , \datapath.adder.gen_halfadder:19.ha.o_sum , \datapath.adder.gen_halfadder:18.ha.o_sum , \datapath.adder.gen_halfadder:17.ha.o_sum , \datapath.adder.gen_halfadder:16.ha.o_sum , \datapath.adder.gen_halfadder:15.ha.o_sum , \datapath.adder.gen_halfadder:14.ha.o_sum , \datapath.adder.gen_halfadder:13.ha.o_sum , \datapath.adder.gen_halfadder:12.ha.o_sum , \datapath.adder.gen_halfadder:11.ha.o_sum , \datapath.adder.gen_halfadder:10.ha.o_sum , \datapath.adder.gen_halfadder:9.ha.o_sum , \datapath.adder.gen_halfadder:8.ha.o_sum , \datapath.adder.gen_halfadder:7.ha.o_sum , \datapath.adder.gen_halfadder:6.ha.o_sum , \datapath.adder.gen_halfadder:5.ha.o_sum , \datapath.adder.gen_halfadder:4.ha.o_sum , \datapath.adder.gen_halfadder:3.ha.o_sum , \datapath.adder.gen_halfadder:2.ha.o_sum , \datapath.adder.gen_halfadder:1.ha.o_sum , \datapath.adder.fa2.s , \datapath.addrreg.outreg [0] };
  assign \datapath.reg0.clk  = clk;
  assign \datapath.reg0.inreg  = \datapath.datain ;
  assign \datapath.reg0.load  = \datapath.decoder.outdecoder [0];
  assign \datapath.reg0.rst  = rst;
  assign \datapath.reg0.zero  = \controller.initcnt ;
  assign \datapath.reg1.clk  = clk;
  assign \datapath.reg1.inreg  = \datapath.datain ;
  assign \datapath.reg1.load  = \datapath.decoder.outdecoder [1];
  assign \datapath.reg1.outreg  = \datapath.dataouthigh_reg ;
  assign \datapath.reg1.rst  = rst;
  assign \datapath.reg1.zero  = \controller.initcnt ;
  assign \datapath.rst  = rst;
  assign \datapath.select_incoming_data  = \controller.select_incoming_data ;
  assign \datapath.sellden  = \controller.enabledata ;
  assign \datapath.zerocnt  = 1'h0;
  assign \datapath.zeronumbytes  = 1'h0;
  assign enableaddr = \controller.enableaddr ;
  assign enabledata = \controller.enabledata ;
  assign inccnt = \controller.enabledata ;
  assign initcnt = \controller.initcnt ;
  assign initreading = \controller.initcnt ;
  assign instrmisalignedflag = \datapath.errordecoder.instrmisalignedflag ;
  assign ldaddr = \controller.initcnt ;
  assign ldnumbytes = \controller.initcnt ;
  assign loadmisalignedflag = \datapath.errordecoder.loadmisalignedflag ;
  assign readaddrout = \datapath.addrreg.outreg ;
  assign readmem = \controller.enableaddr ;
  assign select_incoming_data = \controller.select_incoming_data ;
  assign sellden = \controller.enabledata ;
  assign zerocnt = 1'h0;
  assign zeronumbytes = 1'h0;
endmodule

module aftab_daru_controller(clk, rst, sync_rst, datainstrbar, startdaru, cocnt, memready, initcnt, ldaddr, zeroaddr, zeronumbytes, initreading, ldnumbytes, sellden, readmem, enableaddr, enabledata, inccnt, zerocnt, select_incoming_data, completedaru
);
  reg [1:0] _00_;
  wire [1:0] _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire [1:0] _07_;
  wire [1:0] _08_;
  wire _09_;
  wire _10_;
  wire [1:0] _11_;
  wire [1:0] _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  input clk;
  wire clk;
  input cocnt;
  wire cocnt;
  output completedaru;
  wire completedaru;
  input datainstrbar;
  wire datainstrbar;
  output enableaddr;
  wire enableaddr;
  output enabledata;
  wire enabledata;
  output inccnt;
  wire inccnt;
  output initcnt;
  wire initcnt;
  output initreading;
  wire initreading;
  output ldaddr;
  wire ldaddr;
  output ldnumbytes;
  wire ldnumbytes;
  input memready;
  wire memready;
  wire [1:0] nstate;
  wire [1:0] pstate;
  output readmem;
  wire readmem;
  input rst;
  wire rst;
  output select_incoming_data;
  wire select_incoming_data;
  output sellden;
  wire sellden;
  input startdaru;
  wire startdaru;
  input sync_rst;
  wire sync_rst;
  output zeroaddr;
  wire zeroaddr;
  output zerocnt;
  wire zerocnt;
  output zeronumbytes;
  wire zeronumbytes;
  assign pstate = rst ? 2'h0 : _00_;
  always @(posedge clk)
    if (_19_) _00_ <= 2'h0;
    else _00_ <= nstate;
  assign _19_ = | { sync_rst, rst };
  assign _01_ = startdaru ? 2'h1 : 2'h0;
  assign _07_ = _03_ ? 2'h2 : 2'h1;
  assign _08_ = _06_ ? 2'h1 : _07_;
  assign _11_ = datainstrbar ? 2'h2 : 2'h0;
  assign _12_ = _10_ ? 2'h1 : _11_;
  function [1:0] \5558 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \5558  = b[1:0];
      3'b?1?:
        \5558  = b[3:2];
      3'b1??:
        \5558  = b[5:4];
      default:
        \5558  = a;
    endcase
  endfunction
  assign nstate = \5558 (2'h0, { _12_, _08_, _01_ }, { _13_, _09_, _02_ });
  assign _14_ = ~ startdaru;
  assign _02_ = ! pstate;
  assign _15_ = _05_ & _03_;
  assign _16_ = _15_ ? 1'h1 : 1'h0;
  assign _03_ = cocnt & memready;
  assign _04_ = startdaru & _03_;
  assign _06_ = _05_ & _04_;
  assign _17_ = _06_ ? startdaru : 1'h0;
  assign _09_ = pstate == 2'h1;
  assign _05_ = ~ datainstrbar;
  assign _10_ = _05_ & startdaru;
  assign _18_ = _10_ ? startdaru : 1'h0;
  assign _13_ = pstate == 2'h2;
  function [0:0] \5606 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \5606  = b[0:0];
      3'b?1?:
        \5606  = b[1:1];
      3'b1??:
        \5606  = b[2:2];
      default:
        \5606  = a;
    endcase
  endfunction
  assign initcnt = \5606 (1'h0, { _18_, _17_, startdaru }, { _13_, _09_, _02_ });
  assign zeroaddr = _02_ ? _14_ : 1'h0;
  assign enabledata = _09_ ? memready : 1'h0;
  assign enableaddr = _09_ ? 1'h1 : 1'h0;
  assign select_incoming_data = _09_ ? _16_ : 1'h0;
  function [0:0] \5654 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \5654  = b[0:0];
      2'b1?:
        \5654  = b[1:1];
      default:
        \5654  = a;
    endcase
  endfunction
  assign completedaru = \5654 (1'h0, { 1'h1, _16_ }, { _13_, _09_ });
  assign inccnt = enabledata;
  assign initreading = initcnt;
  assign ldaddr = initcnt;
  assign ldnumbytes = initcnt;
  assign readmem = enableaddr;
  assign sellden = enabledata;
  assign zerocnt = 1'h0;
  assign zeronumbytes = 1'h0;
endmodule

module aftab_daru_datapath_32(clk, rst, nbytes, initvaluecnt, addrin, memdata, select_incoming_data, zeroaddr, ldaddr, sellden, zeronumbytes, ldnumbytes, zerocnt, inccnt, initcnt, initreading, enableaddr, enabledata, datainstrbar, checkmisaligneddaru, instrmisalignedflag
, loadmisalignedflag, cocnt, dataout, addrout, readaddrout, bytestoread);
  wire _00_;
  wire _01_;
  reg [31:0] _02_;
  wire [31:0] _03_;
  reg _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire [3:0] _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  reg [1:0] _23_;
  wire [1:0] _24_;
  wire _25_;
  reg [15:0] _26_;
  wire [15:0] _27_;
  wire _28_;
  reg [15:0] _29_;
  wire [15:0] _30_;
  (* hdlname = "adder a" *)
  wire [31:0] \adder.a ;
  (* hdlname = "adder b" *)
  wire [1:0] \adder.b ;
  (* hdlname = "adder cout" *)
  (* unused_bits = "31" *)
  wire [31:0] \adder.cout ;
  (* hdlname = "adder fa1 a" *)
  wire \adder.fa1.a ;
  (* hdlname = "adder fa1 b" *)
  wire \adder.fa1.b ;
  (* hdlname = "adder fa1 cin" *)
  wire \adder.fa1.cin ;
  (* hdlname = "adder fa1 cout" *)
  wire \adder.fa1.cout ;
  (* hdlname = "adder fa1 s" *)
  wire \adder.fa1.s ;
  (* hdlname = "adder fa2 a" *)
  wire \adder.fa2.a ;
  (* hdlname = "adder fa2 b" *)
  wire \adder.fa2.b ;
  (* hdlname = "adder fa2 cin" *)
  wire \adder.fa2.cin ;
  (* hdlname = "adder fa2 cout" *)
  wire \adder.fa2.cout ;
  (* hdlname = "adder fa2 s" *)
  wire \adder.fa2.s ;
  (* hdlname = "adder gen_halfadder:1.ha i_bit1" *)
  wire \adder.gen_halfadder:1.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:1.ha i_bit2" *)
  wire \adder.gen_halfadder:1.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:1.ha o_carry" *)
  wire \adder.gen_halfadder:1.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:1.ha o_sum" *)
  wire \adder.gen_halfadder:1.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:10.ha i_bit1" *)
  wire \adder.gen_halfadder:10.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:10.ha i_bit2" *)
  wire \adder.gen_halfadder:10.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:10.ha o_carry" *)
  wire \adder.gen_halfadder:10.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:10.ha o_sum" *)
  wire \adder.gen_halfadder:10.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:11.ha i_bit1" *)
  wire \adder.gen_halfadder:11.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:11.ha i_bit2" *)
  wire \adder.gen_halfadder:11.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:11.ha o_carry" *)
  wire \adder.gen_halfadder:11.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:11.ha o_sum" *)
  wire \adder.gen_halfadder:11.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:12.ha i_bit1" *)
  wire \adder.gen_halfadder:12.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:12.ha i_bit2" *)
  wire \adder.gen_halfadder:12.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:12.ha o_carry" *)
  wire \adder.gen_halfadder:12.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:12.ha o_sum" *)
  wire \adder.gen_halfadder:12.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:13.ha i_bit1" *)
  wire \adder.gen_halfadder:13.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:13.ha i_bit2" *)
  wire \adder.gen_halfadder:13.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:13.ha o_carry" *)
  wire \adder.gen_halfadder:13.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:13.ha o_sum" *)
  wire \adder.gen_halfadder:13.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:14.ha i_bit1" *)
  wire \adder.gen_halfadder:14.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:14.ha i_bit2" *)
  wire \adder.gen_halfadder:14.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:14.ha o_carry" *)
  wire \adder.gen_halfadder:14.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:14.ha o_sum" *)
  wire \adder.gen_halfadder:14.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:15.ha i_bit1" *)
  wire \adder.gen_halfadder:15.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:15.ha i_bit2" *)
  wire \adder.gen_halfadder:15.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:15.ha o_carry" *)
  wire \adder.gen_halfadder:15.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:15.ha o_sum" *)
  wire \adder.gen_halfadder:15.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:16.ha i_bit1" *)
  wire \adder.gen_halfadder:16.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:16.ha i_bit2" *)
  wire \adder.gen_halfadder:16.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:16.ha o_carry" *)
  wire \adder.gen_halfadder:16.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:16.ha o_sum" *)
  wire \adder.gen_halfadder:16.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:17.ha i_bit1" *)
  wire \adder.gen_halfadder:17.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:17.ha i_bit2" *)
  wire \adder.gen_halfadder:17.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:17.ha o_carry" *)
  wire \adder.gen_halfadder:17.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:17.ha o_sum" *)
  wire \adder.gen_halfadder:17.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:18.ha i_bit1" *)
  wire \adder.gen_halfadder:18.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:18.ha i_bit2" *)
  wire \adder.gen_halfadder:18.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:18.ha o_carry" *)
  wire \adder.gen_halfadder:18.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:18.ha o_sum" *)
  wire \adder.gen_halfadder:18.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:19.ha i_bit1" *)
  wire \adder.gen_halfadder:19.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:19.ha i_bit2" *)
  wire \adder.gen_halfadder:19.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:19.ha o_carry" *)
  wire \adder.gen_halfadder:19.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:19.ha o_sum" *)
  wire \adder.gen_halfadder:19.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:2.ha i_bit1" *)
  wire \adder.gen_halfadder:2.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:2.ha i_bit2" *)
  wire \adder.gen_halfadder:2.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:2.ha o_carry" *)
  wire \adder.gen_halfadder:2.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:2.ha o_sum" *)
  wire \adder.gen_halfadder:2.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:20.ha i_bit1" *)
  wire \adder.gen_halfadder:20.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:20.ha i_bit2" *)
  wire \adder.gen_halfadder:20.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:20.ha o_carry" *)
  wire \adder.gen_halfadder:20.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:20.ha o_sum" *)
  wire \adder.gen_halfadder:20.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:21.ha i_bit1" *)
  wire \adder.gen_halfadder:21.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:21.ha i_bit2" *)
  wire \adder.gen_halfadder:21.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:21.ha o_carry" *)
  wire \adder.gen_halfadder:21.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:21.ha o_sum" *)
  wire \adder.gen_halfadder:21.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:22.ha i_bit1" *)
  wire \adder.gen_halfadder:22.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:22.ha i_bit2" *)
  wire \adder.gen_halfadder:22.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:22.ha o_carry" *)
  wire \adder.gen_halfadder:22.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:22.ha o_sum" *)
  wire \adder.gen_halfadder:22.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:23.ha i_bit1" *)
  wire \adder.gen_halfadder:23.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:23.ha i_bit2" *)
  wire \adder.gen_halfadder:23.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:23.ha o_carry" *)
  wire \adder.gen_halfadder:23.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:23.ha o_sum" *)
  wire \adder.gen_halfadder:23.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:24.ha i_bit1" *)
  wire \adder.gen_halfadder:24.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:24.ha i_bit2" *)
  wire \adder.gen_halfadder:24.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:24.ha o_carry" *)
  wire \adder.gen_halfadder:24.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:24.ha o_sum" *)
  wire \adder.gen_halfadder:24.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:25.ha i_bit1" *)
  wire \adder.gen_halfadder:25.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:25.ha i_bit2" *)
  wire \adder.gen_halfadder:25.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:25.ha o_carry" *)
  wire \adder.gen_halfadder:25.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:25.ha o_sum" *)
  wire \adder.gen_halfadder:25.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:26.ha i_bit1" *)
  wire \adder.gen_halfadder:26.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:26.ha i_bit2" *)
  wire \adder.gen_halfadder:26.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:26.ha o_carry" *)
  wire \adder.gen_halfadder:26.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:26.ha o_sum" *)
  wire \adder.gen_halfadder:26.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:27.ha i_bit1" *)
  wire \adder.gen_halfadder:27.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:27.ha i_bit2" *)
  wire \adder.gen_halfadder:27.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:27.ha o_carry" *)
  wire \adder.gen_halfadder:27.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:27.ha o_sum" *)
  wire \adder.gen_halfadder:27.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:28.ha i_bit1" *)
  wire \adder.gen_halfadder:28.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:28.ha i_bit2" *)
  wire \adder.gen_halfadder:28.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:28.ha o_carry" *)
  wire \adder.gen_halfadder:28.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:28.ha o_sum" *)
  wire \adder.gen_halfadder:28.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:29.ha i_bit1" *)
  wire \adder.gen_halfadder:29.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:29.ha i_bit2" *)
  wire \adder.gen_halfadder:29.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:29.ha o_carry" *)
  wire \adder.gen_halfadder:29.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:29.ha o_sum" *)
  wire \adder.gen_halfadder:29.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:3.ha i_bit1" *)
  wire \adder.gen_halfadder:3.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:3.ha i_bit2" *)
  wire \adder.gen_halfadder:3.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:3.ha o_carry" *)
  wire \adder.gen_halfadder:3.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:3.ha o_sum" *)
  wire \adder.gen_halfadder:3.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:30.ha i_bit1" *)
  wire \adder.gen_halfadder:30.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:30.ha i_bit2" *)
  wire \adder.gen_halfadder:30.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:30.ha o_carry" *)
  (* unused_bits = "0" *)
  wire \adder.gen_halfadder:30.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:30.ha o_sum" *)
  wire \adder.gen_halfadder:30.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:4.ha i_bit1" *)
  wire \adder.gen_halfadder:4.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:4.ha i_bit2" *)
  wire \adder.gen_halfadder:4.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:4.ha o_carry" *)
  wire \adder.gen_halfadder:4.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:4.ha o_sum" *)
  wire \adder.gen_halfadder:4.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:5.ha i_bit1" *)
  wire \adder.gen_halfadder:5.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:5.ha i_bit2" *)
  wire \adder.gen_halfadder:5.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:5.ha o_carry" *)
  wire \adder.gen_halfadder:5.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:5.ha o_sum" *)
  wire \adder.gen_halfadder:5.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:6.ha i_bit1" *)
  wire \adder.gen_halfadder:6.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:6.ha i_bit2" *)
  wire \adder.gen_halfadder:6.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:6.ha o_carry" *)
  wire \adder.gen_halfadder:6.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:6.ha o_sum" *)
  wire \adder.gen_halfadder:6.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:7.ha i_bit1" *)
  wire \adder.gen_halfadder:7.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:7.ha i_bit2" *)
  wire \adder.gen_halfadder:7.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:7.ha o_carry" *)
  wire \adder.gen_halfadder:7.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:7.ha o_sum" *)
  wire \adder.gen_halfadder:7.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:8.ha i_bit1" *)
  wire \adder.gen_halfadder:8.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:8.ha i_bit2" *)
  wire \adder.gen_halfadder:8.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:8.ha o_carry" *)
  wire \adder.gen_halfadder:8.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:8.ha o_sum" *)
  wire \adder.gen_halfadder:8.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:9.ha i_bit1" *)
  wire \adder.gen_halfadder:9.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:9.ha i_bit2" *)
  wire \adder.gen_halfadder:9.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:9.ha o_carry" *)
  wire \adder.gen_halfadder:9.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:9.ha o_sum" *)
  wire \adder.gen_halfadder:9.ha.o_sum ;
  (* hdlname = "adder sum" *)
  wire [31:0] \adder.sum ;
  input [31:0] addrin;
  wire [31:0] addrin;
  output [31:0] addrout;
  wire [31:0] addrout;
  (* hdlname = "addrreg clk" *)
  wire \addrreg.clk ;
  (* hdlname = "addrreg inreg" *)
  wire [31:0] \addrreg.inreg ;
  (* hdlname = "addrreg load" *)
  wire \addrreg.load ;
  (* hdlname = "addrreg outreg" *)
  wire [31:0] \addrreg.outreg ;
  (* hdlname = "addrreg rst" *)
  wire \addrreg.rst ;
  (* hdlname = "addrreg zero" *)
  wire \addrreg.zero ;
  wire [1:0] bytecnt;
  output bytestoread;
  wire bytestoread;
  wire bytestoread_temp;
  input checkmisaligneddaru;
  wire checkmisaligneddaru;
  input clk;
  wire clk;
  output cocnt;
  wire cocnt;
  (* hdlname = "counter clk" *)
  wire \counter.clk ;
  (* hdlname = "counter cocnt" *)
  wire \counter.cocnt ;
  (* hdlname = "counter cocntp" *)
  wire \counter.cocntp ;
  (* hdlname = "counter inccnt" *)
  wire \counter.inccnt ;
  (* hdlname = "counter initcnt" *)
  wire \counter.initcnt ;
  (* hdlname = "counter initvalue" *)
  wire \counter.initvalue ;
  (* hdlname = "counter outcnt" *)
  wire \counter.outcnt ;
  (* hdlname = "counter rst" *)
  wire \counter.rst ;
  (* hdlname = "counter temp" *)
  wire \counter.temp ;
  (* hdlname = "counter zerocnt" *)
  wire \counter.zerocnt ;
  wire [15:0] datain;
  input datainstrbar;
  wire datainstrbar;
  output [31:0] dataout;
  wire [31:0] dataout;
  wire [15:0] dataouthigh_reg;
  (* hdlname = "decoder en" *)
  wire \decoder.en ;
  (* hdlname = "decoder indecoder" *)
  wire [1:0] \decoder.indecoder ;
  (* hdlname = "decoder outdecoder" *)
  (* unused_bits = "2 3" *)
  wire [3:0] \decoder.outdecoder ;
  input enableaddr;
  wire enableaddr;
  input enabledata;
  wire enabledata;
  (* hdlname = "errordecoder addrin" *)
  wire [1:0] \errordecoder.addrin ;
  (* hdlname = "errordecoder checkmisaligneddaru" *)
  wire \errordecoder.checkmisaligneddaru ;
  (* hdlname = "errordecoder cmp_01" *)
  wire \errordecoder.cmp_01 ;
  (* hdlname = "errordecoder cmp_10" *)
  wire \errordecoder.cmp_10 ;
  (* hdlname = "errordecoder cmp_11" *)
  wire \errordecoder.cmp_11 ;
  (* hdlname = "errordecoder datainstrbar" *)
  wire \errordecoder.datainstrbar ;
  (* hdlname = "errordecoder instrmisalignedflag" *)
  wire \errordecoder.instrmisalignedflag ;
  (* hdlname = "errordecoder loadmisalignedflag" *)
  wire \errordecoder.loadmisalignedflag ;
  (* hdlname = "errordecoder misalignederrorp" *)
  wire \errordecoder.misalignederrorp ;
  (* hdlname = "errordecoder nbytes" *)
  wire [1:0] \errordecoder.nbytes ;
  input inccnt;
  wire inccnt;
  input initcnt;
  wire initcnt;
  input initreading;
  wire initreading;
  input [1:0] initvaluecnt;
  wire [1:0] initvaluecnt;
  output instrmisalignedflag;
  wire instrmisalignedflag;
  input ldaddr;
  wire ldaddr;
  input ldnumbytes;
  wire ldnumbytes;
  output loadmisalignedflag;
  wire loadmisalignedflag;
  input [15:0] memdata;
  wire [15:0] memdata;
  (* hdlname = "nbytereg clk" *)
  wire \nbytereg.clk ;
  (* hdlname = "nbytereg inreg" *)
  wire [1:0] \nbytereg.inreg ;
  (* hdlname = "nbytereg load" *)
  wire \nbytereg.load ;
  (* hdlname = "nbytereg outreg" *)
  wire [1:0] \nbytereg.outreg ;
  (* hdlname = "nbytereg rst" *)
  wire \nbytereg.rst ;
  (* hdlname = "nbytereg zero" *)
  wire \nbytereg.zero ;
  input [1:0] nbytes;
  wire [1:0] nbytes;
  wire [1:0] nbytesout;
  wire outcnt;
  wire [1:0] outcnt_ext;
  (* unused_bits = "2 3" *)
  wire [3:0] outdecoder;
  wire [31:0] readaddr;
  output [31:0] readaddrout;
  wire [31:0] readaddrout;
  wire [31:0] readaddrp;
  (* hdlname = "reg0 clk" *)
  wire \reg0.clk ;
  (* hdlname = "reg0 inreg" *)
  wire [15:0] \reg0.inreg ;
  (* hdlname = "reg0 load" *)
  wire \reg0.load ;
  (* hdlname = "reg0 outreg" *)
  wire [15:0] \reg0.outreg ;
  (* hdlname = "reg0 rst" *)
  wire \reg0.rst ;
  (* hdlname = "reg0 zero" *)
  wire \reg0.zero ;
  (* hdlname = "reg1 clk" *)
  wire \reg1.clk ;
  (* hdlname = "reg1 inreg" *)
  wire [15:0] \reg1.inreg ;
  (* hdlname = "reg1 load" *)
  wire \reg1.load ;
  (* hdlname = "reg1 outreg" *)
  wire [15:0] \reg1.outreg ;
  (* hdlname = "reg1 rst" *)
  wire \reg1.rst ;
  (* hdlname = "reg1 zero" *)
  wire \reg1.zero ;
  input rst;
  wire rst;
  input select_incoming_data;
  wire select_incoming_data;
  input sellden;
  wire sellden;
  input zeroaddr;
  wire zeroaddr;
  input zerocnt;
  wire zerocnt;
  input zeronumbytes;
  wire zeronumbytes;
  assign \addrreg.outreg  = rst ? 32'd0 : _02_;
  always @(posedge clk)
    if (rst) _02_ <= 32'd0;
    else _02_ <= _03_;
  assign \adder.fa2.b  = rst ? 1'h0 : _04_;
  always @(posedge clk)
    if (_10_) _04_ <= 1'h0;
    else _04_ <= _09_;
  assign _10_ = | { zerocnt, rst };
  assign \nbytereg.outreg  = rst ? 2'h0 : _23_;
  always @(posedge clk)
    if (_25_) _23_ <= 2'h0;
    else _23_ <= _24_;
  assign _25_ = | { zeronumbytes, rst };
  assign \reg0.outreg  = rst ? 16'h0000 : _26_;
  always @(posedge clk)
    if (_28_) _26_ <= 16'h0000;
    else _26_ <= _27_;
  assign _28_ = | { initreading, rst };
  assign dataouthigh_reg = rst ? 16'h0000 : _29_;
  always @(posedge clk)
    if (_28_) _29_ <= 16'h0000;
    else _29_ <= _30_;
  assign _00_ = ! \nbytereg.outreg ;
  assign bytestoread_temp = _00_ ? 1'h0 : 1'h1;
  assign dataout[31:16] = select_incoming_data ? datain : dataouthigh_reg;
  assign _01_ = \adder.fa2.b  == bytestoread_temp;
  assign cocnt = _01_ ? 1'h1 : 1'h0;
  assign datain = enabledata ? memdata : 16'bz;
  assign addrout = enableaddr ? { \adder.gen_halfadder:30.ha.o_sum , \adder.gen_halfadder:29.ha.o_sum , \adder.gen_halfadder:28.ha.o_sum , \adder.gen_halfadder:27.ha.o_sum , \adder.gen_halfadder:26.ha.o_sum , \adder.gen_halfadder:25.ha.o_sum , \adder.gen_halfadder:24.ha.o_sum , \adder.gen_halfadder:23.ha.o_sum , \adder.gen_halfadder:22.ha.o_sum , \adder.gen_halfadder:21.ha.o_sum , \adder.gen_halfadder:20.ha.o_sum , \adder.gen_halfadder:19.ha.o_sum , \adder.gen_halfadder:18.ha.o_sum , \adder.gen_halfadder:17.ha.o_sum , \adder.gen_halfadder:16.ha.o_sum , \adder.gen_halfadder:15.ha.o_sum , \adder.gen_halfadder:14.ha.o_sum , \adder.gen_halfadder:13.ha.o_sum , \adder.gen_halfadder:12.ha.o_sum , \adder.gen_halfadder:11.ha.o_sum , \adder.gen_halfadder:10.ha.o_sum , \adder.gen_halfadder:9.ha.o_sum , \adder.gen_halfadder:8.ha.o_sum , \adder.gen_halfadder:7.ha.o_sum , \adder.gen_halfadder:6.ha.o_sum , \adder.gen_halfadder:5.ha.o_sum , \adder.gen_halfadder:4.ha.o_sum , \adder.gen_halfadder:3.ha.o_sum , \adder.gen_halfadder:2.ha.o_sum , \adder.gen_halfadder:1.ha.o_sum , \adder.fa2.s , \addrreg.outreg [0] } : 32'bz;
  assign \adder.fa2.s  = \addrreg.outreg [1] ^ (* hdlname = "adder fa2 6569" *) \adder.fa2.b ;
  assign \adder.gen_halfadder:1.ha.i_bit2  = \addrreg.outreg [1] & (* hdlname = "adder fa2 6571" *) \adder.fa2.b ;
  assign \adder.gen_halfadder:1.ha.o_sum  = \addrreg.outreg [2] ^ (* hdlname = "adder gen_halfadder:1.ha 6578" *) \adder.gen_halfadder:1.ha.i_bit2 ;
  assign \adder.gen_halfadder:1.ha.o_carry  = \addrreg.outreg [2] & (* hdlname = "adder gen_halfadder:1.ha 6579" *) \adder.gen_halfadder:1.ha.i_bit2 ;
  assign \adder.gen_halfadder:10.ha.o_sum  = \addrreg.outreg [11] ^ (* hdlname = "adder gen_halfadder:10.ha 6578" *) \adder.gen_halfadder:10.ha.i_bit2 ;
  assign \adder.gen_halfadder:10.ha.o_carry  = \addrreg.outreg [11] & (* hdlname = "adder gen_halfadder:10.ha 6579" *) \adder.gen_halfadder:10.ha.i_bit2 ;
  assign \adder.gen_halfadder:11.ha.o_sum  = \addrreg.outreg [12] ^ (* hdlname = "adder gen_halfadder:11.ha 6578" *) \adder.gen_halfadder:10.ha.o_carry ;
  assign \adder.gen_halfadder:11.ha.o_carry  = \addrreg.outreg [12] & (* hdlname = "adder gen_halfadder:11.ha 6579" *) \adder.gen_halfadder:10.ha.o_carry ;
  assign \adder.gen_halfadder:12.ha.o_sum  = \addrreg.outreg [13] ^ (* hdlname = "adder gen_halfadder:12.ha 6578" *) \adder.gen_halfadder:11.ha.o_carry ;
  assign \adder.gen_halfadder:12.ha.o_carry  = \addrreg.outreg [13] & (* hdlname = "adder gen_halfadder:12.ha 6579" *) \adder.gen_halfadder:11.ha.o_carry ;
  assign \adder.gen_halfadder:13.ha.o_sum  = \addrreg.outreg [14] ^ (* hdlname = "adder gen_halfadder:13.ha 6578" *) \adder.gen_halfadder:12.ha.o_carry ;
  assign \adder.gen_halfadder:13.ha.o_carry  = \addrreg.outreg [14] & (* hdlname = "adder gen_halfadder:13.ha 6579" *) \adder.gen_halfadder:12.ha.o_carry ;
  assign \adder.gen_halfadder:14.ha.o_sum  = \addrreg.outreg [15] ^ (* hdlname = "adder gen_halfadder:14.ha 6578" *) \adder.gen_halfadder:13.ha.o_carry ;
  assign \adder.gen_halfadder:14.ha.o_carry  = \addrreg.outreg [15] & (* hdlname = "adder gen_halfadder:14.ha 6579" *) \adder.gen_halfadder:13.ha.o_carry ;
  assign \adder.gen_halfadder:15.ha.o_sum  = \addrreg.outreg [16] ^ (* hdlname = "adder gen_halfadder:15.ha 6578" *) \adder.gen_halfadder:14.ha.o_carry ;
  assign \adder.gen_halfadder:15.ha.o_carry  = \addrreg.outreg [16] & (* hdlname = "adder gen_halfadder:15.ha 6579" *) \adder.gen_halfadder:14.ha.o_carry ;
  assign \adder.gen_halfadder:16.ha.o_sum  = \addrreg.outreg [17] ^ (* hdlname = "adder gen_halfadder:16.ha 6578" *) \adder.gen_halfadder:15.ha.o_carry ;
  assign \adder.gen_halfadder:16.ha.o_carry  = \addrreg.outreg [17] & (* hdlname = "adder gen_halfadder:16.ha 6579" *) \adder.gen_halfadder:15.ha.o_carry ;
  assign \adder.gen_halfadder:17.ha.o_sum  = \addrreg.outreg [18] ^ (* hdlname = "adder gen_halfadder:17.ha 6578" *) \adder.gen_halfadder:16.ha.o_carry ;
  assign \adder.gen_halfadder:17.ha.o_carry  = \addrreg.outreg [18] & (* hdlname = "adder gen_halfadder:17.ha 6579" *) \adder.gen_halfadder:16.ha.o_carry ;
  assign \adder.gen_halfadder:18.ha.o_sum  = \addrreg.outreg [19] ^ (* hdlname = "adder gen_halfadder:18.ha 6578" *) \adder.gen_halfadder:17.ha.o_carry ;
  assign \adder.gen_halfadder:18.ha.o_carry  = \addrreg.outreg [19] & (* hdlname = "adder gen_halfadder:18.ha 6579" *) \adder.gen_halfadder:17.ha.o_carry ;
  assign \adder.gen_halfadder:19.ha.o_sum  = \addrreg.outreg [20] ^ (* hdlname = "adder gen_halfadder:19.ha 6578" *) \adder.gen_halfadder:18.ha.o_carry ;
  assign \adder.gen_halfadder:19.ha.o_carry  = \addrreg.outreg [20] & (* hdlname = "adder gen_halfadder:19.ha 6579" *) \adder.gen_halfadder:18.ha.o_carry ;
  assign \adder.gen_halfadder:2.ha.o_sum  = \addrreg.outreg [3] ^ (* hdlname = "adder gen_halfadder:2.ha 6578" *) \adder.gen_halfadder:1.ha.o_carry ;
  assign \adder.gen_halfadder:2.ha.o_carry  = \addrreg.outreg [3] & (* hdlname = "adder gen_halfadder:2.ha 6579" *) \adder.gen_halfadder:1.ha.o_carry ;
  assign \adder.gen_halfadder:20.ha.o_sum  = \addrreg.outreg [21] ^ (* hdlname = "adder gen_halfadder:20.ha 6578" *) \adder.gen_halfadder:19.ha.o_carry ;
  assign \adder.gen_halfadder:20.ha.o_carry  = \addrreg.outreg [21] & (* hdlname = "adder gen_halfadder:20.ha 6579" *) \adder.gen_halfadder:19.ha.o_carry ;
  assign \adder.gen_halfadder:21.ha.o_sum  = \addrreg.outreg [22] ^ (* hdlname = "adder gen_halfadder:21.ha 6578" *) \adder.gen_halfadder:20.ha.o_carry ;
  assign \adder.gen_halfadder:21.ha.o_carry  = \addrreg.outreg [22] & (* hdlname = "adder gen_halfadder:21.ha 6579" *) \adder.gen_halfadder:20.ha.o_carry ;
  assign \adder.gen_halfadder:22.ha.o_sum  = \addrreg.outreg [23] ^ (* hdlname = "adder gen_halfadder:22.ha 6578" *) \adder.gen_halfadder:21.ha.o_carry ;
  assign \adder.gen_halfadder:22.ha.o_carry  = \addrreg.outreg [23] & (* hdlname = "adder gen_halfadder:22.ha 6579" *) \adder.gen_halfadder:21.ha.o_carry ;
  assign \adder.gen_halfadder:23.ha.o_sum  = \addrreg.outreg [24] ^ (* hdlname = "adder gen_halfadder:23.ha 6578" *) \adder.gen_halfadder:22.ha.o_carry ;
  assign \adder.gen_halfadder:23.ha.o_carry  = \addrreg.outreg [24] & (* hdlname = "adder gen_halfadder:23.ha 6579" *) \adder.gen_halfadder:22.ha.o_carry ;
  assign \adder.gen_halfadder:24.ha.o_sum  = \addrreg.outreg [25] ^ (* hdlname = "adder gen_halfadder:24.ha 6578" *) \adder.gen_halfadder:23.ha.o_carry ;
  assign \adder.gen_halfadder:24.ha.o_carry  = \addrreg.outreg [25] & (* hdlname = "adder gen_halfadder:24.ha 6579" *) \adder.gen_halfadder:23.ha.o_carry ;
  assign \adder.gen_halfadder:25.ha.o_sum  = \addrreg.outreg [26] ^ (* hdlname = "adder gen_halfadder:25.ha 6578" *) \adder.gen_halfadder:24.ha.o_carry ;
  assign \adder.gen_halfadder:25.ha.o_carry  = \addrreg.outreg [26] & (* hdlname = "adder gen_halfadder:25.ha 6579" *) \adder.gen_halfadder:24.ha.o_carry ;
  assign \adder.gen_halfadder:26.ha.o_sum  = \addrreg.outreg [27] ^ (* hdlname = "adder gen_halfadder:26.ha 6578" *) \adder.gen_halfadder:25.ha.o_carry ;
  assign \adder.gen_halfadder:26.ha.o_carry  = \addrreg.outreg [27] & (* hdlname = "adder gen_halfadder:26.ha 6579" *) \adder.gen_halfadder:25.ha.o_carry ;
  assign \adder.gen_halfadder:27.ha.o_sum  = \addrreg.outreg [28] ^ (* hdlname = "adder gen_halfadder:27.ha 6578" *) \adder.gen_halfadder:26.ha.o_carry ;
  assign \adder.gen_halfadder:27.ha.o_carry  = \addrreg.outreg [28] & (* hdlname = "adder gen_halfadder:27.ha 6579" *) \adder.gen_halfadder:26.ha.o_carry ;
  assign \adder.gen_halfadder:28.ha.o_sum  = \addrreg.outreg [29] ^ (* hdlname = "adder gen_halfadder:28.ha 6578" *) \adder.gen_halfadder:27.ha.o_carry ;
  assign \adder.gen_halfadder:28.ha.o_carry  = \addrreg.outreg [29] & (* hdlname = "adder gen_halfadder:28.ha 6579" *) \adder.gen_halfadder:27.ha.o_carry ;
  assign \adder.gen_halfadder:29.ha.o_sum  = \addrreg.outreg [30] ^ (* hdlname = "adder gen_halfadder:29.ha 6578" *) \adder.gen_halfadder:28.ha.o_carry ;
  assign \adder.gen_halfadder:29.ha.o_carry  = \addrreg.outreg [30] & (* hdlname = "adder gen_halfadder:29.ha 6579" *) \adder.gen_halfadder:28.ha.o_carry ;
  assign \adder.gen_halfadder:3.ha.o_sum  = \addrreg.outreg [4] ^ (* hdlname = "adder gen_halfadder:3.ha 6578" *) \adder.gen_halfadder:2.ha.o_carry ;
  assign \adder.gen_halfadder:3.ha.o_carry  = \addrreg.outreg [4] & (* hdlname = "adder gen_halfadder:3.ha 6579" *) \adder.gen_halfadder:2.ha.o_carry ;
  assign \adder.gen_halfadder:30.ha.o_sum  = \addrreg.outreg [31] ^ (* hdlname = "adder gen_halfadder:30.ha 6578" *) \adder.gen_halfadder:29.ha.o_carry ;
  assign \adder.gen_halfadder:4.ha.o_sum  = \addrreg.outreg [5] ^ (* hdlname = "adder gen_halfadder:4.ha 6578" *) \adder.gen_halfadder:3.ha.o_carry ;
  assign \adder.gen_halfadder:4.ha.o_carry  = \addrreg.outreg [5] & (* hdlname = "adder gen_halfadder:4.ha 6579" *) \adder.gen_halfadder:3.ha.o_carry ;
  assign \adder.gen_halfadder:5.ha.o_sum  = \addrreg.outreg [6] ^ (* hdlname = "adder gen_halfadder:5.ha 6578" *) \adder.gen_halfadder:4.ha.o_carry ;
  assign \adder.gen_halfadder:5.ha.o_carry  = \addrreg.outreg [6] & (* hdlname = "adder gen_halfadder:5.ha 6579" *) \adder.gen_halfadder:4.ha.o_carry ;
  assign \adder.gen_halfadder:6.ha.o_sum  = \addrreg.outreg [7] ^ (* hdlname = "adder gen_halfadder:6.ha 6578" *) \adder.gen_halfadder:5.ha.o_carry ;
  assign \adder.gen_halfadder:6.ha.o_carry  = \addrreg.outreg [7] & (* hdlname = "adder gen_halfadder:6.ha 6579" *) \adder.gen_halfadder:5.ha.o_carry ;
  assign \adder.gen_halfadder:7.ha.o_sum  = \addrreg.outreg [8] ^ (* hdlname = "adder gen_halfadder:7.ha 6578" *) \adder.gen_halfadder:6.ha.o_carry ;
  assign \adder.gen_halfadder:7.ha.o_carry  = \addrreg.outreg [8] & (* hdlname = "adder gen_halfadder:7.ha 6579" *) \adder.gen_halfadder:6.ha.o_carry ;
  assign \adder.gen_halfadder:8.ha.o_sum  = \addrreg.outreg [9] ^ (* hdlname = "adder gen_halfadder:8.ha 6578" *) \adder.gen_halfadder:7.ha.o_carry ;
  assign \adder.gen_halfadder:8.ha.o_carry  = \addrreg.outreg [9] & (* hdlname = "adder gen_halfadder:8.ha 6579" *) \adder.gen_halfadder:7.ha.o_carry ;
  assign \adder.gen_halfadder:9.ha.o_sum  = \addrreg.outreg [10] ^ (* hdlname = "adder gen_halfadder:9.ha 6578" *) \adder.gen_halfadder:8.ha.o_carry ;
  assign \adder.gen_halfadder:10.ha.i_bit2  = \addrreg.outreg [10] & (* hdlname = "adder gen_halfadder:9.ha 6579" *) \adder.gen_halfadder:8.ha.o_carry ;
  assign _03_ = ldaddr ? (* hdlname = "addrreg 4067" *) addrin : \addrreg.outreg ;
  assign _05_ = ~ (* hdlname = "counter 6168" *) \counter.cocntp ;
  assign _06_ = _05_ & (* hdlname = "counter 6169" *) inccnt;
  assign _07_ = \adder.fa2.b  + (* hdlname = "counter 6171" *) 1'h1;
  assign _08_ = _06_ ? (* hdlname = "counter 6172" *) _07_ : \adder.fa2.b ;
  assign _09_ = initcnt ? (* hdlname = "counter 6173" *) initvaluecnt[0] : _08_;
  assign \counter.cocntp  = \adder.fa2.b  ? (* hdlname = "counter 6183" *) 1'h1 : 1'h0;
  assign _11_ = ! (* hdlname = "decoder 6134" *) { 1'h0, \adder.fa2.b  };
  function [3:0] \decoder.6147 ;
    input [3:0] a;
    input [7:0] b;
    input [1:0] s;
    (* hdlname = "decoder 6147" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \decoder.6147  = b[3:0];
      2'b1?:
        \decoder.6147  = b[7:4];
      default:
        \decoder.6147  = a;
    endcase
  endfunction
  assign _12_ = \decoder.6147 (4'h0, 8'h21, { \adder.fa2.b , _11_ });
  assign \decoder.outdecoder  = sellden ? (* hdlname = "decoder 6149" *) _12_ : 4'h0;
  assign _13_ = \addrreg.outreg [1:0] == (* hdlname = "errordecoder 6336" *) 2'h1;
  assign \errordecoder.cmp_01  = _13_ ? (* hdlname = "errordecoder 6337" *) 1'h1 : 1'h0;
  assign _14_ = \addrreg.outreg [1:0] == (* hdlname = "errordecoder 6341" *) 2'h2;
  assign \errordecoder.cmp_10  = _14_ ? (* hdlname = "errordecoder 6342" *) 1'h1 : 1'h0;
  assign _15_ = \addrreg.outreg [1:0] == (* hdlname = "errordecoder 6346" *) 2'h3;
  assign \errordecoder.cmp_11  = _15_ ? (* hdlname = "errordecoder 6347" *) 1'h1 : 1'h0;
  assign _16_ = \errordecoder.cmp_01  | (* hdlname = "errordecoder 6349" *) \errordecoder.cmp_11 ;
  assign _17_ = nbytes == (* hdlname = "errordecoder 6351" *) 2'h1;
  assign \errordecoder.misalignederrorp  = _17_ ? (* hdlname = "errordecoder 6352" *) _16_ : _21_;
  assign _18_ = \errordecoder.cmp_01  | (* hdlname = "errordecoder 6353" *) \errordecoder.cmp_10 ;
  assign _19_ = _18_ | (* hdlname = "errordecoder 6354" *) \errordecoder.cmp_11 ;
  assign _20_ = nbytes == (* hdlname = "errordecoder 6356" *) 2'h3;
  assign _21_ = _20_ ? (* hdlname = "errordecoder 6357" *) _19_ : 1'h0;
  assign \errordecoder.loadmisalignedflag  = datainstrbar ? (* hdlname = "errordecoder 6360" *) _22_ : 1'h0;
  assign _22_ = \errordecoder.misalignederrorp  & (* hdlname = "errordecoder 6362" *) checkmisaligneddaru;
  assign \errordecoder.instrmisalignedflag  = datainstrbar ? (* hdlname = "errordecoder 6364" *) 1'h0 : _22_;
  assign _24_ = ldnumbytes ? (* hdlname = "nbytereg 6155" *) nbytes : \nbytereg.outreg ;
  assign _27_ = \decoder.outdecoder [0] ? (* hdlname = "reg0 6190" *) datain : \reg0.outreg ;
  assign _30_ = \decoder.outdecoder [1] ? (* hdlname = "reg1 6190" *) datain : dataouthigh_reg;
  assign \adder.a  = \addrreg.outreg ;
  assign \adder.b  = { \adder.fa2.b , 1'h0 };
  assign \adder.cout [30:0] = { \adder.gen_halfadder:29.ha.o_carry , \adder.gen_halfadder:28.ha.o_carry , \adder.gen_halfadder:27.ha.o_carry , \adder.gen_halfadder:26.ha.o_carry , \adder.gen_halfadder:25.ha.o_carry , \adder.gen_halfadder:24.ha.o_carry , \adder.gen_halfadder:23.ha.o_carry , \adder.gen_halfadder:22.ha.o_carry , \adder.gen_halfadder:21.ha.o_carry , \adder.gen_halfadder:20.ha.o_carry , \adder.gen_halfadder:19.ha.o_carry , \adder.gen_halfadder:18.ha.o_carry , \adder.gen_halfadder:17.ha.o_carry , \adder.gen_halfadder:16.ha.o_carry , \adder.gen_halfadder:15.ha.o_carry , \adder.gen_halfadder:14.ha.o_carry , \adder.gen_halfadder:13.ha.o_carry , \adder.gen_halfadder:12.ha.o_carry , \adder.gen_halfadder:11.ha.o_carry , \adder.gen_halfadder:10.ha.o_carry , \adder.gen_halfadder:10.ha.i_bit2 , \adder.gen_halfadder:8.ha.o_carry , \adder.gen_halfadder:7.ha.o_carry , \adder.gen_halfadder:6.ha.o_carry , \adder.gen_halfadder:5.ha.o_carry , \adder.gen_halfadder:4.ha.o_carry , \adder.gen_halfadder:3.ha.o_carry , \adder.gen_halfadder:2.ha.o_carry , \adder.gen_halfadder:1.ha.o_carry , \adder.gen_halfadder:1.ha.i_bit2 , 1'h0 };
  assign \adder.fa1.a  = \addrreg.outreg [0];
  assign \adder.fa1.b  = 1'h0;
  assign \adder.fa1.cin  = 1'h0;
  assign \adder.fa1.cout  = 1'h0;
  assign \adder.fa1.s  = \addrreg.outreg [0];
  assign \adder.fa2.a  = \addrreg.outreg [1];
  assign \adder.fa2.cin  = 1'h0;
  assign \adder.fa2.cout  = \adder.gen_halfadder:1.ha.i_bit2 ;
  assign \adder.gen_halfadder:1.ha.i_bit1  = \addrreg.outreg [2];
  assign \adder.gen_halfadder:10.ha.i_bit1  = \addrreg.outreg [11];
  assign \adder.gen_halfadder:11.ha.i_bit1  = \addrreg.outreg [12];
  assign \adder.gen_halfadder:11.ha.i_bit2  = \adder.gen_halfadder:10.ha.o_carry ;
  assign \adder.gen_halfadder:12.ha.i_bit1  = \addrreg.outreg [13];
  assign \adder.gen_halfadder:12.ha.i_bit2  = \adder.gen_halfadder:11.ha.o_carry ;
  assign \adder.gen_halfadder:13.ha.i_bit1  = \addrreg.outreg [14];
  assign \adder.gen_halfadder:13.ha.i_bit2  = \adder.gen_halfadder:12.ha.o_carry ;
  assign \adder.gen_halfadder:14.ha.i_bit1  = \addrreg.outreg [15];
  assign \adder.gen_halfadder:14.ha.i_bit2  = \adder.gen_halfadder:13.ha.o_carry ;
  assign \adder.gen_halfadder:15.ha.i_bit1  = \addrreg.outreg [16];
  assign \adder.gen_halfadder:15.ha.i_bit2  = \adder.gen_halfadder:14.ha.o_carry ;
  assign \adder.gen_halfadder:16.ha.i_bit1  = \addrreg.outreg [17];
  assign \adder.gen_halfadder:16.ha.i_bit2  = \adder.gen_halfadder:15.ha.o_carry ;
  assign \adder.gen_halfadder:17.ha.i_bit1  = \addrreg.outreg [18];
  assign \adder.gen_halfadder:17.ha.i_bit2  = \adder.gen_halfadder:16.ha.o_carry ;
  assign \adder.gen_halfadder:18.ha.i_bit1  = \addrreg.outreg [19];
  assign \adder.gen_halfadder:18.ha.i_bit2  = \adder.gen_halfadder:17.ha.o_carry ;
  assign \adder.gen_halfadder:19.ha.i_bit1  = \addrreg.outreg [20];
  assign \adder.gen_halfadder:19.ha.i_bit2  = \adder.gen_halfadder:18.ha.o_carry ;
  assign \adder.gen_halfadder:2.ha.i_bit1  = \addrreg.outreg [3];
  assign \adder.gen_halfadder:2.ha.i_bit2  = \adder.gen_halfadder:1.ha.o_carry ;
  assign \adder.gen_halfadder:20.ha.i_bit1  = \addrreg.outreg [21];
  assign \adder.gen_halfadder:20.ha.i_bit2  = \adder.gen_halfadder:19.ha.o_carry ;
  assign \adder.gen_halfadder:21.ha.i_bit1  = \addrreg.outreg [22];
  assign \adder.gen_halfadder:21.ha.i_bit2  = \adder.gen_halfadder:20.ha.o_carry ;
  assign \adder.gen_halfadder:22.ha.i_bit1  = \addrreg.outreg [23];
  assign \adder.gen_halfadder:22.ha.i_bit2  = \adder.gen_halfadder:21.ha.o_carry ;
  assign \adder.gen_halfadder:23.ha.i_bit1  = \addrreg.outreg [24];
  assign \adder.gen_halfadder:23.ha.i_bit2  = \adder.gen_halfadder:22.ha.o_carry ;
  assign \adder.gen_halfadder:24.ha.i_bit1  = \addrreg.outreg [25];
  assign \adder.gen_halfadder:24.ha.i_bit2  = \adder.gen_halfadder:23.ha.o_carry ;
  assign \adder.gen_halfadder:25.ha.i_bit1  = \addrreg.outreg [26];
  assign \adder.gen_halfadder:25.ha.i_bit2  = \adder.gen_halfadder:24.ha.o_carry ;
  assign \adder.gen_halfadder:26.ha.i_bit1  = \addrreg.outreg [27];
  assign \adder.gen_halfadder:26.ha.i_bit2  = \adder.gen_halfadder:25.ha.o_carry ;
  assign \adder.gen_halfadder:27.ha.i_bit1  = \addrreg.outreg [28];
  assign \adder.gen_halfadder:27.ha.i_bit2  = \adder.gen_halfadder:26.ha.o_carry ;
  assign \adder.gen_halfadder:28.ha.i_bit1  = \addrreg.outreg [29];
  assign \adder.gen_halfadder:28.ha.i_bit2  = \adder.gen_halfadder:27.ha.o_carry ;
  assign \adder.gen_halfadder:29.ha.i_bit1  = \addrreg.outreg [30];
  assign \adder.gen_halfadder:29.ha.i_bit2  = \adder.gen_halfadder:28.ha.o_carry ;
  assign \adder.gen_halfadder:3.ha.i_bit1  = \addrreg.outreg [4];
  assign \adder.gen_halfadder:3.ha.i_bit2  = \adder.gen_halfadder:2.ha.o_carry ;
  assign \adder.gen_halfadder:30.ha.i_bit1  = \addrreg.outreg [31];
  assign \adder.gen_halfadder:30.ha.i_bit2  = \adder.gen_halfadder:29.ha.o_carry ;
  assign \adder.gen_halfadder:30.ha.o_carry  = \adder.cout [31];
  assign \adder.gen_halfadder:4.ha.i_bit1  = \addrreg.outreg [5];
  assign \adder.gen_halfadder:4.ha.i_bit2  = \adder.gen_halfadder:3.ha.o_carry ;
  assign \adder.gen_halfadder:5.ha.i_bit1  = \addrreg.outreg [6];
  assign \adder.gen_halfadder:5.ha.i_bit2  = \adder.gen_halfadder:4.ha.o_carry ;
  assign \adder.gen_halfadder:6.ha.i_bit1  = \addrreg.outreg [7];
  assign \adder.gen_halfadder:6.ha.i_bit2  = \adder.gen_halfadder:5.ha.o_carry ;
  assign \adder.gen_halfadder:7.ha.i_bit1  = \addrreg.outreg [8];
  assign \adder.gen_halfadder:7.ha.i_bit2  = \adder.gen_halfadder:6.ha.o_carry ;
  assign \adder.gen_halfadder:8.ha.i_bit1  = \addrreg.outreg [9];
  assign \adder.gen_halfadder:8.ha.i_bit2  = \adder.gen_halfadder:7.ha.o_carry ;
  assign \adder.gen_halfadder:9.ha.i_bit1  = \addrreg.outreg [10];
  assign \adder.gen_halfadder:9.ha.i_bit2  = \adder.gen_halfadder:8.ha.o_carry ;
  assign \adder.gen_halfadder:9.ha.o_carry  = \adder.gen_halfadder:10.ha.i_bit2 ;
  assign \adder.sum  = { \adder.gen_halfadder:30.ha.o_sum , \adder.gen_halfadder:29.ha.o_sum , \adder.gen_halfadder:28.ha.o_sum , \adder.gen_halfadder:27.ha.o_sum , \adder.gen_halfadder:26.ha.o_sum , \adder.gen_halfadder:25.ha.o_sum , \adder.gen_halfadder:24.ha.o_sum , \adder.gen_halfadder:23.ha.o_sum , \adder.gen_halfadder:22.ha.o_sum , \adder.gen_halfadder:21.ha.o_sum , \adder.gen_halfadder:20.ha.o_sum , \adder.gen_halfadder:19.ha.o_sum , \adder.gen_halfadder:18.ha.o_sum , \adder.gen_halfadder:17.ha.o_sum , \adder.gen_halfadder:16.ha.o_sum , \adder.gen_halfadder:15.ha.o_sum , \adder.gen_halfadder:14.ha.o_sum , \adder.gen_halfadder:13.ha.o_sum , \adder.gen_halfadder:12.ha.o_sum , \adder.gen_halfadder:11.ha.o_sum , \adder.gen_halfadder:10.ha.o_sum , \adder.gen_halfadder:9.ha.o_sum , \adder.gen_halfadder:8.ha.o_sum , \adder.gen_halfadder:7.ha.o_sum , \adder.gen_halfadder:6.ha.o_sum , \adder.gen_halfadder:5.ha.o_sum , \adder.gen_halfadder:4.ha.o_sum , \adder.gen_halfadder:3.ha.o_sum , \adder.gen_halfadder:2.ha.o_sum , \adder.gen_halfadder:1.ha.o_sum , \adder.fa2.s , \addrreg.outreg [0] };
  assign \addrreg.clk  = clk;
  assign \addrreg.inreg  = addrin;
  assign \addrreg.load  = ldaddr;
  assign \addrreg.rst  = rst;
  assign \addrreg.zero  = 1'h0;
  assign bytecnt = { \adder.fa2.b , 1'h0 };
  assign bytestoread = bytestoread_temp;
  assign \counter.clk  = clk;
  assign \counter.cocnt  = \counter.cocntp ;
  assign \counter.inccnt  = inccnt;
  assign \counter.initcnt  = initcnt;
  assign \counter.initvalue  = initvaluecnt[0];
  assign \counter.outcnt  = \adder.fa2.b ;
  assign \counter.rst  = rst;
  assign \counter.temp  = \adder.fa2.b ;
  assign \counter.zerocnt  = zerocnt;
  assign dataout[15:0] = \reg0.outreg ;
  assign \decoder.en  = sellden;
  assign \decoder.indecoder  = { 1'h0, \adder.fa2.b  };
  assign \errordecoder.addrin  = \addrreg.outreg [1:0];
  assign \errordecoder.checkmisaligneddaru  = checkmisaligneddaru;
  assign \errordecoder.datainstrbar  = datainstrbar;
  assign \errordecoder.nbytes  = nbytes;
  assign instrmisalignedflag = \errordecoder.instrmisalignedflag ;
  assign loadmisalignedflag = \errordecoder.loadmisalignedflag ;
  assign \nbytereg.clk  = clk;
  assign \nbytereg.inreg  = nbytes;
  assign \nbytereg.load  = ldnumbytes;
  assign \nbytereg.rst  = rst;
  assign \nbytereg.zero  = zeronumbytes;
  assign nbytesout = \nbytereg.outreg ;
  assign outcnt = \adder.fa2.b ;
  assign outcnt_ext = { 1'h0, \adder.fa2.b  };
  assign outdecoder = \decoder.outdecoder ;
  assign readaddr = \addrreg.outreg ;
  assign readaddrout = \addrreg.outreg ;
  assign readaddrp = { \adder.gen_halfadder:30.ha.o_sum , \adder.gen_halfadder:29.ha.o_sum , \adder.gen_halfadder:28.ha.o_sum , \adder.gen_halfadder:27.ha.o_sum , \adder.gen_halfadder:26.ha.o_sum , \adder.gen_halfadder:25.ha.o_sum , \adder.gen_halfadder:24.ha.o_sum , \adder.gen_halfadder:23.ha.o_sum , \adder.gen_halfadder:22.ha.o_sum , \adder.gen_halfadder:21.ha.o_sum , \adder.gen_halfadder:20.ha.o_sum , \adder.gen_halfadder:19.ha.o_sum , \adder.gen_halfadder:18.ha.o_sum , \adder.gen_halfadder:17.ha.o_sum , \adder.gen_halfadder:16.ha.o_sum , \adder.gen_halfadder:15.ha.o_sum , \adder.gen_halfadder:14.ha.o_sum , \adder.gen_halfadder:13.ha.o_sum , \adder.gen_halfadder:12.ha.o_sum , \adder.gen_halfadder:11.ha.o_sum , \adder.gen_halfadder:10.ha.o_sum , \adder.gen_halfadder:9.ha.o_sum , \adder.gen_halfadder:8.ha.o_sum , \adder.gen_halfadder:7.ha.o_sum , \adder.gen_halfadder:6.ha.o_sum , \adder.gen_halfadder:5.ha.o_sum , \adder.gen_halfadder:4.ha.o_sum , \adder.gen_halfadder:3.ha.o_sum , \adder.gen_halfadder:2.ha.o_sum , \adder.gen_halfadder:1.ha.o_sum , \adder.fa2.s , \addrreg.outreg [0] };
  assign \reg0.clk  = clk;
  assign \reg0.inreg  = datain;
  assign \reg0.load  = \decoder.outdecoder [0];
  assign \reg0.rst  = rst;
  assign \reg0.zero  = initreading;
  assign \reg1.clk  = clk;
  assign \reg1.inreg  = datain;
  assign \reg1.load  = \decoder.outdecoder [1];
  assign \reg1.outreg  = dataouthigh_reg;
  assign \reg1.rst  = rst;
  assign \reg1.zero  = initreading;
endmodule

module aftab_daru_error_detector_32(nbytes, addrin, datainstrbar, checkmisaligneddaru, instrmisalignedflag, loadmisalignedflag);
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  wire _4_;
  wire _5_;
  wire _6_;
  wire _7_;
  wire _8_;
  wire _9_;
  input [1:0] addrin;
  wire [1:0] addrin;
  input checkmisaligneddaru;
  wire checkmisaligneddaru;
  wire cmp_01;
  wire cmp_10;
  wire cmp_11;
  input datainstrbar;
  wire datainstrbar;
  output instrmisalignedflag;
  wire instrmisalignedflag;
  output loadmisalignedflag;
  wire loadmisalignedflag;
  wire misalignederrorp;
  input [1:0] nbytes;
  wire [1:0] nbytes;
  assign _0_ = addrin == 2'h1;
  assign cmp_01 = _0_ ? 1'h1 : 1'h0;
  assign _1_ = addrin == 2'h2;
  assign cmp_10 = _1_ ? 1'h1 : 1'h0;
  assign _2_ = addrin == 2'h3;
  assign cmp_11 = _2_ ? 1'h1 : 1'h0;
  assign _3_ = cmp_01 | cmp_11;
  assign _4_ = nbytes == 2'h1;
  assign misalignederrorp = _4_ ? _3_ : _8_;
  assign _5_ = cmp_01 | cmp_10;
  assign _6_ = _5_ | cmp_11;
  assign _7_ = nbytes == 2'h3;
  assign _8_ = _7_ ? _6_ : 1'h0;
  assign loadmisalignedflag = datainstrbar ? _9_ : 1'h0;
  assign _9_ = misalignederrorp & checkmisaligneddaru;
  assign instrmisalignedflag = datainstrbar ? 1'h0 : _9_;
endmodule

module aftab_datapath_32(clk, rst, writeregfile, setzeroorone, comparedsignedunsignedbar, selpc, seljl, selbsu, selllu, selasu, selaau, selp1, selp2, selimm, ldbytesigned, ldhalfsigned, load, selshift, addsubbar, pass, selauipc
, muxcode, sellogic, startdawu, startdaru, startmultiplyaau, startdivideaau, signedsigned, signedunsigned, unsignedunsigned, selaal, selaah, nbytes, selcsr, writerb_inst, checkmisaligneddawu, selcsraddrfrominst, forced_rb_read, inst_type, ret_from_epc, selalu, selpc4
, selmem, cmp_selaluop2, cmp_selop2, iscsrinstruction, memready1, memready2, memdataout1, memdataout2, csr_from_wb, machineexternalinterrupt, machinetimerinterrupt, machinesoftwareinterrupt, userexternalinterrupt, usertimerinterrupt, usersoftwareinterrupt, platforminterruptsignals, ldvaluecsr, mipcclddisable, selpc_csr, seltval_csr, selmedeleg_csr
, selmideleg_csr, selccmip_csr, selcause_csr, selmepc_csr, selinterruptaddressdirect, selinterruptaddressvectored, writeregbank, dncntcsr, upcntcsr, ldcntcsr, zerocntcsr, lddelegation, ldmachine, lduser, loadmiereg, loadmieuiefield, mirrorusercu, machinestatusalterationprecsr, userstatusalterationprecsr, machinestatusalterationpostcsr, userstatusalterationpostcsr
, selromaddress, ecallflag, illegalinstrflag, instructiondonecsr, selp1csr, selimmcsr, setcsr, selreadwritecsr, clrcsr, gi2d_en, gi2d_rst, d2e_en, d2e_rst, e2m_en, e2m_rst, m2wb_en, m2wb_rst, writememdawu, readmemdaru1, readmemdaru2, datadawu
, memaddr1, memaddr2, bytestoreaddaru1, bytespermemaccess, ir, wb_func3, wb_mreturetbar, completeddawu_def, completeddaru1_def, completeddaru2_def, completedaau, is_aau_used, instructiondone, hazard_solved, is_store_in_mem, is_load_in_mem, branch_taken, dec_valid, ex_valid, m_valid, wb_valid
, wb_ret_from_epc, wb_iscsrinstruction, wb_validaccesscsr, validaccesscsr, readonlycsr, mirror, ldmiereg, ldmieuiefield, interruptraise, exceptionraise, delegationmode, previousprv, modetvec, hazex, hazm);
  reg _0000_;
  reg _0001_;
  reg _0002_;
  reg [1:0] _0003_;
  (* unused_bits = "2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 49 50 51 52 57 58 60 61 62 63" *)
  wire [63:0] _0004_;
  reg [2:0] _0005_;
  reg _0006_;
  reg [63:0] _0007_;
  reg _0008_;
  reg _0009_;
  reg [31:0] _0010_;
  reg [31:0] _0011_;
  reg [31:0] _0012_;
  reg _0013_;
  reg _0014_;
  reg [63:0] _0015_;
  reg _0016_;
  reg _0017_;
  reg _0018_;
  reg _0019_;
  reg _0020_;
  reg [31:0] _0021_;
  reg [31:0] _0022_;
  reg [31:0] _0023_;
  reg [31:0] _0024_;
  reg _0025_;
  reg _0026_;
  reg [2:0] _0027_;
  reg [31:0] _0028_;
  reg [31:0] _0029_;
  reg [2:0] _0030_;
  reg [31:0] _0031_;
  reg _0032_;
  reg _0033_;
  reg _0034_;
  reg _0035_;
  reg _0036_;
  reg [31:0] _0037_;
  reg [31:0] _0038_;
  reg [31:0] _0039_;
  reg _0040_;
  reg [31:0] _0041_;
  reg [31:0] _0042_;
  reg [31:0] _0043_;
  reg _0044_;
  reg [31:0] _0045_;
  reg _0046_;
  reg _0047_;
  reg _0048_;
  reg [31:0] _0049_;
  reg [31:0] _0050_;
  reg [31:0] _0051_;
  reg [31:0] _0052_;
  reg [31:0] _0053_;
  reg _0054_;
  reg _0055_;
  reg [31:0] _0056_;
  reg _0057_;
  reg _0058_;
  reg [31:0] _0059_;
  reg _0060_;
  reg _0061_;
  reg [31:0] _0062_;
  reg [31:0] _0063_;
  wire _0064_;
  wire _0065_;
  wire _0066_;
  wire [31:0] _0067_;
  wire [31:0] _0068_;
  wire [31:0] _0069_;
  wire _0070_;
  wire _0071_;
  wire _0072_;
  wire _0073_;
  wire _0074_;
  wire _0075_;
  wire _0076_;
  wire _0077_;
  wire _0078_;
  wire _0079_;
  wire _0080_;
  wire _0081_;
  wire _0082_;
  wire _0083_;
  wire _0084_;
  wire _0085_;
  wire _0086_;
  wire _0087_;
  wire _0088_;
  wire [4:0] _0089_;
  wire _0090_;
  wire [4:0] _0091_;
  wire [11:0] _0092_;
  wire _0093_;
  wire _0094_;
  wire _0095_;
  wire [4:0] _0096_;
  wire _0097_;
  wire _0098_;
  wire _0099_;
  wire [4:0] _0100_;
  wire _0101_;
  wire [4:0] _0102_;
  wire _0103_;
  wire [4:0] _0104_;
  wire _0105_;
  wire [4:0] _0106_;
  wire [4:0] _0107_;
  wire _0108_;
  wire _0109_;
  wire [4:0] _0110_;
  wire [4:0] _0111_;
  wire _0112_;
  wire _0113_;
  wire [4:0] _0114_;
  wire [4:0] _0115_;
  wire [11:0] _0116_;
  wire _0117_;
  wire _0118_;
  wire _0119_;
  wire _0120_;
  wire _0121_;
  wire _0122_;
  wire _0123_;
  wire _0124_;
  wire _0125_;
  wire _0126_;
  wire _0127_;
  wire _0128_;
  wire _0129_;
  wire _0130_;
  wire [11:0] _0131_;
  wire _0132_;
  wire _0133_;
  wire _0134_;
  wire _0135_;
  wire _0136_;
  wire _0137_;
  wire [4:0] _0138_;
  wire _0139_;
  wire [4:0] _0140_;
  wire _0141_;
  wire [4:0] _0142_;
  wire _0143_;
  wire [4:0] _0144_;
  wire _0145_;
  wire [4:0] _0146_;
  wire [11:0] _0147_;
  wire _0148_;
  wire _0149_;
  wire _0150_;
  wire _0151_;
  wire _0152_;
  wire _0153_;
  wire _0154_;
  wire _0155_;
  wire _0156_;
  wire _0157_;
  wire _0158_;
  wire _0159_;
  wire _0160_;
  wire _0161_;
  wire _0162_;
  wire _0163_;
  wire _0164_;
  wire _0165_;
  wire _0166_;
  wire _0167_;
  wire _0168_;
  wire _0169_;
  wire _0170_;
  wire _0171_;
  wire _0172_;
  wire _0173_;
  wire _0174_;
  wire _0175_;
  wire _0176_;
  wire _0177_;
  wire _0178_;
  wire _0179_;
  wire _0180_;
  wire _0181_;
  wire _0182_;
  wire _0183_;
  wire _0184_;
  wire _0185_;
  wire _0186_;
  wire _0187_;
  wire [31:0] _0188_;
  wire [31:0] _0189_;
  wire [31:0] _0190_;
  wire [31:0] _0191_;
  wire [31:0] _0192_;
  wire _0193_;
  wire _0194_;
  wire _0195_;
  wire _0196_;
  wire _0197_;
  wire _0198_;
  wire _0199_;
  wire _0200_;
  wire _0201_;
  wire _0202_;
  wire _0203_;
  wire _0204_;
  wire _0205_;
  wire _0206_;
  wire _0207_;
  wire _0208_;
  wire _0209_;
  wire _0210_;
  wire _0211_;
  wire _0212_;
  wire _0213_;
  wire _0214_;
  wire _0215_;
  wire _0216_;
  wire _0217_;
  wire _0218_;
  wire _0219_;
  wire _0220_;
  wire _0221_;
  wire _0222_;
  wire _0223_;
  wire _0224_;
  wire _0225_;
  wire _0226_;
  wire _0227_;
  wire _0228_;
  wire _0229_;
  wire _0230_;
  wire _0231_;
  wire _0232_;
  wire _0233_;
  wire _0234_;
  wire _0235_;
  wire _0236_;
  wire _0237_;
  wire _0238_;
  wire _0239_;
  wire _0240_;
  wire _0241_;
  wire _0242_;
  wire _0243_;
  wire _0244_;
  wire [31:0] _0245_;
  wire [31:0] _0246_;
  wire [31:0] _0247_;
  wire [11:0] _0248_;
  wire [11:0] _0249_;
  wire [11:0] _0250_;
  wire _0251_;
  wire _0252_;
  wire _0253_;
  wire _0254_;
  wire _0255_;
  wire _0256_;
  wire _0257_;
  wire _0258_;
  wire _0259_;
  wire _0260_;
  wire _0261_;
  wire _0262_;
  wire _0263_;
  wire _0264_;
  wire [11:0] _0265_;
  wire _0266_;
  wire _0267_;
  wire _0268_;
  wire _0269_;
  wire _0270_;
  wire _0271_;
  wire [4:0] _0272_;
  wire _0273_;
  wire [4:0] _0274_;
  wire _0275_;
  wire [4:0] _0276_;
  wire _0277_;
  wire [4:0] _0278_;
  wire _0279_;
  wire [4:0] _0280_;
  wire _0281_;
  wire [11:0] _0282_;
  wire _0283_;
  wire _0284_;
  wire _0285_;
  wire _0286_;
  wire _0287_;
  wire _0288_;
  wire _0289_;
  wire _0290_;
  wire _0291_;
  wire _0292_;
  wire _0293_;
  wire _0294_;
  wire _0295_;
  wire _0296_;
  wire _0297_;
  wire _0298_;
  wire _0299_;
  wire _0300_;
  wire _0301_;
  wire _0302_;
  wire _0303_;
  wire _0304_;
  wire _0305_;
  wire _0306_;
  wire _0307_;
  wire _0308_;
  wire _0309_;
  wire _0310_;
  wire _0311_;
  wire _0312_;
  wire _0313_;
  wire _0314_;
  wire _0315_;
  wire _0316_;
  wire [11:0] _0317_;
  wire _0318_;
  wire _0319_;
  wire _0320_;
  wire _0321_;
  wire _0322_;
  wire _0323_;
  wire [4:0] _0324_;
  wire _0325_;
  wire [4:0] _0326_;
  wire _0327_;
  wire [4:0] _0328_;
  wire _0329_;
  wire [4:0] _0330_;
  wire _0331_;
  wire [4:0] _0332_;
  wire _0333_;
  wire [11:0] _0334_;
  wire _0335_;
  wire _0336_;
  wire _0337_;
  wire _0338_;
  wire _0339_;
  wire _0340_;
  wire _0341_;
  wire _0342_;
  wire _0343_;
  wire _0344_;
  wire _0345_;
  wire _0346_;
  wire _0347_;
  wire _0348_;
  wire _0349_;
  wire _0350_;
  wire _0351_;
  wire _0352_;
  wire _0353_;
  wire _0354_;
  wire _0355_;
  wire _0356_;
  wire _0357_;
  wire _0358_;
  wire [31:0] _0359_;
  wire _0360_;
  wire [31:0] _0361_;
  wire [31:0] _0362_;
  wire _0363_;
  wire _0364_;
  wire [31:0] _0365_;
  wire [31:0] _0366_;
  wire [31:0] _0367_;
  wire [31:0] _0368_;
  wire [31:0] _0369_;
  wire [31:0] _0370_;
  wire [2:0] _0371_;
  wire [31:0] _0372_;
  wire [31:0] _0373_;
  wire _0374_;
  wire _0375_;
  wire _0376_;
  wire _0377_;
  wire [63:0] _0378_;
  wire _0379_;
  wire [31:0] _0380_;
  wire _0381_;
  wire _0382_;
  wire _0383_;
  wire [31:0] _0384_;
  wire _0385_;
  wire [31:0] _0386_;
  wire [31:0] _0387_;
  wire [2:0] _0388_;
  wire _0389_;
  wire _0390_;
  wire _0391_;
  wire [31:0] _0392_;
  wire [31:0] _0393_;
  wire [31:0] _0394_;
  wire _0395_;
  wire _0396_;
  wire [63:0] _0397_;
  wire _0398_;
  wire _0399_;
  wire _0400_;
  wire _0401_;
  wire [31:0] _0402_;
  wire [31:0] _0403_;
  wire [31:0] _0404_;
  wire [31:0] _0405_;
  wire _0406_;
  wire [31:0] _0407_;
  wire [31:0] _0408_;
  wire _0409_;
  wire _0410_;
  wire _0411_;
  wire _0412_;
  wire _0413_;
  wire [31:0] _0414_;
  wire [2:0] _0415_;
  (* unused_bits = "2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 49 50 51 52 57 58 60 61 62 63" *)
  wire [63:0] _0416_;
  wire _0417_;
  wire _0418_;
  wire [1:0] _0419_;
  wire _0420_;
  wire _0421_;
  wire _0422_;
  wire _0423_;
  wire [1:0] _0424_;
  wire _0425_;
  wire _0426_;
  wire _0427_;
  wire [1:0] _0428_;
  wire _0429_;
  wire [1:0] _0430_;
  wire [1:0] _0431_;
  wire _0432_;
  wire [1:0] _0433_;
  wire _0434_;
  wire _0435_;
  wire _0436_;
  wire _0437_;
  wire _0438_;
  wire _0439_;
  wire _0440_;
  wire _0441_;
  wire [31:0] _0442_;
  wire _0443_;
  wire _0444_;
  wire _0445_;
  wire _0446_;
  wire _0447_;
  wire _0448_;
  wire _0449_;
  wire _0450_;
  wire _0451_;
  wire _0452_;
  wire _0453_;
  wire _0454_;
  wire _0455_;
  wire _0456_;
  wire _0457_;
  wire _0458_;
  wire _0459_;
  wire _0460_;
  wire _0461_;
  wire _0462_;
  wire [32:0] _0463_;
  wire _0464_;
  wire [32:0] _0465_;
  wire [31:0] _0466_;
  wire [31:0] _0467_;
  wire _0468_;
  wire _0469_;
  wire _0470_;
  wire [31:0] _0471_;
  wire [31:0] _0472_;
  wire [31:0] _0473_;
  wire [31:0] _0474_;
  wire [31:0] _0475_;
  wire [31:0] _0476_;
  wire [31:0] _0477_;
  wire [31:0] _0478_;
  reg [1:0] _0479_;
  wire [1:0] _0480_;
  wire _0481_;
  wire [1:0] _0482_;
  wire _0483_;
  wire _0484_;
  wire _0485_;
  wire _0486_;
  wire [5:0] _0487_;
  wire _0488_;
  wire _0489_;
  wire [5:0] _0490_;
  wire [5:0] _0491_;
  (* unused_bits = "0 5" *)
  wire [5:0] _0492_;
  wire _0493_;
  wire [31:0] _0494_;
  reg [32:0] _0495_;
  (* unused_bits = "32" *)
  wire [32:0] _0496_;
  reg _0497_;
  reg [31:0] _0498_;
  wire [31:0] _0499_;
  wire _0500_;
  wire [31:0] _0501_;
  wire _0502_;
  reg [32:0] _0503_;
  wire [32:0] _0504_;
  wire [32:0] _0505_;
  reg [1:0] _0506_;
  wire [1:0] _0507_;
  wire _0508_;
  wire _0509_;
  wire [1:0] _0510_;
  wire _0511_;
  wire _0512_;
  wire _0513_;
  wire _0514_;
  wire _0515_;
  wire _0516_;
  wire _0517_;
  reg [5:0] _0518_;
  wire _0519_;
  wire _0520_;
  wire [5:0] _0521_;
  wire [5:0] _0522_;
  (* unused_bits = "5" *)
  wire [5:0] _0523_;
  wire _0524_;
  wire [32:0] _0525_;
  wire [33:0] _0526_;
  reg [32:0] _0527_;
  wire [32:0] _0528_;
  reg [33:0] _0529_;
  wire [33:0] _0530_;
  (* unused_bits = "0" *)
  wire [33:0] _0531_;
  reg [32:0] _0532_;
  wire [32:0] _0533_;
  wire [32:0] _0534_;
  wire _0535_;
  wire [31:0] _0536_;
  wire _0537_;
  wire [31:0] _0538_;
  wire _0539_;
  wire [31:0] _0540_;
  wire [31:0] _0541_;
  wire _0542_;
  wire _0543_;
  wire _0544_;
  wire _0545_;
  wire _0546_;
  wire _0547_;
  wire _0548_;
  wire _0549_;
  wire _0550_;
  wire _0551_;
  wire _0552_;
  wire _0553_;
  wire _0554_;
  wire _0555_;
  wire _0556_;
  wire _0557_;
  wire _0558_;
  wire _0559_;
  wire _0560_;
  wire _0561_;
  wire _0562_;
  wire _0563_;
  wire _0564_;
  wire _0565_;
  wire _0566_;
  wire _0567_;
  wire _0568_;
  wire _0569_;
  wire _0570_;
  wire _0571_;
  wire _0572_;
  wire _0573_;
  wire _0574_;
  wire _0575_;
  wire _0576_;
  wire _0577_;
  wire _0578_;
  wire _0579_;
  wire _0580_;
  wire _0581_;
  wire [2:0] _0582_;
  wire _0583_;
  wire [2:0] _0584_;
  wire [2:0] _0585_;
  wire _0586_;
  wire [2:0] _0587_;
  wire _0588_;
  wire [2:0] _0589_;
  wire _0590_;
  wire [2:0] _0591_;
  wire [2:0] _0592_;
  reg [2:0] _0593_;
  wire _0594_;
  wire _0595_;
  wire [2:0] _0596_;
  wire _0597_;
  wire _0598_;
  wire [2:0] _0599_;
  wire [2:0] _0600_;
  wire [2:0] _0601_;
  wire [2:0] _0602_;
  wire _0603_;
  wire [31:0] _0604_;
  wire [31:0] _0605_;
  wire [31:0] _0606_;
  wire [31:0] _0607_;
  wire [31:0] _0608_;
  wire [31:0] _0609_;
  wire [31:0] _0610_;
  wire [31:0] _0611_;
  wire [31:0] _0612_;
  wire [31:0] _0613_;
  wire [31:0] _0614_;
  wire [31:0] _0615_;
  wire _0616_;
  wire _0617_;
  wire _0618_;
  wire [31:0] _0619_;
  reg [1:0] _0620_;
  wire [1:0] _0621_;
  wire _0622_;
  wire _0623_;
  wire _0624_;
  wire [1:0] _0625_;
  wire [1:0] _0626_;
  wire _0627_;
  wire _0628_;
  wire _0629_;
  wire _0630_;
  wire _0631_;
  wire _0632_;
  wire _0633_;
  wire _0634_;
  reg [31:0] _0635_;
  wire [31:0] _0636_;
  reg _0637_;
  wire _0638_;
  wire _0639_;
  wire _0640_;
  wire _0641_;
  wire _0642_;
  wire [3:0] _0643_;
  wire _0644_;
  wire _0645_;
  wire _0646_;
  wire _0647_;
  reg [1:0] _0648_;
  wire [1:0] _0649_;
  reg [15:0] _0650_;
  wire [15:0] _0651_;
  reg [15:0] _0652_;
  wire [15:0] _0653_;
  reg [1:0] _0654_;
  wire [1:0] _0655_;
  wire _0656_;
  wire _0657_;
  wire [1:0] _0658_;
  wire _0659_;
  wire _0660_;
  wire _0661_;
  wire _0662_;
  wire _0663_;
  reg [31:0] _0664_;
  wire [31:0] _0665_;
  reg _0666_;
  wire _0667_;
  wire _0668_;
  wire _0669_;
  wire _0670_;
  wire _0671_;
  wire [3:0] _0672_;
  reg [1:0] _0673_;
  wire [1:0] _0674_;
  reg [15:0] _0675_;
  wire [15:0] _0676_;
  reg [15:0] _0677_;
  wire [15:0] _0678_;
  reg _0679_;
  wire _0680_;
  wire _0681_;
  wire _0682_;
  wire _0683_;
  wire _0684_;
  wire _0685_;
  wire _0686_;
  wire _0687_;
  wire _0688_;
  reg [31:0] _0689_;
  wire [31:0] _0690_;
  reg _0691_;
  wire _0692_;
  wire _0693_;
  wire _0694_;
  wire _0695_;
  reg [1:0] _0696_;
  wire [1:0] _0697_;
  reg [15:0] _0698_;
  wire [15:0] _0699_;
  reg [15:0] _0700_;
  wire [15:0] _0701_;
  wire _0702_;
  wire [3:0] _0703_;
  wire _0704_;
  wire _0705_;
  wire _0706_;
  wire [7:0] _0707_;
  wire [10:0] _0708_;
  reg [1:0] _0709_;
  reg [1:0] _0710_;
  wire [1:0] _0711_;
  wire _0712_;
  wire _0713_;
  wire _0714_;
  wire _0715_;
  wire _0716_;
  wire _0717_;
  wire _0718_;
  wire _0719_;
  wire _0720_;
  wire _0721_;
  wire _0722_;
  wire _0723_;
  wire _0724_;
  wire _0725_;
  wire _0726_;
  wire _0727_;
  wire _0728_;
  wire _0729_;
  wire _0730_;
  wire _0731_;
  wire _0732_;
  wire _0733_;
  wire _0734_;
  wire _0735_;
  wire _0736_;
  wire _0737_;
  wire _0738_;
  wire _0739_;
  wire _0740_;
  wire _0741_;
  wire _0742_;
  wire _0743_;
  wire _0744_;
  wire _0745_;
  wire [31:0] _0746_;
  wire [31:0] _0747_;
  wire [31:0] _0748_;
  wire [31:0] _0749_;
  wire [31:0] _0750_;
  wire [31:0] _0751_;
  wire [31:0] _0752_;
  wire [31:0] _0753_;
  wire [31:0] _0754_;
  wire [31:0] _0755_;
  wire [31:0] _0756_;
  wire [31:0] _0757_;
  wire [31:0] _0758_;
  wire [31:0] _0759_;
  wire [31:0] _0760_;
  wire [31:0] _0761_;
  wire [31:0] _0762_;
  wire [31:0] _0763_;
  wire [31:0] _0764_;
  wire [31:0] _0765_;
  wire [31:0] _0766_;
  wire [31:0] _0767_;
  wire [31:0] _0768_;
  wire [31:0] _0769_;
  wire [31:0] _0770_;
  wire [31:0] _0771_;
  wire _0772_;
  wire _0773_;
  wire _0774_;
  wire _0775_;
  wire _0776_;
  wire _0777_;
  wire _0778_;
  wire _0779_;
  wire [1:0] _0780_;
  wire [1:0] _0781_;
  wire [1:0] _0782_;
  wire [1:0] _0783_;
  wire _0784_;
  wire _0785_;
  wire _0786_;
  wire _0787_;
  wire _0788_;
  wire _0789_;
  wire [1:0] _0790_;
  wire [1:0] _0791_;
  wire [1:0] _0792_;
  wire [1:0] _0793_;
  wire [31:0] _0794_;
  wire [1:0] _0795_;
  wire _0796_;
  wire [31:0] _0797_;
  (* unused_bits = "1 2 5 6 9 10 12 13 14 15" *)
  wire [31:0] _0798_;
  wire [31:0] _0799_;
  wire _0800_;
  wire [31:0] _0801_;
  wire _0802_;
  wire [31:0] _0803_;
  wire _0804_;
  wire [31:0] _0805_;
  wire [31:0] _0806_;
  wire [31:0] _0807_;
  wire [31:0] _0808_;
  reg [31:0] _0809_;
  wire _0810_;
  wire _0811_;
  wire _0812_;
  wire _0813_;
  wire _0814_;
  wire _0815_;
  reg [1023:0] _0816_;
  wire [31:0] _0817_;
  wire [31:0] _0818_;
  wire [31:0] _0819_;
  wire [31:0] _0820_;
  wire [31:0] _0821_;
  wire [31:0] _0822_;
  wire [31:0] _0823_;
  wire [31:0] _0824_;
  wire [31:0] _0825_;
  wire [31:0] _0826_;
  wire [31:0] _0827_;
  wire [31:0] _0828_;
  wire [31:0] _0829_;
  wire [31:0] _0830_;
  wire [31:0] _0831_;
  wire [31:0] _0832_;
  wire [31:0] _0833_;
  wire [31:0] _0834_;
  wire [31:0] _0835_;
  wire [31:0] _0836_;
  wire [4:0] _0837_;
  wire [4:0] _0838_;
  wire [1023:0] _0839_;
  wire [31:0] _0840_;
  wire [31:0] _0841_;
  wire [31:0] _0842_;
  wire [31:0] _0843_;
  wire [31:0] _0844_;
  wire [31:0] _0845_;
  wire [31:0] _0846_;
  wire [31:0] _0847_;
  wire [31:0] _0848_;
  wire [31:0] _0849_;
  wire _0850_;
  wire _0851_;
  wire _0852_;
  wire _0853_;
  wire _0854_;
  wire _0855_;
  wire _0856_;
  wire _0857_;
  wire _0858_;
  wire _0859_;
  wire _0860_;
  wire _0861_;
  wire _0862_;
  wire _0863_;
  wire _0864_;
  wire _0865_;
  wire _0866_;
  wire _0867_;
  wire _0868_;
  wire _0869_;
  wire _0870_;
  wire _0871_;
  wire _0872_;
  wire _0873_;
  wire _0874_;
  wire _0875_;
  wire _0876_;
  wire _0877_;
  wire _0878_;
  wire _0879_;
  wire _0880_;
  wire _0881_;
  wire _0882_;
  wire _0883_;
  wire _0884_;
  wire _0885_;
  wire _0886_;
  wire _0887_;
  wire _0888_;
  wire _0889_;
  wire _0890_;
  wire _0891_;
  wire _0892_;
  wire _0893_;
  wire _0894_;
  wire _0895_;
  wire _0896_;
  wire _0897_;
  wire _0898_;
  wire _0899_;
  wire _0900_;
  wire _0901_;
  wire _0902_;
  wire _0903_;
  wire _0904_;
  wire _0905_;
  wire _0906_;
  wire _0907_;
  wire _0908_;
  wire _0909_;
  wire _0910_;
  wire _0911_;
  wire _0912_;
  wire _0913_;
  wire _0914_;
  wire [31:0] _0915_;
  wire [31:0] _0916_;
  wire [31:0] _0917_;
  wire [31:0] _0918_;
  wire [31:0] _0919_;
  wire [31:0] _0920_;
  wire [31:0] _0921_;
  wire [31:0] _0922_;
  wire [31:0] _0923_;
  wire [31:0] _0924_;
  wire [31:0] _0925_;
  wire [31:0] _0926_;
  wire [31:0] _0927_;
  wire [31:0] _0928_;
  wire [31:0] _0929_;
  wire [31:0] _0930_;
  wire [31:0] _0931_;
  wire [31:0] _0932_;
  wire [31:0] _0933_;
  wire [31:0] _0934_;
  wire [31:0] _0935_;
  wire [31:0] _0936_;
  wire [31:0] _0937_;
  wire [31:0] _0938_;
  wire [31:0] _0939_;
  wire [31:0] _0940_;
  wire [31:0] _0941_;
  wire [31:0] _0942_;
  wire [31:0] _0943_;
  wire [31:0] _0944_;
  wire [31:0] _0945_;
  wire [31:0] _0946_;
  (* unused_bits = "1 2 5 6 9 10 12 13 14 15" *)
  wire [31:0] _0947_;
  (* unused_bits = "1 2 5 6 9 10 12 13 14 15" *)
  wire [31:0] _0948_;
  reg _0949_;
  wire _0950_;
  reg _0951_;
  wire _0952_;
  reg [1023:0] _0953_;
  wire [31:0] _0954_;
  wire [31:0] _0955_;
  wire [31:0] _0956_;
  wire [31:0] _0957_;
  wire [31:0] _0958_;
  wire [31:0] _0959_;
  wire [31:0] _0960_;
  wire [31:0] _0961_;
  wire [31:0] _0962_;
  wire [31:0] _0963_;
  wire [31:0] _0964_;
  wire [31:0] _0965_;
  wire [31:0] _0966_;
  wire [31:0] _0967_;
  wire [31:0] _0968_;
  wire [31:0] _0969_;
  wire [31:0] _0970_;
  wire [31:0] _0971_;
  wire [31:0] _0972_;
  wire [31:0] _0973_;
  wire [31:0] _0974_;
  wire [31:0] _0975_;
  wire [31:0] _0976_;
  wire [31:0] _0977_;
  wire [31:0] _0978_;
  wire [31:0] _0979_;
  wire [31:0] _0980_;
  wire [31:0] _0981_;
  wire [31:0] _0982_;
  wire [31:0] _0983_;
  wire [31:0] _0984_;
  wire [31:0] _0985_;
  wire [31:0] _0986_;
  wire [31:0] _0987_;
  wire [31:0] _0988_;
  wire [31:0] _0989_;
  wire [31:0] _0990_;
  wire [31:0] _0991_;
  wire [31:0] _0992_;
  wire [31:0] _0993_;
  wire [4:0] _0994_;
  wire _0995_;
  wire [4:0] _0996_;
  wire _0997_;
  wire _0998_;
  wire [4:0] _0999_;
  wire [1023:0] _1000_;
  wire [1023:0] _1001_;
  wire [1023:0] _1002_;
  wire [1023:0] _1003_;
  wire [31:0] _1004_;
  wire [31:0] _1005_;
  wire [31:0] _1006_;
  wire [31:0] _1007_;
  wire [31:0] _1008_;
  wire [31:0] _1009_;
  wire [31:0] _1010_;
  wire [31:0] _1011_;
  wire [31:0] _1012_;
  wire [31:0] _1013_;
  wire [31:0] _1014_;
  wire [31:0] _1015_;
  wire [31:0] _1016_;
  wire [31:0] _1017_;
  wire [31:0] _1018_;
  wire [31:0] _1019_;
  wire [31:0] _1020_;
  wire [31:0] _1021_;
  wire [31:0] _1022_;
  wire [31:0] _1023_;
  wire [31:0] _1024_;
  wire [31:0] _1025_;
  wire _1026_;
  wire _1027_;
  wire _1028_;
  wire _1029_;
  wire _1030_;
  wire _1031_;
  wire _1032_;
  wire _1033_;
  wire _1034_;
  wire _1035_;
  wire _1036_;
  wire _1037_;
  wire _1038_;
  wire _1039_;
  wire _1040_;
  wire _1041_;
  wire _1042_;
  wire _1043_;
  wire _1044_;
  wire _1045_;
  wire _1046_;
  wire _1047_;
  wire _1048_;
  wire _1049_;
  wire _1050_;
  wire _1051_;
  wire _1052_;
  wire _1053_;
  wire _1054_;
  wire _1055_;
  wire _1056_;
  wire _1057_;
  wire _1058_;
  wire _1059_;
  wire _1060_;
  wire _1061_;
  wire _1062_;
  wire _1063_;
  wire _1064_;
  wire _1065_;
  wire _1066_;
  wire _1067_;
  wire _1068_;
  wire _1069_;
  wire _1070_;
  wire _1071_;
  wire _1072_;
  wire _1073_;
  wire _1074_;
  wire _1075_;
  wire _1076_;
  wire _1077_;
  wire _1078_;
  wire _1079_;
  wire _1080_;
  wire _1081_;
  wire _1082_;
  wire _1083_;
  wire _1084_;
  wire _1085_;
  wire _1086_;
  wire _1087_;
  wire _1088_;
  wire _1089_;
  wire _1090_;
  wire [31:0] _1091_;
  wire [31:0] _1092_;
  wire [31:0] _1093_;
  wire [31:0] _1094_;
  wire [31:0] _1095_;
  wire [31:0] _1096_;
  wire [31:0] _1097_;
  wire [31:0] _1098_;
  wire [31:0] _1099_;
  wire [31:0] _1100_;
  wire [31:0] _1101_;
  wire [31:0] _1102_;
  wire [31:0] _1103_;
  wire [31:0] _1104_;
  wire [31:0] _1105_;
  wire [31:0] _1106_;
  wire [31:0] _1107_;
  wire [31:0] _1108_;
  wire [31:0] _1109_;
  wire [31:0] _1110_;
  wire [31:0] _1111_;
  wire [31:0] _1112_;
  wire [31:0] _1113_;
  wire [31:0] _1114_;
  wire [31:0] _1115_;
  wire [31:0] _1116_;
  wire [31:0] _1117_;
  wire [31:0] _1118_;
  wire [31:0] _1119_;
  wire [31:0] _1120_;
  wire [31:0] _1121_;
  wire [31:0] _1122_;
  wire [31:0] _1123_;
  wire [31:0] _1124_;
  wire [31:0] _1125_;
  wire [31:0] _1126_;
  wire [31:0] _1127_;
  wire [31:0] _1128_;
  wire [31:0] _1129_;
  wire [31:0] _1130_;
  wire [31:0] _1131_;
  wire [31:0] _1132_;
  wire [31:0] _1133_;
  wire [31:0] _1134_;
  wire [31:0] _1135_;
  wire [31:0] _1136_;
  wire [31:0] _1137_;
  wire [31:0] _1138_;
  wire [31:0] _1139_;
  wire [31:0] _1140_;
  wire [31:0] _1141_;
  wire [31:0] _1142_;
  wire [31:0] _1143_;
  wire [31:0] _1144_;
  wire [31:0] _1145_;
  wire [31:0] _1146_;
  wire [31:0] _1147_;
  wire [31:0] _1148_;
  wire [31:0] _1149_;
  wire [31:0] _1150_;
  wire [31:0] _1151_;
  wire [31:0] _1152_;
  wire [31:0] _1153_;
  wire [31:0] _1154_;
  wire [31:0] _1155_;
  wire [31:0] _1156_;
  wire [31:0] _1157_;
  wire [31:0] _1158_;
  wire [31:0] _1159_;
  wire [31:0] _1160_;
  wire [31:0] _1161_;
  wire [31:0] _1162_;
  wire [31:0] _1163_;
  wire [31:0] _1164_;
  wire [31:0] _1165_;
  wire [31:0] _1166_;
  wire [31:0] _1167_;
  wire [31:0] _1168_;
  wire [31:0] _1169_;
  wire [31:0] _1170_;
  wire [31:0] _1171_;
  wire [31:0] _1172_;
  wire [31:0] _1173_;
  wire [31:0] _1174_;
  wire [31:0] _1175_;
  wire [31:0] _1176_;
  wire [31:0] _1177_;
  wire [31:0] _1178_;
  wire [31:0] _1179_;
  wire [31:0] _1180_;
  wire [31:0] _1181_;
  wire [31:0] _1182_;
  wire [31:0] _1183_;
  wire [31:0] _1184_;
  wire [31:0] _1185_;
  wire [31:0] _1186_;
  reg [31:0] _1187_;
  wire [31:0] _1188_;
  wire [31:0] _1189_;
  wire [31:0] _1190_;
  (* hdlname = "aau ain" *)
  wire [31:0] \aau.ain ;
  (* hdlname = "aau bin" *)
  wire [31:0] \aau.bin ;
  (* hdlname = "aau clk" *)
  wire \aau.clk ;
  (* hdlname = "aau completeaau" *)
  wire \aau.completeaau ;
  (* hdlname = "aau dividedbyzeroflag" *)
  wire \aau.dividedbyzeroflag ;
  (* hdlname = "aau division clk" *)
  wire \aau.division.clk ;
  (* hdlname = "aau division ddin" *)
  wire [31:0] \aau.division.ddin ;
  (* hdlname = "aau division dividedbyzeroflag" *)
  wire \aau.division.dividedbyzeroflag ;
  (* hdlname = "aau division dividend" *)
  wire [31:0] \aau.division.dividend ;
  (* hdlname = "aau division divisor" *)
  wire [31:0] \aau.division.divisor ;
  (* hdlname = "aau division divisorzero" *)
  wire \aau.division.divisorzero ;
  (* hdlname = "aau division donesdiv" *)
  wire \aau.division.donesdiv ;
  (* hdlname = "aau division drin" *)
  wire [31:0] \aau.division.drin ;
  (* hdlname = "aau division endd" *)
  wire \aau.division.endd ;
  (* hdlname = "aau division endr" *)
  wire \aau.division.endr ;
  (* hdlname = "aau division enq" *)
  wire \aau.division.enq ;
  (* hdlname = "aau division enr" *)
  wire \aau.division.enr ;
  (* hdlname = "aau division qout" *)
  wire [31:0] \aau.division.qout ;
  (* hdlname = "aau division qp" *)
  wire [31:0] \aau.division.qp ;
  (* hdlname = "aau division remout" *)
  wire [31:0] \aau.division.remout ;
  (* hdlname = "aau division remp" *)
  wire [32:0] \aau.division.remp ;
  (* hdlname = "aau division rst" *)
  wire \aau.division.rst ;
  (* hdlname = "aau division safestart" *)
  wire \aau.division.safestart ;
  (* hdlname = "aau division signedunsignedbar" *)
  wire \aau.division.signedunsignedbar ;
  (* hdlname = "aau division startsdiv" *)
  wire \aau.division.startsdiv ;
  (* hdlname = "aau division sync_rst" *)
  wire \aau.division.sync_rst ;
  (* hdlname = "aau division tcldividend ain" *)
  wire [31:0] \aau.division.tcldividend.ain ;
  (* hdlname = "aau division tcldividend ainp" *)
  wire [31:0] \aau.division.tcldividend.ainp ;
  (* hdlname = "aau division tcldividend aout" *)
  wire [31:0] \aau.division.tcldividend.aout ;
  (* hdlname = "aau division tcldividend en" *)
  wire \aau.division.tcldividend.en ;
  (* hdlname = "aau division tcldivisor ain" *)
  wire [31:0] \aau.division.tcldivisor.ain ;
  (* hdlname = "aau division tcldivisor ainp" *)
  wire [31:0] \aau.division.tcldivisor.ainp ;
  (* hdlname = "aau division tcldivisor aout" *)
  wire [31:0] \aau.division.tcldivisor.aout ;
  (* hdlname = "aau division tcldivisor en" *)
  wire \aau.division.tcldivisor.en ;
  (* hdlname = "aau division tclq ain" *)
  wire [31:0] \aau.division.tclq.ain ;
  (* hdlname = "aau division tclq ainp" *)
  wire [31:0] \aau.division.tclq.ainp ;
  (* hdlname = "aau division tclq aout" *)
  wire [31:0] \aau.division.tclq.aout ;
  (* hdlname = "aau division tclq en" *)
  wire \aau.division.tclq.en ;
  (* hdlname = "aau division tclrem ain" *)
  wire [31:0] \aau.division.tclrem.ain ;
  (* hdlname = "aau division tclrem ainp" *)
  wire [31:0] \aau.division.tclrem.ainp ;
  (* hdlname = "aau division tclrem aout" *)
  wire [31:0] \aau.division.tclrem.aout ;
  (* hdlname = "aau division tclrem en" *)
  wire \aau.division.tclrem.en ;
  (* hdlname = "aau division unsigneddiv clk" *)
  wire \aau.division.unsigneddiv.clk ;
  (* hdlname = "aau division unsigneddiv controllerdiv clk" *)
  wire \aau.division.unsigneddiv.controllerdiv.clk ;
  (* hdlname = "aau division unsigneddiv controllerdiv cocnt" *)
  wire \aau.division.unsigneddiv.controllerdiv.cocnt ;
  (* hdlname = "aau division unsigneddiv controllerdiv counter clk" *)
  wire \aau.division.unsigneddiv.controllerdiv.counter.clk ;
  (* hdlname = "aau division unsigneddiv controllerdiv counter cocnt" *)
  wire \aau.division.unsigneddiv.controllerdiv.counter.cocnt ;
  (* hdlname = "aau division unsigneddiv controllerdiv counter cocntp" *)
  wire \aau.division.unsigneddiv.controllerdiv.counter.cocntp ;
  (* hdlname = "aau division unsigneddiv controllerdiv counter inccnt" *)
  wire \aau.division.unsigneddiv.controllerdiv.counter.inccnt ;
  (* hdlname = "aau division unsigneddiv controllerdiv counter initcnt" *)
  wire \aau.division.unsigneddiv.controllerdiv.counter.initcnt ;
  (* hdlname = "aau division unsigneddiv controllerdiv counter initvalue" *)
  wire [5:0] \aau.division.unsigneddiv.controllerdiv.counter.initvalue ;
  (* hdlname = "aau division unsigneddiv controllerdiv counter outcnt" *)
  wire [5:0] \aau.division.unsigneddiv.controllerdiv.counter.outcnt ;
  (* hdlname = "aau division unsigneddiv controllerdiv counter rst" *)
  wire \aau.division.unsigneddiv.controllerdiv.counter.rst ;
  (* hdlname = "aau division unsigneddiv controllerdiv counter temp" *)
  wire [5:0] \aau.division.unsigneddiv.controllerdiv.counter.temp ;
  (* hdlname = "aau division unsigneddiv controllerdiv counter zerocnt" *)
  wire \aau.division.unsigneddiv.controllerdiv.counter.zerocnt ;
  (* hdlname = "aau division unsigneddiv controllerdiv donediv" *)
  wire \aau.division.unsigneddiv.controllerdiv.donediv ;
  (* hdlname = "aau division unsigneddiv controllerdiv inccnt" *)
  wire \aau.division.unsigneddiv.controllerdiv.inccnt ;
  (* hdlname = "aau division unsigneddiv controllerdiv initcnt" *)
  wire \aau.division.unsigneddiv.controllerdiv.initcnt ;
  (* hdlname = "aau division unsigneddiv controllerdiv ldregm" *)
  wire \aau.division.unsigneddiv.controllerdiv.ldregm ;
  (* hdlname = "aau division unsigneddiv controllerdiv ldregq" *)
  wire \aau.division.unsigneddiv.controllerdiv.ldregq ;
  (* hdlname = "aau division unsigneddiv controllerdiv ldregr" *)
  wire \aau.division.unsigneddiv.controllerdiv.ldregr ;
  (* hdlname = "aau division unsigneddiv controllerdiv nstate" *)
  wire [1:0] \aau.division.unsigneddiv.controllerdiv.nstate ;
  (* hdlname = "aau division unsigneddiv controllerdiv pstate" *)
  wire [1:0] \aau.division.unsigneddiv.controllerdiv.pstate ;
  (* hdlname = "aau division unsigneddiv controllerdiv qq0" *)
  wire \aau.division.unsigneddiv.controllerdiv.qq0 ;
  (* hdlname = "aau division unsigneddiv controllerdiv r33" *)
  wire \aau.division.unsigneddiv.controllerdiv.r33 ;
  (* hdlname = "aau division unsigneddiv controllerdiv rst" *)
  wire \aau.division.unsigneddiv.controllerdiv.rst ;
  (* hdlname = "aau division unsigneddiv controllerdiv seldividend" *)
  wire \aau.division.unsigneddiv.controllerdiv.seldividend ;
  (* hdlname = "aau division unsigneddiv controllerdiv selline1" *)
  wire \aau.division.unsigneddiv.controllerdiv.selline1 ;
  (* hdlname = "aau division unsigneddiv controllerdiv shlregq" *)
  wire \aau.division.unsigneddiv.controllerdiv.shlregq ;
  (* hdlname = "aau division unsigneddiv controllerdiv shlregr" *)
  wire \aau.division.unsigneddiv.controllerdiv.shlregr ;
  (* hdlname = "aau division unsigneddiv controllerdiv shrregq" *)
  wire \aau.division.unsigneddiv.controllerdiv.shrregq ;
  (* hdlname = "aau division unsigneddiv controllerdiv shrregr" *)
  wire \aau.division.unsigneddiv.controllerdiv.shrregr ;
  (* hdlname = "aau division unsigneddiv controllerdiv startdiv" *)
  wire \aau.division.unsigneddiv.controllerdiv.startdiv ;
  (* hdlname = "aau division unsigneddiv controllerdiv sync_rst" *)
  wire \aau.division.unsigneddiv.controllerdiv.sync_rst ;
  (* hdlname = "aau division unsigneddiv controllerdiv zerocnt" *)
  wire \aau.division.unsigneddiv.controllerdiv.zerocnt ;
  (* hdlname = "aau division unsigneddiv controllerdiv zeroregm" *)
  wire \aau.division.unsigneddiv.controllerdiv.zeroregm ;
  (* hdlname = "aau division unsigneddiv controllerdiv zeroregq" *)
  wire \aau.division.unsigneddiv.controllerdiv.zeroregq ;
  (* hdlname = "aau division unsigneddiv controllerdiv zeroregr" *)
  wire \aau.division.unsigneddiv.controllerdiv.zeroregr ;
  (* hdlname = "aau division unsigneddiv datapathdiv addresult" *)
  wire [32:0] \aau.division.unsigneddiv.datapathdiv.addresult ;
  (* hdlname = "aau division unsigneddiv datapathdiv clk" *)
  wire \aau.division.unsigneddiv.datapathdiv.clk ;
  (* hdlname = "aau division unsigneddiv datapathdiv dividend" *)
  wire [31:0] \aau.division.unsigneddiv.datapathdiv.dividend ;
  (* hdlname = "aau division unsigneddiv datapathdiv divisor" *)
  wire [31:0] \aau.division.unsigneddiv.datapathdiv.divisor ;
  (* hdlname = "aau division unsigneddiv datapathdiv divisorp" *)
  wire [32:0] \aau.division.unsigneddiv.datapathdiv.divisorp ;
  (* hdlname = "aau division unsigneddiv datapathdiv ldregm" *)
  wire \aau.division.unsigneddiv.datapathdiv.ldregm ;
  (* hdlname = "aau division unsigneddiv datapathdiv ldregq" *)
  wire \aau.division.unsigneddiv.datapathdiv.ldregq ;
  (* hdlname = "aau division unsigneddiv datapathdiv ldregr" *)
  wire \aau.division.unsigneddiv.datapathdiv.ldregr ;
  (* hdlname = "aau division unsigneddiv datapathdiv leftbitoutq" *)
  wire \aau.division.unsigneddiv.datapathdiv.leftbitoutq ;
  (* hdlname = "aau division unsigneddiv datapathdiv line1" *)
  wire [31:0] \aau.division.unsigneddiv.datapathdiv.line1 ;
  (* hdlname = "aau division unsigneddiv datapathdiv m" *)
  wire [32:0] \aau.division.unsigneddiv.datapathdiv.m ;
  (* hdlname = "aau division unsigneddiv datapathdiv mux33b a" *)
  wire [31:0] \aau.division.unsigneddiv.datapathdiv.mux33b.a ;
  (* hdlname = "aau division unsigneddiv datapathdiv mux33b b" *)
  wire [31:0] \aau.division.unsigneddiv.datapathdiv.mux33b.b ;
  (* hdlname = "aau division unsigneddiv datapathdiv mux33b s0" *)
  wire \aau.division.unsigneddiv.datapathdiv.mux33b.s0 ;
  (* hdlname = "aau division unsigneddiv datapathdiv mux33b s1" *)
  wire \aau.division.unsigneddiv.datapathdiv.mux33b.s1 ;
  (* hdlname = "aau division unsigneddiv datapathdiv mux33b w" *)
  wire [31:0] \aau.division.unsigneddiv.datapathdiv.mux33b.w ;
  (* hdlname = "aau division unsigneddiv datapathdiv mux34b a" *)
  wire [32:0] \aau.division.unsigneddiv.datapathdiv.mux34b.a ;
  (* hdlname = "aau division unsigneddiv datapathdiv mux34b b" *)
  wire [32:0] \aau.division.unsigneddiv.datapathdiv.mux34b.b ;
  (* hdlname = "aau division unsigneddiv datapathdiv mux34b s0" *)
  wire \aau.division.unsigneddiv.datapathdiv.mux34b.s0 ;
  (* hdlname = "aau division unsigneddiv datapathdiv mux34b s1" *)
  wire \aau.division.unsigneddiv.datapathdiv.mux34b.s1 ;
  (* hdlname = "aau division unsigneddiv datapathdiv mux34b w" *)
  wire [32:0] \aau.division.unsigneddiv.datapathdiv.mux34b.w ;
  (* hdlname = "aau division unsigneddiv datapathdiv outmux1" *)
  wire [31:0] \aau.division.unsigneddiv.datapathdiv.outmux1 ;
  (* hdlname = "aau division unsigneddiv datapathdiv q" *)
  wire [31:0] \aau.division.unsigneddiv.datapathdiv.q ;
  (* hdlname = "aau division unsigneddiv datapathdiv qprev" *)
  wire [31:0] \aau.division.unsigneddiv.datapathdiv.qprev ;
  (* hdlname = "aau division unsigneddiv datapathdiv qq0" *)
  wire \aau.division.unsigneddiv.datapathdiv.qq0 ;
  (* hdlname = "aau division unsigneddiv datapathdiv r33" *)
  wire \aau.division.unsigneddiv.datapathdiv.r33 ;
  (* hdlname = "aau division unsigneddiv datapathdiv regm clk" *)
  wire \aau.division.unsigneddiv.datapathdiv.regm.clk ;
  (* hdlname = "aau division unsigneddiv datapathdiv regm inreg" *)
  wire [32:0] \aau.division.unsigneddiv.datapathdiv.regm.inreg ;
  (* hdlname = "aau division unsigneddiv datapathdiv regm load" *)
  wire \aau.division.unsigneddiv.datapathdiv.regm.load ;
  (* hdlname = "aau division unsigneddiv datapathdiv regm outreg" *)
  wire [32:0] \aau.division.unsigneddiv.datapathdiv.regm.outreg ;
  (* hdlname = "aau division unsigneddiv datapathdiv regm rst" *)
  wire \aau.division.unsigneddiv.datapathdiv.regm.rst ;
  (* hdlname = "aau division unsigneddiv datapathdiv regm zero" *)
  wire \aau.division.unsigneddiv.datapathdiv.regm.zero ;
  (* hdlname = "aau division unsigneddiv datapathdiv remainder" *)
  wire [32:0] \aau.division.unsigneddiv.datapathdiv.remainder ;
  (* hdlname = "aau division unsigneddiv datapathdiv rprev" *)
  wire [32:0] \aau.division.unsigneddiv.datapathdiv.rprev ;
  (* hdlname = "aau division unsigneddiv datapathdiv rst" *)
  wire \aau.division.unsigneddiv.datapathdiv.rst ;
  (* hdlname = "aau division unsigneddiv datapathdiv seldividend" *)
  wire \aau.division.unsigneddiv.datapathdiv.seldividend ;
  (* hdlname = "aau division unsigneddiv datapathdiv selline1" *)
  wire \aau.division.unsigneddiv.datapathdiv.selline1 ;
  (* hdlname = "aau division unsigneddiv datapathdiv shlregq" *)
  wire \aau.division.unsigneddiv.datapathdiv.shlregq ;
  (* hdlname = "aau division unsigneddiv datapathdiv shlregr" *)
  wire \aau.division.unsigneddiv.datapathdiv.shlregr ;
  (* hdlname = "aau division unsigneddiv datapathdiv shregq 6866.outreg_t" *)
  wire [31:0] \aau.division.unsigneddiv.datapathdiv.shregq.6866.outreg_t ;
  (* hdlname = "aau division unsigneddiv datapathdiv shregq 6866.seroutp" *)
  wire \aau.division.unsigneddiv.datapathdiv.shregq.6866.seroutp ;
  (* hdlname = "aau division unsigneddiv datapathdiv shregq clk" *)
  wire \aau.division.unsigneddiv.datapathdiv.shregq.clk ;
  (* hdlname = "aau division unsigneddiv datapathdiv shregq inreg" *)
  wire [31:0] \aau.division.unsigneddiv.datapathdiv.shregq.inreg ;
  (* hdlname = "aau division unsigneddiv datapathdiv shregq load" *)
  wire \aau.division.unsigneddiv.datapathdiv.shregq.load ;
  (* hdlname = "aau division unsigneddiv datapathdiv shregq outreg" *)
  wire [31:0] \aau.division.unsigneddiv.datapathdiv.shregq.outreg ;
  (* hdlname = "aau division unsigneddiv datapathdiv shregq rst" *)
  wire \aau.division.unsigneddiv.datapathdiv.shregq.rst ;
  (* hdlname = "aau division unsigneddiv datapathdiv shregq serin" *)
  wire \aau.division.unsigneddiv.datapathdiv.shregq.serin ;
  (* hdlname = "aau division unsigneddiv datapathdiv shregq serout" *)
  wire \aau.division.unsigneddiv.datapathdiv.shregq.serout ;
  (* hdlname = "aau division unsigneddiv datapathdiv shregq shiftl" *)
  wire \aau.division.unsigneddiv.datapathdiv.shregq.shiftl ;
  (* hdlname = "aau division unsigneddiv datapathdiv shregq shiftr" *)
  wire \aau.division.unsigneddiv.datapathdiv.shregq.shiftr ;
  (* hdlname = "aau division unsigneddiv datapathdiv shregq zero" *)
  wire \aau.division.unsigneddiv.datapathdiv.shregq.zero ;
  (* hdlname = "aau division unsigneddiv datapathdiv shregr 6833.outreg_t" *)
  wire [32:0] \aau.division.unsigneddiv.datapathdiv.shregr.6833.outreg_t ;
  (* hdlname = "aau division unsigneddiv datapathdiv shregr clk" *)
  wire \aau.division.unsigneddiv.datapathdiv.shregr.clk ;
  (* hdlname = "aau division unsigneddiv datapathdiv shregr inreg" *)
  wire [32:0] \aau.division.unsigneddiv.datapathdiv.shregr.inreg ;
  (* hdlname = "aau division unsigneddiv datapathdiv shregr load" *)
  wire \aau.division.unsigneddiv.datapathdiv.shregr.load ;
  (* hdlname = "aau division unsigneddiv datapathdiv shregr outreg" *)
  wire [32:0] \aau.division.unsigneddiv.datapathdiv.shregr.outreg ;
  (* hdlname = "aau division unsigneddiv datapathdiv shregr rst" *)
  wire \aau.division.unsigneddiv.datapathdiv.shregr.rst ;
  (* hdlname = "aau division unsigneddiv datapathdiv shregr serin" *)
  wire \aau.division.unsigneddiv.datapathdiv.shregr.serin ;
  (* hdlname = "aau division unsigneddiv datapathdiv shregr shiftl" *)
  wire \aau.division.unsigneddiv.datapathdiv.shregr.shiftl ;
  (* hdlname = "aau division unsigneddiv datapathdiv shregr shiftr" *)
  wire \aau.division.unsigneddiv.datapathdiv.shregr.shiftr ;
  (* hdlname = "aau division unsigneddiv datapathdiv shregr zero" *)
  wire \aau.division.unsigneddiv.datapathdiv.shregr.zero ;
  (* hdlname = "aau division unsigneddiv datapathdiv shrregq" *)
  wire \aau.division.unsigneddiv.datapathdiv.shrregq ;
  (* hdlname = "aau division unsigneddiv datapathdiv shrregr" *)
  wire \aau.division.unsigneddiv.datapathdiv.shrregr ;
  (* hdlname = "aau division unsigneddiv datapathdiv smux" *)
  wire \aau.division.unsigneddiv.datapathdiv.smux ;
  (* hdlname = "aau division unsigneddiv datapathdiv sub" *)
  wire [32:0] \aau.division.unsigneddiv.datapathdiv.sub ;
  (* hdlname = "aau division unsigneddiv datapathdiv zeroregm" *)
  wire \aau.division.unsigneddiv.datapathdiv.zeroregm ;
  (* hdlname = "aau division unsigneddiv datapathdiv zeroregq" *)
  wire \aau.division.unsigneddiv.datapathdiv.zeroregq ;
  (* hdlname = "aau division unsigneddiv datapathdiv zeroregr" *)
  wire \aau.division.unsigneddiv.datapathdiv.zeroregr ;
  (* hdlname = "aau division unsigneddiv dividend" *)
  wire [31:0] \aau.division.unsigneddiv.dividend ;
  (* hdlname = "aau division unsigneddiv divisor" *)
  wire [31:0] \aau.division.unsigneddiv.divisor ;
  (* hdlname = "aau division unsigneddiv donediv" *)
  wire \aau.division.unsigneddiv.donediv ;
  (* hdlname = "aau division unsigneddiv ldregm" *)
  wire \aau.division.unsigneddiv.ldregm ;
  (* hdlname = "aau division unsigneddiv ldregq" *)
  wire \aau.division.unsigneddiv.ldregq ;
  (* hdlname = "aau division unsigneddiv ldregr" *)
  wire \aau.division.unsigneddiv.ldregr ;
  (* hdlname = "aau division unsigneddiv q" *)
  wire [31:0] \aau.division.unsigneddiv.q ;
  (* hdlname = "aau division unsigneddiv qq0" *)
  wire \aau.division.unsigneddiv.qq0 ;
  (* hdlname = "aau division unsigneddiv r33" *)
  wire \aau.division.unsigneddiv.r33 ;
  (* hdlname = "aau division unsigneddiv remainder" *)
  wire [32:0] \aau.division.unsigneddiv.remainder ;
  (* hdlname = "aau division unsigneddiv rst" *)
  wire \aau.division.unsigneddiv.rst ;
  (* hdlname = "aau division unsigneddiv seldividend" *)
  wire \aau.division.unsigneddiv.seldividend ;
  (* hdlname = "aau division unsigneddiv selline1" *)
  wire \aau.division.unsigneddiv.selline1 ;
  (* hdlname = "aau division unsigneddiv shlregq" *)
  wire \aau.division.unsigneddiv.shlregq ;
  (* hdlname = "aau division unsigneddiv shlregr" *)
  wire \aau.division.unsigneddiv.shlregr ;
  (* hdlname = "aau division unsigneddiv shrregq" *)
  wire \aau.division.unsigneddiv.shrregq ;
  (* hdlname = "aau division unsigneddiv shrregr" *)
  wire \aau.division.unsigneddiv.shrregr ;
  (* hdlname = "aau division unsigneddiv startdiv" *)
  wire \aau.division.unsigneddiv.startdiv ;
  (* hdlname = "aau division unsigneddiv sync_rst" *)
  wire \aau.division.unsigneddiv.sync_rst ;
  (* hdlname = "aau division unsigneddiv zeroregm" *)
  wire \aau.division.unsigneddiv.zeroregm ;
  (* hdlname = "aau division unsigneddiv zeroregq" *)
  wire \aau.division.unsigneddiv.zeroregq ;
  (* hdlname = "aau division unsigneddiv zeroregr" *)
  wire \aau.division.unsigneddiv.zeroregr ;
  (* hdlname = "aau donediv" *)
  wire \aau.donediv ;
  (* hdlname = "aau donemult" *)
  wire \aau.donemult ;
  (* hdlname = "aau in1mult" *)
  wire [32:0] \aau.in1mult ;
  (* hdlname = "aau in2mult" *)
  wire [32:0] \aau.in2mult ;
  (* hdlname = "aau multiplication clk" *)
  wire \aau.multiplication.clk ;
  (* hdlname = "aau multiplication controller clk" *)
  wire \aau.multiplication.controller.clk ;
  (* hdlname = "aau multiplication controller cnt_en" *)
  wire \aau.multiplication.controller.cnt_en ;
  (* hdlname = "aau multiplication controller cnt_rst" *)
  wire \aau.multiplication.controller.cnt_rst ;
  (* hdlname = "aau multiplication controller co" *)
  wire \aau.multiplication.controller.co ;
  (* hdlname = "aau multiplication controller counter clk" *)
  wire \aau.multiplication.controller.counter.clk ;
  (* hdlname = "aau multiplication controller counter cocnt" *)
  wire \aau.multiplication.controller.counter.cocnt ;
  (* hdlname = "aau multiplication controller counter cocntp" *)
  wire \aau.multiplication.controller.counter.cocntp ;
  (* hdlname = "aau multiplication controller counter inccnt" *)
  wire \aau.multiplication.controller.counter.inccnt ;
  (* hdlname = "aau multiplication controller counter initcnt" *)
  wire \aau.multiplication.controller.counter.initcnt ;
  (* hdlname = "aau multiplication controller counter initvalue" *)
  wire [5:0] \aau.multiplication.controller.counter.initvalue ;
  (* hdlname = "aau multiplication controller counter outcnt" *)
  wire [5:0] \aau.multiplication.controller.counter.outcnt ;
  (* hdlname = "aau multiplication controller counter rst" *)
  wire \aau.multiplication.controller.counter.rst ;
  (* hdlname = "aau multiplication controller counter temp" *)
  wire [5:0] \aau.multiplication.controller.counter.temp ;
  (* hdlname = "aau multiplication controller counter zerocnt" *)
  wire \aau.multiplication.controller.counter.zerocnt ;
  (* hdlname = "aau multiplication controller done" *)
  wire \aau.multiplication.controller.done ;
  (* hdlname = "aau multiplication controller initcnt" *)
  wire \aau.multiplication.controller.initcnt ;
  (* hdlname = "aau multiplication controller ldm" *)
  wire \aau.multiplication.controller.ldm ;
  (* hdlname = "aau multiplication controller ldmr" *)
  wire \aau.multiplication.controller.ldmr ;
  (* hdlname = "aau multiplication controller ldp" *)
  wire \aau.multiplication.controller.ldp ;
  (* hdlname = "aau multiplication controller nstate" *)
  wire [1:0] \aau.multiplication.controller.nstate ;
  (* hdlname = "aau multiplication controller op" *)
  wire [1:0] \aau.multiplication.controller.op ;
  (* hdlname = "aau multiplication controller pstate" *)
  wire [1:0] \aau.multiplication.controller.pstate ;
  (* hdlname = "aau multiplication controller rst" *)
  wire \aau.multiplication.controller.rst ;
  (* hdlname = "aau multiplication controller sel" *)
  wire \aau.multiplication.controller.sel ;
  (* hdlname = "aau multiplication controller shrmr" *)
  wire \aau.multiplication.controller.shrmr ;
  (* hdlname = "aau multiplication controller startbooth" *)
  wire \aau.multiplication.controller.startbooth ;
  (* hdlname = "aau multiplication controller subsel" *)
  wire \aau.multiplication.controller.subsel ;
  (* hdlname = "aau multiplication controller sync_rst" *)
  wire \aau.multiplication.controller.sync_rst ;
  (* hdlname = "aau multiplication controller zerop" *)
  wire \aau.multiplication.controller.zerop ;
  (* hdlname = "aau multiplication datapath addsub a" *)
  wire [32:0] \aau.multiplication.datapath.addsub.a ;
  (* hdlname = "aau multiplication datapath addsub add a" *)
  wire [32:0] \aau.multiplication.datapath.addsub.add.a ;
  (* hdlname = "aau multiplication datapath addsub add add" *)
  (* unused_bits = "33" *)
  wire [33:0] \aau.multiplication.datapath.addsub.add.add ;
  (* hdlname = "aau multiplication datapath addsub add addresult" *)
  wire [32:0] \aau.multiplication.datapath.addsub.add.addresult ;
  (* hdlname = "aau multiplication datapath addsub add b" *)
  wire [32:0] \aau.multiplication.datapath.addsub.add.b ;
  (* hdlname = "aau multiplication datapath addsub add carryout" *)
  (* unused_bits = "0" *)
  wire \aau.multiplication.datapath.addsub.add.carryout ;
  (* hdlname = "aau multiplication datapath addsub add cin" *)
  wire \aau.multiplication.datapath.addsub.add.cin ;
  (* hdlname = "aau multiplication datapath addsub addsubresult" *)
  wire [32:0] \aau.multiplication.datapath.addsub.addsubresult ;
  (* hdlname = "aau multiplication datapath addsub b" *)
  wire [32:0] \aau.multiplication.datapath.addsub.b ;
  (* hdlname = "aau multiplication datapath addsub bsel" *)
  wire [32:0] \aau.multiplication.datapath.addsub.bsel ;
  (* hdlname = "aau multiplication datapath addsub cout" *)
  (* unused_bits = "0" *)
  wire \aau.multiplication.datapath.addsub.cout ;
  (* hdlname = "aau multiplication datapath addsub outres" *)
  wire [32:0] \aau.multiplication.datapath.addsub.outres ;
  (* hdlname = "aau multiplication datapath addsub pass" *)
  wire \aau.multiplication.datapath.addsub.pass ;
  (* hdlname = "aau multiplication datapath addsub subsel" *)
  wire \aau.multiplication.datapath.addsub.subsel ;
  (* hdlname = "aau multiplication datapath clk" *)
  wire \aau.multiplication.datapath.clk ;
  (* hdlname = "aau multiplication datapath ldm" *)
  wire \aau.multiplication.datapath.ldm ;
  (* hdlname = "aau multiplication datapath ldmr" *)
  wire \aau.multiplication.datapath.ldmr ;
  (* hdlname = "aau multiplication datapath ldp" *)
  wire \aau.multiplication.datapath.ldp ;
  (* hdlname = "aau multiplication datapath m" *)
  wire [32:0] \aau.multiplication.datapath.m ;
  (* hdlname = "aau multiplication datapath mr" *)
  wire [32:0] \aau.multiplication.datapath.mr ;
  (* hdlname = "aau multiplication datapath mreg clk" *)
  wire \aau.multiplication.datapath.mreg.clk ;
  (* hdlname = "aau multiplication datapath mreg inreg" *)
  wire [32:0] \aau.multiplication.datapath.mreg.inreg ;
  (* hdlname = "aau multiplication datapath mreg load" *)
  wire \aau.multiplication.datapath.mreg.load ;
  (* hdlname = "aau multiplication datapath mreg outreg" *)
  wire [32:0] \aau.multiplication.datapath.mreg.outreg ;
  (* hdlname = "aau multiplication datapath mreg rst" *)
  wire \aau.multiplication.datapath.mreg.rst ;
  (* hdlname = "aau multiplication datapath mreg zero" *)
  wire \aau.multiplication.datapath.mreg.zero ;
  (* hdlname = "aau multiplication datapath mrreg 6594.outreg_t" *)
  wire [33:0] \aau.multiplication.datapath.mrreg.6594.outreg_t ;
  (* hdlname = "aau multiplication datapath mrreg clk" *)
  wire \aau.multiplication.datapath.mrreg.clk ;
  (* hdlname = "aau multiplication datapath mrreg inreg" *)
  wire [33:0] \aau.multiplication.datapath.mrreg.inreg ;
  (* hdlname = "aau multiplication datapath mrreg load" *)
  wire \aau.multiplication.datapath.mrreg.load ;
  (* hdlname = "aau multiplication datapath mrreg outreg" *)
  wire [33:0] \aau.multiplication.datapath.mrreg.outreg ;
  (* hdlname = "aau multiplication datapath mrreg rst" *)
  wire \aau.multiplication.datapath.mrreg.rst ;
  (* hdlname = "aau multiplication datapath mrreg serin" *)
  wire \aau.multiplication.datapath.mrreg.serin ;
  (* hdlname = "aau multiplication datapath mrreg shiftl" *)
  wire \aau.multiplication.datapath.mrreg.shiftl ;
  (* hdlname = "aau multiplication datapath mrreg shiftr" *)
  wire \aau.multiplication.datapath.mrreg.shiftr ;
  (* hdlname = "aau multiplication datapath mrreg zero" *)
  wire \aau.multiplication.datapath.mrreg.zero ;
  (* hdlname = "aau multiplication datapath op" *)
  wire [1:0] \aau.multiplication.datapath.op ;
  (* hdlname = "aau multiplication datapath outm" *)
  wire [32:0] \aau.multiplication.datapath.outm ;
  (* hdlname = "aau multiplication datapath outmr" *)
  wire [33:0] \aau.multiplication.datapath.outmr ;
  (* hdlname = "aau multiplication datapath p" *)
  wire [65:0] \aau.multiplication.datapath.p ;
  (* hdlname = "aau multiplication datapath pin" *)
  wire [32:0] \aau.multiplication.datapath.pin ;
  (* hdlname = "aau multiplication datapath pout" *)
  wire [32:0] \aau.multiplication.datapath.pout ;
  (* hdlname = "aau multiplication datapath preg clk" *)
  wire \aau.multiplication.datapath.preg.clk ;
  (* hdlname = "aau multiplication datapath preg inreg" *)
  wire [32:0] \aau.multiplication.datapath.preg.inreg ;
  (* hdlname = "aau multiplication datapath preg load" *)
  wire \aau.multiplication.datapath.preg.load ;
  (* hdlname = "aau multiplication datapath preg outreg" *)
  wire [32:0] \aau.multiplication.datapath.preg.outreg ;
  (* hdlname = "aau multiplication datapath preg rst" *)
  wire \aau.multiplication.datapath.preg.rst ;
  (* hdlname = "aau multiplication datapath preg zero" *)
  wire \aau.multiplication.datapath.preg.zero ;
  (* hdlname = "aau multiplication datapath result" *)
  wire [32:0] \aau.multiplication.datapath.result ;
  (* hdlname = "aau multiplication datapath rst" *)
  wire \aau.multiplication.datapath.rst ;
  (* hdlname = "aau multiplication datapath seimr" *)
  wire \aau.multiplication.datapath.seimr ;
  (* hdlname = "aau multiplication datapath sel" *)
  wire \aau.multiplication.datapath.sel ;
  (* hdlname = "aau multiplication datapath shmr" *)
  wire [33:0] \aau.multiplication.datapath.shmr ;
  (* hdlname = "aau multiplication datapath shrmr" *)
  wire \aau.multiplication.datapath.shrmr ;
  (* hdlname = "aau multiplication datapath subsel" *)
  wire \aau.multiplication.datapath.subsel ;
  (* hdlname = "aau multiplication datapath zerop" *)
  wire \aau.multiplication.datapath.zerop ;
  (* hdlname = "aau multiplication donebooth" *)
  wire \aau.multiplication.donebooth ;
  (* hdlname = "aau multiplication ldm" *)
  wire \aau.multiplication.ldm ;
  (* hdlname = "aau multiplication ldmr" *)
  wire \aau.multiplication.ldmr ;
  (* hdlname = "aau multiplication ldp" *)
  wire \aau.multiplication.ldp ;
  (* hdlname = "aau multiplication m" *)
  wire [32:0] \aau.multiplication.m ;
  (* hdlname = "aau multiplication mr" *)
  wire [32:0] \aau.multiplication.mr ;
  (* hdlname = "aau multiplication op" *)
  wire [1:0] \aau.multiplication.op ;
  (* hdlname = "aau multiplication p" *)
  wire [65:0] \aau.multiplication.p ;
  (* hdlname = "aau multiplication rst" *)
  wire \aau.multiplication.rst ;
  (* hdlname = "aau multiplication sel" *)
  wire \aau.multiplication.sel ;
  (* hdlname = "aau multiplication shrmr" *)
  wire \aau.multiplication.shrmr ;
  (* hdlname = "aau multiplication startbooth" *)
  wire \aau.multiplication.startbooth ;
  (* hdlname = "aau multiplication subsel" *)
  wire \aau.multiplication.subsel ;
  (* hdlname = "aau multiplication sync_rst" *)
  wire \aau.multiplication.sync_rst ;
  (* hdlname = "aau multiplication zerop" *)
  wire \aau.multiplication.zerop ;
  (* hdlname = "aau quotient" *)
  wire [31:0] \aau.quotient ;
  (* hdlname = "aau remainder" *)
  wire [31:0] \aau.remainder ;
  (* hdlname = "aau resaau1" *)
  wire [31:0] \aau.resaau1 ;
  (* hdlname = "aau resaau2" *)
  wire [31:0] \aau.resaau2 ;
  (* hdlname = "aau resmult" *)
  wire [65:0] \aau.resmult ;
  (* hdlname = "aau resmulth" *)
  wire [31:0] \aau.resmulth ;
  (* hdlname = "aau resmultl" *)
  wire [31:0] \aau.resmultl ;
  (* hdlname = "aau rst" *)
  wire \aau.rst ;
  (* hdlname = "aau signedsigned" *)
  wire \aau.signedsigned ;
  (* hdlname = "aau signedunsigned" *)
  wire \aau.signedunsigned ;
  (* hdlname = "aau signedunsignedbardiv" *)
  wire \aau.signedunsignedbardiv ;
  (* hdlname = "aau startdivideaau" *)
  wire \aau.startdivideaau ;
  (* hdlname = "aau startmultaau" *)
  wire \aau.startmultaau ;
  (* hdlname = "aau sync_rst" *)
  wire \aau.sync_rst ;
  (* hdlname = "aau unsignedunsigned" *)
  wire \aau.unsignedunsigned ;
  wire [31:0] aauresult;
  wire [11:0] addressregbank;
  (* hdlname = "addsub a" *)
  wire [31:0] \addsub.a ;
  (* hdlname = "addsub add a" *)
  wire [31:0] \addsub.add.a ;
  (* hdlname = "addsub add add" *)
  (* unused_bits = "32" *)
  wire [32:0] \addsub.add.add ;
  (* hdlname = "addsub add addresult" *)
  wire [31:0] \addsub.add.addresult ;
  (* hdlname = "addsub add b" *)
  wire [31:0] \addsub.add.b ;
  (* hdlname = "addsub add carryout" *)
  (* unused_bits = "0" *)
  wire \addsub.add.carryout ;
  (* hdlname = "addsub add cin" *)
  wire \addsub.add.cin ;
  (* hdlname = "addsub addsubresult" *)
  wire [31:0] \addsub.addsubresult ;
  (* hdlname = "addsub b" *)
  wire [31:0] \addsub.b ;
  (* hdlname = "addsub bsel" *)
  wire [31:0] \addsub.bsel ;
  (* hdlname = "addsub cout" *)
  (* unused_bits = "0" *)
  wire \addsub.cout ;
  (* hdlname = "addsub outres" *)
  wire [31:0] \addsub.outres ;
  (* hdlname = "addsub pass" *)
  wire \addsub.pass ;
  (* hdlname = "addsub subsel" *)
  wire \addsub.subsel ;
  input addsubbar;
  wire addsubbar;
  wire [31:0] asuresult;
  output branch_taken;
  wire branch_taken;
  wire branch_taken_int;
  (* hdlname = "bsu nsh" *)
  wire [4:0] \bsu.nsh ;
  (* hdlname = "bsu selsh" *)
  wire [1:0] \bsu.selsh ;
  (* hdlname = "bsu shin" *)
  wire [31:0] \bsu.shin ;
  (* hdlname = "bsu shout" *)
  wire [31:0] \bsu.shout ;
  wire [31:0] bsuresult;
  wire bypass_csr_mirror;
  wire [11:0] bypass_csr_result;
  wire bypass_csr_result_en;
  wire [11:0] bypass_csr_second_operand;
  wire bypass_csr_second_operand_en;
  wire bypass_first;
  wire [4:0] bypass_first_operand;
  wire bypass_first_operand_en;
  wire [4:0] bypass_result;
  wire bypass_result_en;
  wire bypass_second;
  wire bypass_second_csr;
  wire [4:0] bypass_second_operand;
  wire bypass_second_operand_en;
  wire bypass_zero_first_operand;
  wire bypass_zero_second_operand;
  output bytespermemaccess;
  wire bytespermemaccess;
  wire bytespermemaccessdaru;
  wire bytespermemaccessdawu;
  output bytestoreaddaru1;
  wire bytestoreaddaru1;
  wire [31:0] causecode;
  wire [5:0] causecodetemp;
  wire [31:0] ccmie;
  wire ccmiefield;
  wire [31:0] ccmip;
  wire ccuiefield;
  input checkmisaligneddawu;
  wire checkmisaligneddawu;
  input clk;
  wire clk;
  input clrcsr;
  wire clrcsr;
  wire [31:0] cmp_op2;
  input cmp_selaluop2;
  wire cmp_selaluop2;
  input cmp_selop2;
  wire cmp_selop2;
  wire [2:0] cntoutput;
  (* hdlname = "comparator ain" *)
  wire [31:0] \comparator.ain ;
  (* hdlname = "comparator ainp" *)
  wire [31:0] \comparator.ainp ;
  (* hdlname = "comparator bin" *)
  wire [31:0] \comparator.bin ;
  (* hdlname = "comparator binp" *)
  wire [31:0] \comparator.binp ;
  (* hdlname = "comparator comparesignedunsignedbar" *)
  wire \comparator.comparesignedunsignedbar ;
  (* hdlname = "comparator eq" *)
  wire \comparator.eq ;
  (* hdlname = "comparator gt" *)
  wire \comparator.gt ;
  (* hdlname = "comparator lt" *)
  wire \comparator.lt ;
  input comparedsignedunsignedbar;
  wire comparedsignedunsignedbar;
  wire [31:0] comparisonresult;
  output completedaau;
  wire completedaau;
  wire completedaau_aau;
  wire completedaau_int;
  wire completedaau_stored;
  wire completeddaru1;
  output completeddaru1_def;
  wire completeddaru1_def;
  wire completeddaru1_def_int;
  wire completeddaru1_stored;
  wire completeddaru2;
  output completeddaru2_def;
  wire completeddaru2_def;
  wire completeddaru2_stored;
  wire completeddawu;
  output completeddawu_def;
  wire completeddawu_def;
  wire completeddawu_stored;
  (* hdlname = "csr_address_ctrl addressregbank" *)
  wire [11:0] \csr_address_ctrl.addressregbank ;
  (* hdlname = "csr_address_ctrl validaddresscsr" *)
  wire \csr_address_ctrl.validaddresscsr ;
  input csr_from_wb;
  wire csr_from_wb;
  wire [31:0] csr_pc;
  (* hdlname = "csraddressingdecoder cntoutput" *)
  wire [2:0] \csraddressingdecoder.cntoutput ;
  (* hdlname = "csraddressingdecoder outaddr" *)
  wire [11:0] \csraddressingdecoder.outaddr ;
  (* hdlname = "csrcounter clk" *)
  wire \csrcounter.clk ;
  (* hdlname = "csrcounter cocntdn" *)
  wire \csrcounter.cocntdn ;
  (* hdlname = "csrcounter cocntup" *)
  wire \csrcounter.cocntup ;
  (* hdlname = "csrcounter dncnt" *)
  wire \csrcounter.dncnt ;
  (* hdlname = "csrcounter ldcnt" *)
  wire \csrcounter.ldcnt ;
  (* hdlname = "csrcounter ldvalue" *)
  wire [2:0] \csrcounter.ldvalue ;
  (* hdlname = "csrcounter outcnt" *)
  wire [2:0] \csrcounter.outcnt ;
  (* hdlname = "csrcounter rst" *)
  wire \csrcounter.rst ;
  (* hdlname = "csrcounter temp" *)
  wire [2:0] \csrcounter.temp ;
  (* hdlname = "csrcounter upcnt" *)
  wire \csrcounter.upcnt ;
  (* hdlname = "csrcounter zerocnt" *)
  wire \csrcounter.zerocnt ;
  (* hdlname = "csrisl andres" *)
  wire [31:0] \csrisl.andres ;
  (* hdlname = "csrisl causecode" *)
  wire [31:0] \csrisl.causecode ;
  (* hdlname = "csrisl ccmip" *)
  wire [31:0] \csrisl.ccmip ;
  (* hdlname = "csrisl clr" *)
  wire \csrisl.clr ;
  (* hdlname = "csrisl curprv" *)
  wire [1:0] \csrisl.curprv ;
  (* hdlname = "csrisl incsr" *)
  wire [31:0] \csrisl.incsr ;
  (* hdlname = "csrisl ir19_15" *)
  wire [4:0] \csrisl.ir19_15 ;
  (* hdlname = "csrisl machinestatusalterationpostcsr" *)
  wire \csrisl.machinestatusalterationpostcsr ;
  (* hdlname = "csrisl machinestatusalterationprecsr" *)
  wire \csrisl.machinestatusalterationprecsr ;
  (* hdlname = "csrisl mirroruie" *)
  wire \csrisl.mirroruie ;
  (* hdlname = "csrisl mirroruip" *)
  wire \csrisl.mirroruip ;
  (* hdlname = "csrisl mirroruser" *)
  wire \csrisl.mirroruser ;
  (* hdlname = "csrisl mirrorustatus" *)
  wire \csrisl.mirrorustatus ;
  (* hdlname = "csrisl orres" *)
  wire [31:0] \csrisl.orres ;
  (* hdlname = "csrisl outcsr" *)
  wire [31:0] \csrisl.outcsr ;
  (* hdlname = "csrisl p1" *)
  wire [31:0] \csrisl.p1 ;
  (* hdlname = "csrisl pc" *)
  wire [31:0] \csrisl.pc ;
  (* hdlname = "csrisl preincsr" *)
  wire [31:0] \csrisl.preincsr ;
  (* hdlname = "csrisl previousprv" *)
  wire [1:0] \csrisl.previousprv ;
  (* hdlname = "csrisl previousprv_int" *)
  wire [1:0] \csrisl.previousprv_int ;
  (* hdlname = "csrisl regorimm" *)
  wire [31:0] \csrisl.regorimm ;
  (* hdlname = "csrisl selcause" *)
  wire \csrisl.selcause ;
  (* hdlname = "csrisl selim" *)
  wire \csrisl.selim ;
  (* hdlname = "csrisl selmip" *)
  wire \csrisl.selmip ;
  (* hdlname = "csrisl selp1" *)
  wire \csrisl.selp1 ;
  (* hdlname = "csrisl selpc" *)
  wire \csrisl.selpc ;
  (* hdlname = "csrisl selreadwrite" *)
  wire \csrisl.selreadwrite ;
  (* hdlname = "csrisl seltval" *)
  wire \csrisl.seltval ;
  (* hdlname = "csrisl set" *)
  wire \csrisl.set ;
  (* hdlname = "csrisl trapvalue" *)
  wire [31:0] \csrisl.trapvalue ;
  (* hdlname = "csrisl userstatusalterationpostcsr" *)
  wire \csrisl.userstatusalterationpostcsr ;
  (* hdlname = "csrisl userstatusalterationprecsr" *)
  wire \csrisl.userstatusalterationprecsr ;
  wire [1:0] curprv;
  wire [31:0] d2e_alu_op1_curr;
  wire [31:0] d2e_alu_op1_next;
  wire [31:0] d2e_alu_op2_curr;
  wire [31:0] d2e_alu_op2_next;
  wire [63:0] d2e_ctrl_word_curr;
  wire [63:0] d2e_ctrl_word_next;
  wire d2e_ecall_flag_curr;
  input d2e_en;
  wire d2e_en;
  wire d2e_en_def;
  wire d2e_ex_flag_curr;
  wire d2e_ex_flag_next;
  wire d2e_illegal_instruction_flag_curr;
  wire [2:0] d2e_inst_type_curr;
  wire [31:0] d2e_instr_curr;
  wire d2e_instr_misaligned_flag_curr;
  wire [31:0] d2e_op1_curr;
  wire [31:0] d2e_op1_next;
  wire [31:0] d2e_op2_curr;
  wire [31:0] d2e_op2_next;
  wire [31:0] d2e_outcsr_curr;
  wire [31:0] d2e_outcsr_next;
  wire [31:0] d2e_outcsr_next_pre_bypass;
  wire [31:0] d2e_pc_curr;
  wire [31:0] d2e_pc_plus4_curr;
  input d2e_rst;
  wire d2e_rst;
  wire d2e_rst_def;
  wire d2e_valid_curr;
  wire d2e_validaccesscsr_curr;
  (* hdlname = "daru1 addrin" *)
  wire [31:0] \daru1.addrin ;
  (* hdlname = "daru1 addrout" *)
  wire [31:0] \daru1.addrout ;
  (* hdlname = "daru1 bytestoread" *)
  wire \daru1.bytestoread ;
  (* hdlname = "daru1 checkmisaligneddaru" *)
  wire \daru1.checkmisaligneddaru ;
  (* hdlname = "daru1 clk" *)
  wire \daru1.clk ;
  (* hdlname = "daru1 cocnt" *)
  wire \daru1.cocnt ;
  (* hdlname = "daru1 completedaru" *)
  wire \daru1.completedaru ;
  (* hdlname = "daru1 controller clk" *)
  wire \daru1.controller.clk ;
  (* hdlname = "daru1 controller cocnt" *)
  wire \daru1.controller.cocnt ;
  (* hdlname = "daru1 controller completedaru" *)
  wire \daru1.controller.completedaru ;
  (* hdlname = "daru1 controller datainstrbar" *)
  wire \daru1.controller.datainstrbar ;
  (* hdlname = "daru1 controller enableaddr" *)
  wire \daru1.controller.enableaddr ;
  (* hdlname = "daru1 controller enabledata" *)
  wire \daru1.controller.enabledata ;
  (* hdlname = "daru1 controller inccnt" *)
  wire \daru1.controller.inccnt ;
  (* hdlname = "daru1 controller initcnt" *)
  wire \daru1.controller.initcnt ;
  (* hdlname = "daru1 controller initreading" *)
  wire \daru1.controller.initreading ;
  (* hdlname = "daru1 controller ldaddr" *)
  wire \daru1.controller.ldaddr ;
  (* hdlname = "daru1 controller ldnumbytes" *)
  wire \daru1.controller.ldnumbytes ;
  (* hdlname = "daru1 controller memready" *)
  wire \daru1.controller.memready ;
  (* hdlname = "daru1 controller nstate" *)
  wire [1:0] \daru1.controller.nstate ;
  (* hdlname = "daru1 controller pstate" *)
  wire [1:0] \daru1.controller.pstate ;
  (* hdlname = "daru1 controller readmem" *)
  wire \daru1.controller.readmem ;
  (* hdlname = "daru1 controller rst" *)
  wire \daru1.controller.rst ;
  (* hdlname = "daru1 controller select_incoming_data" *)
  wire \daru1.controller.select_incoming_data ;
  (* hdlname = "daru1 controller sellden" *)
  wire \daru1.controller.sellden ;
  (* hdlname = "daru1 controller startdaru" *)
  wire \daru1.controller.startdaru ;
  (* hdlname = "daru1 controller sync_rst" *)
  wire \daru1.controller.sync_rst ;
  (* hdlname = "daru1 controller zerocnt" *)
  wire \daru1.controller.zerocnt ;
  (* hdlname = "daru1 controller zeronumbytes" *)
  wire \daru1.controller.zeronumbytes ;
  (* hdlname = "daru1 datainstrbar" *)
  wire \daru1.datainstrbar ;
  (* hdlname = "daru1 dataout" *)
  wire [31:0] \daru1.dataout ;
  (* hdlname = "daru1 datapath adder a" *)
  wire [31:0] \daru1.datapath.adder.a ;
  (* hdlname = "daru1 datapath adder b" *)
  wire [1:0] \daru1.datapath.adder.b ;
  (* hdlname = "daru1 datapath adder cout" *)
  (* unused_bits = "31" *)
  wire [31:0] \daru1.datapath.adder.cout ;
  (* hdlname = "daru1 datapath adder fa1 a" *)
  wire \daru1.datapath.adder.fa1.a ;
  (* hdlname = "daru1 datapath adder fa1 b" *)
  wire \daru1.datapath.adder.fa1.b ;
  (* hdlname = "daru1 datapath adder fa1 cin" *)
  wire \daru1.datapath.adder.fa1.cin ;
  (* hdlname = "daru1 datapath adder fa1 cout" *)
  wire \daru1.datapath.adder.fa1.cout ;
  (* hdlname = "daru1 datapath adder fa1 s" *)
  wire \daru1.datapath.adder.fa1.s ;
  (* hdlname = "daru1 datapath adder fa2 a" *)
  wire \daru1.datapath.adder.fa2.a ;
  (* hdlname = "daru1 datapath adder fa2 b" *)
  wire \daru1.datapath.adder.fa2.b ;
  (* hdlname = "daru1 datapath adder fa2 cin" *)
  wire \daru1.datapath.adder.fa2.cin ;
  (* hdlname = "daru1 datapath adder fa2 cout" *)
  wire \daru1.datapath.adder.fa2.cout ;
  (* hdlname = "daru1 datapath adder fa2 s" *)
  wire \daru1.datapath.adder.fa2.s ;
  (* hdlname = "daru1 datapath adder gen_halfadder:1.ha i_bit1" *)
  wire \daru1.datapath.adder.gen_halfadder:1.ha.i_bit1 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:1.ha i_bit2" *)
  wire \daru1.datapath.adder.gen_halfadder:1.ha.i_bit2 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:1.ha o_carry" *)
  wire \daru1.datapath.adder.gen_halfadder:1.ha.o_carry ;
  (* hdlname = "daru1 datapath adder gen_halfadder:1.ha o_sum" *)
  wire \daru1.datapath.adder.gen_halfadder:1.ha.o_sum ;
  (* hdlname = "daru1 datapath adder gen_halfadder:10.ha i_bit1" *)
  wire \daru1.datapath.adder.gen_halfadder:10.ha.i_bit1 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:10.ha i_bit2" *)
  wire \daru1.datapath.adder.gen_halfadder:10.ha.i_bit2 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:10.ha o_carry" *)
  wire \daru1.datapath.adder.gen_halfadder:10.ha.o_carry ;
  (* hdlname = "daru1 datapath adder gen_halfadder:10.ha o_sum" *)
  wire \daru1.datapath.adder.gen_halfadder:10.ha.o_sum ;
  (* hdlname = "daru1 datapath adder gen_halfadder:11.ha i_bit1" *)
  wire \daru1.datapath.adder.gen_halfadder:11.ha.i_bit1 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:11.ha i_bit2" *)
  wire \daru1.datapath.adder.gen_halfadder:11.ha.i_bit2 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:11.ha o_carry" *)
  wire \daru1.datapath.adder.gen_halfadder:11.ha.o_carry ;
  (* hdlname = "daru1 datapath adder gen_halfadder:11.ha o_sum" *)
  wire \daru1.datapath.adder.gen_halfadder:11.ha.o_sum ;
  (* hdlname = "daru1 datapath adder gen_halfadder:12.ha i_bit1" *)
  wire \daru1.datapath.adder.gen_halfadder:12.ha.i_bit1 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:12.ha i_bit2" *)
  wire \daru1.datapath.adder.gen_halfadder:12.ha.i_bit2 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:12.ha o_carry" *)
  wire \daru1.datapath.adder.gen_halfadder:12.ha.o_carry ;
  (* hdlname = "daru1 datapath adder gen_halfadder:12.ha o_sum" *)
  wire \daru1.datapath.adder.gen_halfadder:12.ha.o_sum ;
  (* hdlname = "daru1 datapath adder gen_halfadder:13.ha i_bit1" *)
  wire \daru1.datapath.adder.gen_halfadder:13.ha.i_bit1 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:13.ha i_bit2" *)
  wire \daru1.datapath.adder.gen_halfadder:13.ha.i_bit2 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:13.ha o_carry" *)
  wire \daru1.datapath.adder.gen_halfadder:13.ha.o_carry ;
  (* hdlname = "daru1 datapath adder gen_halfadder:13.ha o_sum" *)
  wire \daru1.datapath.adder.gen_halfadder:13.ha.o_sum ;
  (* hdlname = "daru1 datapath adder gen_halfadder:14.ha i_bit1" *)
  wire \daru1.datapath.adder.gen_halfadder:14.ha.i_bit1 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:14.ha i_bit2" *)
  wire \daru1.datapath.adder.gen_halfadder:14.ha.i_bit2 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:14.ha o_carry" *)
  wire \daru1.datapath.adder.gen_halfadder:14.ha.o_carry ;
  (* hdlname = "daru1 datapath adder gen_halfadder:14.ha o_sum" *)
  wire \daru1.datapath.adder.gen_halfadder:14.ha.o_sum ;
  (* hdlname = "daru1 datapath adder gen_halfadder:15.ha i_bit1" *)
  wire \daru1.datapath.adder.gen_halfadder:15.ha.i_bit1 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:15.ha i_bit2" *)
  wire \daru1.datapath.adder.gen_halfadder:15.ha.i_bit2 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:15.ha o_carry" *)
  wire \daru1.datapath.adder.gen_halfadder:15.ha.o_carry ;
  (* hdlname = "daru1 datapath adder gen_halfadder:15.ha o_sum" *)
  wire \daru1.datapath.adder.gen_halfadder:15.ha.o_sum ;
  (* hdlname = "daru1 datapath adder gen_halfadder:16.ha i_bit1" *)
  wire \daru1.datapath.adder.gen_halfadder:16.ha.i_bit1 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:16.ha i_bit2" *)
  wire \daru1.datapath.adder.gen_halfadder:16.ha.i_bit2 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:16.ha o_carry" *)
  wire \daru1.datapath.adder.gen_halfadder:16.ha.o_carry ;
  (* hdlname = "daru1 datapath adder gen_halfadder:16.ha o_sum" *)
  wire \daru1.datapath.adder.gen_halfadder:16.ha.o_sum ;
  (* hdlname = "daru1 datapath adder gen_halfadder:17.ha i_bit1" *)
  wire \daru1.datapath.adder.gen_halfadder:17.ha.i_bit1 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:17.ha i_bit2" *)
  wire \daru1.datapath.adder.gen_halfadder:17.ha.i_bit2 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:17.ha o_carry" *)
  wire \daru1.datapath.adder.gen_halfadder:17.ha.o_carry ;
  (* hdlname = "daru1 datapath adder gen_halfadder:17.ha o_sum" *)
  wire \daru1.datapath.adder.gen_halfadder:17.ha.o_sum ;
  (* hdlname = "daru1 datapath adder gen_halfadder:18.ha i_bit1" *)
  wire \daru1.datapath.adder.gen_halfadder:18.ha.i_bit1 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:18.ha i_bit2" *)
  wire \daru1.datapath.adder.gen_halfadder:18.ha.i_bit2 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:18.ha o_carry" *)
  wire \daru1.datapath.adder.gen_halfadder:18.ha.o_carry ;
  (* hdlname = "daru1 datapath adder gen_halfadder:18.ha o_sum" *)
  wire \daru1.datapath.adder.gen_halfadder:18.ha.o_sum ;
  (* hdlname = "daru1 datapath adder gen_halfadder:19.ha i_bit1" *)
  wire \daru1.datapath.adder.gen_halfadder:19.ha.i_bit1 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:19.ha i_bit2" *)
  wire \daru1.datapath.adder.gen_halfadder:19.ha.i_bit2 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:19.ha o_carry" *)
  wire \daru1.datapath.adder.gen_halfadder:19.ha.o_carry ;
  (* hdlname = "daru1 datapath adder gen_halfadder:19.ha o_sum" *)
  wire \daru1.datapath.adder.gen_halfadder:19.ha.o_sum ;
  (* hdlname = "daru1 datapath adder gen_halfadder:2.ha i_bit1" *)
  wire \daru1.datapath.adder.gen_halfadder:2.ha.i_bit1 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:2.ha i_bit2" *)
  wire \daru1.datapath.adder.gen_halfadder:2.ha.i_bit2 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:2.ha o_carry" *)
  wire \daru1.datapath.adder.gen_halfadder:2.ha.o_carry ;
  (* hdlname = "daru1 datapath adder gen_halfadder:2.ha o_sum" *)
  wire \daru1.datapath.adder.gen_halfadder:2.ha.o_sum ;
  (* hdlname = "daru1 datapath adder gen_halfadder:20.ha i_bit1" *)
  wire \daru1.datapath.adder.gen_halfadder:20.ha.i_bit1 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:20.ha i_bit2" *)
  wire \daru1.datapath.adder.gen_halfadder:20.ha.i_bit2 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:20.ha o_carry" *)
  wire \daru1.datapath.adder.gen_halfadder:20.ha.o_carry ;
  (* hdlname = "daru1 datapath adder gen_halfadder:20.ha o_sum" *)
  wire \daru1.datapath.adder.gen_halfadder:20.ha.o_sum ;
  (* hdlname = "daru1 datapath adder gen_halfadder:21.ha i_bit1" *)
  wire \daru1.datapath.adder.gen_halfadder:21.ha.i_bit1 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:21.ha i_bit2" *)
  wire \daru1.datapath.adder.gen_halfadder:21.ha.i_bit2 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:21.ha o_carry" *)
  wire \daru1.datapath.adder.gen_halfadder:21.ha.o_carry ;
  (* hdlname = "daru1 datapath adder gen_halfadder:21.ha o_sum" *)
  wire \daru1.datapath.adder.gen_halfadder:21.ha.o_sum ;
  (* hdlname = "daru1 datapath adder gen_halfadder:22.ha i_bit1" *)
  wire \daru1.datapath.adder.gen_halfadder:22.ha.i_bit1 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:22.ha i_bit2" *)
  wire \daru1.datapath.adder.gen_halfadder:22.ha.i_bit2 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:22.ha o_carry" *)
  wire \daru1.datapath.adder.gen_halfadder:22.ha.o_carry ;
  (* hdlname = "daru1 datapath adder gen_halfadder:22.ha o_sum" *)
  wire \daru1.datapath.adder.gen_halfadder:22.ha.o_sum ;
  (* hdlname = "daru1 datapath adder gen_halfadder:23.ha i_bit1" *)
  wire \daru1.datapath.adder.gen_halfadder:23.ha.i_bit1 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:23.ha i_bit2" *)
  wire \daru1.datapath.adder.gen_halfadder:23.ha.i_bit2 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:23.ha o_carry" *)
  wire \daru1.datapath.adder.gen_halfadder:23.ha.o_carry ;
  (* hdlname = "daru1 datapath adder gen_halfadder:23.ha o_sum" *)
  wire \daru1.datapath.adder.gen_halfadder:23.ha.o_sum ;
  (* hdlname = "daru1 datapath adder gen_halfadder:24.ha i_bit1" *)
  wire \daru1.datapath.adder.gen_halfadder:24.ha.i_bit1 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:24.ha i_bit2" *)
  wire \daru1.datapath.adder.gen_halfadder:24.ha.i_bit2 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:24.ha o_carry" *)
  wire \daru1.datapath.adder.gen_halfadder:24.ha.o_carry ;
  (* hdlname = "daru1 datapath adder gen_halfadder:24.ha o_sum" *)
  wire \daru1.datapath.adder.gen_halfadder:24.ha.o_sum ;
  (* hdlname = "daru1 datapath adder gen_halfadder:25.ha i_bit1" *)
  wire \daru1.datapath.adder.gen_halfadder:25.ha.i_bit1 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:25.ha i_bit2" *)
  wire \daru1.datapath.adder.gen_halfadder:25.ha.i_bit2 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:25.ha o_carry" *)
  wire \daru1.datapath.adder.gen_halfadder:25.ha.o_carry ;
  (* hdlname = "daru1 datapath adder gen_halfadder:25.ha o_sum" *)
  wire \daru1.datapath.adder.gen_halfadder:25.ha.o_sum ;
  (* hdlname = "daru1 datapath adder gen_halfadder:26.ha i_bit1" *)
  wire \daru1.datapath.adder.gen_halfadder:26.ha.i_bit1 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:26.ha i_bit2" *)
  wire \daru1.datapath.adder.gen_halfadder:26.ha.i_bit2 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:26.ha o_carry" *)
  wire \daru1.datapath.adder.gen_halfadder:26.ha.o_carry ;
  (* hdlname = "daru1 datapath adder gen_halfadder:26.ha o_sum" *)
  wire \daru1.datapath.adder.gen_halfadder:26.ha.o_sum ;
  (* hdlname = "daru1 datapath adder gen_halfadder:27.ha i_bit1" *)
  wire \daru1.datapath.adder.gen_halfadder:27.ha.i_bit1 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:27.ha i_bit2" *)
  wire \daru1.datapath.adder.gen_halfadder:27.ha.i_bit2 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:27.ha o_carry" *)
  wire \daru1.datapath.adder.gen_halfadder:27.ha.o_carry ;
  (* hdlname = "daru1 datapath adder gen_halfadder:27.ha o_sum" *)
  wire \daru1.datapath.adder.gen_halfadder:27.ha.o_sum ;
  (* hdlname = "daru1 datapath adder gen_halfadder:28.ha i_bit1" *)
  wire \daru1.datapath.adder.gen_halfadder:28.ha.i_bit1 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:28.ha i_bit2" *)
  wire \daru1.datapath.adder.gen_halfadder:28.ha.i_bit2 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:28.ha o_carry" *)
  wire \daru1.datapath.adder.gen_halfadder:28.ha.o_carry ;
  (* hdlname = "daru1 datapath adder gen_halfadder:28.ha o_sum" *)
  wire \daru1.datapath.adder.gen_halfadder:28.ha.o_sum ;
  (* hdlname = "daru1 datapath adder gen_halfadder:29.ha i_bit1" *)
  wire \daru1.datapath.adder.gen_halfadder:29.ha.i_bit1 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:29.ha i_bit2" *)
  wire \daru1.datapath.adder.gen_halfadder:29.ha.i_bit2 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:29.ha o_carry" *)
  wire \daru1.datapath.adder.gen_halfadder:29.ha.o_carry ;
  (* hdlname = "daru1 datapath adder gen_halfadder:29.ha o_sum" *)
  wire \daru1.datapath.adder.gen_halfadder:29.ha.o_sum ;
  (* hdlname = "daru1 datapath adder gen_halfadder:3.ha i_bit1" *)
  wire \daru1.datapath.adder.gen_halfadder:3.ha.i_bit1 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:3.ha i_bit2" *)
  wire \daru1.datapath.adder.gen_halfadder:3.ha.i_bit2 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:3.ha o_carry" *)
  wire \daru1.datapath.adder.gen_halfadder:3.ha.o_carry ;
  (* hdlname = "daru1 datapath adder gen_halfadder:3.ha o_sum" *)
  wire \daru1.datapath.adder.gen_halfadder:3.ha.o_sum ;
  (* hdlname = "daru1 datapath adder gen_halfadder:30.ha i_bit1" *)
  wire \daru1.datapath.adder.gen_halfadder:30.ha.i_bit1 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:30.ha i_bit2" *)
  wire \daru1.datapath.adder.gen_halfadder:30.ha.i_bit2 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:30.ha o_carry" *)
  (* unused_bits = "0" *)
  wire \daru1.datapath.adder.gen_halfadder:30.ha.o_carry ;
  (* hdlname = "daru1 datapath adder gen_halfadder:30.ha o_sum" *)
  wire \daru1.datapath.adder.gen_halfadder:30.ha.o_sum ;
  (* hdlname = "daru1 datapath adder gen_halfadder:4.ha i_bit1" *)
  wire \daru1.datapath.adder.gen_halfadder:4.ha.i_bit1 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:4.ha i_bit2" *)
  wire \daru1.datapath.adder.gen_halfadder:4.ha.i_bit2 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:4.ha o_carry" *)
  wire \daru1.datapath.adder.gen_halfadder:4.ha.o_carry ;
  (* hdlname = "daru1 datapath adder gen_halfadder:4.ha o_sum" *)
  wire \daru1.datapath.adder.gen_halfadder:4.ha.o_sum ;
  (* hdlname = "daru1 datapath adder gen_halfadder:5.ha i_bit1" *)
  wire \daru1.datapath.adder.gen_halfadder:5.ha.i_bit1 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:5.ha i_bit2" *)
  wire \daru1.datapath.adder.gen_halfadder:5.ha.i_bit2 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:5.ha o_carry" *)
  wire \daru1.datapath.adder.gen_halfadder:5.ha.o_carry ;
  (* hdlname = "daru1 datapath adder gen_halfadder:5.ha o_sum" *)
  wire \daru1.datapath.adder.gen_halfadder:5.ha.o_sum ;
  (* hdlname = "daru1 datapath adder gen_halfadder:6.ha i_bit1" *)
  wire \daru1.datapath.adder.gen_halfadder:6.ha.i_bit1 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:6.ha i_bit2" *)
  wire \daru1.datapath.adder.gen_halfadder:6.ha.i_bit2 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:6.ha o_carry" *)
  wire \daru1.datapath.adder.gen_halfadder:6.ha.o_carry ;
  (* hdlname = "daru1 datapath adder gen_halfadder:6.ha o_sum" *)
  wire \daru1.datapath.adder.gen_halfadder:6.ha.o_sum ;
  (* hdlname = "daru1 datapath adder gen_halfadder:7.ha i_bit1" *)
  wire \daru1.datapath.adder.gen_halfadder:7.ha.i_bit1 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:7.ha i_bit2" *)
  wire \daru1.datapath.adder.gen_halfadder:7.ha.i_bit2 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:7.ha o_carry" *)
  wire \daru1.datapath.adder.gen_halfadder:7.ha.o_carry ;
  (* hdlname = "daru1 datapath adder gen_halfadder:7.ha o_sum" *)
  wire \daru1.datapath.adder.gen_halfadder:7.ha.o_sum ;
  (* hdlname = "daru1 datapath adder gen_halfadder:8.ha i_bit1" *)
  wire \daru1.datapath.adder.gen_halfadder:8.ha.i_bit1 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:8.ha i_bit2" *)
  wire \daru1.datapath.adder.gen_halfadder:8.ha.i_bit2 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:8.ha o_carry" *)
  wire \daru1.datapath.adder.gen_halfadder:8.ha.o_carry ;
  (* hdlname = "daru1 datapath adder gen_halfadder:8.ha o_sum" *)
  wire \daru1.datapath.adder.gen_halfadder:8.ha.o_sum ;
  (* hdlname = "daru1 datapath adder gen_halfadder:9.ha i_bit1" *)
  wire \daru1.datapath.adder.gen_halfadder:9.ha.i_bit1 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:9.ha i_bit2" *)
  wire \daru1.datapath.adder.gen_halfadder:9.ha.i_bit2 ;
  (* hdlname = "daru1 datapath adder gen_halfadder:9.ha o_carry" *)
  wire \daru1.datapath.adder.gen_halfadder:9.ha.o_carry ;
  (* hdlname = "daru1 datapath adder gen_halfadder:9.ha o_sum" *)
  wire \daru1.datapath.adder.gen_halfadder:9.ha.o_sum ;
  (* hdlname = "daru1 datapath adder sum" *)
  wire [31:0] \daru1.datapath.adder.sum ;
  (* hdlname = "daru1 datapath addrin" *)
  wire [31:0] \daru1.datapath.addrin ;
  (* hdlname = "daru1 datapath addrout" *)
  wire [31:0] \daru1.datapath.addrout ;
  (* hdlname = "daru1 datapath addrreg clk" *)
  wire \daru1.datapath.addrreg.clk ;
  (* hdlname = "daru1 datapath addrreg inreg" *)
  wire [31:0] \daru1.datapath.addrreg.inreg ;
  (* hdlname = "daru1 datapath addrreg load" *)
  wire \daru1.datapath.addrreg.load ;
  (* hdlname = "daru1 datapath addrreg outreg" *)
  wire [31:0] \daru1.datapath.addrreg.outreg ;
  (* hdlname = "daru1 datapath addrreg rst" *)
  wire \daru1.datapath.addrreg.rst ;
  (* hdlname = "daru1 datapath addrreg zero" *)
  wire \daru1.datapath.addrreg.zero ;
  (* hdlname = "daru1 datapath bytecnt" *)
  wire [1:0] \daru1.datapath.bytecnt ;
  (* hdlname = "daru1 datapath bytestoread" *)
  wire \daru1.datapath.bytestoread ;
  (* hdlname = "daru1 datapath bytestoread_temp" *)
  wire \daru1.datapath.bytestoread_temp ;
  (* hdlname = "daru1 datapath checkmisaligneddaru" *)
  wire \daru1.datapath.checkmisaligneddaru ;
  (* hdlname = "daru1 datapath clk" *)
  wire \daru1.datapath.clk ;
  (* hdlname = "daru1 datapath cocnt" *)
  wire \daru1.datapath.cocnt ;
  (* hdlname = "daru1 datapath counter clk" *)
  wire \daru1.datapath.counter.clk ;
  (* hdlname = "daru1 datapath counter cocnt" *)
  wire \daru1.datapath.counter.cocnt ;
  (* hdlname = "daru1 datapath counter cocntp" *)
  wire \daru1.datapath.counter.cocntp ;
  (* hdlname = "daru1 datapath counter inccnt" *)
  wire \daru1.datapath.counter.inccnt ;
  (* hdlname = "daru1 datapath counter initcnt" *)
  wire \daru1.datapath.counter.initcnt ;
  (* hdlname = "daru1 datapath counter initvalue" *)
  wire \daru1.datapath.counter.initvalue ;
  (* hdlname = "daru1 datapath counter outcnt" *)
  wire \daru1.datapath.counter.outcnt ;
  (* hdlname = "daru1 datapath counter rst" *)
  wire \daru1.datapath.counter.rst ;
  (* hdlname = "daru1 datapath counter temp" *)
  wire \daru1.datapath.counter.temp ;
  (* hdlname = "daru1 datapath counter zerocnt" *)
  wire \daru1.datapath.counter.zerocnt ;
  (* hdlname = "daru1 datapath datain" *)
  wire [15:0] \daru1.datapath.datain ;
  (* hdlname = "daru1 datapath datainstrbar" *)
  wire \daru1.datapath.datainstrbar ;
  (* hdlname = "daru1 datapath dataout" *)
  wire [31:0] \daru1.datapath.dataout ;
  (* hdlname = "daru1 datapath dataouthigh_reg" *)
  wire [15:0] \daru1.datapath.dataouthigh_reg ;
  (* hdlname = "daru1 datapath decoder en" *)
  wire \daru1.datapath.decoder.en ;
  (* hdlname = "daru1 datapath decoder indecoder" *)
  wire [1:0] \daru1.datapath.decoder.indecoder ;
  (* hdlname = "daru1 datapath decoder outdecoder" *)
  (* unused_bits = "2 3" *)
  wire [3:0] \daru1.datapath.decoder.outdecoder ;
  (* hdlname = "daru1 datapath enableaddr" *)
  wire \daru1.datapath.enableaddr ;
  (* hdlname = "daru1 datapath enabledata" *)
  wire \daru1.datapath.enabledata ;
  (* hdlname = "daru1 datapath errordecoder addrin" *)
  wire [1:0] \daru1.datapath.errordecoder.addrin ;
  (* hdlname = "daru1 datapath errordecoder checkmisaligneddaru" *)
  wire \daru1.datapath.errordecoder.checkmisaligneddaru ;
  (* hdlname = "daru1 datapath errordecoder cmp_01" *)
  wire \daru1.datapath.errordecoder.cmp_01 ;
  (* hdlname = "daru1 datapath errordecoder cmp_10" *)
  wire \daru1.datapath.errordecoder.cmp_10 ;
  (* hdlname = "daru1 datapath errordecoder cmp_11" *)
  wire \daru1.datapath.errordecoder.cmp_11 ;
  (* hdlname = "daru1 datapath errordecoder datainstrbar" *)
  wire \daru1.datapath.errordecoder.datainstrbar ;
  (* hdlname = "daru1 datapath errordecoder instrmisalignedflag" *)
  wire \daru1.datapath.errordecoder.instrmisalignedflag ;
  (* hdlname = "daru1 datapath errordecoder loadmisalignedflag" *)
  wire \daru1.datapath.errordecoder.loadmisalignedflag ;
  (* hdlname = "daru1 datapath errordecoder misalignederrorp" *)
  wire \daru1.datapath.errordecoder.misalignederrorp ;
  (* hdlname = "daru1 datapath errordecoder nbytes" *)
  wire [1:0] \daru1.datapath.errordecoder.nbytes ;
  (* hdlname = "daru1 datapath inccnt" *)
  wire \daru1.datapath.inccnt ;
  (* hdlname = "daru1 datapath initcnt" *)
  wire \daru1.datapath.initcnt ;
  (* hdlname = "daru1 datapath initreading" *)
  wire \daru1.datapath.initreading ;
  (* hdlname = "daru1 datapath initvaluecnt" *)
  wire [1:0] \daru1.datapath.initvaluecnt ;
  (* hdlname = "daru1 datapath instrmisalignedflag" *)
  wire \daru1.datapath.instrmisalignedflag ;
  (* hdlname = "daru1 datapath ldaddr" *)
  wire \daru1.datapath.ldaddr ;
  (* hdlname = "daru1 datapath ldnumbytes" *)
  wire \daru1.datapath.ldnumbytes ;
  (* hdlname = "daru1 datapath loadmisalignedflag" *)
  wire \daru1.datapath.loadmisalignedflag ;
  (* hdlname = "daru1 datapath memdata" *)
  wire [15:0] \daru1.datapath.memdata ;
  (* hdlname = "daru1 datapath nbytereg clk" *)
  wire \daru1.datapath.nbytereg.clk ;
  (* hdlname = "daru1 datapath nbytereg inreg" *)
  wire [1:0] \daru1.datapath.nbytereg.inreg ;
  (* hdlname = "daru1 datapath nbytereg load" *)
  wire \daru1.datapath.nbytereg.load ;
  (* hdlname = "daru1 datapath nbytereg outreg" *)
  wire [1:0] \daru1.datapath.nbytereg.outreg ;
  (* hdlname = "daru1 datapath nbytereg rst" *)
  wire \daru1.datapath.nbytereg.rst ;
  (* hdlname = "daru1 datapath nbytereg zero" *)
  wire \daru1.datapath.nbytereg.zero ;
  (* hdlname = "daru1 datapath nbytes" *)
  wire [1:0] \daru1.datapath.nbytes ;
  (* hdlname = "daru1 datapath nbytesout" *)
  wire [1:0] \daru1.datapath.nbytesout ;
  (* hdlname = "daru1 datapath outcnt" *)
  wire \daru1.datapath.outcnt ;
  (* hdlname = "daru1 datapath outcnt_ext" *)
  wire [1:0] \daru1.datapath.outcnt_ext ;
  (* hdlname = "daru1 datapath outdecoder" *)
  (* unused_bits = "2 3" *)
  wire [3:0] \daru1.datapath.outdecoder ;
  (* hdlname = "daru1 datapath readaddr" *)
  wire [31:0] \daru1.datapath.readaddr ;
  (* hdlname = "daru1 datapath readaddrout" *)
  wire [31:0] \daru1.datapath.readaddrout ;
  (* hdlname = "daru1 datapath readaddrp" *)
  wire [31:0] \daru1.datapath.readaddrp ;
  (* hdlname = "daru1 datapath reg0 clk" *)
  wire \daru1.datapath.reg0.clk ;
  (* hdlname = "daru1 datapath reg0 inreg" *)
  wire [15:0] \daru1.datapath.reg0.inreg ;
  (* hdlname = "daru1 datapath reg0 load" *)
  wire \daru1.datapath.reg0.load ;
  (* hdlname = "daru1 datapath reg0 outreg" *)
  wire [15:0] \daru1.datapath.reg0.outreg ;
  (* hdlname = "daru1 datapath reg0 rst" *)
  wire \daru1.datapath.reg0.rst ;
  (* hdlname = "daru1 datapath reg0 zero" *)
  wire \daru1.datapath.reg0.zero ;
  (* hdlname = "daru1 datapath reg1 clk" *)
  wire \daru1.datapath.reg1.clk ;
  (* hdlname = "daru1 datapath reg1 inreg" *)
  wire [15:0] \daru1.datapath.reg1.inreg ;
  (* hdlname = "daru1 datapath reg1 load" *)
  wire \daru1.datapath.reg1.load ;
  (* hdlname = "daru1 datapath reg1 outreg" *)
  wire [15:0] \daru1.datapath.reg1.outreg ;
  (* hdlname = "daru1 datapath reg1 rst" *)
  wire \daru1.datapath.reg1.rst ;
  (* hdlname = "daru1 datapath reg1 zero" *)
  wire \daru1.datapath.reg1.zero ;
  (* hdlname = "daru1 datapath rst" *)
  wire \daru1.datapath.rst ;
  (* hdlname = "daru1 datapath select_incoming_data" *)
  wire \daru1.datapath.select_incoming_data ;
  (* hdlname = "daru1 datapath sellden" *)
  wire \daru1.datapath.sellden ;
  (* hdlname = "daru1 datapath zerocnt" *)
  wire \daru1.datapath.zerocnt ;
  (* hdlname = "daru1 datapath zeronumbytes" *)
  wire \daru1.datapath.zeronumbytes ;
  (* hdlname = "daru1 enableaddr" *)
  wire \daru1.enableaddr ;
  (* hdlname = "daru1 enabledata" *)
  wire \daru1.enabledata ;
  (* hdlname = "daru1 inccnt" *)
  wire \daru1.inccnt ;
  (* hdlname = "daru1 initcnt" *)
  wire \daru1.initcnt ;
  (* hdlname = "daru1 initreading" *)
  wire \daru1.initreading ;
  (* hdlname = "daru1 instrmisalignedflag" *)
  wire \daru1.instrmisalignedflag ;
  (* hdlname = "daru1 ldaddr" *)
  wire \daru1.ldaddr ;
  (* hdlname = "daru1 ldnumbytes" *)
  wire \daru1.ldnumbytes ;
  (* hdlname = "daru1 loadmisalignedflag" *)
  wire \daru1.loadmisalignedflag ;
  (* hdlname = "daru1 memdata" *)
  wire [15:0] \daru1.memdata ;
  (* hdlname = "daru1 memready" *)
  wire \daru1.memready ;
  (* hdlname = "daru1 nbytes" *)
  wire [1:0] \daru1.nbytes ;
  (* hdlname = "daru1 readaddrout" *)
  wire [31:0] \daru1.readaddrout ;
  (* hdlname = "daru1 readmem" *)
  wire \daru1.readmem ;
  (* hdlname = "daru1 rst" *)
  wire \daru1.rst ;
  (* hdlname = "daru1 select_incoming_data" *)
  wire \daru1.select_incoming_data ;
  (* hdlname = "daru1 sellden" *)
  wire \daru1.sellden ;
  (* hdlname = "daru1 startdaru" *)
  wire \daru1.startdaru ;
  (* hdlname = "daru1 sync_rst" *)
  wire \daru1.sync_rst ;
  (* hdlname = "daru1 zerocnt" *)
  wire \daru1.zerocnt ;
  (* hdlname = "daru1 zeronumbytes" *)
  wire \daru1.zeronumbytes ;
  wire daru1_en;
  wire daru1_en_def;
  (* hdlname = "daru2 addrin" *)
  wire [31:0] \daru2.addrin ;
  (* hdlname = "daru2 addrout" *)
  wire [31:0] \daru2.addrout ;
  (* hdlname = "daru2 bytestoread" *)
  wire \daru2.bytestoread ;
  (* hdlname = "daru2 checkmisaligneddaru" *)
  wire \daru2.checkmisaligneddaru ;
  (* hdlname = "daru2 clk" *)
  wire \daru2.clk ;
  (* hdlname = "daru2 cocnt" *)
  wire \daru2.cocnt ;
  (* hdlname = "daru2 completedaru" *)
  wire \daru2.completedaru ;
  (* hdlname = "daru2 controller clk" *)
  wire \daru2.controller.clk ;
  (* hdlname = "daru2 controller cocnt" *)
  wire \daru2.controller.cocnt ;
  (* hdlname = "daru2 controller completedaru" *)
  wire \daru2.controller.completedaru ;
  (* hdlname = "daru2 controller datainstrbar" *)
  wire \daru2.controller.datainstrbar ;
  (* hdlname = "daru2 controller enableaddr" *)
  wire \daru2.controller.enableaddr ;
  (* hdlname = "daru2 controller enabledata" *)
  wire \daru2.controller.enabledata ;
  (* hdlname = "daru2 controller inccnt" *)
  wire \daru2.controller.inccnt ;
  (* hdlname = "daru2 controller initcnt" *)
  wire \daru2.controller.initcnt ;
  (* hdlname = "daru2 controller initreading" *)
  wire \daru2.controller.initreading ;
  (* hdlname = "daru2 controller ldaddr" *)
  wire \daru2.controller.ldaddr ;
  (* hdlname = "daru2 controller ldnumbytes" *)
  wire \daru2.controller.ldnumbytes ;
  (* hdlname = "daru2 controller memready" *)
  wire \daru2.controller.memready ;
  (* hdlname = "daru2 controller nstate" *)
  wire [1:0] \daru2.controller.nstate ;
  (* hdlname = "daru2 controller pstate" *)
  wire [1:0] \daru2.controller.pstate ;
  (* hdlname = "daru2 controller readmem" *)
  wire \daru2.controller.readmem ;
  (* hdlname = "daru2 controller rst" *)
  wire \daru2.controller.rst ;
  (* hdlname = "daru2 controller select_incoming_data" *)
  wire \daru2.controller.select_incoming_data ;
  (* hdlname = "daru2 controller sellden" *)
  wire \daru2.controller.sellden ;
  (* hdlname = "daru2 controller startdaru" *)
  wire \daru2.controller.startdaru ;
  (* hdlname = "daru2 controller sync_rst" *)
  wire \daru2.controller.sync_rst ;
  (* hdlname = "daru2 controller zerocnt" *)
  wire \daru2.controller.zerocnt ;
  (* hdlname = "daru2 controller zeronumbytes" *)
  wire \daru2.controller.zeronumbytes ;
  (* hdlname = "daru2 datainstrbar" *)
  wire \daru2.datainstrbar ;
  (* hdlname = "daru2 dataout" *)
  wire [31:0] \daru2.dataout ;
  (* hdlname = "daru2 datapath adder a" *)
  wire [31:0] \daru2.datapath.adder.a ;
  (* hdlname = "daru2 datapath adder b" *)
  wire [1:0] \daru2.datapath.adder.b ;
  (* hdlname = "daru2 datapath adder cout" *)
  (* unused_bits = "31" *)
  wire [31:0] \daru2.datapath.adder.cout ;
  (* hdlname = "daru2 datapath adder fa1 a" *)
  wire \daru2.datapath.adder.fa1.a ;
  (* hdlname = "daru2 datapath adder fa1 b" *)
  wire \daru2.datapath.adder.fa1.b ;
  (* hdlname = "daru2 datapath adder fa1 cin" *)
  wire \daru2.datapath.adder.fa1.cin ;
  (* hdlname = "daru2 datapath adder fa1 cout" *)
  wire \daru2.datapath.adder.fa1.cout ;
  (* hdlname = "daru2 datapath adder fa1 s" *)
  wire \daru2.datapath.adder.fa1.s ;
  (* hdlname = "daru2 datapath adder fa2 a" *)
  wire \daru2.datapath.adder.fa2.a ;
  (* hdlname = "daru2 datapath adder fa2 b" *)
  wire \daru2.datapath.adder.fa2.b ;
  (* hdlname = "daru2 datapath adder fa2 cin" *)
  wire \daru2.datapath.adder.fa2.cin ;
  (* hdlname = "daru2 datapath adder fa2 cout" *)
  wire \daru2.datapath.adder.fa2.cout ;
  (* hdlname = "daru2 datapath adder fa2 s" *)
  wire \daru2.datapath.adder.fa2.s ;
  (* hdlname = "daru2 datapath adder gen_halfadder:1.ha i_bit1" *)
  wire \daru2.datapath.adder.gen_halfadder:1.ha.i_bit1 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:1.ha i_bit2" *)
  wire \daru2.datapath.adder.gen_halfadder:1.ha.i_bit2 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:1.ha o_carry" *)
  wire \daru2.datapath.adder.gen_halfadder:1.ha.o_carry ;
  (* hdlname = "daru2 datapath adder gen_halfadder:1.ha o_sum" *)
  wire \daru2.datapath.adder.gen_halfadder:1.ha.o_sum ;
  (* hdlname = "daru2 datapath adder gen_halfadder:10.ha i_bit1" *)
  wire \daru2.datapath.adder.gen_halfadder:10.ha.i_bit1 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:10.ha i_bit2" *)
  wire \daru2.datapath.adder.gen_halfadder:10.ha.i_bit2 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:10.ha o_carry" *)
  wire \daru2.datapath.adder.gen_halfadder:10.ha.o_carry ;
  (* hdlname = "daru2 datapath adder gen_halfadder:10.ha o_sum" *)
  wire \daru2.datapath.adder.gen_halfadder:10.ha.o_sum ;
  (* hdlname = "daru2 datapath adder gen_halfadder:11.ha i_bit1" *)
  wire \daru2.datapath.adder.gen_halfadder:11.ha.i_bit1 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:11.ha i_bit2" *)
  wire \daru2.datapath.adder.gen_halfadder:11.ha.i_bit2 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:11.ha o_carry" *)
  wire \daru2.datapath.adder.gen_halfadder:11.ha.o_carry ;
  (* hdlname = "daru2 datapath adder gen_halfadder:11.ha o_sum" *)
  wire \daru2.datapath.adder.gen_halfadder:11.ha.o_sum ;
  (* hdlname = "daru2 datapath adder gen_halfadder:12.ha i_bit1" *)
  wire \daru2.datapath.adder.gen_halfadder:12.ha.i_bit1 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:12.ha i_bit2" *)
  wire \daru2.datapath.adder.gen_halfadder:12.ha.i_bit2 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:12.ha o_carry" *)
  wire \daru2.datapath.adder.gen_halfadder:12.ha.o_carry ;
  (* hdlname = "daru2 datapath adder gen_halfadder:12.ha o_sum" *)
  wire \daru2.datapath.adder.gen_halfadder:12.ha.o_sum ;
  (* hdlname = "daru2 datapath adder gen_halfadder:13.ha i_bit1" *)
  wire \daru2.datapath.adder.gen_halfadder:13.ha.i_bit1 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:13.ha i_bit2" *)
  wire \daru2.datapath.adder.gen_halfadder:13.ha.i_bit2 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:13.ha o_carry" *)
  wire \daru2.datapath.adder.gen_halfadder:13.ha.o_carry ;
  (* hdlname = "daru2 datapath adder gen_halfadder:13.ha o_sum" *)
  wire \daru2.datapath.adder.gen_halfadder:13.ha.o_sum ;
  (* hdlname = "daru2 datapath adder gen_halfadder:14.ha i_bit1" *)
  wire \daru2.datapath.adder.gen_halfadder:14.ha.i_bit1 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:14.ha i_bit2" *)
  wire \daru2.datapath.adder.gen_halfadder:14.ha.i_bit2 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:14.ha o_carry" *)
  wire \daru2.datapath.adder.gen_halfadder:14.ha.o_carry ;
  (* hdlname = "daru2 datapath adder gen_halfadder:14.ha o_sum" *)
  wire \daru2.datapath.adder.gen_halfadder:14.ha.o_sum ;
  (* hdlname = "daru2 datapath adder gen_halfadder:15.ha i_bit1" *)
  wire \daru2.datapath.adder.gen_halfadder:15.ha.i_bit1 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:15.ha i_bit2" *)
  wire \daru2.datapath.adder.gen_halfadder:15.ha.i_bit2 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:15.ha o_carry" *)
  wire \daru2.datapath.adder.gen_halfadder:15.ha.o_carry ;
  (* hdlname = "daru2 datapath adder gen_halfadder:15.ha o_sum" *)
  wire \daru2.datapath.adder.gen_halfadder:15.ha.o_sum ;
  (* hdlname = "daru2 datapath adder gen_halfadder:16.ha i_bit1" *)
  wire \daru2.datapath.adder.gen_halfadder:16.ha.i_bit1 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:16.ha i_bit2" *)
  wire \daru2.datapath.adder.gen_halfadder:16.ha.i_bit2 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:16.ha o_carry" *)
  wire \daru2.datapath.adder.gen_halfadder:16.ha.o_carry ;
  (* hdlname = "daru2 datapath adder gen_halfadder:16.ha o_sum" *)
  wire \daru2.datapath.adder.gen_halfadder:16.ha.o_sum ;
  (* hdlname = "daru2 datapath adder gen_halfadder:17.ha i_bit1" *)
  wire \daru2.datapath.adder.gen_halfadder:17.ha.i_bit1 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:17.ha i_bit2" *)
  wire \daru2.datapath.adder.gen_halfadder:17.ha.i_bit2 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:17.ha o_carry" *)
  wire \daru2.datapath.adder.gen_halfadder:17.ha.o_carry ;
  (* hdlname = "daru2 datapath adder gen_halfadder:17.ha o_sum" *)
  wire \daru2.datapath.adder.gen_halfadder:17.ha.o_sum ;
  (* hdlname = "daru2 datapath adder gen_halfadder:18.ha i_bit1" *)
  wire \daru2.datapath.adder.gen_halfadder:18.ha.i_bit1 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:18.ha i_bit2" *)
  wire \daru2.datapath.adder.gen_halfadder:18.ha.i_bit2 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:18.ha o_carry" *)
  wire \daru2.datapath.adder.gen_halfadder:18.ha.o_carry ;
  (* hdlname = "daru2 datapath adder gen_halfadder:18.ha o_sum" *)
  wire \daru2.datapath.adder.gen_halfadder:18.ha.o_sum ;
  (* hdlname = "daru2 datapath adder gen_halfadder:19.ha i_bit1" *)
  wire \daru2.datapath.adder.gen_halfadder:19.ha.i_bit1 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:19.ha i_bit2" *)
  wire \daru2.datapath.adder.gen_halfadder:19.ha.i_bit2 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:19.ha o_carry" *)
  wire \daru2.datapath.adder.gen_halfadder:19.ha.o_carry ;
  (* hdlname = "daru2 datapath adder gen_halfadder:19.ha o_sum" *)
  wire \daru2.datapath.adder.gen_halfadder:19.ha.o_sum ;
  (* hdlname = "daru2 datapath adder gen_halfadder:2.ha i_bit1" *)
  wire \daru2.datapath.adder.gen_halfadder:2.ha.i_bit1 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:2.ha i_bit2" *)
  wire \daru2.datapath.adder.gen_halfadder:2.ha.i_bit2 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:2.ha o_carry" *)
  wire \daru2.datapath.adder.gen_halfadder:2.ha.o_carry ;
  (* hdlname = "daru2 datapath adder gen_halfadder:2.ha o_sum" *)
  wire \daru2.datapath.adder.gen_halfadder:2.ha.o_sum ;
  (* hdlname = "daru2 datapath adder gen_halfadder:20.ha i_bit1" *)
  wire \daru2.datapath.adder.gen_halfadder:20.ha.i_bit1 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:20.ha i_bit2" *)
  wire \daru2.datapath.adder.gen_halfadder:20.ha.i_bit2 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:20.ha o_carry" *)
  wire \daru2.datapath.adder.gen_halfadder:20.ha.o_carry ;
  (* hdlname = "daru2 datapath adder gen_halfadder:20.ha o_sum" *)
  wire \daru2.datapath.adder.gen_halfadder:20.ha.o_sum ;
  (* hdlname = "daru2 datapath adder gen_halfadder:21.ha i_bit1" *)
  wire \daru2.datapath.adder.gen_halfadder:21.ha.i_bit1 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:21.ha i_bit2" *)
  wire \daru2.datapath.adder.gen_halfadder:21.ha.i_bit2 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:21.ha o_carry" *)
  wire \daru2.datapath.adder.gen_halfadder:21.ha.o_carry ;
  (* hdlname = "daru2 datapath adder gen_halfadder:21.ha o_sum" *)
  wire \daru2.datapath.adder.gen_halfadder:21.ha.o_sum ;
  (* hdlname = "daru2 datapath adder gen_halfadder:22.ha i_bit1" *)
  wire \daru2.datapath.adder.gen_halfadder:22.ha.i_bit1 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:22.ha i_bit2" *)
  wire \daru2.datapath.adder.gen_halfadder:22.ha.i_bit2 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:22.ha o_carry" *)
  wire \daru2.datapath.adder.gen_halfadder:22.ha.o_carry ;
  (* hdlname = "daru2 datapath adder gen_halfadder:22.ha o_sum" *)
  wire \daru2.datapath.adder.gen_halfadder:22.ha.o_sum ;
  (* hdlname = "daru2 datapath adder gen_halfadder:23.ha i_bit1" *)
  wire \daru2.datapath.adder.gen_halfadder:23.ha.i_bit1 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:23.ha i_bit2" *)
  wire \daru2.datapath.adder.gen_halfadder:23.ha.i_bit2 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:23.ha o_carry" *)
  wire \daru2.datapath.adder.gen_halfadder:23.ha.o_carry ;
  (* hdlname = "daru2 datapath adder gen_halfadder:23.ha o_sum" *)
  wire \daru2.datapath.adder.gen_halfadder:23.ha.o_sum ;
  (* hdlname = "daru2 datapath adder gen_halfadder:24.ha i_bit1" *)
  wire \daru2.datapath.adder.gen_halfadder:24.ha.i_bit1 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:24.ha i_bit2" *)
  wire \daru2.datapath.adder.gen_halfadder:24.ha.i_bit2 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:24.ha o_carry" *)
  wire \daru2.datapath.adder.gen_halfadder:24.ha.o_carry ;
  (* hdlname = "daru2 datapath adder gen_halfadder:24.ha o_sum" *)
  wire \daru2.datapath.adder.gen_halfadder:24.ha.o_sum ;
  (* hdlname = "daru2 datapath adder gen_halfadder:25.ha i_bit1" *)
  wire \daru2.datapath.adder.gen_halfadder:25.ha.i_bit1 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:25.ha i_bit2" *)
  wire \daru2.datapath.adder.gen_halfadder:25.ha.i_bit2 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:25.ha o_carry" *)
  wire \daru2.datapath.adder.gen_halfadder:25.ha.o_carry ;
  (* hdlname = "daru2 datapath adder gen_halfadder:25.ha o_sum" *)
  wire \daru2.datapath.adder.gen_halfadder:25.ha.o_sum ;
  (* hdlname = "daru2 datapath adder gen_halfadder:26.ha i_bit1" *)
  wire \daru2.datapath.adder.gen_halfadder:26.ha.i_bit1 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:26.ha i_bit2" *)
  wire \daru2.datapath.adder.gen_halfadder:26.ha.i_bit2 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:26.ha o_carry" *)
  wire \daru2.datapath.adder.gen_halfadder:26.ha.o_carry ;
  (* hdlname = "daru2 datapath adder gen_halfadder:26.ha o_sum" *)
  wire \daru2.datapath.adder.gen_halfadder:26.ha.o_sum ;
  (* hdlname = "daru2 datapath adder gen_halfadder:27.ha i_bit1" *)
  wire \daru2.datapath.adder.gen_halfadder:27.ha.i_bit1 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:27.ha i_bit2" *)
  wire \daru2.datapath.adder.gen_halfadder:27.ha.i_bit2 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:27.ha o_carry" *)
  wire \daru2.datapath.adder.gen_halfadder:27.ha.o_carry ;
  (* hdlname = "daru2 datapath adder gen_halfadder:27.ha o_sum" *)
  wire \daru2.datapath.adder.gen_halfadder:27.ha.o_sum ;
  (* hdlname = "daru2 datapath adder gen_halfadder:28.ha i_bit1" *)
  wire \daru2.datapath.adder.gen_halfadder:28.ha.i_bit1 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:28.ha i_bit2" *)
  wire \daru2.datapath.adder.gen_halfadder:28.ha.i_bit2 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:28.ha o_carry" *)
  wire \daru2.datapath.adder.gen_halfadder:28.ha.o_carry ;
  (* hdlname = "daru2 datapath adder gen_halfadder:28.ha o_sum" *)
  wire \daru2.datapath.adder.gen_halfadder:28.ha.o_sum ;
  (* hdlname = "daru2 datapath adder gen_halfadder:29.ha i_bit1" *)
  wire \daru2.datapath.adder.gen_halfadder:29.ha.i_bit1 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:29.ha i_bit2" *)
  wire \daru2.datapath.adder.gen_halfadder:29.ha.i_bit2 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:29.ha o_carry" *)
  wire \daru2.datapath.adder.gen_halfadder:29.ha.o_carry ;
  (* hdlname = "daru2 datapath adder gen_halfadder:29.ha o_sum" *)
  wire \daru2.datapath.adder.gen_halfadder:29.ha.o_sum ;
  (* hdlname = "daru2 datapath adder gen_halfadder:3.ha i_bit1" *)
  wire \daru2.datapath.adder.gen_halfadder:3.ha.i_bit1 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:3.ha i_bit2" *)
  wire \daru2.datapath.adder.gen_halfadder:3.ha.i_bit2 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:3.ha o_carry" *)
  wire \daru2.datapath.adder.gen_halfadder:3.ha.o_carry ;
  (* hdlname = "daru2 datapath adder gen_halfadder:3.ha o_sum" *)
  wire \daru2.datapath.adder.gen_halfadder:3.ha.o_sum ;
  (* hdlname = "daru2 datapath adder gen_halfadder:30.ha i_bit1" *)
  wire \daru2.datapath.adder.gen_halfadder:30.ha.i_bit1 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:30.ha i_bit2" *)
  wire \daru2.datapath.adder.gen_halfadder:30.ha.i_bit2 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:30.ha o_carry" *)
  (* unused_bits = "0" *)
  wire \daru2.datapath.adder.gen_halfadder:30.ha.o_carry ;
  (* hdlname = "daru2 datapath adder gen_halfadder:30.ha o_sum" *)
  wire \daru2.datapath.adder.gen_halfadder:30.ha.o_sum ;
  (* hdlname = "daru2 datapath adder gen_halfadder:4.ha i_bit1" *)
  wire \daru2.datapath.adder.gen_halfadder:4.ha.i_bit1 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:4.ha i_bit2" *)
  wire \daru2.datapath.adder.gen_halfadder:4.ha.i_bit2 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:4.ha o_carry" *)
  wire \daru2.datapath.adder.gen_halfadder:4.ha.o_carry ;
  (* hdlname = "daru2 datapath adder gen_halfadder:4.ha o_sum" *)
  wire \daru2.datapath.adder.gen_halfadder:4.ha.o_sum ;
  (* hdlname = "daru2 datapath adder gen_halfadder:5.ha i_bit1" *)
  wire \daru2.datapath.adder.gen_halfadder:5.ha.i_bit1 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:5.ha i_bit2" *)
  wire \daru2.datapath.adder.gen_halfadder:5.ha.i_bit2 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:5.ha o_carry" *)
  wire \daru2.datapath.adder.gen_halfadder:5.ha.o_carry ;
  (* hdlname = "daru2 datapath adder gen_halfadder:5.ha o_sum" *)
  wire \daru2.datapath.adder.gen_halfadder:5.ha.o_sum ;
  (* hdlname = "daru2 datapath adder gen_halfadder:6.ha i_bit1" *)
  wire \daru2.datapath.adder.gen_halfadder:6.ha.i_bit1 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:6.ha i_bit2" *)
  wire \daru2.datapath.adder.gen_halfadder:6.ha.i_bit2 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:6.ha o_carry" *)
  wire \daru2.datapath.adder.gen_halfadder:6.ha.o_carry ;
  (* hdlname = "daru2 datapath adder gen_halfadder:6.ha o_sum" *)
  wire \daru2.datapath.adder.gen_halfadder:6.ha.o_sum ;
  (* hdlname = "daru2 datapath adder gen_halfadder:7.ha i_bit1" *)
  wire \daru2.datapath.adder.gen_halfadder:7.ha.i_bit1 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:7.ha i_bit2" *)
  wire \daru2.datapath.adder.gen_halfadder:7.ha.i_bit2 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:7.ha o_carry" *)
  wire \daru2.datapath.adder.gen_halfadder:7.ha.o_carry ;
  (* hdlname = "daru2 datapath adder gen_halfadder:7.ha o_sum" *)
  wire \daru2.datapath.adder.gen_halfadder:7.ha.o_sum ;
  (* hdlname = "daru2 datapath adder gen_halfadder:8.ha i_bit1" *)
  wire \daru2.datapath.adder.gen_halfadder:8.ha.i_bit1 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:8.ha i_bit2" *)
  wire \daru2.datapath.adder.gen_halfadder:8.ha.i_bit2 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:8.ha o_carry" *)
  wire \daru2.datapath.adder.gen_halfadder:8.ha.o_carry ;
  (* hdlname = "daru2 datapath adder gen_halfadder:8.ha o_sum" *)
  wire \daru2.datapath.adder.gen_halfadder:8.ha.o_sum ;
  (* hdlname = "daru2 datapath adder gen_halfadder:9.ha i_bit1" *)
  wire \daru2.datapath.adder.gen_halfadder:9.ha.i_bit1 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:9.ha i_bit2" *)
  wire \daru2.datapath.adder.gen_halfadder:9.ha.i_bit2 ;
  (* hdlname = "daru2 datapath adder gen_halfadder:9.ha o_carry" *)
  wire \daru2.datapath.adder.gen_halfadder:9.ha.o_carry ;
  (* hdlname = "daru2 datapath adder gen_halfadder:9.ha o_sum" *)
  wire \daru2.datapath.adder.gen_halfadder:9.ha.o_sum ;
  (* hdlname = "daru2 datapath adder sum" *)
  wire [31:0] \daru2.datapath.adder.sum ;
  (* hdlname = "daru2 datapath addrin" *)
  wire [31:0] \daru2.datapath.addrin ;
  (* hdlname = "daru2 datapath addrout" *)
  wire [31:0] \daru2.datapath.addrout ;
  (* hdlname = "daru2 datapath addrreg clk" *)
  wire \daru2.datapath.addrreg.clk ;
  (* hdlname = "daru2 datapath addrreg inreg" *)
  wire [31:0] \daru2.datapath.addrreg.inreg ;
  (* hdlname = "daru2 datapath addrreg load" *)
  wire \daru2.datapath.addrreg.load ;
  (* hdlname = "daru2 datapath addrreg outreg" *)
  wire [31:0] \daru2.datapath.addrreg.outreg ;
  (* hdlname = "daru2 datapath addrreg rst" *)
  wire \daru2.datapath.addrreg.rst ;
  (* hdlname = "daru2 datapath addrreg zero" *)
  wire \daru2.datapath.addrreg.zero ;
  (* hdlname = "daru2 datapath bytecnt" *)
  wire [1:0] \daru2.datapath.bytecnt ;
  (* hdlname = "daru2 datapath bytestoread" *)
  wire \daru2.datapath.bytestoread ;
  (* hdlname = "daru2 datapath bytestoread_temp" *)
  wire \daru2.datapath.bytestoread_temp ;
  (* hdlname = "daru2 datapath checkmisaligneddaru" *)
  wire \daru2.datapath.checkmisaligneddaru ;
  (* hdlname = "daru2 datapath clk" *)
  wire \daru2.datapath.clk ;
  (* hdlname = "daru2 datapath cocnt" *)
  wire \daru2.datapath.cocnt ;
  (* hdlname = "daru2 datapath counter clk" *)
  wire \daru2.datapath.counter.clk ;
  (* hdlname = "daru2 datapath counter cocnt" *)
  wire \daru2.datapath.counter.cocnt ;
  (* hdlname = "daru2 datapath counter cocntp" *)
  wire \daru2.datapath.counter.cocntp ;
  (* hdlname = "daru2 datapath counter inccnt" *)
  wire \daru2.datapath.counter.inccnt ;
  (* hdlname = "daru2 datapath counter initcnt" *)
  wire \daru2.datapath.counter.initcnt ;
  (* hdlname = "daru2 datapath counter initvalue" *)
  wire \daru2.datapath.counter.initvalue ;
  (* hdlname = "daru2 datapath counter outcnt" *)
  wire \daru2.datapath.counter.outcnt ;
  (* hdlname = "daru2 datapath counter rst" *)
  wire \daru2.datapath.counter.rst ;
  (* hdlname = "daru2 datapath counter temp" *)
  wire \daru2.datapath.counter.temp ;
  (* hdlname = "daru2 datapath counter zerocnt" *)
  wire \daru2.datapath.counter.zerocnt ;
  (* hdlname = "daru2 datapath datain" *)
  wire [15:0] \daru2.datapath.datain ;
  (* hdlname = "daru2 datapath datainstrbar" *)
  wire \daru2.datapath.datainstrbar ;
  (* hdlname = "daru2 datapath dataout" *)
  wire [31:0] \daru2.datapath.dataout ;
  (* hdlname = "daru2 datapath dataouthigh_reg" *)
  wire [15:0] \daru2.datapath.dataouthigh_reg ;
  (* hdlname = "daru2 datapath decoder en" *)
  wire \daru2.datapath.decoder.en ;
  (* hdlname = "daru2 datapath decoder indecoder" *)
  wire [1:0] \daru2.datapath.decoder.indecoder ;
  (* hdlname = "daru2 datapath decoder outdecoder" *)
  (* unused_bits = "2 3" *)
  wire [3:0] \daru2.datapath.decoder.outdecoder ;
  (* hdlname = "daru2 datapath enableaddr" *)
  wire \daru2.datapath.enableaddr ;
  (* hdlname = "daru2 datapath enabledata" *)
  wire \daru2.datapath.enabledata ;
  (* hdlname = "daru2 datapath errordecoder addrin" *)
  wire [1:0] \daru2.datapath.errordecoder.addrin ;
  (* hdlname = "daru2 datapath errordecoder checkmisaligneddaru" *)
  wire \daru2.datapath.errordecoder.checkmisaligneddaru ;
  (* hdlname = "daru2 datapath errordecoder datainstrbar" *)
  wire \daru2.datapath.errordecoder.datainstrbar ;
  (* hdlname = "daru2 datapath errordecoder instrmisalignedflag" *)
  wire \daru2.datapath.errordecoder.instrmisalignedflag ;
  (* hdlname = "daru2 datapath errordecoder loadmisalignedflag" *)
  wire \daru2.datapath.errordecoder.loadmisalignedflag ;
  (* hdlname = "daru2 datapath errordecoder nbytes" *)
  wire [1:0] \daru2.datapath.errordecoder.nbytes ;
  (* hdlname = "daru2 datapath inccnt" *)
  wire \daru2.datapath.inccnt ;
  (* hdlname = "daru2 datapath initcnt" *)
  wire \daru2.datapath.initcnt ;
  (* hdlname = "daru2 datapath initreading" *)
  wire \daru2.datapath.initreading ;
  (* hdlname = "daru2 datapath initvaluecnt" *)
  wire [1:0] \daru2.datapath.initvaluecnt ;
  (* hdlname = "daru2 datapath instrmisalignedflag" *)
  wire \daru2.datapath.instrmisalignedflag ;
  (* hdlname = "daru2 datapath ldaddr" *)
  wire \daru2.datapath.ldaddr ;
  (* hdlname = "daru2 datapath ldnumbytes" *)
  wire \daru2.datapath.ldnumbytes ;
  (* hdlname = "daru2 datapath loadmisalignedflag" *)
  wire \daru2.datapath.loadmisalignedflag ;
  (* hdlname = "daru2 datapath memdata" *)
  wire [15:0] \daru2.datapath.memdata ;
  (* hdlname = "daru2 datapath nbytereg clk" *)
  wire \daru2.datapath.nbytereg.clk ;
  (* hdlname = "daru2 datapath nbytereg inreg" *)
  wire [1:0] \daru2.datapath.nbytereg.inreg ;
  (* hdlname = "daru2 datapath nbytereg load" *)
  wire \daru2.datapath.nbytereg.load ;
  (* hdlname = "daru2 datapath nbytereg outreg" *)
  wire [1:0] \daru2.datapath.nbytereg.outreg ;
  (* hdlname = "daru2 datapath nbytereg rst" *)
  wire \daru2.datapath.nbytereg.rst ;
  (* hdlname = "daru2 datapath nbytereg zero" *)
  wire \daru2.datapath.nbytereg.zero ;
  (* hdlname = "daru2 datapath nbytes" *)
  wire [1:0] \daru2.datapath.nbytes ;
  (* hdlname = "daru2 datapath nbytesout" *)
  wire [1:0] \daru2.datapath.nbytesout ;
  (* hdlname = "daru2 datapath outcnt" *)
  wire \daru2.datapath.outcnt ;
  (* hdlname = "daru2 datapath outcnt_ext" *)
  wire [1:0] \daru2.datapath.outcnt_ext ;
  (* hdlname = "daru2 datapath outdecoder" *)
  (* unused_bits = "2 3" *)
  wire [3:0] \daru2.datapath.outdecoder ;
  (* hdlname = "daru2 datapath readaddr" *)
  wire [31:0] \daru2.datapath.readaddr ;
  (* hdlname = "daru2 datapath readaddrout" *)
  wire [31:0] \daru2.datapath.readaddrout ;
  (* hdlname = "daru2 datapath readaddrp" *)
  wire [31:0] \daru2.datapath.readaddrp ;
  (* hdlname = "daru2 datapath reg0 clk" *)
  wire \daru2.datapath.reg0.clk ;
  (* hdlname = "daru2 datapath reg0 inreg" *)
  wire [15:0] \daru2.datapath.reg0.inreg ;
  (* hdlname = "daru2 datapath reg0 load" *)
  wire \daru2.datapath.reg0.load ;
  (* hdlname = "daru2 datapath reg0 outreg" *)
  wire [15:0] \daru2.datapath.reg0.outreg ;
  (* hdlname = "daru2 datapath reg0 rst" *)
  wire \daru2.datapath.reg0.rst ;
  (* hdlname = "daru2 datapath reg0 zero" *)
  wire \daru2.datapath.reg0.zero ;
  (* hdlname = "daru2 datapath reg1 clk" *)
  wire \daru2.datapath.reg1.clk ;
  (* hdlname = "daru2 datapath reg1 inreg" *)
  wire [15:0] \daru2.datapath.reg1.inreg ;
  (* hdlname = "daru2 datapath reg1 load" *)
  wire \daru2.datapath.reg1.load ;
  (* hdlname = "daru2 datapath reg1 outreg" *)
  wire [15:0] \daru2.datapath.reg1.outreg ;
  (* hdlname = "daru2 datapath reg1 rst" *)
  wire \daru2.datapath.reg1.rst ;
  (* hdlname = "daru2 datapath reg1 zero" *)
  wire \daru2.datapath.reg1.zero ;
  (* hdlname = "daru2 datapath rst" *)
  wire \daru2.datapath.rst ;
  (* hdlname = "daru2 datapath select_incoming_data" *)
  wire \daru2.datapath.select_incoming_data ;
  (* hdlname = "daru2 datapath sellden" *)
  wire \daru2.datapath.sellden ;
  (* hdlname = "daru2 datapath zerocnt" *)
  wire \daru2.datapath.zerocnt ;
  (* hdlname = "daru2 datapath zeronumbytes" *)
  wire \daru2.datapath.zeronumbytes ;
  (* hdlname = "daru2 enableaddr" *)
  wire \daru2.enableaddr ;
  (* hdlname = "daru2 enabledata" *)
  wire \daru2.enabledata ;
  (* hdlname = "daru2 inccnt" *)
  wire \daru2.inccnt ;
  (* hdlname = "daru2 initcnt" *)
  wire \daru2.initcnt ;
  (* hdlname = "daru2 initreading" *)
  wire \daru2.initreading ;
  (* hdlname = "daru2 instrmisalignedflag" *)
  wire \daru2.instrmisalignedflag ;
  (* hdlname = "daru2 ldaddr" *)
  wire \daru2.ldaddr ;
  (* hdlname = "daru2 ldnumbytes" *)
  wire \daru2.ldnumbytes ;
  (* hdlname = "daru2 loadmisalignedflag" *)
  wire \daru2.loadmisalignedflag ;
  (* hdlname = "daru2 memdata" *)
  wire [15:0] \daru2.memdata ;
  (* hdlname = "daru2 memready" *)
  wire \daru2.memready ;
  (* hdlname = "daru2 nbytes" *)
  wire [1:0] \daru2.nbytes ;
  (* hdlname = "daru2 readaddrout" *)
  wire [31:0] \daru2.readaddrout ;
  (* hdlname = "daru2 readmem" *)
  wire \daru2.readmem ;
  (* hdlname = "daru2 rst" *)
  wire \daru2.rst ;
  (* hdlname = "daru2 select_incoming_data" *)
  wire \daru2.select_incoming_data ;
  (* hdlname = "daru2 sellden" *)
  wire \daru2.sellden ;
  (* hdlname = "daru2 startdaru" *)
  wire \daru2.startdaru ;
  (* hdlname = "daru2 sync_rst" *)
  wire \daru2.sync_rst ;
  (* hdlname = "daru2 zerocnt" *)
  wire \daru2.zerocnt ;
  (* hdlname = "daru2 zeronumbytes" *)
  wire \daru2.zeronumbytes ;
  wire daru2_en;
  wire [31:0] datadaru1;
  wire [31:0] datadaru2;
  output [15:0] datadawu;
  wire [15:0] datadawu;
  (* hdlname = "dawu addrin" *)
  wire [31:0] \dawu.addrin ;
  (* hdlname = "dawu addrout" *)
  wire [31:0] \dawu.addrout ;
  (* hdlname = "dawu bytestowrite" *)
  wire \dawu.bytestowrite ;
  (* hdlname = "dawu checkmisaligneddawu" *)
  wire \dawu.checkmisaligneddawu ;
  (* hdlname = "dawu clk" *)
  wire \dawu.clk ;
  (* hdlname = "dawu cocnt" *)
  wire \dawu.cocnt ;
  (* hdlname = "dawu completedawu" *)
  wire \dawu.completedawu ;
  (* hdlname = "dawu controller clk" *)
  wire \dawu.controller.clk ;
  (* hdlname = "dawu controller cocnt" *)
  wire \dawu.controller.cocnt ;
  (* hdlname = "dawu controller completedawu" *)
  wire \dawu.controller.completedawu ;
  (* hdlname = "dawu controller enableaddr" *)
  wire \dawu.controller.enableaddr ;
  (* hdlname = "dawu controller enabledata" *)
  wire \dawu.controller.enabledata ;
  (* hdlname = "dawu controller inccnt" *)
  wire \dawu.controller.inccnt ;
  (* hdlname = "dawu controller initcnt" *)
  wire \dawu.controller.initcnt ;
  (* hdlname = "dawu controller ldaddr" *)
  wire \dawu.controller.ldaddr ;
  (* hdlname = "dawu controller lddata" *)
  wire \dawu.controller.lddata ;
  (* hdlname = "dawu controller ldnumbytes" *)
  wire \dawu.controller.ldnumbytes ;
  (* hdlname = "dawu controller memready" *)
  wire \dawu.controller.memready ;
  (* hdlname = "dawu controller nstate" *)
  wire \dawu.controller.nstate ;
  (* hdlname = "dawu controller pstate" *)
  wire \dawu.controller.pstate ;
  (* hdlname = "dawu controller rst" *)
  wire \dawu.controller.rst ;
  (* hdlname = "dawu controller startdawu" *)
  wire \dawu.controller.startdawu ;
  (* hdlname = "dawu controller sync_rst" *)
  wire \dawu.controller.sync_rst ;
  (* hdlname = "dawu controller writemem" *)
  wire \dawu.controller.writemem ;
  (* hdlname = "dawu controller zeroaddr" *)
  wire \dawu.controller.zeroaddr ;
  (* hdlname = "dawu controller zerocnt" *)
  wire \dawu.controller.zerocnt ;
  (* hdlname = "dawu controller zerodata" *)
  wire \dawu.controller.zerodata ;
  (* hdlname = "dawu controller zeronumbytes" *)
  wire \dawu.controller.zeronumbytes ;
  (* hdlname = "dawu datain" *)
  wire [31:0] \dawu.datain ;
  (* hdlname = "dawu dataout" *)
  wire [15:0] \dawu.dataout ;
  (* hdlname = "dawu datapath adder a" *)
  wire [31:0] \dawu.datapath.adder.a ;
  (* hdlname = "dawu datapath adder b" *)
  wire [1:0] \dawu.datapath.adder.b ;
  (* hdlname = "dawu datapath adder cout" *)
  (* unused_bits = "31" *)
  wire [31:0] \dawu.datapath.adder.cout ;
  (* hdlname = "dawu datapath adder fa1 a" *)
  wire \dawu.datapath.adder.fa1.a ;
  (* hdlname = "dawu datapath adder fa1 b" *)
  wire \dawu.datapath.adder.fa1.b ;
  (* hdlname = "dawu datapath adder fa1 cin" *)
  wire \dawu.datapath.adder.fa1.cin ;
  (* hdlname = "dawu datapath adder fa1 cout" *)
  wire \dawu.datapath.adder.fa1.cout ;
  (* hdlname = "dawu datapath adder fa1 s" *)
  wire \dawu.datapath.adder.fa1.s ;
  (* hdlname = "dawu datapath adder fa2 a" *)
  wire \dawu.datapath.adder.fa2.a ;
  (* hdlname = "dawu datapath adder fa2 b" *)
  wire \dawu.datapath.adder.fa2.b ;
  (* hdlname = "dawu datapath adder fa2 cin" *)
  wire \dawu.datapath.adder.fa2.cin ;
  (* hdlname = "dawu datapath adder fa2 cout" *)
  wire \dawu.datapath.adder.fa2.cout ;
  (* hdlname = "dawu datapath adder fa2 s" *)
  wire \dawu.datapath.adder.fa2.s ;
  (* hdlname = "dawu datapath adder gen_halfadder:1.ha i_bit1" *)
  wire \dawu.datapath.adder.gen_halfadder:1.ha.i_bit1 ;
  (* hdlname = "dawu datapath adder gen_halfadder:1.ha i_bit2" *)
  wire \dawu.datapath.adder.gen_halfadder:1.ha.i_bit2 ;
  (* hdlname = "dawu datapath adder gen_halfadder:1.ha o_carry" *)
  wire \dawu.datapath.adder.gen_halfadder:1.ha.o_carry ;
  (* hdlname = "dawu datapath adder gen_halfadder:1.ha o_sum" *)
  wire \dawu.datapath.adder.gen_halfadder:1.ha.o_sum ;
  (* hdlname = "dawu datapath adder gen_halfadder:10.ha i_bit1" *)
  wire \dawu.datapath.adder.gen_halfadder:10.ha.i_bit1 ;
  (* hdlname = "dawu datapath adder gen_halfadder:10.ha i_bit2" *)
  wire \dawu.datapath.adder.gen_halfadder:10.ha.i_bit2 ;
  (* hdlname = "dawu datapath adder gen_halfadder:10.ha o_carry" *)
  wire \dawu.datapath.adder.gen_halfadder:10.ha.o_carry ;
  (* hdlname = "dawu datapath adder gen_halfadder:10.ha o_sum" *)
  wire \dawu.datapath.adder.gen_halfadder:10.ha.o_sum ;
  (* hdlname = "dawu datapath adder gen_halfadder:11.ha i_bit1" *)
  wire \dawu.datapath.adder.gen_halfadder:11.ha.i_bit1 ;
  (* hdlname = "dawu datapath adder gen_halfadder:11.ha i_bit2" *)
  wire \dawu.datapath.adder.gen_halfadder:11.ha.i_bit2 ;
  (* hdlname = "dawu datapath adder gen_halfadder:11.ha o_carry" *)
  wire \dawu.datapath.adder.gen_halfadder:11.ha.o_carry ;
  (* hdlname = "dawu datapath adder gen_halfadder:11.ha o_sum" *)
  wire \dawu.datapath.adder.gen_halfadder:11.ha.o_sum ;
  (* hdlname = "dawu datapath adder gen_halfadder:12.ha i_bit1" *)
  wire \dawu.datapath.adder.gen_halfadder:12.ha.i_bit1 ;
  (* hdlname = "dawu datapath adder gen_halfadder:12.ha i_bit2" *)
  wire \dawu.datapath.adder.gen_halfadder:12.ha.i_bit2 ;
  (* hdlname = "dawu datapath adder gen_halfadder:12.ha o_carry" *)
  wire \dawu.datapath.adder.gen_halfadder:12.ha.o_carry ;
  (* hdlname = "dawu datapath adder gen_halfadder:12.ha o_sum" *)
  wire \dawu.datapath.adder.gen_halfadder:12.ha.o_sum ;
  (* hdlname = "dawu datapath adder gen_halfadder:13.ha i_bit1" *)
  wire \dawu.datapath.adder.gen_halfadder:13.ha.i_bit1 ;
  (* hdlname = "dawu datapath adder gen_halfadder:13.ha i_bit2" *)
  wire \dawu.datapath.adder.gen_halfadder:13.ha.i_bit2 ;
  (* hdlname = "dawu datapath adder gen_halfadder:13.ha o_carry" *)
  wire \dawu.datapath.adder.gen_halfadder:13.ha.o_carry ;
  (* hdlname = "dawu datapath adder gen_halfadder:13.ha o_sum" *)
  wire \dawu.datapath.adder.gen_halfadder:13.ha.o_sum ;
  (* hdlname = "dawu datapath adder gen_halfadder:14.ha i_bit1" *)
  wire \dawu.datapath.adder.gen_halfadder:14.ha.i_bit1 ;
  (* hdlname = "dawu datapath adder gen_halfadder:14.ha i_bit2" *)
  wire \dawu.datapath.adder.gen_halfadder:14.ha.i_bit2 ;
  (* hdlname = "dawu datapath adder gen_halfadder:14.ha o_carry" *)
  wire \dawu.datapath.adder.gen_halfadder:14.ha.o_carry ;
  (* hdlname = "dawu datapath adder gen_halfadder:14.ha o_sum" *)
  wire \dawu.datapath.adder.gen_halfadder:14.ha.o_sum ;
  (* hdlname = "dawu datapath adder gen_halfadder:15.ha i_bit1" *)
  wire \dawu.datapath.adder.gen_halfadder:15.ha.i_bit1 ;
  (* hdlname = "dawu datapath adder gen_halfadder:15.ha i_bit2" *)
  wire \dawu.datapath.adder.gen_halfadder:15.ha.i_bit2 ;
  (* hdlname = "dawu datapath adder gen_halfadder:15.ha o_carry" *)
  wire \dawu.datapath.adder.gen_halfadder:15.ha.o_carry ;
  (* hdlname = "dawu datapath adder gen_halfadder:15.ha o_sum" *)
  wire \dawu.datapath.adder.gen_halfadder:15.ha.o_sum ;
  (* hdlname = "dawu datapath adder gen_halfadder:16.ha i_bit1" *)
  wire \dawu.datapath.adder.gen_halfadder:16.ha.i_bit1 ;
  (* hdlname = "dawu datapath adder gen_halfadder:16.ha i_bit2" *)
  wire \dawu.datapath.adder.gen_halfadder:16.ha.i_bit2 ;
  (* hdlname = "dawu datapath adder gen_halfadder:16.ha o_carry" *)
  wire \dawu.datapath.adder.gen_halfadder:16.ha.o_carry ;
  (* hdlname = "dawu datapath adder gen_halfadder:16.ha o_sum" *)
  wire \dawu.datapath.adder.gen_halfadder:16.ha.o_sum ;
  (* hdlname = "dawu datapath adder gen_halfadder:17.ha i_bit1" *)
  wire \dawu.datapath.adder.gen_halfadder:17.ha.i_bit1 ;
  (* hdlname = "dawu datapath adder gen_halfadder:17.ha i_bit2" *)
  wire \dawu.datapath.adder.gen_halfadder:17.ha.i_bit2 ;
  (* hdlname = "dawu datapath adder gen_halfadder:17.ha o_carry" *)
  wire \dawu.datapath.adder.gen_halfadder:17.ha.o_carry ;
  (* hdlname = "dawu datapath adder gen_halfadder:17.ha o_sum" *)
  wire \dawu.datapath.adder.gen_halfadder:17.ha.o_sum ;
  (* hdlname = "dawu datapath adder gen_halfadder:18.ha i_bit1" *)
  wire \dawu.datapath.adder.gen_halfadder:18.ha.i_bit1 ;
  (* hdlname = "dawu datapath adder gen_halfadder:18.ha i_bit2" *)
  wire \dawu.datapath.adder.gen_halfadder:18.ha.i_bit2 ;
  (* hdlname = "dawu datapath adder gen_halfadder:18.ha o_carry" *)
  wire \dawu.datapath.adder.gen_halfadder:18.ha.o_carry ;
  (* hdlname = "dawu datapath adder gen_halfadder:18.ha o_sum" *)
  wire \dawu.datapath.adder.gen_halfadder:18.ha.o_sum ;
  (* hdlname = "dawu datapath adder gen_halfadder:19.ha i_bit1" *)
  wire \dawu.datapath.adder.gen_halfadder:19.ha.i_bit1 ;
  (* hdlname = "dawu datapath adder gen_halfadder:19.ha i_bit2" *)
  wire \dawu.datapath.adder.gen_halfadder:19.ha.i_bit2 ;
  (* hdlname = "dawu datapath adder gen_halfadder:19.ha o_carry" *)
  wire \dawu.datapath.adder.gen_halfadder:19.ha.o_carry ;
  (* hdlname = "dawu datapath adder gen_halfadder:19.ha o_sum" *)
  wire \dawu.datapath.adder.gen_halfadder:19.ha.o_sum ;
  (* hdlname = "dawu datapath adder gen_halfadder:2.ha i_bit1" *)
  wire \dawu.datapath.adder.gen_halfadder:2.ha.i_bit1 ;
  (* hdlname = "dawu datapath adder gen_halfadder:2.ha i_bit2" *)
  wire \dawu.datapath.adder.gen_halfadder:2.ha.i_bit2 ;
  (* hdlname = "dawu datapath adder gen_halfadder:2.ha o_carry" *)
  wire \dawu.datapath.adder.gen_halfadder:2.ha.o_carry ;
  (* hdlname = "dawu datapath adder gen_halfadder:2.ha o_sum" *)
  wire \dawu.datapath.adder.gen_halfadder:2.ha.o_sum ;
  (* hdlname = "dawu datapath adder gen_halfadder:20.ha i_bit1" *)
  wire \dawu.datapath.adder.gen_halfadder:20.ha.i_bit1 ;
  (* hdlname = "dawu datapath adder gen_halfadder:20.ha i_bit2" *)
  wire \dawu.datapath.adder.gen_halfadder:20.ha.i_bit2 ;
  (* hdlname = "dawu datapath adder gen_halfadder:20.ha o_carry" *)
  wire \dawu.datapath.adder.gen_halfadder:20.ha.o_carry ;
  (* hdlname = "dawu datapath adder gen_halfadder:20.ha o_sum" *)
  wire \dawu.datapath.adder.gen_halfadder:20.ha.o_sum ;
  (* hdlname = "dawu datapath adder gen_halfadder:21.ha i_bit1" *)
  wire \dawu.datapath.adder.gen_halfadder:21.ha.i_bit1 ;
  (* hdlname = "dawu datapath adder gen_halfadder:21.ha i_bit2" *)
  wire \dawu.datapath.adder.gen_halfadder:21.ha.i_bit2 ;
  (* hdlname = "dawu datapath adder gen_halfadder:21.ha o_carry" *)
  wire \dawu.datapath.adder.gen_halfadder:21.ha.o_carry ;
  (* hdlname = "dawu datapath adder gen_halfadder:21.ha o_sum" *)
  wire \dawu.datapath.adder.gen_halfadder:21.ha.o_sum ;
  (* hdlname = "dawu datapath adder gen_halfadder:22.ha i_bit1" *)
  wire \dawu.datapath.adder.gen_halfadder:22.ha.i_bit1 ;
  (* hdlname = "dawu datapath adder gen_halfadder:22.ha i_bit2" *)
  wire \dawu.datapath.adder.gen_halfadder:22.ha.i_bit2 ;
  (* hdlname = "dawu datapath adder gen_halfadder:22.ha o_carry" *)
  wire \dawu.datapath.adder.gen_halfadder:22.ha.o_carry ;
  (* hdlname = "dawu datapath adder gen_halfadder:22.ha o_sum" *)
  wire \dawu.datapath.adder.gen_halfadder:22.ha.o_sum ;
  (* hdlname = "dawu datapath adder gen_halfadder:23.ha i_bit1" *)
  wire \dawu.datapath.adder.gen_halfadder:23.ha.i_bit1 ;
  (* hdlname = "dawu datapath adder gen_halfadder:23.ha i_bit2" *)
  wire \dawu.datapath.adder.gen_halfadder:23.ha.i_bit2 ;
  (* hdlname = "dawu datapath adder gen_halfadder:23.ha o_carry" *)
  wire \dawu.datapath.adder.gen_halfadder:23.ha.o_carry ;
  (* hdlname = "dawu datapath adder gen_halfadder:23.ha o_sum" *)
  wire \dawu.datapath.adder.gen_halfadder:23.ha.o_sum ;
  (* hdlname = "dawu datapath adder gen_halfadder:24.ha i_bit1" *)
  wire \dawu.datapath.adder.gen_halfadder:24.ha.i_bit1 ;
  (* hdlname = "dawu datapath adder gen_halfadder:24.ha i_bit2" *)
  wire \dawu.datapath.adder.gen_halfadder:24.ha.i_bit2 ;
  (* hdlname = "dawu datapath adder gen_halfadder:24.ha o_carry" *)
  wire \dawu.datapath.adder.gen_halfadder:24.ha.o_carry ;
  (* hdlname = "dawu datapath adder gen_halfadder:24.ha o_sum" *)
  wire \dawu.datapath.adder.gen_halfadder:24.ha.o_sum ;
  (* hdlname = "dawu datapath adder gen_halfadder:25.ha i_bit1" *)
  wire \dawu.datapath.adder.gen_halfadder:25.ha.i_bit1 ;
  (* hdlname = "dawu datapath adder gen_halfadder:25.ha i_bit2" *)
  wire \dawu.datapath.adder.gen_halfadder:25.ha.i_bit2 ;
  (* hdlname = "dawu datapath adder gen_halfadder:25.ha o_carry" *)
  wire \dawu.datapath.adder.gen_halfadder:25.ha.o_carry ;
  (* hdlname = "dawu datapath adder gen_halfadder:25.ha o_sum" *)
  wire \dawu.datapath.adder.gen_halfadder:25.ha.o_sum ;
  (* hdlname = "dawu datapath adder gen_halfadder:26.ha i_bit1" *)
  wire \dawu.datapath.adder.gen_halfadder:26.ha.i_bit1 ;
  (* hdlname = "dawu datapath adder gen_halfadder:26.ha i_bit2" *)
  wire \dawu.datapath.adder.gen_halfadder:26.ha.i_bit2 ;
  (* hdlname = "dawu datapath adder gen_halfadder:26.ha o_carry" *)
  wire \dawu.datapath.adder.gen_halfadder:26.ha.o_carry ;
  (* hdlname = "dawu datapath adder gen_halfadder:26.ha o_sum" *)
  wire \dawu.datapath.adder.gen_halfadder:26.ha.o_sum ;
  (* hdlname = "dawu datapath adder gen_halfadder:27.ha i_bit1" *)
  wire \dawu.datapath.adder.gen_halfadder:27.ha.i_bit1 ;
  (* hdlname = "dawu datapath adder gen_halfadder:27.ha i_bit2" *)
  wire \dawu.datapath.adder.gen_halfadder:27.ha.i_bit2 ;
  (* hdlname = "dawu datapath adder gen_halfadder:27.ha o_carry" *)
  wire \dawu.datapath.adder.gen_halfadder:27.ha.o_carry ;
  (* hdlname = "dawu datapath adder gen_halfadder:27.ha o_sum" *)
  wire \dawu.datapath.adder.gen_halfadder:27.ha.o_sum ;
  (* hdlname = "dawu datapath adder gen_halfadder:28.ha i_bit1" *)
  wire \dawu.datapath.adder.gen_halfadder:28.ha.i_bit1 ;
  (* hdlname = "dawu datapath adder gen_halfadder:28.ha i_bit2" *)
  wire \dawu.datapath.adder.gen_halfadder:28.ha.i_bit2 ;
  (* hdlname = "dawu datapath adder gen_halfadder:28.ha o_carry" *)
  wire \dawu.datapath.adder.gen_halfadder:28.ha.o_carry ;
  (* hdlname = "dawu datapath adder gen_halfadder:28.ha o_sum" *)
  wire \dawu.datapath.adder.gen_halfadder:28.ha.o_sum ;
  (* hdlname = "dawu datapath adder gen_halfadder:29.ha i_bit1" *)
  wire \dawu.datapath.adder.gen_halfadder:29.ha.i_bit1 ;
  (* hdlname = "dawu datapath adder gen_halfadder:29.ha i_bit2" *)
  wire \dawu.datapath.adder.gen_halfadder:29.ha.i_bit2 ;
  (* hdlname = "dawu datapath adder gen_halfadder:29.ha o_carry" *)
  wire \dawu.datapath.adder.gen_halfadder:29.ha.o_carry ;
  (* hdlname = "dawu datapath adder gen_halfadder:29.ha o_sum" *)
  wire \dawu.datapath.adder.gen_halfadder:29.ha.o_sum ;
  (* hdlname = "dawu datapath adder gen_halfadder:3.ha i_bit1" *)
  wire \dawu.datapath.adder.gen_halfadder:3.ha.i_bit1 ;
  (* hdlname = "dawu datapath adder gen_halfadder:3.ha i_bit2" *)
  wire \dawu.datapath.adder.gen_halfadder:3.ha.i_bit2 ;
  (* hdlname = "dawu datapath adder gen_halfadder:3.ha o_carry" *)
  wire \dawu.datapath.adder.gen_halfadder:3.ha.o_carry ;
  (* hdlname = "dawu datapath adder gen_halfadder:3.ha o_sum" *)
  wire \dawu.datapath.adder.gen_halfadder:3.ha.o_sum ;
  (* hdlname = "dawu datapath adder gen_halfadder:30.ha i_bit1" *)
  wire \dawu.datapath.adder.gen_halfadder:30.ha.i_bit1 ;
  (* hdlname = "dawu datapath adder gen_halfadder:30.ha i_bit2" *)
  wire \dawu.datapath.adder.gen_halfadder:30.ha.i_bit2 ;
  (* hdlname = "dawu datapath adder gen_halfadder:30.ha o_carry" *)
  (* unused_bits = "0" *)
  wire \dawu.datapath.adder.gen_halfadder:30.ha.o_carry ;
  (* hdlname = "dawu datapath adder gen_halfadder:30.ha o_sum" *)
  wire \dawu.datapath.adder.gen_halfadder:30.ha.o_sum ;
  (* hdlname = "dawu datapath adder gen_halfadder:4.ha i_bit1" *)
  wire \dawu.datapath.adder.gen_halfadder:4.ha.i_bit1 ;
  (* hdlname = "dawu datapath adder gen_halfadder:4.ha i_bit2" *)
  wire \dawu.datapath.adder.gen_halfadder:4.ha.i_bit2 ;
  (* hdlname = "dawu datapath adder gen_halfadder:4.ha o_carry" *)
  wire \dawu.datapath.adder.gen_halfadder:4.ha.o_carry ;
  (* hdlname = "dawu datapath adder gen_halfadder:4.ha o_sum" *)
  wire \dawu.datapath.adder.gen_halfadder:4.ha.o_sum ;
  (* hdlname = "dawu datapath adder gen_halfadder:5.ha i_bit1" *)
  wire \dawu.datapath.adder.gen_halfadder:5.ha.i_bit1 ;
  (* hdlname = "dawu datapath adder gen_halfadder:5.ha i_bit2" *)
  wire \dawu.datapath.adder.gen_halfadder:5.ha.i_bit2 ;
  (* hdlname = "dawu datapath adder gen_halfadder:5.ha o_carry" *)
  wire \dawu.datapath.adder.gen_halfadder:5.ha.o_carry ;
  (* hdlname = "dawu datapath adder gen_halfadder:5.ha o_sum" *)
  wire \dawu.datapath.adder.gen_halfadder:5.ha.o_sum ;
  (* hdlname = "dawu datapath adder gen_halfadder:6.ha i_bit1" *)
  wire \dawu.datapath.adder.gen_halfadder:6.ha.i_bit1 ;
  (* hdlname = "dawu datapath adder gen_halfadder:6.ha i_bit2" *)
  wire \dawu.datapath.adder.gen_halfadder:6.ha.i_bit2 ;
  (* hdlname = "dawu datapath adder gen_halfadder:6.ha o_carry" *)
  wire \dawu.datapath.adder.gen_halfadder:6.ha.o_carry ;
  (* hdlname = "dawu datapath adder gen_halfadder:6.ha o_sum" *)
  wire \dawu.datapath.adder.gen_halfadder:6.ha.o_sum ;
  (* hdlname = "dawu datapath adder gen_halfadder:7.ha i_bit1" *)
  wire \dawu.datapath.adder.gen_halfadder:7.ha.i_bit1 ;
  (* hdlname = "dawu datapath adder gen_halfadder:7.ha i_bit2" *)
  wire \dawu.datapath.adder.gen_halfadder:7.ha.i_bit2 ;
  (* hdlname = "dawu datapath adder gen_halfadder:7.ha o_carry" *)
  wire \dawu.datapath.adder.gen_halfadder:7.ha.o_carry ;
  (* hdlname = "dawu datapath adder gen_halfadder:7.ha o_sum" *)
  wire \dawu.datapath.adder.gen_halfadder:7.ha.o_sum ;
  (* hdlname = "dawu datapath adder gen_halfadder:8.ha i_bit1" *)
  wire \dawu.datapath.adder.gen_halfadder:8.ha.i_bit1 ;
  (* hdlname = "dawu datapath adder gen_halfadder:8.ha i_bit2" *)
  wire \dawu.datapath.adder.gen_halfadder:8.ha.i_bit2 ;
  (* hdlname = "dawu datapath adder gen_halfadder:8.ha o_carry" *)
  wire \dawu.datapath.adder.gen_halfadder:8.ha.o_carry ;
  (* hdlname = "dawu datapath adder gen_halfadder:8.ha o_sum" *)
  wire \dawu.datapath.adder.gen_halfadder:8.ha.o_sum ;
  (* hdlname = "dawu datapath adder gen_halfadder:9.ha i_bit1" *)
  wire \dawu.datapath.adder.gen_halfadder:9.ha.i_bit1 ;
  (* hdlname = "dawu datapath adder gen_halfadder:9.ha i_bit2" *)
  wire \dawu.datapath.adder.gen_halfadder:9.ha.i_bit2 ;
  (* hdlname = "dawu datapath adder gen_halfadder:9.ha o_carry" *)
  wire \dawu.datapath.adder.gen_halfadder:9.ha.o_carry ;
  (* hdlname = "dawu datapath adder gen_halfadder:9.ha o_sum" *)
  wire \dawu.datapath.adder.gen_halfadder:9.ha.o_sum ;
  (* hdlname = "dawu datapath adder sum" *)
  wire [31:0] \dawu.datapath.adder.sum ;
  (* hdlname = "dawu datapath addrin" *)
  wire [31:0] \dawu.datapath.addrin ;
  (* hdlname = "dawu datapath addrout" *)
  wire [31:0] \dawu.datapath.addrout ;
  (* hdlname = "dawu datapath addroutreg" *)
  wire [31:0] \dawu.datapath.addroutreg ;
  (* hdlname = "dawu datapath addrreg clk" *)
  wire \dawu.datapath.addrreg.clk ;
  (* hdlname = "dawu datapath addrreg inreg" *)
  wire [31:0] \dawu.datapath.addrreg.inreg ;
  (* hdlname = "dawu datapath addrreg load" *)
  wire \dawu.datapath.addrreg.load ;
  (* hdlname = "dawu datapath addrreg outreg" *)
  wire [31:0] \dawu.datapath.addrreg.outreg ;
  (* hdlname = "dawu datapath addrreg rst" *)
  wire \dawu.datapath.addrreg.rst ;
  (* hdlname = "dawu datapath addrreg zero" *)
  wire \dawu.datapath.addrreg.zero ;
  (* hdlname = "dawu datapath bytecnt" *)
  wire [1:0] \dawu.datapath.bytecnt ;
  (* hdlname = "dawu datapath bytestowrite" *)
  wire \dawu.datapath.bytestowrite ;
  (* hdlname = "dawu datapath bytestowrite_temp" *)
  wire \dawu.datapath.bytestowrite_temp ;
  (* hdlname = "dawu datapath checkmisaligneddawu" *)
  wire \dawu.datapath.checkmisaligneddawu ;
  (* hdlname = "dawu datapath clk" *)
  wire \dawu.datapath.clk ;
  (* hdlname = "dawu datapath cocnt" *)
  wire \dawu.datapath.cocnt ;
  (* hdlname = "dawu datapath counter clk" *)
  wire \dawu.datapath.counter.clk ;
  (* hdlname = "dawu datapath counter cocnt" *)
  wire \dawu.datapath.counter.cocnt ;
  (* hdlname = "dawu datapath counter cocntp" *)
  wire \dawu.datapath.counter.cocntp ;
  (* hdlname = "dawu datapath counter inccnt" *)
  wire \dawu.datapath.counter.inccnt ;
  (* hdlname = "dawu datapath counter initcnt" *)
  wire \dawu.datapath.counter.initcnt ;
  (* hdlname = "dawu datapath counter initvalue" *)
  wire \dawu.datapath.counter.initvalue ;
  (* hdlname = "dawu datapath counter outcnt" *)
  wire \dawu.datapath.counter.outcnt ;
  (* hdlname = "dawu datapath counter rst" *)
  wire \dawu.datapath.counter.rst ;
  (* hdlname = "dawu datapath counter temp" *)
  wire \dawu.datapath.counter.temp ;
  (* hdlname = "dawu datapath counter zerocnt" *)
  wire \dawu.datapath.counter.zerocnt ;
  (* hdlname = "dawu datapath datain" *)
  wire [31:0] \dawu.datapath.datain ;
  (* hdlname = "dawu datapath dataout" *)
  wire [15:0] \dawu.datapath.dataout ;
  (* hdlname = "dawu datapath enableaddr" *)
  wire \dawu.datapath.enableaddr ;
  (* hdlname = "dawu datapath enabledata" *)
  wire \dawu.datapath.enabledata ;
  (* hdlname = "dawu datapath errordecoder addrin" *)
  wire [1:0] \dawu.datapath.errordecoder.addrin ;
  (* hdlname = "dawu datapath errordecoder checkmisaligneddawu" *)
  wire \dawu.datapath.errordecoder.checkmisaligneddawu ;
  (* hdlname = "dawu datapath errordecoder nbytes" *)
  wire [1:0] \dawu.datapath.errordecoder.nbytes ;
  (* hdlname = "dawu datapath inccnt" *)
  wire \dawu.datapath.inccnt ;
  (* hdlname = "dawu datapath initcnt" *)
  wire \dawu.datapath.initcnt ;
  (* hdlname = "dawu datapath initvaluecnt" *)
  wire [1:0] \dawu.datapath.initvaluecnt ;
  (* hdlname = "dawu datapath ldaddr" *)
  wire \dawu.datapath.ldaddr ;
  (* hdlname = "dawu datapath lddata" *)
  wire \dawu.datapath.lddata ;
  (* hdlname = "dawu datapath ldnumbytes" *)
  wire \dawu.datapath.ldnumbytes ;
  (* hdlname = "dawu datapath muxout" *)
  wire [15:0] \dawu.datapath.muxout ;
  (* hdlname = "dawu datapath nbytesin" *)
  wire [1:0] \dawu.datapath.nbytesin ;
  (* hdlname = "dawu datapath nbytesout" *)
  wire [1:0] \dawu.datapath.nbytesout ;
  (* hdlname = "dawu datapath nbytesreg clk" *)
  wire \dawu.datapath.nbytesreg.clk ;
  (* hdlname = "dawu datapath nbytesreg inreg" *)
  wire [1:0] \dawu.datapath.nbytesreg.inreg ;
  (* hdlname = "dawu datapath nbytesreg load" *)
  wire \dawu.datapath.nbytesreg.load ;
  (* hdlname = "dawu datapath nbytesreg outreg" *)
  wire [1:0] \dawu.datapath.nbytesreg.outreg ;
  (* hdlname = "dawu datapath nbytesreg rst" *)
  wire \dawu.datapath.nbytesreg.rst ;
  (* hdlname = "dawu datapath nbytesreg zero" *)
  wire \dawu.datapath.nbytesreg.zero ;
  (* hdlname = "dawu datapath outcnt" *)
  wire \dawu.datapath.outcnt ;
  (* hdlname = "dawu datapath outreg0" *)
  wire [15:0] \dawu.datapath.outreg0 ;
  (* hdlname = "dawu datapath outreg1" *)
  wire [15:0] \dawu.datapath.outreg1 ;
  (* hdlname = "dawu datapath reg0 clk" *)
  wire \dawu.datapath.reg0.clk ;
  (* hdlname = "dawu datapath reg0 inreg" *)
  wire [15:0] \dawu.datapath.reg0.inreg ;
  (* hdlname = "dawu datapath reg0 load" *)
  wire \dawu.datapath.reg0.load ;
  (* hdlname = "dawu datapath reg0 outreg" *)
  wire [15:0] \dawu.datapath.reg0.outreg ;
  (* hdlname = "dawu datapath reg0 rst" *)
  wire \dawu.datapath.reg0.rst ;
  (* hdlname = "dawu datapath reg0 zero" *)
  wire \dawu.datapath.reg0.zero ;
  (* hdlname = "dawu datapath reg1 clk" *)
  wire \dawu.datapath.reg1.clk ;
  (* hdlname = "dawu datapath reg1 inreg" *)
  wire [15:0] \dawu.datapath.reg1.inreg ;
  (* hdlname = "dawu datapath reg1 load" *)
  wire \dawu.datapath.reg1.load ;
  (* hdlname = "dawu datapath reg1 outreg" *)
  wire [15:0] \dawu.datapath.reg1.outreg ;
  (* hdlname = "dawu datapath reg1 rst" *)
  wire \dawu.datapath.reg1.rst ;
  (* hdlname = "dawu datapath reg1 zero" *)
  wire \dawu.datapath.reg1.zero ;
  (* hdlname = "dawu datapath rst" *)
  wire \dawu.datapath.rst ;
  (* hdlname = "dawu datapath totalbytecnt" *)
  wire \dawu.datapath.totalbytecnt ;
  (* hdlname = "dawu datapath writeaddr" *)
  wire [31:0] \dawu.datapath.writeaddr ;
  (* hdlname = "dawu datapath zeroaddr" *)
  wire \dawu.datapath.zeroaddr ;
  (* hdlname = "dawu datapath zerocnt" *)
  wire \dawu.datapath.zerocnt ;
  (* hdlname = "dawu datapath zerodata" *)
  wire \dawu.datapath.zerodata ;
  (* hdlname = "dawu datapath zeronumbytes" *)
  wire \dawu.datapath.zeronumbytes ;
  (* hdlname = "dawu enableaddr" *)
  wire \dawu.enableaddr ;
  (* hdlname = "dawu enabledata" *)
  wire \dawu.enabledata ;
  (* hdlname = "dawu inccnt" *)
  wire \dawu.inccnt ;
  (* hdlname = "dawu initcnt" *)
  wire \dawu.initcnt ;
  (* hdlname = "dawu ldaddr" *)
  wire \dawu.ldaddr ;
  (* hdlname = "dawu lddata" *)
  wire \dawu.lddata ;
  (* hdlname = "dawu ldnumbytes" *)
  wire \dawu.ldnumbytes ;
  (* hdlname = "dawu memready" *)
  wire \dawu.memready ;
  (* hdlname = "dawu nbytes" *)
  wire [1:0] \dawu.nbytes ;
  (* hdlname = "dawu rst" *)
  wire \dawu.rst ;
  (* hdlname = "dawu startdawu" *)
  wire \dawu.startdawu ;
  (* hdlname = "dawu sync_rst" *)
  wire \dawu.sync_rst ;
  (* hdlname = "dawu writemem" *)
  wire \dawu.writemem ;
  (* hdlname = "dawu zeroaddr" *)
  wire \dawu.zeroaddr ;
  (* hdlname = "dawu zerocnt" *)
  wire \dawu.zerocnt ;
  (* hdlname = "dawu zerodata" *)
  wire \dawu.zerodata ;
  (* hdlname = "dawu zeronumbytes" *)
  wire \dawu.zeronumbytes ;
  wire dawu_en;
  output dec_valid;
  wire dec_valid;
  output [1:0] delegationmode;
  wire [1:0] delegationmode;
  wire dividedbyzeroflag;
  input dncntcsr;
  wire dncntcsr;
  wire [31:0] e2m_alu_res_curr;
  wire [31:0] e2m_alu_res_next;
  wire [63:0] e2m_ctrl_word_curr;
  wire e2m_divided_by_zero_flag_curr;
  wire e2m_ecall_flag_curr;
  input e2m_en;
  wire e2m_en;
  wire e2m_en_def;
  wire e2m_eq_curr;
  wire e2m_eq_next;
  wire e2m_ex_flag_curr;
  wire e2m_ex_flag_next;
  wire e2m_gt_curr;
  wire e2m_gt_next;
  wire e2m_hazard_flag_curr;
  wire e2m_hazard_flag_next;
  wire e2m_illegal_instruction_flag_curr;
  wire [2:0] e2m_inst_type_curr;
  wire [31:0] e2m_instr_curr;
  wire e2m_instr_misaligned_flag_curr;
  wire e2m_lt_curr;
  wire e2m_lt_next;
  wire [31:0] e2m_op1_curr;
  wire [31:0] e2m_op2_curr;
  wire [31:0] e2m_outcsr_curr;
  wire [31:0] e2m_pc_curr;
  wire [31:0] e2m_pc_plus4_curr;
  input e2m_rst;
  wire e2m_rst;
  wire e2m_rst_def;
  wire e2m_valid_curr;
  wire e2m_validaccesscsr_curr;
  wire e_addsubbar;
  wire e_cmp_selaluop2;
  wire e_cmp_selop2;
  wire e_comparedsignedunsignedbar;
  wire e_pass;
  wire e_selaah;
  wire e_selaal;
  wire e_selaau;
  wire e_selasu;
  wire e_selbsu;
  wire e_selcsr;
  wire e_selllu;
  wire [1:0] e_sellogic;
  wire [1:0] e_selshift;
  wire e_signedsigned;
  wire e_signedunsigned;
  wire e_startdivideaau;
  wire e_startmultiplyaau;
  wire e_unsignedunsigned;
  input ecallflag;
  wire ecallflag;
  wire [1:0] eh_state_curr;
  wire [1:0] eh_state_next;
  output ex_valid;
  wire ex_valid;
  output exceptionraise;
  wire exceptionraise;
  wire exceptionraise_int;
  wire exceptionraisetemp;
  wire [31:0] f2gi_pc_plus4_curr;
  wire [31:0] f2gi_pc_plus4_next;
  input forced_rb_read;
  wire forced_rb_read;
  input gi2d_en;
  wire gi2d_en;
  wire gi2d_en_def;
  wire gi2d_ex_flag_curr;
  wire gi2d_ex_flag_next;
  wire [31:0] gi2d_instr_curr;
  wire gi2d_instr_misaligned_flag_curr;
  wire [31:0] gi2d_instr_next;
  wire [31:0] gi2d_pc_curr;
  wire [31:0] gi2d_pc_next;
  wire [31:0] gi2d_pc_plus4_curr;
  wire [31:0] gi2d_pc_plus4_next;
  input gi2d_rst;
  wire gi2d_rst;
  wire gi2d_rst_def;
  wire gi2d_valid_curr;
  output hazard_solved;
  wire hazard_solved;
  output hazex;
  wire hazex;
  wire hazex_csr_mirror;
  wire [11:0] hazex_csr_result;
  wire hazex_csr_result_en;
  wire [11:0] hazex_csr_second_operand;
  wire hazex_csr_second_operand_en;
  wire [4:0] hazex_first_operand;
  wire hazex_first_operand_en;
  wire hazex_int;
  wire [4:0] hazex_result;
  wire hazex_result_en;
  wire [4:0] hazex_second_operand;
  wire hazex_second_operand_en;
  wire hazex_zero_first_operand;
  wire hazex_zero_second_operand;
  output hazm;
  wire hazm;
  wire hazm_csr_mirror;
  wire [11:0] hazm_csr_result;
  wire hazm_csr_result_en;
  wire [11:0] hazm_csr_second_operand;
  wire hazm_csr_second_operand_en;
  wire [4:0] hazm_first_operand;
  wire hazm_first_operand_en;
  wire hazm_int;
  wire [4:0] hazm_result;
  wire hazm_result_en;
  wire [4:0] hazm_second_operand;
  wire hazm_second_operand_en;
  wire hazm_zero_first_operand;
  wire hazm_zero_second_operand;
  (* hdlname = "i4pc a" *)
  wire [31:0] \i4pc.a ;
  (* hdlname = "i4pc add" *)
  (* unused_bits = "32" *)
  wire [32:0] \i4pc.add ;
  (* hdlname = "i4pc addresult" *)
  wire [31:0] \i4pc.addresult ;
  (* hdlname = "i4pc b" *)
  wire [31:0] \i4pc.b ;
  (* hdlname = "i4pc carryout" *)
  (* unused_bits = "0" *)
  wire \i4pc.carryout ;
  (* hdlname = "i4pc cin" *)
  wire \i4pc.cin ;
  input illegalinstrflag;
  wire illegalinstrflag;
  wire [31:0] immediate;
  (* hdlname = "immselsignex imm" *)
  wire [31:0] \immselsignex.imm ;
  (* hdlname = "immselsignex ir11_8" *)
  wire [3:0] \immselsignex.ir11_8 ;
  (* hdlname = "immselsignex ir19_12" *)
  wire [7:0] \immselsignex.ir19_12 ;
  (* hdlname = "immselsignex ir20" *)
  wire \immselsignex.ir20 ;
  (* hdlname = "immselsignex ir24_21" *)
  wire [3:0] \immselsignex.ir24_21 ;
  (* hdlname = "immselsignex ir30_25" *)
  wire [5:0] \immselsignex.ir30_25 ;
  (* hdlname = "immselsignex ir31" *)
  wire \immselsignex.ir31 ;
  (* hdlname = "immselsignex ir7" *)
  wire \immselsignex.ir7 ;
  (* hdlname = "immselsignex selb" *)
  wire \immselsignex.selb ;
  (* hdlname = "immselsignex selbuj" *)
  wire \immselsignex.selbuj ;
  (* hdlname = "immselsignex seli" *)
  wire \immselsignex.seli ;
  (* hdlname = "immselsignex selij" *)
  wire \immselsignex.selij ;
  (* hdlname = "immselsignex selis" *)
  wire \immselsignex.selis ;
  (* hdlname = "immselsignex selisb" *)
  wire \immselsignex.selisb ;
  (* hdlname = "immselsignex selisbj" *)
  wire \immselsignex.selisbj ;
  (* hdlname = "immselsignex selj" *)
  wire \immselsignex.selj ;
  (* hdlname = "immselsignex sels" *)
  wire \immselsignex.sels ;
  (* hdlname = "immselsignex selsb" *)
  wire \immselsignex.selsb ;
  (* hdlname = "immselsignex selu" *)
  wire \immselsignex.selu ;
  (* hdlname = "immselsignex seluj" *)
  wire \immselsignex.seluj ;
  wire [31:0] inc4pc;
  wire [31:0] incsr;
  wire [31:0] inpc;
  wire [31:0] inst;
  input [2:0] inst_type;
  wire [2:0] inst_type;
  wire instrmisalignedflag;
  output instructiondone;
  wire instructiondone;
  wire instructiondone_int;
  input instructiondonecsr;
  wire instructiondonecsr;
  (* hdlname = "interrcheckcausedetection causecode" *)
  wire [31:0] \interrcheckcausedetection.causecode ;
  (* hdlname = "interrcheckcausedetection clk" *)
  wire \interrcheckcausedetection.clk ;
  (* hdlname = "interrcheckcausedetection curprv" *)
  wire [1:0] \interrcheckcausedetection.curprv ;
  (* hdlname = "interrcheckcausedetection currentprv" *)
  wire [1:0] \interrcheckcausedetection.currentprv ;
  (* hdlname = "interrcheckcausedetection delegationmode" *)
  wire [1:0] \interrcheckcausedetection.delegationmode ;
  (* hdlname = "interrcheckcausedetection delegationreg" *)
  wire [1:0] \interrcheckcausedetection.delegationreg ;
  (* hdlname = "interrcheckcausedetection exceptionraise" *)
  wire \interrcheckcausedetection.exceptionraise ;
  (* hdlname = "interrcheckcausedetection exceptionraisetemp" *)
  wire \interrcheckcausedetection.exceptionraisetemp ;
  (* hdlname = "interrcheckcausedetection inst" *)
  wire [31:0] \interrcheckcausedetection.inst ;
  (* hdlname = "interrcheckcausedetection interraisemachineexternal" *)
  wire \interrcheckcausedetection.interraisemachineexternal ;
  (* hdlname = "interrcheckcausedetection interraisemachinesoftware" *)
  wire \interrcheckcausedetection.interraisemachinesoftware ;
  (* hdlname = "interrcheckcausedetection interraisemachinetimer" *)
  wire \interrcheckcausedetection.interraisemachinetimer ;
  (* hdlname = "interrcheckcausedetection interraisereserved" *)
  wire \interrcheckcausedetection.interraisereserved ;
  (* hdlname = "interrcheckcausedetection interraisetemp" *)
  wire \interrcheckcausedetection.interraisetemp ;
  (* hdlname = "interrcheckcausedetection interraiseuserexternal" *)
  wire \interrcheckcausedetection.interraiseuserexternal ;
  (* hdlname = "interrcheckcausedetection interraiseusersoftware" *)
  wire \interrcheckcausedetection.interraiseusersoftware ;
  (* hdlname = "interrcheckcausedetection interraiseusertimer" *)
  wire \interrcheckcausedetection.interraiseusertimer ;
  (* hdlname = "interrcheckcausedetection interreserved" *)
  wire [15:0] \interrcheckcausedetection.interreserved ;
  (* hdlname = "interrcheckcausedetection interruptraise" *)
  wire \interrcheckcausedetection.interruptraise ;
  (* hdlname = "interrcheckcausedetection lddelegation" *)
  wire \interrcheckcausedetection.lddelegation ;
  (* hdlname = "interrcheckcausedetection ldmachine" *)
  wire \interrcheckcausedetection.ldmachine ;
  (* hdlname = "interrcheckcausedetection lduser" *)
  wire \interrcheckcausedetection.lduser ;
  (* hdlname = "interrcheckcausedetection machine" *)
  wire \interrcheckcausedetection.machine ;
  (* hdlname = "interrcheckcausedetection medelegcsr" *)
  wire [31:0] \interrcheckcausedetection.medelegcsr ;
  (* hdlname = "interrcheckcausedetection midelegcsr" *)
  wire [31:0] \interrcheckcausedetection.midelegcsr ;
  (* hdlname = "interrcheckcausedetection miecc" *)
  wire [31:0] \interrcheckcausedetection.miecc ;
  (* hdlname = "interrcheckcausedetection miefieldcc" *)
  wire \interrcheckcausedetection.miefieldcc ;
  (* hdlname = "interrcheckcausedetection mipcc" *)
  wire [31:0] \interrcheckcausedetection.mipcc ;
  (* hdlname = "interrcheckcausedetection outadr" *)
  wire [31:0] \interrcheckcausedetection.outadr ;
  (* hdlname = "interrcheckcausedetection outpc" *)
  wire [31:0] \interrcheckcausedetection.outpc ;
  (* hdlname = "interrcheckcausedetection rst" *)
  wire \interrcheckcausedetection.rst ;
  (* hdlname = "interrcheckcausedetection tempdividedbyzero" *)
  wire \interrcheckcausedetection.tempdividedbyzero ;
  (* hdlname = "interrcheckcausedetection tempecallflag" *)
  wire \interrcheckcausedetection.tempecallflag ;
  (* hdlname = "interrcheckcausedetection tempflags" *)
  wire [5:0] \interrcheckcausedetection.tempflags ;
  (* hdlname = "interrcheckcausedetection tempillegalinstr" *)
  wire \interrcheckcausedetection.tempillegalinstr ;
  (* hdlname = "interrcheckcausedetection tempinstraddrmisaligned" *)
  wire \interrcheckcausedetection.tempinstraddrmisaligned ;
  (* hdlname = "interrcheckcausedetection temploadaddrmisaligned" *)
  wire \interrcheckcausedetection.temploadaddrmisaligned ;
  (* hdlname = "interrcheckcausedetection tempstoreaddrmisaligned" *)
  wire \interrcheckcausedetection.tempstoreaddrmisaligned ;
  (* hdlname = "interrcheckcausedetection trapvalue" *)
  wire [31:0] \interrcheckcausedetection.trapvalue ;
  (* hdlname = "interrcheckcausedetection uiefieldcc" *)
  wire \interrcheckcausedetection.uiefieldcc ;
  (* hdlname = "interrcheckcausedetection user" *)
  wire \interrcheckcausedetection.user ;
  output interruptraise;
  wire interruptraise;
  wire interruptraise_int;
  wire interruptraisetemp;
  wire [31:0] interruptsources;
  wire [31:0] interruptstartaddressdirect;
  (* hdlname = "interruptstartaddressgenerator causecode" *)
  wire [5:0] \interruptstartaddressgenerator.causecode ;
  (* hdlname = "interruptstartaddressgenerator interruptstartaddressdirect" *)
  wire [31:0] \interruptstartaddressgenerator.interruptstartaddressdirect ;
  (* hdlname = "interruptstartaddressgenerator interruptstartaddressvectored" *)
  wire [31:0] \interruptstartaddressgenerator.interruptstartaddressvectored ;
  (* hdlname = "interruptstartaddressgenerator modetvec" *)
  wire [1:0] \interruptstartaddressgenerator.modetvec ;
  (* hdlname = "interruptstartaddressgenerator tvecbase" *)
  wire [31:0] \interruptstartaddressgenerator.tvecbase ;
  wire [31:0] interruptstartaddressvectored;
  (* hdlname = "intersrcsynchreg clk" *)
  wire \intersrcsynchreg.clk ;
  (* hdlname = "intersrcsynchreg inreg" *)
  wire [31:0] \intersrcsynchreg.inreg ;
  (* hdlname = "intersrcsynchreg outreg" *)
  wire [31:0] \intersrcsynchreg.outreg ;
  (* hdlname = "intersrcsynchreg rst" *)
  wire \intersrcsynchreg.rst ;
  (* hdlname = "intersrcsynchreg zero" *)
  wire \intersrcsynchreg.zero ;
  output [31:0] ir;
  wire [31:0] ir;
  output is_aau_used;
  wire is_aau_used;
  output is_load_in_mem;
  wire is_load_in_mem;
  output is_store_in_mem;
  wire is_store_in_mem;
  input iscsrinstruction;
  wire iscsrinstruction;
  input ldbytesigned;
  wire ldbytesigned;
  input ldcntcsr;
  wire ldcntcsr;
  input lddelegation;
  wire lddelegation;
  input ldhalfsigned;
  wire ldhalfsigned;
  input ldmachine;
  wire ldmachine;
  output ldmiereg;
  wire ldmiereg;
  output ldmieuiefield;
  wire ldmieuiefield;
  wire ldpc;
  input lduser;
  wire lduser;
  input [2:0] ldvaluecsr;
  wire [2:0] ldvaluecsr;
  (* hdlname = "llu ain" *)
  wire [31:0] \llu.ain ;
  (* hdlname = "llu bin" *)
  wire [31:0] \llu.bin ;
  (* hdlname = "llu result" *)
  wire [31:0] \llu.result ;
  (* hdlname = "llu sellogic" *)
  wire [1:0] \llu.sellogic ;
  (* hdlname = "llu y" *)
  wire [31:0] \llu.y ;
  wire [31:0] lluresult;
  input load;
  wire load;
  input loadmiereg;
  wire loadmiereg;
  input loadmieuiefield;
  wire loadmieuiefield;
  wire [31:0] m2wb_alu_res_curr;
  wire [63:0] m2wb_ctrl_word_curr;
  wire m2wb_divided_by_zero_flag_curr;
  wire m2wb_ecall_flag_curr;
  input m2wb_en;
  wire m2wb_en;
  wire m2wb_ex_flag_curr;
  wire m2wb_hazard_flag_curr;
  wire m2wb_hazard_flag_next;
  wire m2wb_illegal_instruction_flag_curr;
  wire [2:0] m2wb_inst_type_curr;
  wire [31:0] m2wb_instr_curr;
  wire m2wb_instr_misaligned_flag_curr;
  wire m2wb_lt_curr;
  wire [31:0] m2wb_mem_res_curr;
  wire [31:0] m2wb_mem_res_next;
  wire [31:0] m2wb_op1_curr;
  wire [31:0] m2wb_outcsr_curr;
  wire [31:0] m2wb_pc_curr;
  wire [31:0] m2wb_pc_plus4_curr;
  input m2wb_rst;
  wire m2wb_rst;
  wire m2wb_rst_def;
  wire m2wb_valid_curr;
  wire m2wb_validaccesscsr_curr;
  wire m_checkmisaligneddawu;
  wire [2:0] m_func3;
  wire m_ldbytesigned;
  wire m_ldhalfsigned;
  wire m_load;
  wire [1:0] m_nbytes;
  wire [6:0] m_opcode;
  wire m_startdaru;
  wire m_startdawu;
  output m_valid;
  wire m_valid;
  input machineexternalinterrupt;
  wire machineexternalinterrupt;
  input machinesoftwareinterrupt;
  wire machinesoftwareinterrupt;
  input machinestatusalterationpostcsr;
  wire machinestatusalterationpostcsr;
  input machinestatusalterationprecsr;
  wire machinestatusalterationprecsr;
  input machinetimerinterrupt;
  wire machinetimerinterrupt;
  output [31:0] memaddr1;
  wire [31:0] memaddr1;
  output [31:0] memaddr2;
  wire [31:0] memaddr2;
  wire [31:0] memaddrdaru2;
  wire [31:0] memaddrdawu;
  input [15:0] memdataout1;
  wire [15:0] memdataout1;
  input [15:0] memdataout2;
  wire [15:0] memdataout2;
  input memready1;
  wire memready1;
  input memready2;
  wire memready2;
  input mipcclddisable;
  wire mipcclddisable;
  output mirror;
  wire mirror;
  wire mirror_int;
  wire [11:0] mirroraddress;
  wire mirroruie;
  wire mirroruip;
  input mirrorusercu;
  wire mirrorusercu;
  wire mirrorustatus;
  output [1:0] modetvec;
  wire [1:0] modetvec;
  (* hdlname = "mux2 a" *)
  wire [31:0] \mux2.a ;
  (* hdlname = "mux2 b" *)
  wire [31:0] \mux2.b ;
  (* hdlname = "mux2 s0" *)
  wire \mux2.s0 ;
  (* hdlname = "mux2 s1" *)
  wire \mux2.s1 ;
  (* hdlname = "mux2 w" *)
  wire [31:0] \mux2.w ;
  (* hdlname = "mux5 a" *)
  wire [31:0] \mux5.a ;
  (* hdlname = "mux5 b" *)
  wire [31:0] \mux5.b ;
  (* hdlname = "mux5 s0" *)
  wire \mux5.s0 ;
  (* hdlname = "mux5 s1" *)
  wire \mux5.s1 ;
  (* hdlname = "mux5 w" *)
  wire [31:0] \mux5.w ;
  (* hdlname = "mux6 a" *)
  wire [31:0] \mux6.a ;
  (* hdlname = "mux6 b" *)
  wire [31:0] \mux6.b ;
  (* hdlname = "mux6 s0" *)
  wire \mux6.s0 ;
  (* hdlname = "mux6 s1" *)
  wire \mux6.s1 ;
  (* hdlname = "mux6 w" *)
  wire [31:0] \mux6.w ;
  (* hdlname = "mux8 a" *)
  wire [11:0] \mux8.a ;
  (* hdlname = "mux8 b" *)
  wire [11:0] \mux8.b ;
  (* hdlname = "mux8 s1" *)
  wire \mux8.s1 ;
  (* hdlname = "mux8 w" *)
  wire [11:0] \mux8.w ;
  (* hdlname = "muxcmp a" *)
  wire [31:0] \muxcmp.a ;
  (* hdlname = "muxcmp b" *)
  wire [31:0] \muxcmp.b ;
  (* hdlname = "muxcmp s0" *)
  wire \muxcmp.s0 ;
  (* hdlname = "muxcmp s1" *)
  wire \muxcmp.s1 ;
  (* hdlname = "muxcmp w" *)
  wire [31:0] \muxcmp.w ;
  input [11:0] muxcode;
  wire [11:0] muxcode;
  input [1:0] nbytes;
  wire [1:0] nbytes;
  wire [31:0] op1_p1_pc;
  wire [11:0] outaddr;
  wire [31:0] outcsr_reg;
  (* hdlname = "outcsr_register clk" *)
  wire \outcsr_register.clk ;
  (* hdlname = "outcsr_register inreg" *)
  wire [31:0] \outcsr_register.inreg ;
  (* hdlname = "outcsr_register load" *)
  wire \outcsr_register.load ;
  (* hdlname = "outcsr_register outreg" *)
  wire [31:0] \outcsr_register.outreg ;
  (* hdlname = "outcsr_register rst" *)
  wire \outcsr_register.rst ;
  (* hdlname = "outcsr_register zero" *)
  wire \outcsr_register.zero ;
  wire [31:0] outcsr_write_val;
  wire [31:0] outpc;
  wire [31:0] p1;
  wire [31:0] p2;
  input pass;
  wire pass;
  wire pc_from_wb;
  input [15:0] platforminterruptsignals;
  wire [15:0] platforminterruptsignals;
  wire [11:0] preaddressregbank;
  output [1:0] previousprv;
  wire [1:0] previousprv;
  output readmemdaru1;
  wire readmemdaru1;
  wire readmemdaru1_int;
  output readmemdaru2;
  wire readmemdaru2;
  wire readmemdaru2_int;
  output readonlycsr;
  wire readonlycsr;
  (* hdlname = "register_bank addressregbank" *)
  wire [11:0] \register_bank.addressregbank ;
  (* hdlname = "register_bank clk" *)
  wire \register_bank.clk ;
  (* hdlname = "register_bank csr_address_logic addressregbank" *)
  wire [11:0] \register_bank.csr_address_logic.addressregbank ;
  (* hdlname = "register_bank csr_address_logic ldmiereg" *)
  wire \register_bank.csr_address_logic.ldmiereg ;
  (* hdlname = "register_bank csr_address_logic ldmieuiefield" *)
  wire \register_bank.csr_address_logic.ldmieuiefield ;
  (* hdlname = "register_bank csr_address_logic mirror" *)
  wire \register_bank.csr_address_logic.mirror ;
  (* hdlname = "register_bank csr_address_logic mirroruie" *)
  wire \register_bank.csr_address_logic.mirroruie ;
  (* hdlname = "register_bank csr_address_logic mirroruietemp" *)
  wire \register_bank.csr_address_logic.mirroruietemp ;
  (* hdlname = "register_bank csr_address_logic mirroruip" *)
  wire \register_bank.csr_address_logic.mirroruip ;
  (* hdlname = "register_bank csr_address_logic mirroruiptemp" *)
  wire \register_bank.csr_address_logic.mirroruiptemp ;
  (* hdlname = "register_bank csr_address_logic mirrorustatus" *)
  wire \register_bank.csr_address_logic.mirrorustatus ;
  (* hdlname = "register_bank csr_address_logic mirrorustatustemp" *)
  wire \register_bank.csr_address_logic.mirrorustatustemp ;
  (* hdlname = "register_bank csr_registers addressregbank" *)
  wire [4:0] \register_bank.csr_registers.addressregbank ;
  (* hdlname = "register_bank csr_registers clk" *)
  wire \register_bank.csr_registers.clk ;
  (* hdlname = "register_bank csr_registers inputregbank" *)
  wire [31:0] \register_bank.csr_registers.inputregbank ;
  (* hdlname = "register_bank csr_registers outregbank" *)
  wire [31:0] \register_bank.csr_registers.outregbank ;
  (* hdlname = "register_bank csr_registers rdata" *)
  (* ramstyle = "M9K" *)
  wire [1023:0] \register_bank.csr_registers.rdata ;
  (* hdlname = "register_bank csr_registers rst" *)
  wire \register_bank.csr_registers.rst ;
  (* hdlname = "register_bank csr_registers writeaddressregbank" *)
  wire [4:0] \register_bank.csr_registers.writeaddressregbank ;
  (* hdlname = "register_bank csr_registers writeregbank" *)
  wire \register_bank.csr_registers.writeregbank ;
  (* hdlname = "register_bank inputregbank" *)
  wire [31:0] \register_bank.inputregbank ;
  (* hdlname = "register_bank ldmiereg" *)
  wire \register_bank.ldmiereg ;
  (* hdlname = "register_bank ldmieuiefield" *)
  wire \register_bank.ldmieuiefield ;
  (* hdlname = "register_bank loadmiereg" *)
  wire \register_bank.loadmiereg ;
  (* hdlname = "register_bank loadmieuiefield" *)
  wire \register_bank.loadmieuiefield ;
  (* hdlname = "register_bank mieccregister clk" *)
  wire \register_bank.mieccregister.clk ;
  (* hdlname = "register_bank mieccregister inreg" *)
  wire [31:0] \register_bank.mieccregister.inreg ;
  (* hdlname = "register_bank mieccregister load" *)
  wire \register_bank.mieccregister.load ;
  (* hdlname = "register_bank mieccregister outreg" *)
  wire [31:0] \register_bank.mieccregister.outreg ;
  (* hdlname = "register_bank mieccregister rst" *)
  wire \register_bank.mieccregister.rst ;
  (* hdlname = "register_bank mieccregister zero" *)
  wire \register_bank.mieccregister.zero ;
  (* hdlname = "register_bank miefieldccregister clk" *)
  wire \register_bank.miefieldccregister.clk ;
  (* hdlname = "register_bank miefieldccregister inreg" *)
  wire \register_bank.miefieldccregister.inreg ;
  (* hdlname = "register_bank miefieldccregister load" *)
  wire \register_bank.miefieldccregister.load ;
  (* hdlname = "register_bank miefieldccregister outreg" *)
  wire \register_bank.miefieldccregister.outreg ;
  (* hdlname = "register_bank miefieldccregister rst" *)
  wire \register_bank.miefieldccregister.rst ;
  (* hdlname = "register_bank miefieldccregister zero" *)
  wire \register_bank.miefieldccregister.zero ;
  (* hdlname = "register_bank mirror" *)
  wire \register_bank.mirror ;
  (* hdlname = "register_bank mirroruie" *)
  wire \register_bank.mirroruie ;
  (* hdlname = "register_bank mirroruip" *)
  wire \register_bank.mirroruip ;
  (* hdlname = "register_bank mirrorustatus" *)
  wire \register_bank.mirrorustatus ;
  (* hdlname = "register_bank outmieccreg" *)
  wire [31:0] \register_bank.outmieccreg ;
  (* hdlname = "register_bank outmiefieldccreg" *)
  wire \register_bank.outmiefieldccreg ;
  (* hdlname = "register_bank outregbank" *)
  wire [31:0] \register_bank.outregbank ;
  (* hdlname = "register_bank outuiefieldccreg" *)
  wire \register_bank.outuiefieldccreg ;
  (* hdlname = "register_bank rst" *)
  wire \register_bank.rst ;
  (* hdlname = "register_bank translatedaddress" *)
  wire [4:0] \register_bank.translatedaddress ;
  (* hdlname = "register_bank translatedwriteaddress" *)
  wire [4:0] \register_bank.translatedwriteaddress ;
  (* hdlname = "register_bank uiefieldccregister clk" *)
  wire \register_bank.uiefieldccregister.clk ;
  (* hdlname = "register_bank uiefieldccregister inreg" *)
  wire \register_bank.uiefieldccregister.inreg ;
  (* hdlname = "register_bank uiefieldccregister load" *)
  wire \register_bank.uiefieldccregister.load ;
  (* hdlname = "register_bank uiefieldccregister outreg" *)
  wire \register_bank.uiefieldccregister.outreg ;
  (* hdlname = "register_bank uiefieldccregister rst" *)
  wire \register_bank.uiefieldccregister.rst ;
  (* hdlname = "register_bank uiefieldccregister zero" *)
  wire \register_bank.uiefieldccregister.zero ;
  (* hdlname = "register_bank writeaddressregbank" *)
  wire [11:0] \register_bank.writeaddressregbank ;
  (* hdlname = "register_bank writeregbank" *)
  wire \register_bank.writeregbank ;
  (* hdlname = "registerfile clk" *)
  wire \registerfile.clk ;
  (* hdlname = "registerfile p1" *)
  wire [31:0] \registerfile.p1 ;
  (* hdlname = "registerfile p2" *)
  wire [31:0] \registerfile.p2 ;
  (* hdlname = "registerfile rd" *)
  wire [4:0] \registerfile.rd ;
  (* hdlname = "registerfile rdata" *)
  (* ramstyle = "M9K" *)
  wire [1023:0] \registerfile.rdata ;
  (* hdlname = "registerfile rs1" *)
  wire [4:0] \registerfile.rs1 ;
  (* hdlname = "registerfile rs2" *)
  wire [4:0] \registerfile.rs2 ;
  (* hdlname = "registerfile rst" *)
  wire \registerfile.rst ;
  (* hdlname = "registerfile setone" *)
  wire \registerfile.setone ;
  (* hdlname = "registerfile setzero" *)
  wire \registerfile.setzero ;
  (* hdlname = "registerfile writedata" *)
  wire [31:0] \registerfile.writedata ;
  (* hdlname = "registerfile writeregfile" *)
  wire \registerfile.writeregfile ;
  (* hdlname = "regpc clk" *)
  wire \regpc.clk ;
  (* hdlname = "regpc inreg" *)
  wire [31:0] \regpc.inreg ;
  (* hdlname = "regpc load" *)
  wire \regpc.load ;
  (* hdlname = "regpc outreg" *)
  wire [31:0] \regpc.outreg ;
  (* hdlname = "regpc rst" *)
  wire \regpc.rst ;
  (* hdlname = "regpc zero" *)
  wire \regpc.zero ;
  wire [31:0] resaah;
  wire [31:0] resaal;
  input ret_from_epc;
  wire ret_from_epc;
  input rst;
  wire rst;
  input selaah;
  wire selaah;
  input selaal;
  wire selaal;
  input selaau;
  wire selaau;
  input selalu;
  wire selalu;
  input selasu;
  wire selasu;
  input selauipc;
  wire selauipc;
  input selbsu;
  wire selbsu;
  input selcause_csr;
  wire selcause_csr;
  input selccmip_csr;
  wire selccmip_csr;
  input selcsr;
  wire selcsr;
  input selcsraddrfrominst;
  wire selcsraddrfrominst;
  input selimm;
  wire selimm;
  input selimmcsr;
  wire selimmcsr;
  input selinterruptaddressdirect;
  wire selinterruptaddressdirect;
  input selinterruptaddressvectored;
  wire selinterruptaddressvectored;
  input seljl;
  wire seljl;
  input selllu;
  wire selllu;
  input [1:0] sellogic;
  wire [1:0] sellogic;
  input selmedeleg_csr;
  wire selmedeleg_csr;
  input selmem;
  wire selmem;
  input selmepc_csr;
  wire selmepc_csr;
  input selmideleg_csr;
  wire selmideleg_csr;
  input selp1;
  wire selp1;
  input selp1csr;
  wire selp1csr;
  input selp2;
  wire selp2;
  input selpc;
  wire selpc;
  input selpc4;
  wire selpc4;
  input selpc_csr;
  wire selpc_csr;
  input selreadwritecsr;
  wire selreadwritecsr;
  input selromaddress;
  wire selromaddress;
  input [1:0] selshift;
  wire [1:0] selshift;
  input seltval_csr;
  wire seltval_csr;
  input setcsr;
  wire setcsr;
  wire setone_in;
  wire setzero_in;
  input setzeroorone;
  wire setzeroorone;
  input signedsigned;
  wire signedsigned;
  input signedunsigned;
  wire signedunsigned;
  input startdaru;
  wire startdaru;
  input startdawu;
  wire startdawu;
  input startdivideaau;
  wire startdivideaau;
  wire startdivideaau_def;
  input startmultiplyaau;
  wire startmultiplyaau;
  wire startmultiplyaau_def;
  (* hdlname = "sulu datain" *)
  wire [31:0] \sulu.datain ;
  (* hdlname = "sulu dataout" *)
  wire [31:0] \sulu.dataout ;
  (* hdlname = "sulu load" *)
  wire \sulu.load ;
  (* hdlname = "sulu loadbytesigned" *)
  wire \sulu.loadbytesigned ;
  (* hdlname = "sulu loadhalfsigned" *)
  wire \sulu.loadhalfsigned ;
  wire [5:0] tempflags;
  wire [31:0] trapvalue;
  input unsignedunsigned;
  wire unsignedunsigned;
  input upcntcsr;
  wire upcntcsr;
  input userexternalinterrupt;
  wire userexternalinterrupt;
  input usersoftwareinterrupt;
  wire usersoftwareinterrupt;
  input userstatusalterationpostcsr;
  wire userstatusalterationpostcsr;
  input userstatusalterationprecsr;
  wire userstatusalterationprecsr;
  input usertimerinterrupt;
  wire usertimerinterrupt;
  output validaccesscsr;
  wire validaccesscsr;
  wire validaccesscsr_int;
  wire validaddresscsr;
  wire [11:0] wb_addressregbank;
  output [2:0] wb_func3;
  wire [2:0] wb_func3;
  output wb_iscsrinstruction;
  wire wb_iscsrinstruction;
  output wb_mreturetbar;
  wire wb_mreturetbar;
  output wb_ret_from_epc;
  wire wb_ret_from_epc;
  wire wb_ret_from_epc_int;
  wire wb_selalu;
  wire wb_selcsraddrfrominst;
  wire wb_selmem;
  wire wb_selpc4;
  wire wb_setzeroorone;
  output wb_valid;
  wire wb_valid;
  output wb_validaccesscsr;
  wire wb_validaccesscsr;
  wire wb_writeregfile;
  wire [11:0] writeaddressregbank;
  wire [31:0] writedata;
  output writememdawu;
  wire writememdawu;
  wire writememdawu_int;
  input writerb_inst;
  wire writerb_inst;
  input writeregbank;
  wire writeregbank;
  input writeregfile;
  wire writeregfile;
  wire writeregfile_in;
  input zerocntcsr;
  wire zerocntcsr;
  assign m2wb_validaccesscsr_curr = rst ? 1'h0 : _0000_;
  assign e2m_validaccesscsr_curr = rst ? 1'h0 : _0001_;
  assign d2e_validaccesscsr_curr = rst ? 1'h0 : _0002_;
  assign eh_state_curr = rst ? 2'h0 : _0003_;
  assign m2wb_ctrl_word_curr = rst ? 64'h0000000000000000 : { 4'hx, _0004_[59], 2'hx, _0004_[56:53], 4'hx, _0004_[48], 46'hxxxxxxxxxxxx, _0004_[1:0] };
  assign m2wb_inst_type_curr = rst ? 3'h0 : _0005_;
  assign e2m_divided_by_zero_flag_curr = rst ? 1'h0 : _0006_;
  assign e2m_ctrl_word_curr = rst ? 64'h0000000000000000 : _0007_;
  assign e2m_ecall_flag_curr = rst ? 1'h0 : _0008_;
  assign e2m_illegal_instruction_flag_curr = rst ? 1'h0 : _0009_;
  assign e2m_pc_curr = rst ? 32'd0 : _0010_;
  assign e2m_op1_curr = rst ? 32'd0 : _0011_;
  assign e2m_outcsr_curr = rst ? 32'd0 : _0012_;
  assign e2m_instr_misaligned_flag_curr = rst ? 1'h0 : _0013_;
  assign e2m_valid_curr = rst ? 1'h0 : _0014_;
  assign d2e_ctrl_word_curr = rst ? 64'h0000000000000000 : _0015_;
  assign d2e_ecall_flag_curr = rst ? 1'h0 : _0016_;
  assign d2e_illegal_instruction_flag_curr = rst ? 1'h0 : _0017_;
  assign d2e_instr_misaligned_flag_curr = rst ? 1'h0 : _0018_;
  assign d2e_valid_curr = rst ? 1'h0 : _0019_;
  assign gi2d_instr_misaligned_flag_curr = rst ? 1'h0 : _0020_;
  assign d2e_pc_plus4_curr = rst ? 32'd0 : _0021_;
  assign gi2d_pc_plus4_curr = rst ? 32'd0 : _0022_;
  assign d2e_pc_curr = rst ? 32'd0 : _0023_;
  assign gi2d_pc_curr = rst ? 32'd0 : _0024_;
  assign gi2d_valid_curr = rst ? 1'h0 : _0025_;
  assign e2m_hazard_flag_curr = rst ? 1'h0 : _0026_;
  assign e2m_inst_type_curr = rst ? 3'h0 : _0027_;
  assign e2m_instr_curr = rst ? 32'd0 : _0028_;
  assign \interrcheckcausedetection.outpc  = rst ? 32'd0 : _0029_;
  assign d2e_inst_type_curr = rst ? 3'h0 : _0030_;
  assign d2e_instr_curr = rst ? 32'd0 : _0031_;
  assign m2wb_valid_curr = rst ? 1'h0 : _0032_;
  assign m2wb_instr_misaligned_flag_curr = rst ? 1'h0 : _0033_;
  assign m2wb_illegal_instruction_flag_curr = rst ? 1'h0 : _0034_;
  assign m2wb_divided_by_zero_flag_curr = rst ? 1'h0 : _0035_;
  assign m2wb_ecall_flag_curr = rst ? 1'h0 : _0036_;
  assign m2wb_outcsr_curr = rst ? 32'd0 : _0037_;
  assign e2m_pc_plus4_curr = rst ? 32'd0 : _0038_;
  assign \csrisl.p1  = rst ? 32'd0 : _0039_;
  assign m2wb_hazard_flag_curr = rst ? 1'h0 : _0040_;
  assign m2wb_pc_plus4_curr = rst ? 32'd0 : _0041_;
  assign m2wb_alu_res_curr = rst ? 32'd0 : _0042_;
  assign m2wb_mem_res_curr = rst ? 32'd0 : _0043_;
  assign e2m_ex_flag_curr = rst ? 1'h0 : _0044_;
  assign e2m_op2_curr = rst ? 32'd0 : _0045_;
  assign e2m_gt_curr = rst ? 1'h0 : _0046_;
  assign e2m_eq_curr = rst ? 1'h0 : _0047_;
  assign e2m_lt_curr = rst ? 1'h0 : _0048_;
  assign d2e_outcsr_curr = rst ? 32'd0 : _0049_;
  assign \comparator.ain  = rst ? 32'd0 : _0050_;
  assign d2e_op2_curr = rst ? 32'd0 : _0051_;
  assign \aau.bin  = rst ? 32'd0 : _0052_;
  assign \aau.ain  = rst ? 32'd0 : _0053_;
  assign completedaau_stored = rst ? 1'h0 : _0054_;
  assign d2e_ex_flag_curr = rst ? 1'h0 : _0055_;
  assign m2wb_instr_curr = rst ? 32'd0 : _0056_;
  assign m2wb_lt_curr = rst ? 1'h0 : _0057_;
  assign m2wb_ex_flag_curr = rst ? 1'h0 : _0058_;
  assign gi2d_instr_curr = rst ? 32'd0 : _0059_;
  assign gi2d_ex_flag_curr = rst ? 1'h0 : _0060_;
  assign completeddaru1_stored = rst ? 1'h0 : _0061_;
  assign f2gi_pc_plus4_curr = rst ? 32'd0 : _0062_;
  assign \daru2.datapath.addrreg.inreg  = rst ? 32'd0 : _0063_;
  always @(posedge clk)
    if (_0443_) _0024_ <= 32'd0;
    else _0024_ <= _0361_;
  always @(posedge clk)
    if (_0443_) _0025_ <= 1'h0;
    else _0025_ <= _0360_;
  always @(posedge clk)
    if (_0444_) _0016_ <= 1'h0;
    else _0016_ <= _0377_;
  always @(posedge clk)
    if (_0445_) _0026_ <= 1'h0;
    else _0026_ <= _0389_;
  always @(posedge clk)
    if (_0445_) _0027_ <= 3'h0;
    else _0027_ <= _0388_;
  always @(posedge clk)
    if (_0445_) _0028_ <= 32'd0;
    else _0028_ <= _0387_;
  always @(posedge clk)
    if (_0446_) _0029_ <= 32'd0;
    else _0029_ <= _0414_;
  always @(posedge clk)
    if (_0444_) _0017_ <= 1'h0;
    else _0017_ <= _0376_;
  always @(posedge clk)
    if (_0444_) _0030_ <= 3'h0;
    else _0030_ <= _0371_;
  always @(posedge clk)
    if (_0444_) _0031_ <= 32'd0;
    else _0031_ <= _0370_;
  always @(posedge clk)
    if (_0446_) _0032_ <= 1'h0;
    else _0032_ <= _0413_;
  always @(posedge clk)
    if (_0446_) _0033_ <= 1'h0;
    else _0033_ <= _0412_;
  always @(posedge clk)
    if (_0446_) _0034_ <= 1'h0;
    else _0034_ <= _0411_;
  always @(posedge clk)
    if (_0446_) _0035_ <= 1'h0;
    else _0035_ <= _0410_;
  always @(posedge clk)
    if (_0446_) _0036_ <= 1'h0;
    else _0036_ <= _0409_;
  always @(posedge clk)
    if (_0446_) _0037_ <= 32'd0;
    else _0037_ <= _0408_;
  always @(posedge clk)
    if (_0445_) _0038_ <= 32'd0;
    else _0038_ <= _0386_;
  always @(posedge clk)
    if (_0446_) _0039_ <= 32'd0;
    else _0039_ <= _0407_;
  always @(posedge clk)
    if (_0444_) _0018_ <= 1'h0;
    else _0018_ <= _0375_;
  always @(posedge clk)
    if (_0446_) _0040_ <= 1'h0;
    else _0040_ <= _0406_;
  always @(posedge clk)
    if (_0444_) _0019_ <= 1'h0;
    else _0019_ <= _0374_;
  always @(posedge clk)
    if (_0446_) _0041_ <= 32'd0;
    else _0041_ <= _0405_;
  always @(posedge clk)
    if (_0446_) _0042_ <= 32'd0;
    else _0042_ <= _0404_;
  always @(posedge clk)
    if (_0446_) _0043_ <= 32'd0;
    else _0043_ <= _0403_;
  always @(posedge clk)
    if (_0445_) _0044_ <= 1'h0;
    else _0044_ <= _0385_;
  always @(posedge clk)
    if (_0443_) _0020_ <= 1'h0;
    else _0020_ <= _0363_;
  always @(posedge clk)
    if (_0445_) _0045_ <= 32'd0;
    else _0045_ <= _0384_;
  always @(posedge clk)
    if (_0444_) _0021_ <= 32'd0;
    else _0021_ <= _0373_;
  always @(posedge clk)
    if (_0444_) _0015_ <= 64'h0000000000000000;
    else _0015_ <= _0378_;
  always @(posedge clk)
    if (_0445_) _0046_ <= 1'h0;
    else _0046_ <= _0383_;
  always @(posedge clk)
    if (_0445_) _0047_ <= 1'h0;
    else _0047_ <= _0382_;
  always @(posedge clk)
    if (_0445_) _0048_ <= 1'h0;
    else _0048_ <= _0381_;
  always @(posedge clk)
    if (_0444_) _0049_ <= 32'd0;
    else _0049_ <= _0369_;
  always @(posedge clk)
    if (_0444_) _0050_ <= 32'd0;
    else _0050_ <= _0368_;
  always @(posedge clk)
    if (_0443_) _0022_ <= 32'd0;
    else _0022_ <= _0362_;
  always @(posedge clk)
    if (_0444_) _0051_ <= 32'd0;
    else _0051_ <= _0367_;
  always @(posedge clk)
    if (_0446_) _0000_ <= 1'h0;
    else _0000_ <= _0417_;
  always @(posedge clk)
    if (_0444_) _0052_ <= 32'd0;
    else _0052_ <= _0366_;
  always @(posedge clk)
    if (_0444_) _0053_ <= 32'd0;
    else _0053_ <= _0365_;
  always @(posedge clk)
    if (_0445_) _0001_ <= 1'h0;
    else _0001_ <= _0399_;
  always @(posedge clk)
    if (_0444_) _0002_ <= 1'h0;
    else _0002_ <= _0379_;
  always @(posedge clk)
    if (_0447_) _0003_ <= 2'h0;
    else _0003_ <= eh_state_next;
  reg [7:0] _1297_;
  always @(posedge clk)
    if (_0446_) _1297_ <= 8'h00;
    else _1297_ <= { _0416_[59], _0416_[56:53], _0416_[48], _0416_[1:0] };
  assign { _0004_[59], _0004_[56:53], _0004_[48], _0004_[1:0] } = _1297_;
  always @(posedge clk)
    if (_0448_) _0054_ <= 1'h0;
    else _0054_ <= _0187_;
  always @(posedge clk)
    if (_0444_) _0055_ <= 1'h0;
    else _0055_ <= _0364_;
  always @(posedge clk)
    if (_0446_) _0056_ <= 32'd0;
    else _0056_ <= _0402_;
  always @(posedge clk)
    if (_0446_) _0005_ <= 3'h0;
    else _0005_ <= _0415_;
  always @(posedge clk)
    if (_0445_) _0006_ <= 1'h0;
    else _0006_ <= _0398_;
  always @(posedge clk)
    if (_0445_) _0007_ <= 64'h0000000000000000;
    else _0007_ <= _0397_;
  always @(posedge clk)
    if (_0445_) _0008_ <= 1'h0;
    else _0008_ <= _0396_;
  always @(posedge clk)
    if (_0446_) _0057_ <= 1'h0;
    else _0057_ <= _0401_;
  always @(posedge clk)
    if (_0445_) _0009_ <= 1'h0;
    else _0009_ <= _0395_;
  always @(posedge clk)
    if (_0446_) _0058_ <= 1'h0;
    else _0058_ <= _0400_;
  always @(posedge clk)
    if (_0445_) _0010_ <= 32'd0;
    else _0010_ <= _0394_;
  always @(posedge clk)
    if (_0443_) _0059_ <= 32'd0;
    else _0059_ <= _0359_;
  always @(posedge clk)
    if (_0443_) _0060_ <= 1'h0;
    else _0060_ <= _0358_;
  always @(posedge clk)
    if (_0449_) _0061_ <= 1'h0;
    else _0061_ <= _0075_;
  always @(posedge clk)
    if (_0445_) _0011_ <= 32'd0;
    else _0011_ <= _0393_;
  always @(posedge clk)
    if (_0445_) _0012_ <= 32'd0;
    else _0012_ <= _0392_;
  always @(posedge clk)
    if (_0445_) _0013_ <= 1'h0;
    else _0013_ <= _0391_;
  always @(posedge clk)
    if (_0445_) _0063_ <= 32'd0;
    else _0063_ <= _0380_;
  always @(posedge clk)
    if (_0444_) _0023_ <= 32'd0;
    else _0023_ <= _0372_;
  always @(posedge clk)
    if (_0445_) _0014_ <= 1'h0;
    else _0014_ <= _0390_;
  reg [21:0] _1318_;
  always @(posedge clk)
    if (rst) _1318_ <= 22'h000000;
    else _1318_ <= { _0948_[31:16], _0948_[11], _0948_[8:7], _0948_[4:3], _0948_[0] };
  assign { _0947_[31:16], _0947_[11], _0947_[8:7], _0947_[4:3], _0947_[0] } = _1318_;
  always @(posedge clk)
    if (_0450_) _0691_ <= 1'h0;
    else _0691_ <= _0695_;
  always @(posedge clk)
    if (_0451_) _0666_ <= 1'h0;
    else _0666_ <= _0670_;
  always @(posedge clk)
    if (_0452_) _0518_[5] <= 1'h0;
    else _0518_[5] <= _0522_[5];
  always @(posedge clk)
    if (rst) _0518_[4:0] <= 5'h00;
    else _0518_[4:0] <= _0523_[4:0];
  always @(posedge clk)
    if (_0453_) _0637_ <= 1'h0;
    else _0637_ <= _0641_;
  reg [1:0] _1324_;
  always @(posedge clk)
    if (_0454_) _1324_ <= 2'h0;
    else _1324_ <= { _0491_[5], _0491_[0] };
  assign { _0487_[5], _0487_[0] } = _1324_;
  reg [3:0] _1325_;
  always @(posedge clk)
    if (rst) _1325_ <= 4'h0;
    else _1325_ <= _0492_[4:1];
  assign _0487_[4:1] = _1325_;
  reg [9:0] _1326_;
  always @(posedge clk)
    if (_0455_) _1326_ <= 10'h000;
    else _1326_ <= { \csrisl.ccmip [15:12], \csrisl.ccmip [10:9], \csrisl.ccmip [6:5], \csrisl.ccmip [2:1] };
  assign { _0797_[15:12], _0797_[10:9], _0797_[6:5], _0797_[2:1] } = _1326_;
  reg [21:0] _1327_;
  always @(posedge clk)
    if (rst) _1327_ <= 22'h000000;
    else _1327_ <= { _0798_[31:16], _0798_[11], _0798_[8:7], _0798_[4:3], _0798_[0] };
  assign { _0797_[31:16], _0797_[11], _0797_[8:7], _0797_[4:3], _0797_[0] } = _1327_;
  always @(posedge clk)
    if (_0452_) _0529_[0] <= 1'h0;
    else _0529_[0] <= _0530_[0];
  always @(posedge clk)
    if (rst) _0529_[33:1] <= 33'h000000000;
    else _0529_[33:1] <= _0531_[33:1];
  always @(posedge clk)
    if (_0454_) _0495_[32] <= 1'h0;
    else _0495_[32] <= \aau.division.unsigneddiv.datapathdiv.m [32];
  always @(posedge clk)
    if (rst) _0495_[31:0] <= 32'd0;
    else _0495_[31:0] <= _0496_[31:0];
  assign _0461_ = ~ mipcclddisable;
  assign _0443_ = | { gi2d_rst_def, rst };
  assign _0445_ = | { e2m_rst_def, rst };
  assign _0446_ = | { m2wb_rst_def, rst };
  assign _0447_ = | { m2wb_rst, rst };
  assign _0448_ = | { _0186_, rst };
  assign _0449_ = | { _0074_, rst };
  assign _0450_ = | { \dawu.controller.initcnt , rst };
  assign _0451_ = | { \daru2.controller.initcnt , rst };
  assign _0452_ = | { \aau.multiplication.controller.counter.initcnt , rst };
  assign _0453_ = | { \daru1.controller.initcnt , rst };
  assign _0454_ = | { \aau.division.unsigneddiv.controllerdiv.counter.initcnt , rst };
  assign _0455_ = | { _0461_, rst };
  assign _0456_ = | { _0435_, _0434_ };
  assign _0457_ = | { _0435_, _0434_, _0432_ };
  assign _0458_ = | { _0432_, _0429_ };
  assign _0459_ = | { _0434_, _0432_, _0429_ };
  assign _0460_ = | { _0622_, _0628_ };
  assign \aau.division.unsigneddiv.controllerdiv.pstate  = rst ? 2'h0 : _0479_;
  always @(posedge clk)
    if (_0444_) _0479_ <= 2'h0;
    else _0479_ <= \aau.division.unsigneddiv.controllerdiv.nstate ;
  assign _0444_ = | { d2e_rst_def, rst };
  assign _0486_ = | { _0481_, _0484_ };
  assign \aau.division.unsigneddiv.controllerdiv.counter.temp  = rst ? 6'h00 : _0487_;
  assign \aau.division.unsigneddiv.datapathdiv.m  = rst ? 33'h000000000 : _0495_;
  assign \aau.division.unsigneddiv.datapathdiv.shregq.6866.seroutp  = rst ? 1'h0 : _0497_;
  assign \aau.division.tclq.ain  = rst ? 32'd0 : _0498_;
  always @(posedge clk)
    if (rst) _0498_ <= 32'd0;
    else _0498_ <= _0501_;
  assign \aau.division.unsigneddiv.datapathdiv.rprev  = rst ? 33'h000000000 : _0503_;
  always @(posedge clk)
    if (_0454_) _0503_ <= 33'h000000000;
    else _0503_ <= _0505_;
  assign \aau.multiplication.controller.pstate  = rst ? 2'h1 : _0506_;
  always @(posedge clk)
    if (_0444_) _0506_ <= 2'h1;
    else _0506_ <= \aau.multiplication.controller.nstate ;
  assign \aau.multiplication.controller.counter.temp  = rst ? 6'h00 : _0518_;
  assign \aau.multiplication.datapath.addsub.b  = rst ? 33'h000000000 : _0527_;
  always @(posedge clk)
    if (rst) _0527_ <= 33'h000000000;
    else _0527_ <= _0528_;
  assign \aau.multiplication.datapath.mrreg.6594.outreg_t  = rst ? 34'h000000000 : _0529_;
  assign \aau.multiplication.datapath.addsub.add.a  = rst ? 33'h000000000 : _0532_;
  always @(posedge clk)
    if (_0452_) _0532_ <= 33'h000000000;
    else _0532_ <= _0533_;
  assign \csraddressingdecoder.cntoutput  = rst ? 3'h0 : _0593_;
  always @(posedge clk)
    if (_0603_) _0593_ <= 3'h0;
    else _0593_ <= _0602_;
  assign _0603_ = | { zerocntcsr, rst };
  assign \daru1.controller.pstate  = rst ? 2'h0 : _0620_;
  always @(posedge clk)
    if (_0632_) _0620_ <= 2'h0;
    else _0620_ <= \daru1.controller.nstate ;
  assign _0632_ = | { gi2d_rst, rst };
  assign \daru1.datapath.addrreg.outreg  = rst ? 32'd0 : _0635_;
  always @(posedge clk)
    if (rst) _0635_ <= 32'd0;
    else _0635_ <= _0636_;
  assign \daru1.datapath.adder.fa2.b  = rst ? 1'h0 : _0637_;
  assign \daru1.datapath.nbytereg.outreg  = rst ? 2'h0 : _0648_;
  always @(posedge clk)
    if (rst) _0648_ <= 2'h0;
    else _0648_ <= _0649_;
  assign \daru1.datapath.reg0.outreg  = rst ? 16'h0000 : _0650_;
  always @(posedge clk)
    if (_0453_) _0650_ <= 16'h0000;
    else _0650_ <= _0651_;
  assign \daru1.datapath.dataouthigh_reg  = rst ? 16'h0000 : _0652_;
  always @(posedge clk)
    if (_0453_) _0652_ <= 16'h0000;
    else _0652_ <= _0653_;
  assign \daru2.controller.pstate  = rst ? 2'h0 : _0654_;
  always @(posedge clk)
    if (_0661_) _0654_ <= 2'h0;
    else _0654_ <= \daru2.controller.nstate ;
  assign _0661_ = | { m2wb_en, rst };
  assign \daru2.datapath.addrreg.outreg  = rst ? 32'd0 : _0664_;
  always @(posedge clk)
    if (rst) _0664_ <= 32'd0;
    else _0664_ <= _0665_;
  assign \daru2.datapath.adder.fa2.b  = rst ? 1'h0 : _0666_;
  assign \daru2.datapath.nbytereg.outreg  = rst ? 2'h0 : _0673_;
  always @(posedge clk)
    if (rst) _0673_ <= 2'h0;
    else _0673_ <= _0674_;
  assign \daru2.datapath.reg0.outreg  = rst ? 16'h0000 : _0675_;
  always @(posedge clk)
    if (_0451_) _0675_ <= 16'h0000;
    else _0675_ <= _0676_;
  assign \daru2.datapath.reg1.outreg  = rst ? 16'h0000 : _0677_;
  always @(posedge clk)
    if (_0451_) _0677_ <= 16'h0000;
    else _0677_ <= _0678_;
  assign \dawu.controller.pstate  = rst ? 1'h0 : _0679_;
  always @(posedge clk)
    if (_0661_) _0679_ <= 1'h0;
    else _0679_ <= \dawu.controller.nstate ;
  assign \dawu.datapath.addrreg.outreg  = rst ? 32'd0 : _0689_;
  always @(posedge clk)
    if (rst) _0689_ <= 32'd0;
    else _0689_ <= _0690_;
  assign \dawu.datapath.adder.fa2.b  = rst ? 1'h0 : _0691_;
  assign \dawu.datapath.nbytesout  = rst ? 2'h0 : _0696_;
  always @(posedge clk)
    if (rst) _0696_ <= 2'h0;
    else _0696_ <= _0697_;
  assign \dawu.datapath.outreg0  = rst ? 16'h0000 : _0698_;
  always @(posedge clk)
    if (rst) _0698_ <= 16'h0000;
    else _0698_ <= _0699_;
  assign \dawu.datapath.outreg1  = rst ? 16'h0000 : _0700_;
  always @(posedge clk)
    if (rst) _0700_ <= 16'h0000;
    else _0700_ <= _0701_;
  assign \interrcheckcausedetection.delegationmode  = rst ? 2'h0 : _0709_;
  assign curprv = rst ? 2'h3 : _0710_;
  always @(posedge clk)
    if (_0796_) _0710_ <= 2'h3;
    else _0710_ <= _0711_;
  assign _0796_ = | { ldmachine, rst };
  assign \csrisl.ccmip  = rst ? 32'd0 : _0797_;
  assign outcsr_reg = rst ? 32'd0 : _0809_;
  always @(posedge clk)
    if (rst) _0809_ <= 32'd0;
    else _0809_ <= d2e_outcsr_next;
  assign \register_bank.csr_registers.rdata  = rst ? 1024'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : _0816_;
  assign _0817_ = _0837_[0] ? \register_bank.csr_registers.rdata [63:32] : \register_bank.csr_registers.rdata [31:0];
  assign _0818_ = _0837_[0] ? \register_bank.csr_registers.rdata [191:160] : \register_bank.csr_registers.rdata [159:128];
  assign _0819_ = _0837_[0] ? \register_bank.csr_registers.rdata [319:288] : \register_bank.csr_registers.rdata [287:256];
  assign _0820_ = _0837_[0] ? \register_bank.csr_registers.rdata [447:416] : \register_bank.csr_registers.rdata [415:384];
  assign _0821_ = _0837_[0] ? \register_bank.csr_registers.rdata [575:544] : \register_bank.csr_registers.rdata [543:512];
  assign _0822_ = _0837_[0] ? \register_bank.csr_registers.rdata [703:672] : \register_bank.csr_registers.rdata [671:640];
  assign _0823_ = _0837_[0] ? \register_bank.csr_registers.rdata [831:800] : \register_bank.csr_registers.rdata [799:768];
  assign _0824_ = _0837_[0] ? \register_bank.csr_registers.rdata [959:928] : \register_bank.csr_registers.rdata [927:896];
  assign _0825_ = _0837_[2] ? _0841_ : _0840_;
  assign _0826_ = _0837_[2] ? _0845_ : _0844_;
  assign _0827_ = _0837_[0] ? \register_bank.csr_registers.rdata [127:96] : \register_bank.csr_registers.rdata [95:64];
  assign _0828_ = _0837_[0] ? \register_bank.csr_registers.rdata [255:224] : \register_bank.csr_registers.rdata [223:192];
  assign _0829_ = _0837_[0] ? \register_bank.csr_registers.rdata [383:352] : \register_bank.csr_registers.rdata [351:320];
  assign _0830_ = _0837_[0] ? \register_bank.csr_registers.rdata [511:480] : \register_bank.csr_registers.rdata [479:448];
  assign _0831_ = _0837_[0] ? \register_bank.csr_registers.rdata [639:608] : \register_bank.csr_registers.rdata [607:576];
  assign _0832_ = _0837_[0] ? \register_bank.csr_registers.rdata [767:736] : \register_bank.csr_registers.rdata [735:704];
  assign _0833_ = _0837_[0] ? \register_bank.csr_registers.rdata [895:864] : \register_bank.csr_registers.rdata [863:832];
  assign _0834_ = _0837_[0] ? \register_bank.csr_registers.rdata [1023:992] : \register_bank.csr_registers.rdata [991:960];
  assign _0835_ = _0837_[2] ? _0843_ : _0842_;
  assign _0836_ = _0837_[2] ? _0847_ : _0846_;
  assign _0840_ = _0837_[1] ? _0827_ : _0817_;
  assign _0841_ = _0837_[1] ? _0828_ : _0818_;
  assign _0842_ = _0837_[1] ? _0829_ : _0819_;
  assign _0843_ = _0837_[1] ? _0830_ : _0820_;
  assign _0844_ = _0837_[1] ? _0831_ : _0821_;
  assign _0845_ = _0837_[1] ? _0832_ : _0822_;
  assign _0846_ = _0837_[1] ? _0833_ : _0823_;
  assign _0847_ = _0837_[1] ? _0834_ : _0824_;
  assign _0848_ = _0837_[3] ? _0835_ : _0825_;
  assign _0849_ = _0837_[3] ? _0836_ : _0826_;
  assign { \interrcheckcausedetection.miecc [31:16], \register_bank.mieccregister.outreg [15:12], \interrcheckcausedetection.miecc [11], \register_bank.mieccregister.outreg [10:9], \interrcheckcausedetection.miecc [8:7], \register_bank.mieccregister.outreg [6:5], \interrcheckcausedetection.miecc [4:3], \register_bank.mieccregister.outreg [2:1], \interrcheckcausedetection.miecc [0] } = rst ? 32'd0 : { _0947_[31:16], 4'hx, _0947_[11], 2'hx, _0947_[8:7], 2'hx, _0947_[4:3], 2'hx, _0947_[0] };
  assign \interrcheckcausedetection.miefieldcc  = rst ? 1'h0 : _0949_;
  always @(posedge clk)
    if (rst) _0949_ <= 1'h0;
    else _0949_ <= _0950_;
  assign \interrcheckcausedetection.uiefieldcc  = rst ? 1'h0 : _0951_;
  always @(posedge clk)
    if (rst) _0951_ <= 1'h0;
    else _0951_ <= _0952_;
  assign \registerfile.rdata  = rst ? 1024'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : _0953_;
  assign _0954_ = _0994_[0] ? \registerfile.rdata [63:32] : \registerfile.rdata [31:0];
  assign _0955_ = _0994_[0] ? \registerfile.rdata [191:160] : \registerfile.rdata [159:128];
  assign _0956_ = _0994_[0] ? \registerfile.rdata [319:288] : \registerfile.rdata [287:256];
  assign _0957_ = _0994_[0] ? \registerfile.rdata [447:416] : \registerfile.rdata [415:384];
  assign _0958_ = _0994_[0] ? \registerfile.rdata [575:544] : \registerfile.rdata [543:512];
  assign _0959_ = _0994_[0] ? \registerfile.rdata [703:672] : \registerfile.rdata [671:640];
  assign _0960_ = _0994_[0] ? \registerfile.rdata [831:800] : \registerfile.rdata [799:768];
  assign _0961_ = _0994_[0] ? \registerfile.rdata [959:928] : \registerfile.rdata [927:896];
  assign _0962_ = _0994_[2] ? _1005_ : _1004_;
  assign _0963_ = _0994_[2] ? _1009_ : _1008_;
  assign _0964_ = _0996_[0] ? \registerfile.rdata [63:32] : \registerfile.rdata [31:0];
  assign _0965_ = _0996_[0] ? \registerfile.rdata [191:160] : \registerfile.rdata [159:128];
  assign _0966_ = _0996_[0] ? \registerfile.rdata [319:288] : \registerfile.rdata [287:256];
  assign _0967_ = _0996_[0] ? \registerfile.rdata [447:416] : \registerfile.rdata [415:384];
  assign _0968_ = _0996_[0] ? \registerfile.rdata [575:544] : \registerfile.rdata [543:512];
  assign _0969_ = _0996_[0] ? \registerfile.rdata [703:672] : \registerfile.rdata [671:640];
  assign _0970_ = _0996_[0] ? \registerfile.rdata [831:800] : \registerfile.rdata [799:768];
  assign _0971_ = _0996_[0] ? \registerfile.rdata [959:928] : \registerfile.rdata [927:896];
  assign _0972_ = _0996_[2] ? _1016_ : _1015_;
  assign _0973_ = _0996_[2] ? _1020_ : _1019_;
  assign _0974_ = _0994_[0] ? \registerfile.rdata [127:96] : \registerfile.rdata [95:64];
  assign _0975_ = _0994_[0] ? \registerfile.rdata [255:224] : \registerfile.rdata [223:192];
  assign _0976_ = _0994_[0] ? \registerfile.rdata [383:352] : \registerfile.rdata [351:320];
  assign _0977_ = _0994_[0] ? \registerfile.rdata [511:480] : \registerfile.rdata [479:448];
  assign _0978_ = _0994_[0] ? \registerfile.rdata [639:608] : \registerfile.rdata [607:576];
  assign _0979_ = _0994_[0] ? \registerfile.rdata [767:736] : \registerfile.rdata [735:704];
  assign _0980_ = _0994_[0] ? \registerfile.rdata [895:864] : \registerfile.rdata [863:832];
  assign _0981_ = _0994_[0] ? \registerfile.rdata [1023:992] : \registerfile.rdata [991:960];
  assign _0982_ = _0994_[2] ? _1007_ : _1006_;
  assign _0983_ = _0994_[2] ? _1011_ : _1010_;
  assign _0984_ = _0996_[0] ? \registerfile.rdata [127:96] : \registerfile.rdata [95:64];
  assign _0985_ = _0996_[0] ? \registerfile.rdata [255:224] : \registerfile.rdata [223:192];
  assign _0986_ = _0996_[0] ? \registerfile.rdata [383:352] : \registerfile.rdata [351:320];
  assign _0987_ = _0996_[0] ? \registerfile.rdata [511:480] : \registerfile.rdata [479:448];
  assign _0988_ = _0996_[0] ? \registerfile.rdata [639:608] : \registerfile.rdata [607:576];
  assign _0989_ = _0996_[0] ? \registerfile.rdata [767:736] : \registerfile.rdata [735:704];
  assign _0990_ = _0996_[0] ? \registerfile.rdata [895:864] : \registerfile.rdata [863:832];
  assign _0991_ = _0996_[0] ? \registerfile.rdata [1023:992] : \registerfile.rdata [991:960];
  assign _0992_ = _0996_[2] ? _1018_ : _1017_;
  assign _0993_ = _0996_[2] ? _1022_ : _1021_;
  assign _1004_ = _0994_[1] ? _0974_ : _0954_;
  assign _1005_ = _0994_[1] ? _0975_ : _0955_;
  assign _1006_ = _0994_[1] ? _0976_ : _0956_;
  assign _1007_ = _0994_[1] ? _0977_ : _0957_;
  assign _1008_ = _0994_[1] ? _0978_ : _0958_;
  assign _1009_ = _0994_[1] ? _0979_ : _0959_;
  assign _1010_ = _0994_[1] ? _0980_ : _0960_;
  assign _1011_ = _0994_[1] ? _0981_ : _0961_;
  assign _1012_ = _0994_[3] ? _0982_ : _0962_;
  assign _1013_ = _0994_[3] ? _0983_ : _0963_;
  assign _1015_ = _0996_[1] ? _0984_ : _0964_;
  assign _1016_ = _0996_[1] ? _0985_ : _0965_;
  assign _1017_ = _0996_[1] ? _0986_ : _0966_;
  assign _1018_ = _0996_[1] ? _0987_ : _0967_;
  assign _1019_ = _0996_[1] ? _0988_ : _0968_;
  assign _1020_ = _0996_[1] ? _0989_ : _0969_;
  assign _1021_ = _0996_[1] ? _0990_ : _0970_;
  assign _1022_ = _0996_[1] ? _0991_ : _0971_;
  assign _1023_ = _0996_[3] ? _0992_ : _0972_;
  assign _1024_ = _0996_[3] ? _0993_ : _0973_;
  assign \daru1.datapath.addrreg.inreg  = rst ? 32'd0 : _1187_;
  always @(posedge clk)
    if (rst) _1187_ <= 32'd0;
    else _1187_ <= _1188_;
  assign _0283_ = _0255_ ? _0266_ : 1'h0;
  assign _0284_ = _0255_ ? _0267_ : 1'h0;
  assign hazex_result = _0254_ ? d2e_instr_curr[11:7] : _0280_;
  assign hazex_result_en = _0254_ ? 1'h1 : _0281_;
  assign hazex_csr_result = _0254_ ? 12'h000 : _0282_;
  assign hazex_csr_result_en = _0254_ ? 1'h0 : _0283_;
  assign hazex_csr_mirror = _0254_ ? 1'h0 : _0284_;
  assign _0286_ = bypass_first_operand == hazex_result;
  assign _0287_ = _0286_ & _0285_;
  assign _0288_ = bypass_first_operand_en & _0287_;
  assign _0289_ = hazex_result_en & _0288_;
  assign _0290_ = _0156_ & _0289_;
  assign _0291_ = bypass_second_operand == hazex_result;
  assign _0292_ = bypass_second_operand_en & _0291_;
  assign _0293_ = hazex_result_en & _0292_;
  assign _0294_ = _0161_ & _0293_;
  assign _0295_ = ~ hazex_csr_mirror;
  assign _0296_ = bypass_csr_second_operand == hazex_csr_result;
  assign _0297_ = _0296_ & _0295_;
  assign _0298_ = bypass_csr_second_operand[7:0] == hazex_csr_result[7:0];
  assign _0299_ = _0298_ & hazex_csr_mirror;
  assign _0300_ = _0297_ | _0299_;
  assign _0301_ = bypass_csr_second_operand_en & _0300_;
  assign _0302_ = hazex_csr_result_en & _0301_;
  assign _0303_ = _0294_ | _0302_;
  assign _0304_ = _0303_ & _0285_;
  assign _0305_ = _0304_ ? 1'h1 : 1'h0;
  assign hazex_int = _0290_ ? 1'h1 : _0305_;
  assign _0083_ = ! inst_type;
  assign _0084_ = inst_type == 3'h1;
  assign _0085_ = gi2d_instr_curr[6:0] == 7'h73;
  assign _0086_ = | gi2d_instr_curr[14:12];
  assign _0087_ = _0086_ & _0085_;
  assign _0091_ = _0087_ ? gi2d_instr_curr[19:15] : _0089_;
  assign _0093_ = _0087_ ? 1'h1 : _0090_;
  assign _0092_ = _0087_ ? gi2d_instr_curr[31:20] : 12'h000;
  assign _0094_ = _0087_ ? 1'h1 : 1'h0;
  assign _0095_ = inst_type == 3'h2;
  assign _0088_ = gi2d_instr_curr[6:0] != 7'h73;
  assign _0089_ = _0088_ ? gi2d_instr_curr[19:15] : 5'h00;
  assign _0096_ = _0088_ ? gi2d_instr_curr[24:20] : 5'h00;
  assign _0090_ = _0088_ ? 1'h1 : 1'h0;
  assign _0097_ = inst_type == 3'h4;
  assign _0098_ = inst_type == 3'h3;
  assign _0099_ = inst_type == 3'h5;
  assign _0100_ = selpc ? 5'h00 : gi2d_instr_curr[19:15];
  assign _0101_ = selpc ? 1'h0 : 1'h1;
  assign _0102_ = _0099_ ? _0100_ : 5'h00;
  assign _0103_ = _0099_ ? _0101_ : 1'h0;
  assign _0104_ = _0098_ ? 5'h00 : _0102_;
  assign _0105_ = _0098_ ? 1'h0 : _0103_;
  assign _0106_ = _0097_ ? gi2d_instr_curr[19:15] : _0104_;
  assign _0107_ = _0097_ ? gi2d_instr_curr[24:20] : 5'h00;
  assign _0108_ = _0097_ ? 1'h1 : _0105_;
  assign _0109_ = _0097_ ? 1'h1 : 1'h0;
  assign _0110_ = _0095_ ? _0089_ : _0106_;
  assign _0111_ = _0095_ ? _0096_ : _0107_;
  assign _0112_ = _0095_ ? _0090_ : _0108_;
  assign _0113_ = _0095_ ? _0090_ : _0109_;
  assign _0114_ = _0084_ ? _0091_ : _0110_;
  assign _0115_ = _0084_ ? 5'h00 : _0111_;
  assign _0117_ = _0084_ ? _0093_ : _0112_;
  assign _0118_ = _0084_ ? 1'h0 : _0113_;
  assign _0116_ = _0084_ ? _0092_ : 12'h000;
  assign _0119_ = _0084_ ? _0094_ : 1'h0;
  assign bypass_first_operand = _0083_ ? gi2d_instr_curr[19:15] : _0114_;
  assign bypass_second_operand = _0083_ ? gi2d_instr_curr[24:20] : _0115_;
  assign bypass_first_operand_en = _0083_ ? 1'h1 : _0117_;
  assign bypass_second_operand_en = _0083_ ? 1'h1 : _0118_;
  assign bypass_csr_second_operand = _0083_ ? 12'h000 : _0116_;
  assign bypass_csr_second_operand_en = _0083_ ? 1'h0 : _0119_;
  assign _0306_ = ! e2m_inst_type_curr;
  assign _0307_ = e2m_inst_type_curr == 3'h1;
  assign _0308_ = e2m_instr_curr[6:0] == 7'h73;
  assign _0309_ = | e2m_instr_curr[14:12];
  assign _0310_ = _0309_ & _0308_;
  assign _0311_ = ! e2m_instr_curr[27:20];
  assign _0312_ = e2m_instr_curr[27:20] == 8'h04;
  assign _0313_ = _0311_ | _0312_;
  assign _0314_ = e2m_instr_curr[27:20] == 8'h44;
  assign _0315_ = _0313_ | _0314_;
  assign _0316_ = _0315_ ? 1'h1 : 1'h0;
  assign _0317_ = _0310_ ? e2m_instr_curr[31:20] : 12'h000;
  assign _0318_ = _0310_ ? 1'h1 : 1'h0;
  assign _0319_ = _0310_ ? _0316_ : 1'h0;
  assign _0320_ = e2m_inst_type_curr == 3'h2;
  assign _0321_ = e2m_inst_type_curr == 3'h4;
  assign _0322_ = e2m_inst_type_curr == 3'h3;
  assign _0323_ = e2m_inst_type_curr == 3'h5;
  assign _0324_ = _0323_ ? e2m_instr_curr[11:7] : 5'h00;
  assign _0325_ = _0323_ ? 1'h1 : 1'h0;
  assign _0326_ = _0322_ ? e2m_instr_curr[11:7] : _0324_;
  assign _0327_ = _0322_ ? 1'h1 : _0325_;
  assign _0328_ = _0321_ ? 5'h00 : _0326_;
  assign _0329_ = _0321_ ? 1'h0 : _0327_;
  assign _0330_ = _0320_ ? 5'h00 : _0328_;
  assign _0331_ = _0320_ ? 1'h0 : _0329_;
  assign _0332_ = _0307_ ? e2m_instr_curr[11:7] : _0330_;
  assign _0333_ = _0307_ ? 1'h1 : _0331_;
  assign _0334_ = _0307_ ? _0317_ : 12'h000;
  assign _0335_ = _0307_ ? _0318_ : 1'h0;
  assign _0336_ = _0307_ ? _0319_ : 1'h0;
  assign hazm_result = _0306_ ? e2m_instr_curr[11:7] : _0332_;
  assign hazm_result_en = _0306_ ? 1'h1 : _0333_;
  assign hazm_csr_result = _0306_ ? 12'h000 : _0334_;
  assign hazm_csr_result_en = _0306_ ? 1'h0 : _0335_;
  assign hazm_csr_mirror = _0306_ ? 1'h0 : _0336_;
  assign _0151_ = ! gi2d_instr_curr[19:15];
  assign hazm_zero_first_operand = _0151_ ? 1'h1 : 1'h0;
  assign _0152_ = ! gi2d_instr_curr[24:20];
  assign hazm_zero_second_operand = _0152_ ? 1'h1 : 1'h0;
  assign _0337_ = bypass_first_operand == hazm_result;
  assign _0338_ = _0337_ & _0285_;
  assign _0339_ = bypass_first_operand_en & _0338_;
  assign _0340_ = hazm_result_en & _0339_;
  assign _0156_ = ~ hazm_zero_first_operand;
  assign _0341_ = _0156_ & _0340_;
  assign _0285_ = ~ d2e_ex_flag_next;
  assign _0342_ = bypass_second_operand == hazm_result;
  assign _0343_ = bypass_second_operand_en & _0342_;
  assign _0344_ = hazm_result_en & _0343_;
  assign _0161_ = ~ hazm_zero_second_operand;
  assign _0345_ = _0161_ & _0344_;
  assign _0346_ = ~ hazm_csr_mirror;
  assign _0347_ = bypass_csr_second_operand == hazm_csr_result;
  assign _0348_ = _0347_ & _0346_;
  assign _0349_ = bypass_csr_second_operand[7:0] == hazm_csr_result[7:0];
  assign _0350_ = _0349_ & hazm_csr_mirror;
  assign _0351_ = _0348_ | _0350_;
  assign _0352_ = bypass_csr_second_operand_en & _0351_;
  assign _0353_ = hazm_csr_result_en & _0352_;
  assign _0354_ = _0345_ | _0353_;
  assign _0355_ = _0354_ & _0285_;
  assign _0356_ = _0355_ ? 1'h1 : 1'h0;
  assign hazm_int = _0341_ ? 1'h1 : _0356_;
  assign e2m_hazard_flag_next = hazex_int ? 1'h1 : 1'h0;
  assign _0357_ = hazm_int | e2m_hazard_flag_curr;
  assign m2wb_hazard_flag_next = _0357_ ? 1'h1 : 1'h0;
  assign _0358_ = gi2d_en_def ? gi2d_ex_flag_next : gi2d_ex_flag_curr;
  assign _0359_ = gi2d_en_def ? { \daru1.datapath.dataout [31:16], \daru1.datapath.reg0.outreg  } : gi2d_instr_curr;
  assign _0360_ = gi2d_en_def ? 1'h1 : gi2d_valid_curr;
  assign _0361_ = gi2d_en_def ? \daru1.datapath.addrreg.outreg  : gi2d_pc_curr;
  assign _0362_ = gi2d_en_def ? f2gi_pc_plus4_curr : gi2d_pc_plus4_curr;
  assign _0363_ = gi2d_en_def ? gi2d_ex_flag_next : gi2d_instr_misaligned_flag_curr;
  assign _0364_ = d2e_en_def ? d2e_ex_flag_next : d2e_ex_flag_curr;
  assign _0365_ = d2e_en_def ? d2e_alu_op1_next : \aau.ain ;
  assign _0366_ = d2e_en_def ? d2e_alu_op2_next : \aau.bin ;
  assign _0367_ = d2e_en_def ? d2e_op2_next : d2e_op2_curr;
  assign _0368_ = d2e_en_def ? d2e_op1_next : \comparator.ain ;
  assign _0369_ = d2e_en_def ? d2e_outcsr_next : d2e_outcsr_curr;
  assign _0370_ = d2e_en_def ? gi2d_instr_curr : d2e_instr_curr;
  assign _0371_ = d2e_en_def ? inst_type : d2e_inst_type_curr;
  assign _0372_ = d2e_en_def ? gi2d_pc_curr : d2e_pc_curr;
  assign _0373_ = d2e_en_def ? gi2d_pc_plus4_curr : d2e_pc_plus4_curr;
  assign _0374_ = d2e_en_def ? gi2d_valid_curr : d2e_valid_curr;
  assign _0375_ = d2e_en_def ? gi2d_instr_misaligned_flag_curr : d2e_instr_misaligned_flag_curr;
  assign _0376_ = d2e_en_def ? illegalinstrflag : d2e_illegal_instruction_flag_curr;
  assign _0377_ = d2e_en_def ? ecallflag : d2e_ecall_flag_curr;
  assign _0378_ = d2e_en_def ? { 4'hz, iscsrinstruction, cmp_selop2, cmp_selaluop2, selmem, selpc4, selalu, ret_from_epc, inst_type, forced_rb_read, selcsraddrfrominst, checkmisaligneddawu, writerb_inst, selcsr, nbytes, selaah, selaal, unsignedunsigned, signedunsigned, signedsigned, startdivideaau, startmultiplyaau, startdaru, startdawu, sellogic, muxcode, selauipc, pass, addsubbar, selshift, load, ldhalfsigned, ldbytesigned, selimm, selp2, selp1, selaau, selasu, selllu, selbsu, seljl, selpc, comparedsignedunsignedbar, setzeroorone, writeregfile } : d2e_ctrl_word_curr;
  assign _0379_ = d2e_en_def ? validaccesscsr_int : d2e_validaccesscsr_curr;
  assign _0380_ = e2m_en ? e2m_alu_res_next : \daru2.datapath.addrreg.inreg ;
  assign _0381_ = e2m_en ? \comparator.lt  : e2m_lt_curr;
  assign _0382_ = e2m_en ? \comparator.eq  : e2m_eq_curr;
  assign _0383_ = e2m_en ? \comparator.gt  : e2m_gt_curr;
  assign _0384_ = e2m_en ? d2e_op2_curr : e2m_op2_curr;
  assign _0385_ = e2m_en ? e2m_ex_flag_next : e2m_ex_flag_curr;
  assign _0386_ = e2m_en ? d2e_pc_plus4_curr : e2m_pc_plus4_curr;
  assign _0387_ = e2m_en ? d2e_instr_curr : e2m_instr_curr;
  assign _0388_ = e2m_en ? d2e_inst_type_curr : e2m_inst_type_curr;
  assign _0389_ = e2m_en ? e2m_hazard_flag_next : e2m_hazard_flag_curr;
  assign _0390_ = e2m_en ? d2e_valid_curr : e2m_valid_curr;
  assign _0391_ = e2m_en ? d2e_instr_misaligned_flag_curr : e2m_instr_misaligned_flag_curr;
  assign _0392_ = e2m_en ? d2e_outcsr_curr : e2m_outcsr_curr;
  assign _0393_ = e2m_en ? \comparator.ain  : e2m_op1_curr;
  assign _0394_ = e2m_en ? d2e_pc_curr : e2m_pc_curr;
  assign _0395_ = e2m_en ? d2e_illegal_instruction_flag_curr : e2m_illegal_instruction_flag_curr;
  assign _0396_ = e2m_en ? d2e_ecall_flag_curr : e2m_ecall_flag_curr;
  assign _0397_ = e2m_en ? d2e_ctrl_word_curr : e2m_ctrl_word_curr;
  assign _0398_ = e2m_en ? \aau.division.dividedbyzeroflag  : e2m_divided_by_zero_flag_curr;
  assign _0399_ = e2m_en ? d2e_validaccesscsr_curr : e2m_validaccesscsr_curr;
  assign _0400_ = m2wb_en ? e2m_ex_flag_curr : m2wb_ex_flag_curr;
  assign _0401_ = m2wb_en ? e2m_lt_curr : m2wb_lt_curr;
  assign _0402_ = m2wb_en ? e2m_instr_curr : m2wb_instr_curr;
  assign _0403_ = m2wb_en ? m2wb_mem_res_next : m2wb_mem_res_curr;
  assign _0404_ = m2wb_en ? \daru2.datapath.addrreg.inreg  : m2wb_alu_res_curr;
  assign _0405_ = m2wb_en ? e2m_pc_plus4_curr : m2wb_pc_plus4_curr;
  assign _0406_ = m2wb_en ? m2wb_hazard_flag_next : m2wb_hazard_flag_curr;
  assign _0407_ = m2wb_en ? e2m_op1_curr : \csrisl.p1 ;
  assign _0408_ = m2wb_en ? e2m_outcsr_curr : m2wb_outcsr_curr;
  assign _0409_ = m2wb_en ? e2m_ecall_flag_curr : m2wb_ecall_flag_curr;
  assign _0410_ = m2wb_en ? e2m_divided_by_zero_flag_curr : m2wb_divided_by_zero_flag_curr;
  assign _0411_ = m2wb_en ? e2m_illegal_instruction_flag_curr : m2wb_illegal_instruction_flag_curr;
  assign _0412_ = m2wb_en ? e2m_instr_misaligned_flag_curr : m2wb_instr_misaligned_flag_curr;
  assign _0413_ = m2wb_en ? e2m_valid_curr : m2wb_valid_curr;
  assign _0414_ = m2wb_en ? e2m_pc_curr : \interrcheckcausedetection.outpc ;
  assign _0415_ = m2wb_en ? e2m_inst_type_curr : m2wb_inst_type_curr;
  assign _0416_ = m2wb_en ? e2m_ctrl_word_curr : m2wb_ctrl_word_curr;
  assign _0417_ = m2wb_en ? e2m_validaccesscsr_curr : m2wb_validaccesscsr_curr;
  assign _0418_ = gi2d_ex_flag_next ? 1'h0 : daru1_en;
  assign _0419_ = gi2d_ex_flag_next ? 2'h1 : eh_state_curr;
  assign _0422_ = _0421_ ? 1'h0 : _0418_;
  assign _0424_ = _0421_ ? 2'h2 : _0419_;
  assign _0425_ = \aau.division.dividedbyzeroflag  ? 1'h0 : _0422_;
  assign _0428_ = \aau.division.dividedbyzeroflag  ? 2'h3 : _0424_;
  assign _0429_ = ! eh_state_curr;
  assign _0420_ = illegalinstrflag | ecallflag;
  assign _0421_ = _0420_ | ret_from_epc;
  assign _0423_ = _0421_ ? 1'h0 : gi2d_en;
  assign _0430_ = _0421_ ? 2'h2 : eh_state_curr;
  assign _0426_ = \aau.division.dividedbyzeroflag  ? 1'h0 : _0423_;
  assign _0431_ = \aau.division.dividedbyzeroflag  ? 2'h3 : _0430_;
  assign _0432_ = eh_state_curr == 2'h1;
  assign _0427_ = \aau.division.dividedbyzeroflag  ? 1'h0 : d2e_en;
  assign _0433_ = \aau.division.dividedbyzeroflag  ? 2'h3 : eh_state_curr;
  assign _0434_ = eh_state_curr == 2'h2;
  assign _0435_ = eh_state_curr == 2'h3;
  function [0:0] \1749 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \1749  = b[0:0];
      2'b1?:
        \1749  = b[1:1];
      default:
        \1749  = a;
    endcase
  endfunction
  assign \daru1.controller.startdaru  = \1749 (1'hx, { 1'h0, _0425_ }, { _0457_, _0429_ });
  function [0:0] \1753 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \1753  = b[0:0];
      2'b1?:
        \1753  = b[1:1];
      default:
        \1753  = a;
    endcase
  endfunction
  assign gi2d_en_def = \1753 (1'hx, { 1'h0, _0426_ }, { _0456_, _0458_ });
  function [0:0] \1756 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \1756  = b[0:0];
      2'b1?:
        \1756  = b[1:1];
      default:
        \1756  = a;
    endcase
  endfunction
  assign d2e_en_def = \1756 (1'hx, { 1'h0, _0427_ }, { _0435_, _0459_ });
  function [1:0] \1758 ;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \1758  = b[1:0];
      4'b??1?:
        \1758  = b[3:2];
      4'b?1??:
        \1758  = b[5:4];
      4'b1???:
        \1758  = b[7:6];
      default:
        \1758  = a;
    endcase
  endfunction
  assign eh_state_next = \1758 (2'hx, { eh_state_curr, _0433_, _0431_, _0428_ }, { _0435_, _0434_, _0432_, _0429_ });
  assign _0436_ = ~ mirror_int;
  assign _0437_ = ~ writeregbank;
  assign _0438_ = _0436_ | _0437_;
  assign _0439_ = m2wb_valid_curr & _0438_;
  assign _0440_ = ~ m2wb_valid_curr;
  assign _0441_ = _0439_ | _0440_;
  assign instructiondone_int = _0441_ ? 1'h1 : instructiondonecsr;
  assign _0442_ = daru1_en ? \i4pc.add [31:0] : f2gi_pc_plus4_curr;
  always @(posedge clk)
    if (rst) _0062_ <= 32'd0;
    else _0062_ <= _0442_;
  assign _0065_ = \daru1.controller.startdaru  & _0064_;
  assign _0066_ = _0065_ | gi2d_rst;
  assign ldpc = _0066_ | selmepc_csr;
  assign inpc = branch_taken_int ? \daru2.datapath.addrreg.inreg  : _0067_;
  assign _0067_ = selmepc_csr ? \csrisl.outcsr  : _0068_;
  assign _0068_ = selinterruptaddressdirect ? d2e_outcsr_next : _0069_;
  assign _0069_ = selinterruptaddressvectored ? { 2'h0, \interruptstartaddressgenerator.interruptstartaddressvectored [29:0] } : \i4pc.add [31:0];
  assign _0071_ = ~ \daru1.controller.enableaddr ;
  assign _0072_ = ~ completeddaru1_def_int;
  assign _0073_ = _0071_ & _0072_;
  assign daru1_en = _0070_ | _0073_;
  assign _0064_ = ~ gi2d_rst_def;
  assign _0070_ = _0064_ & gi2d_en_def;
  assign _0074_ = _0070_ | gi2d_rst;
  assign _0075_ = completeddaru1 ? 1'h1 : completeddaru1_stored;
  assign completeddaru1_def_int = completeddaru1 | completeddaru1_stored;
  assign _0076_ = ~ gi2d_en_def;
  assign _0077_ = _0076_ & d2e_en_def;
  assign gi2d_rst_def = gi2d_rst | _0077_;
  assign _0078_ = ~ m2wb_ex_flag_curr;
  assign \registerfile.writeregfile  = m2wb_ctrl_word_curr[0] & _0078_;
  assign \registerfile.setone  = m2wb_lt_curr & m2wb_ctrl_word_curr[1];
  assign _0079_ = ~ m2wb_lt_curr;
  assign \registerfile.setzero  = _0079_ & m2wb_ctrl_word_curr[1];
  assign _0080_ = curprv >= addressregbank[9:8];
  assign _0081_ = \csr_address_ctrl.validaddresscsr  & _0080_;
  assign validaccesscsr_int = _0081_ ? 1'h1 : 1'h0;
  assign _0082_ = \mux8.w [11:10] == 2'h3;
  assign readonlycsr = _0082_ ? 1'h1 : 1'h0;
  assign addressregbank = forced_rb_read ? \mux8.w  : gi2d_instr_curr[31:20];
  assign _0120_ = ! m2wb_inst_type_curr;
  assign _0121_ = m2wb_inst_type_curr == 3'h1;
  assign _0122_ = m2wb_instr_curr[6:0] == 7'h73;
  assign _0123_ = | m2wb_instr_curr[14:12];
  assign _0124_ = _0123_ & _0122_;
  assign _0125_ = ! m2wb_instr_curr[27:20];
  assign _0126_ = m2wb_instr_curr[27:20] == 8'h04;
  assign _0127_ = _0125_ | _0126_;
  assign _0128_ = m2wb_instr_curr[27:20] == 8'h44;
  assign _0129_ = _0127_ | _0128_;
  assign _0130_ = _0129_ ? 1'h1 : 1'h0;
  assign _0131_ = _0124_ ? m2wb_instr_curr[31:20] : 12'h000;
  assign _0132_ = _0124_ ? 1'h1 : 1'h0;
  assign _0133_ = _0124_ ? _0130_ : 1'h0;
  assign _0134_ = m2wb_inst_type_curr == 3'h2;
  assign _0135_ = m2wb_inst_type_curr == 3'h4;
  assign _0136_ = m2wb_inst_type_curr == 3'h3;
  assign _0137_ = m2wb_inst_type_curr == 3'h5;
  assign _0138_ = _0137_ ? m2wb_instr_curr[11:7] : 5'h00;
  assign _0139_ = _0137_ ? 1'h1 : 1'h0;
  assign _0140_ = _0136_ ? m2wb_instr_curr[11:7] : _0138_;
  assign _0141_ = _0136_ ? 1'h1 : _0139_;
  assign _0142_ = _0135_ ? 5'h00 : _0140_;
  assign _0143_ = _0135_ ? 1'h0 : _0141_;
  assign _0144_ = _0134_ ? 5'h00 : _0142_;
  assign _0145_ = _0134_ ? 1'h0 : _0143_;
  assign _0146_ = _0121_ ? m2wb_instr_curr[11:7] : _0144_;
  assign _0147_ = _0121_ ? _0131_ : 12'h000;
  assign _0148_ = _0121_ ? 1'h1 : _0145_;
  assign _0149_ = _0121_ ? _0132_ : 1'h0;
  assign _0150_ = _0121_ ? _0133_ : 1'h0;
  assign bypass_result = _0120_ ? m2wb_instr_curr[11:7] : _0146_;
  assign bypass_csr_result = _0120_ ? 12'h000 : _0147_;
  assign bypass_result_en = _0120_ ? 1'h1 : _0148_;
  assign bypass_csr_result_en = _0120_ ? 1'h0 : _0149_;
  assign bypass_csr_mirror = _0120_ ? 1'h0 : _0150_;
  assign _0153_ = bypass_first_operand == bypass_result;
  assign _0154_ = bypass_first_operand_en & _0153_;
  assign _0155_ = bypass_result_en & _0154_;
  assign _0157_ = _0156_ & _0155_;
  assign bypass_first = _0157_ ? 1'h1 : 1'h0;
  assign _0158_ = bypass_second_operand == bypass_result;
  assign _0159_ = bypass_second_operand_en & _0158_;
  assign _0160_ = bypass_result_en & _0159_;
  assign _0162_ = _0161_ & _0160_;
  assign bypass_second = _0162_ ? 1'h1 : 1'h0;
  assign _0163_ = ~ bypass_csr_mirror;
  assign _0164_ = bypass_csr_second_operand == bypass_csr_result;
  assign _0165_ = _0164_ & _0163_;
  assign _0166_ = bypass_csr_second_operand[7:0] == bypass_csr_result[7:0];
  assign _0167_ = _0166_ & bypass_csr_mirror;
  assign _0168_ = bypass_csr_second_operand[9:8] == 2'h3;
  assign _0169_ = ! bypass_csr_result[9:8];
  assign _0170_ = _0169_ & _0168_;
  assign _0171_ = ~ _0170_;
  assign _0172_ = _0171_ & _0167_;
  assign _0173_ = _0165_ | _0172_;
  assign _0174_ = bypass_csr_second_operand_en & _0173_;
  assign _0175_ = bypass_csr_result_en & _0174_;
  assign bypass_second_csr = _0175_ ? 1'h1 : 1'h0;
  assign d2e_op1_next = bypass_first ? \registerfile.writedata  : p1;
  assign d2e_op2_next = bypass_second ? \registerfile.writedata  : p2;
  assign d2e_outcsr_next = bypass_second_csr ? \csrisl.incsr  : d2e_outcsr_next_pre_bypass;
  assign _0176_ = gi2d_ex_flag_curr | ecallflag;
  assign d2e_ex_flag_next = _0176_ | illegalinstrflag;
  assign _0177_ = ~ d2e_en_def;
  assign _0178_ = _0177_ & e2m_en;
  assign d2e_rst_def = d2e_rst | _0178_;
  assign \aau.multiplication.controller.startbooth  = d2e_ctrl_word_curr[36] & _0181_;
  assign _0179_ = ~ \aau.completeaau ;
  assign _0180_ = ~ completedaau_stored;
  assign _0181_ = _0179_ & _0180_;
  assign \aau.division.startsdiv  = d2e_ctrl_word_curr[37] & _0181_;
  assign _0182_ = ~ \aau.division.dividedbyzeroflag ;
  assign _0183_ = d2e_ctrl_word_curr[37] & _0182_;
  assign is_aau_used = d2e_ctrl_word_curr[36] | _0183_;
  assign _0186_ = d2e_rst | _0185_;
  assign _0187_ = \aau.completeaau  ? 1'h1 : completedaau_stored;
  assign aauresult = d2e_ctrl_word_curr[42] ? \aau.resaau1  : _0188_;
  assign _0188_ = d2e_ctrl_word_curr[41] ? \aau.resaau2  : 32'd0;
  assign e2m_alu_res_next = d2e_ctrl_word_curr[5] ? \bsu.shout  : _0189_;
  assign _0189_ = d2e_ctrl_word_curr[6] ? \llu.result  : _0190_;
  assign _0190_ = d2e_ctrl_word_curr[7] ? \addsub.outres  : _0191_;
  assign _0191_ = d2e_ctrl_word_curr[8] ? aauresult : _0192_;
  assign _0192_ = d2e_ctrl_word_curr[45] ? d2e_outcsr_curr : 32'd0;
  assign e2m_ex_flag_next = d2e_ex_flag_curr | \aau.division.dividedbyzeroflag ;
  assign _0193_ = ~ e2m_en;
  assign _0194_ = _0193_ & m2wb_en;
  assign e2m_rst_def = e2m_rst | _0194_;
  assign _0195_ = e2m_instr_curr[6:0] == 7'h63;
  assign _0197_ = _0196_ & e2m_instr_curr[14];
  assign _0198_ = e2m_lt_curr ? 1'h1 : 1'h0;
  assign _0199_ = e2m_instr_curr[12] & e2m_instr_curr[14];
  assign _0200_ = e2m_gt_curr | e2m_eq_curr;
  assign _0201_ = _0200_ ? 1'h1 : 1'h0;
  assign _0196_ = ~ e2m_instr_curr[12];
  assign _0203_ = _0196_ & _0202_;
  assign _0204_ = e2m_eq_curr ? 1'h1 : 1'h0;
  assign _0202_ = ~ e2m_instr_curr[14];
  assign _0205_ = e2m_instr_curr[12] & _0202_;
  assign _0206_ = e2m_eq_curr ? 1'h0 : 1'h1;
  assign _0207_ = _0205_ ? _0206_ : 1'h0;
  assign _0208_ = _0203_ ? _0204_ : _0207_;
  assign _0209_ = _0199_ ? _0201_ : _0208_;
  assign _0210_ = _0197_ ? _0198_ : _0209_;
  assign _0211_ = e2m_instr_curr[6:0] == 7'h6f;
  assign _0212_ = e2m_instr_curr[6:0] == 7'h67;
  assign _0213_ = _0212_ ? 1'h1 : 1'h0;
  assign _0214_ = _0211_ ? 1'h1 : _0213_;
  assign branch_taken_int = _0195_ ? _0210_ : _0214_;
  assign _0216_ = e2m_ctrl_word_curr[34] & _0215_;
  assign _0219_ = ~ \dawu.controller.enableaddr ;
  assign _0220_ = ~ completeddawu_stored;
  assign _0221_ = _0219_ & _0220_;
  assign _0222_ = _0218_ | _0221_;
  assign \dawu.controller.startdawu  = _0216_ & _0222_;
  assign _0224_ = completeddawu ? 1'h1 : 1'h0;
  assign _0225_ = _0223_ ? 1'h0 : _0224_;
  assign completeddawu_stored = rst ? 1'h0 : _0225_;
  assign _0226_ = completeddawu | completeddawu_stored;
  assign _0227_ = ~ e2m_ctrl_word_curr[34];
  assign completeddawu_def = _0226_ | _0227_;
  assign _0215_ = ~ e2m_ex_flag_curr;
  assign _0228_ = e2m_ctrl_word_curr[35] & _0215_;
  assign _0217_ = ~ m2wb_rst_def;
  assign _0218_ = m2wb_en & _0217_;
  assign _0229_ = ~ \daru2.controller.enableaddr ;
  assign _0230_ = ~ completeddaru2_stored;
  assign _0231_ = _0229_ & _0230_;
  assign _0232_ = _0218_ | _0231_;
  assign \daru2.controller.startdaru  = _0228_ & _0232_;
  assign _0184_ = ~ e2m_rst_def;
  assign _0185_ = _0184_ & e2m_en;
  assign _0223_ = e2m_rst | _0185_;
  assign _0233_ = completeddaru2 ? 1'h1 : 1'h0;
  assign _0234_ = _0223_ ? 1'h0 : _0233_;
  assign completeddaru2_stored = rst ? 1'h0 : _0234_;
  assign _0235_ = completeddaru2 | completeddaru2_stored;
  assign _0236_ = ~ e2m_ctrl_word_curr[35];
  assign completeddaru2_def = _0235_ | _0236_;
  assign _0237_ = ~ m2wb_ctrl_word_curr[53];
  assign _0238_ = ~ m2wb_en;
  assign _0239_ = _0237_ & _0238_;
  assign _0240_ = _0239_ & instructiondone_int;
  assign _0242_ = _0240_ & _0241_;
  assign _0243_ = ~ interruptraise_int;
  assign _0244_ = _0242_ & _0243_;
  assign m2wb_rst_def = m2wb_rst | _0244_;
  assign memaddr2 = \daru2.controller.enableaddr  ? \daru2.datapath.addrout  : \dawu.datapath.addrout ;
  assign bytespermemaccess = \daru2.controller.enableaddr  ? bytespermemaccessdaru : bytespermemaccessdawu;
  assign hazard_solved = m2wb_hazard_flag_curr & instructiondone_int;
  assign \registerfile.writedata  = m2wb_ctrl_word_curr[54] ? m2wb_alu_res_curr : _0245_;
  assign _0245_ = m2wb_ctrl_word_curr[55] ? m2wb_pc_plus4_curr : _0246_;
  assign _0246_ = m2wb_ctrl_word_curr[56] ? m2wb_mem_res_curr : _0247_;
  assign _0247_ = m2wb_ctrl_word_curr[1] ? { 31'h00000000, \registerfile.setone  } : 32'd0;
  assign \mux8.a  = m2wb_ctrl_word_curr[48] ? m2wb_instr_curr[31:20] : _0248_;
  assign _0248_ = selromaddress ? { 5'h06, \csraddressingdecoder.outaddr [6], 3'h0, \csraddressingdecoder.outaddr [2:0] } : _0249_;
  assign _0249_ = selmedeleg_csr ? 12'h302 : _0250_;
  assign _0250_ = selmideleg_csr ? 12'h303 : 12'h000;
  assign _0251_ = e2m_ctrl_word_curr[34] & interruptraise_int;
  assign _0241_ = ~ exceptionraise_int;
  assign pc_from_wb = _0251_ & _0241_;
  assign csr_pc = pc_from_wb ? e2m_pc_plus4_curr : \interrcheckcausedetection.outpc ;
  assign \csrisl.outcsr  = csr_from_wb ? outcsr_reg : m2wb_outcsr_curr;
  assign _0252_ = \interrcheckcausedetection.interraisetemp  & instructiondone_int;
  assign interruptraise_int = _0252_ & m2wb_valid_curr;
  assign _0253_ = exceptionraisetemp & instructiondone_int;
  assign exceptionraise_int = _0253_ & m2wb_valid_curr;
  assign _0254_ = ! d2e_inst_type_curr;
  assign _0255_ = d2e_inst_type_curr == 3'h1;
  assign _0256_ = d2e_instr_curr[6:0] == 7'h73;
  assign _0257_ = | d2e_instr_curr[14:12];
  assign _0258_ = _0257_ & _0256_;
  assign _0259_ = ! d2e_instr_curr[27:20];
  assign _0260_ = d2e_instr_curr[27:20] == 8'h04;
  assign _0261_ = _0259_ | _0260_;
  assign _0262_ = d2e_instr_curr[27:20] == 8'h44;
  assign _0263_ = _0261_ | _0262_;
  assign _0264_ = _0263_ ? 1'h1 : 1'h0;
  assign _0265_ = _0258_ ? d2e_instr_curr[31:20] : 12'h000;
  assign _0266_ = _0258_ ? 1'h1 : 1'h0;
  assign _0267_ = _0258_ ? _0264_ : 1'h0;
  assign _0268_ = d2e_inst_type_curr == 3'h2;
  assign _0269_ = d2e_inst_type_curr == 3'h4;
  assign _0270_ = d2e_inst_type_curr == 3'h3;
  assign _0271_ = d2e_inst_type_curr == 3'h5;
  assign _0272_ = _0271_ ? d2e_instr_curr[11:7] : 5'h00;
  assign _0273_ = _0271_ ? 1'h1 : 1'h0;
  assign _0274_ = _0270_ ? d2e_instr_curr[11:7] : _0272_;
  assign _0275_ = _0270_ ? 1'h1 : _0273_;
  assign _0276_ = _0269_ ? 5'h00 : _0274_;
  assign _0277_ = _0269_ ? 1'h0 : _0275_;
  assign _0278_ = _0268_ ? 5'h00 : _0276_;
  assign _0279_ = _0268_ ? 1'h0 : _0277_;
  assign _0280_ = _0255_ ? d2e_instr_curr[11:7] : _0278_;
  assign _0281_ = _0255_ ? 1'h1 : _0279_;
  assign _0282_ = _0255_ ? _0265_ : 12'h000;
  assign \aau.completeaau  = \aau.donemult  | (* hdlname = "aau 4841" *) \aau.division.unsigneddiv.controllerdiv.donediv ;
  assign \aau.in1mult  = d2e_ctrl_word_curr[40] ? (* hdlname = "aau 4844" *) { 1'h0, \aau.ain  } : _0463_;
  assign _0462_ = d2e_ctrl_word_curr[38] | (* hdlname = "aau 4847" *) d2e_ctrl_word_curr[39];
  assign _0463_ = _0462_ ? (* hdlname = "aau 4848" *) { \aau.ain [31], \aau.ain  } : 33'h000000000;
  assign _0464_ = d2e_ctrl_word_curr[40] | (* hdlname = "aau 4852" *) d2e_ctrl_word_curr[39];
  assign \aau.in2mult  = _0464_ ? (* hdlname = "aau 4853" *) { 1'h0, \aau.bin  } : _0465_;
  assign _0465_ = d2e_ctrl_word_curr[38] ? (* hdlname = "aau 4856" *) { \aau.bin [31], \aau.bin  } : 33'h000000000;
  assign \aau.division.signedunsignedbar  = d2e_ctrl_word_curr[38] ? (* hdlname = "aau 4863" *) 1'h1 : 1'h0;
  assign \aau.resaau1  = \aau.donemult  ? (* hdlname = "aau 4871" *) { \aau.multiplication.datapath.addsub.add.a [30:0], \aau.multiplication.datapath.mrreg.6594.outreg_t [33] } : _0466_;
  assign _0466_ = \aau.division.unsigneddiv.controllerdiv.donediv  ? (* hdlname = "aau 4872" *) \aau.division.tclq.aout  : 32'd0;
  assign \aau.resaau2  = \aau.donemult  ? (* hdlname = "aau 4874" *) \aau.multiplication.datapath.mrreg.6594.outreg_t [32:1] : _0467_;
  assign _0467_ = \aau.division.unsigneddiv.controllerdiv.donediv  ? (* hdlname = "aau 4875" *) \aau.division.tclrem.aout  : 32'd0;
  assign _0468_ = ! (* hdlname = "aau division 5942" *) \aau.bin ;
  assign \aau.division.divisorzero  = _0468_ ? (* hdlname = "aau division 5943" *) 1'h1 : 1'h0;
  assign \aau.division.dividedbyzeroflag  = \aau.division.startsdiv  & (* hdlname = "aau division 5945" *) \aau.division.divisorzero ;
  assign _0469_ = ~ (* hdlname = "aau division 5946" *) \aau.division.divisorzero ;
  assign \aau.division.safestart  = _0469_ & (* hdlname = "aau division 5947" *) \aau.division.startsdiv ;
  assign \aau.division.endr  = \aau.bin [31] & (* hdlname = "aau division 5951" *) \aau.division.signedunsignedbar ;
  assign _0470_ = \aau.ain [31] ^ (* hdlname = "aau division 5954" *) \aau.bin [31];
  assign \aau.division.enq  = _0470_ & (* hdlname = "aau division 5955" *) \aau.division.signedunsignedbar ;
  assign \aau.division.endd  = \aau.ain [31] & (* hdlname = "aau division 5957" *) \aau.division.signedunsignedbar ;
  assign _0471_ = ~ (* hdlname = "aau division tcldividend 6514" *) \aau.ain ;
  assign \aau.division.tcldividend.ainp  = \aau.division.endd  ? (* hdlname = "aau division tcldividend 6515" *) _0471_ : \aau.ain ;
  assign _0472_ = \aau.division.tcldividend.ainp  + (* hdlname = "aau division tcldividend 6517" *) 32'd1;
  assign \aau.division.tcldividend.aout  = \aau.division.endd  ? (* hdlname = "aau division tcldividend 6518" *) _0472_ : \aau.division.tcldividend.ainp ;
  assign \aau.division.tcldivisor.ainp  = \aau.division.endr  ? (* hdlname = "aau division tcldivisor 6515" *) _0473_ : \aau.bin ;
  assign _0474_ = \aau.division.tcldivisor.ainp  + (* hdlname = "aau division tcldivisor 6517" *) 32'd1;
  assign \aau.division.tcldivisor.aout  = \aau.division.endr  ? (* hdlname = "aau division tcldivisor 6518" *) _0474_ : \aau.division.tcldivisor.ainp ;
  assign _0475_ = ~ (* hdlname = "aau division tclq 6514" *) \aau.division.tclq.ain ;
  assign \aau.division.tclq.ainp  = \aau.division.enq  ? (* hdlname = "aau division tclq 6515" *) _0475_ : \aau.division.tclq.ain ;
  assign _0476_ = \aau.division.tclq.ainp  + (* hdlname = "aau division tclq 6517" *) 32'd1;
  assign \aau.division.tclq.aout  = \aau.division.enq  ? (* hdlname = "aau division tclq 6518" *) _0476_ : \aau.division.tclq.ainp ;
  assign _0477_ = ~ (* hdlname = "aau division tclrem 6514" *) \aau.division.unsigneddiv.datapathdiv.rprev [31:0];
  assign \aau.division.tclrem.ainp  = \aau.division.endd  ? (* hdlname = "aau division tclrem 6515" *) _0477_ : \aau.division.unsigneddiv.datapathdiv.rprev [31:0];
  assign _0478_ = \aau.division.tclrem.ainp  + (* hdlname = "aau division tclrem 6517" *) 32'd1;
  assign \aau.division.tclrem.aout  = \aau.division.endd  ? (* hdlname = "aau division tclrem 6518" *) _0478_ : \aau.division.tclrem.ainp ;
  assign _0480_ = \aau.division.safestart  ? (* hdlname = "aau division unsigneddiv controllerdiv 6698" *) 2'h1 : 2'h0;
  assign _0482_ = \aau.division.unsigneddiv.controllerdiv.cocnt  ? (* hdlname = "aau division unsigneddiv controllerdiv 6703" *) 2'h0 : 2'h2;
  function [1:0] \aau.division.unsigneddiv.controllerdiv.6711 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* hdlname = "aau division unsigneddiv controllerdiv 6711" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \aau.division.unsigneddiv.controllerdiv.6711  = b[1:0];
      3'b?1?:
        \aau.division.unsigneddiv.controllerdiv.6711  = b[3:2];
      3'b1??:
        \aau.division.unsigneddiv.controllerdiv.6711  = b[5:4];
      default:
        \aau.division.unsigneddiv.controllerdiv.6711  = a;
    endcase
  endfunction
  assign \aau.division.unsigneddiv.controllerdiv.nstate  = \aau.division.unsigneddiv.controllerdiv.6711 (2'hx, { 2'h1, _0482_, _0480_ }, { _0484_, _0483_, _0481_ });
  assign _0481_ = ! (* hdlname = "aau division unsigneddiv controllerdiv 6717" *) \aau.division.unsigneddiv.controllerdiv.pstate ;
  assign _0485_ = \aau.division.unsigneddiv.controllerdiv.cocnt  ? (* hdlname = "aau division unsigneddiv controllerdiv 6720" *) 1'h1 : 1'h0;
  assign _0483_ = \aau.division.unsigneddiv.controllerdiv.pstate  == (* hdlname = "aau division unsigneddiv controllerdiv 6722" *) 2'h1;
  assign _0484_ = \aau.division.unsigneddiv.controllerdiv.pstate  == (* hdlname = "aau division unsigneddiv controllerdiv 6724" *) 2'h2;
  assign \aau.division.unsigneddiv.controllerdiv.donediv  = _0483_ ? (* hdlname = "aau division unsigneddiv controllerdiv 6729" *) _0485_ : 1'h0;
  assign \aau.division.unsigneddiv.controllerdiv.shlregq  = _0483_ ? (* hdlname = "aau division unsigneddiv controllerdiv 6769" *) 1'h1 : 1'h0;
  assign \aau.division.unsigneddiv.controllerdiv.ldregq  = _0486_ ? (* hdlname = "aau division unsigneddiv controllerdiv 6775" *) 1'h1 : 1'h0;
  assign \aau.division.unsigneddiv.controllerdiv.counter.inccnt  = _0484_ ? (* hdlname = "aau division unsigneddiv controllerdiv 6799" *) 1'h1 : 1'h0;
  assign \aau.division.unsigneddiv.controllerdiv.counter.initcnt  = _0481_ ? (* hdlname = "aau division unsigneddiv controllerdiv 6805" *) 1'h1 : 1'h0;
  assign _0488_ = ~ (* hdlname = "aau division unsigneddiv controllerdiv counter 6638" *) \aau.division.unsigneddiv.controllerdiv.cocnt ;
  assign _0489_ = _0488_ & (* hdlname = "aau division unsigneddiv controllerdiv counter 6639" *) \aau.division.unsigneddiv.controllerdiv.counter.inccnt ;
  assign _0490_ = \aau.division.unsigneddiv.controllerdiv.counter.temp  + (* hdlname = "aau division unsigneddiv controllerdiv counter 6641" *) 6'h01;
  assign _0491_ = _0489_ ? (* hdlname = "aau division unsigneddiv controllerdiv counter 6642" *) _0490_ : \aau.division.unsigneddiv.controllerdiv.counter.temp ;
  assign _0492_ = \aau.division.unsigneddiv.controllerdiv.counter.initcnt  ? (* hdlname = "aau division unsigneddiv controllerdiv counter 6643" *) 6'h1e : _0491_;
  assign _0493_ = \aau.division.unsigneddiv.controllerdiv.counter.temp  == (* hdlname = "aau division unsigneddiv controllerdiv counter 6652" *) 6'h3f;
  assign \aau.division.unsigneddiv.controllerdiv.cocnt  = _0493_ ? (* hdlname = "aau division unsigneddiv controllerdiv counter 6653" *) 1'h1 : 1'h0;
  assign { \aau.division.unsigneddiv.datapathdiv.sub [32], \aau.division.unsigneddiv.datapathdiv.mux34b.a [31:0] } = \aau.division.unsigneddiv.datapathdiv.rprev  - (* hdlname = "aau division unsigneddiv datapathdiv 6667" *) \aau.division.unsigneddiv.datapathdiv.m ;
  assign \aau.division.unsigneddiv.datapathdiv.smux  = ~ (* hdlname = "aau division unsigneddiv datapathdiv 6672" *) \aau.division.unsigneddiv.datapathdiv.sub [32];
  assign _0494_ = \aau.division.unsigneddiv.controllerdiv.counter.inccnt  ? (* hdlname = "aau division unsigneddiv datapathdiv mux33b 4834" *) { \aau.division.tclq.ain [31:1], \aau.division.unsigneddiv.datapathdiv.smux  } : 32'd0;
  assign \aau.division.unsigneddiv.datapathdiv.mux33b.w  = \aau.division.unsigneddiv.controllerdiv.counter.initcnt  ? (* hdlname = "aau division unsigneddiv datapathdiv mux33b 4835" *) \aau.division.tcldividend.aout  : _0494_;
  assign \aau.division.unsigneddiv.datapathdiv.mux34b.w  = \aau.division.unsigneddiv.datapathdiv.sub [32] ? (* hdlname = "aau division unsigneddiv datapathdiv mux34b 6902" *) \aau.division.unsigneddiv.datapathdiv.rprev  : { 1'h0, \aau.division.unsigneddiv.datapathdiv.mux34b.a [31:0] };
  assign _0496_ = \aau.division.unsigneddiv.controllerdiv.counter.initcnt  ? (* hdlname = "aau division unsigneddiv datapathdiv regm 6584" *) { 1'h0, \aau.division.tcldivisor.aout  } : \aau.division.unsigneddiv.datapathdiv.m ;
  assign _0499_ = \aau.division.unsigneddiv.controllerdiv.shlregq  ? (* hdlname = "aau division unsigneddiv datapathdiv shregq 6879" *) { \aau.division.tclq.ain [30:0], 1'h0 } : \aau.division.tclq.ain ;
  assign _0500_ = \aau.division.unsigneddiv.controllerdiv.shlregq  ? (* hdlname = "aau division unsigneddiv datapathdiv shregq 6880" *) \aau.division.tclq.ain [31] : \aau.division.unsigneddiv.datapathdiv.shregq.6866.seroutp ;
  assign _0501_ = \aau.division.unsigneddiv.controllerdiv.ldregq  ? (* hdlname = "aau division unsigneddiv datapathdiv shregq 6881" *) \aau.division.unsigneddiv.datapathdiv.mux33b.w  : _0499_;
  assign _0502_ = \aau.division.unsigneddiv.controllerdiv.ldregq  ? (* hdlname = "aau division unsigneddiv datapathdiv shregq 6882" *) \aau.division.unsigneddiv.datapathdiv.shregq.6866.seroutp  : _0500_;
  (* hdlname = "aau division unsigneddiv datapathdiv shregq 6896" *)
  always @(posedge clk)
    if (rst) _0497_ <= 1'h0;
    else _0497_ <= _0502_;
  assign _0504_ = \aau.division.unsigneddiv.controllerdiv.shlregq  ? (* hdlname = "aau division unsigneddiv datapathdiv shregr 6846" *) { \aau.division.unsigneddiv.datapathdiv.rprev [31:0], \aau.division.unsigneddiv.datapathdiv.shregq.6866.seroutp  } : \aau.division.unsigneddiv.datapathdiv.rprev ;
  assign _0505_ = \aau.division.unsigneddiv.controllerdiv.counter.inccnt  ? (* hdlname = "aau division unsigneddiv datapathdiv shregr 6848" *) \aau.division.unsigneddiv.datapathdiv.mux34b.w  : _0504_;
  assign _0507_ = \aau.multiplication.controller.startbooth  ? (* hdlname = "aau multiplication controller 6407" *) 2'h2 : 2'h1;
  assign _0508_ = \aau.multiplication.controller.pstate  == (* hdlname = "aau multiplication controller 6409" *) 2'h1;
  assign _0510_ = \aau.multiplication.controller.co  ? (* hdlname = "aau multiplication controller 6415" *) 2'h0 : 2'h3;
  function [1:0] \aau.multiplication.controller.6424 ;
    input [1:0] a;
    input [7:0] b;
    input [3:0] s;
    (* hdlname = "aau multiplication controller 6424" *)
    (* parallel_case *)
    casez (s)
      4'b???1:
        \aau.multiplication.controller.6424  = b[1:0];
      4'b??1?:
        \aau.multiplication.controller.6424  = b[3:2];
      4'b?1??:
        \aau.multiplication.controller.6424  = b[5:4];
      4'b1???:
        \aau.multiplication.controller.6424  = b[7:6];
      default:
        \aau.multiplication.controller.6424  = a;
    endcase
  endfunction
  assign \aau.multiplication.controller.nstate  = \aau.multiplication.controller.6424 (2'h0, { 2'h1, _0510_, 2'h3, _0507_ }, { _0512_, _0511_, _0509_, _0508_ });
  assign _0512_ = ! (* hdlname = "aau multiplication controller 6430" *) \aau.multiplication.controller.pstate ;
  assign _0509_ = \aau.multiplication.controller.pstate  == (* hdlname = "aau multiplication controller 6432" *) 2'h2;
  assign _0513_ = \aau.multiplication.datapath.mrreg.6594.outreg_t [1:0] == (* hdlname = "aau multiplication controller 6434" *) 2'h2;
  assign _0514_ = \aau.multiplication.datapath.mrreg.6594.outreg_t [1:0] == (* hdlname = "aau multiplication controller 6436" *) 2'h1;
  assign _0515_ = _0514_ ? (* hdlname = "aau multiplication controller 6439" *) 1'h1 : 1'h0;
  assign _0516_ = _0513_ ? (* hdlname = "aau multiplication controller 6441" *) 1'h1 : _0515_;
  assign _0517_ = _0513_ ? (* hdlname = "aau multiplication controller 6444" *) 1'h1 : 1'h0;
  assign _0511_ = \aau.multiplication.controller.pstate  == (* hdlname = "aau multiplication controller 6446" *) 2'h3;
  assign \aau.multiplication.controller.sel  = _0511_ ? (* hdlname = "aau multiplication controller 6475" *) _0516_ : 1'h0;
  assign \aau.multiplication.controller.subsel  = _0511_ ? (* hdlname = "aau multiplication controller 6479" *) _0517_ : 1'h0;
  assign \aau.donemult  = _0512_ ? (* hdlname = "aau multiplication controller 6484" *) 1'h1 : 1'h0;
  assign \aau.multiplication.controller.cnt_en  = _0511_ ? (* hdlname = "aau multiplication controller 6489" *) 1'h1 : 1'h0;
  assign \aau.multiplication.controller.counter.initcnt  = _0509_ ? (* hdlname = "aau multiplication controller 6498" *) 1'h1 : 1'h0;
  assign _0519_ = ~ (* hdlname = "aau multiplication controller counter 6638" *) \aau.multiplication.controller.co ;
  assign _0520_ = _0519_ & (* hdlname = "aau multiplication controller counter 6639" *) \aau.multiplication.controller.cnt_en ;
  assign _0521_ = \aau.multiplication.controller.counter.temp  + (* hdlname = "aau multiplication controller counter 6641" *) 6'h01;
  assign _0522_ = _0520_ ? (* hdlname = "aau multiplication controller counter 6642" *) _0521_ : \aau.multiplication.controller.counter.temp ;
  assign _0523_ = \aau.multiplication.controller.counter.initcnt  ? (* hdlname = "aau multiplication controller counter 6643" *) 6'h1f : _0522_;
  assign _0524_ = \aau.multiplication.controller.counter.temp  == (* hdlname = "aau multiplication controller counter 6652" *) 6'h3f;
  assign \aau.multiplication.controller.co  = _0524_ ? (* hdlname = "aau multiplication controller counter 6653" *) 1'h1 : 1'h0;
  assign \aau.multiplication.datapath.pin  = \aau.multiplication.controller.sel  ? (* hdlname = "aau multiplication datapath 6385" *) { \aau.multiplication.datapath.addsub.add.add [32], \aau.multiplication.datapath.addsub.add.add [32:1] } : { \aau.multiplication.datapath.addsub.add.a [32], \aau.multiplication.datapath.addsub.add.a [32:1] };
  assign \aau.multiplication.datapath.mrreg.serin  = \aau.multiplication.controller.sel  ? (* hdlname = "aau multiplication datapath 6390" *) \aau.multiplication.datapath.addsub.add.add [0] : \aau.multiplication.datapath.addsub.add.a [0];
  assign _0525_ = ~ (* hdlname = "aau multiplication datapath addsub 6627" *) \aau.multiplication.datapath.addsub.b ;
  assign \aau.multiplication.datapath.addsub.add.b  = \aau.multiplication.controller.subsel  ? (* hdlname = "aau multiplication datapath addsub 6628" *) _0525_ : \aau.multiplication.datapath.addsub.b ;
  assign _0526_ = { 1'h0, \aau.multiplication.datapath.addsub.add.a  } + (* hdlname = "aau multiplication datapath addsub add 6824" *) { 1'h0, \aau.multiplication.datapath.addsub.add.b  };
  assign \aau.multiplication.datapath.addsub.add.add  = _0526_ + (* hdlname = "aau multiplication datapath addsub add 6828" *) { 33'h000000000, \aau.multiplication.controller.subsel  };
  assign _0528_ = \aau.multiplication.controller.counter.initcnt  ? (* hdlname = "aau multiplication datapath mreg 6584" *) \aau.in1mult  : \aau.multiplication.datapath.addsub.b ;
  assign _0530_ = \aau.multiplication.controller.cnt_en  ? (* hdlname = "aau multiplication datapath mrreg 6605" *) { \aau.multiplication.datapath.mrreg.serin , \aau.multiplication.datapath.mrreg.6594.outreg_t [33:1] } : \aau.multiplication.datapath.mrreg.6594.outreg_t ;
  assign _0531_ = \aau.multiplication.controller.counter.initcnt  ? (* hdlname = "aau multiplication datapath mrreg 6609" *) { \aau.in2mult , 1'h0 } : _0530_;
  assign _0533_ = \aau.multiplication.controller.cnt_en  ? (* hdlname = "aau multiplication datapath preg 6584" *) \aau.multiplication.datapath.pin  : \aau.multiplication.datapath.addsub.add.a ;
  assign _0473_ = ~ (* hdlname = "addsub 4941" *) \aau.bin ;
  assign \addsub.add.b  = d2e_ctrl_word_curr[17] ? (* hdlname = "addsub 4942" *) _0473_ : \aau.bin ;
  assign \addsub.outres  = d2e_ctrl_word_curr[18] ? (* hdlname = "addsub 4946" *) \aau.bin  : \addsub.add.add [31:0];
  assign _0534_ = { 1'h0, \aau.ain  } + (* hdlname = "addsub add 4081" *) { 1'h0, \addsub.add.b  };
  assign \addsub.add.add  = _0534_ + (* hdlname = "addsub add 4085" *) { 32'h00000000, d2e_ctrl_word_curr[17] };
  assign _0535_ = ! (* hdlname = "bsu 4897" *) d2e_ctrl_word_curr[16:15];
  assign _0536_ = \aau.ain  << (* hdlname = "bsu 4900" *) { 27'h0000000, \aau.bin [4:0] };
  assign _0537_ = d2e_ctrl_word_curr[16:15] == (* hdlname = "bsu 4902" *) 2'h2;
  assign _0539_ = d2e_ctrl_word_curr[16:15] == (* hdlname = "bsu 4907" *) 2'h3;
  assign _0538_ = \aau.ain  >> (* hdlname = "bsu 4910" *) { 27'h0000000, \aau.bin [4:0] };
  assign _0540_ = _0539_ ? (* hdlname = "bsu 4912" *) _0538_ : 32'd0;
  assign _0541_ = _0537_ ? (* hdlname = "bsu 4913" *) _0538_ : _0540_;
  assign \bsu.shout  = _0535_ ? (* hdlname = "bsu 4914" *) _0536_ : _0541_;
  assign \comparator.ainp [31] = \comparator.ain [31] ^ (* hdlname = "comparator 4920" *) d2e_ctrl_word_curr[2];
  assign \comparator.binp [31] = \comparator.bin [31] ^ (* hdlname = "comparator 4922" *) d2e_ctrl_word_curr[2];
  assign _0542_ = { \comparator.ainp [31], \comparator.ain [30:0] } == (* hdlname = "comparator 4926" *) { \comparator.binp [31], \comparator.bin [30:0] };
  assign \comparator.eq  = _0542_ ? (* hdlname = "comparator 4927" *) 1'h1 : 1'h0;
  assign _0543_ = { \comparator.ainp [31], \comparator.ain [30:0] } > (* hdlname = "comparator 4930" *) { \comparator.binp [31], \comparator.bin [30:0] };
  assign \comparator.gt  = _0543_ ? (* hdlname = "comparator 4931" *) 1'h1 : 1'h0;
  assign _0544_ = { \comparator.ainp [31], \comparator.ain [30:0] } < (* hdlname = "comparator 4934" *) { \comparator.binp [31], \comparator.bin [30:0] };
  assign \comparator.lt  = _0544_ ? (* hdlname = "comparator 4935" *) 1'h1 : 1'h0;
  assign _0545_ = addressregbank == (* hdlname = "csr_address_ctrl 4767" *) 12'h300;
  assign \csr_address_ctrl.validaddresscsr  = _0545_ ? (* hdlname = "csr_address_ctrl 4768" *) 1'h1 : _0547_;
  assign _0546_ = addressregbank == (* hdlname = "csr_address_ctrl 4771" *) 12'h344;
  assign _0547_ = _0546_ ? (* hdlname = "csr_address_ctrl 4772" *) 1'h1 : _0549_;
  assign _0548_ = addressregbank == (* hdlname = "csr_address_ctrl 4775" *) 12'h304;
  assign _0549_ = _0548_ ? (* hdlname = "csr_address_ctrl 4776" *) 1'h1 : _0551_;
  assign _0550_ = addressregbank == (* hdlname = "csr_address_ctrl 4779" *) 12'h305;
  assign _0551_ = _0550_ ? (* hdlname = "csr_address_ctrl 4780" *) 1'h1 : _0553_;
  assign _0552_ = addressregbank == (* hdlname = "csr_address_ctrl 4783" *) 12'h341;
  assign _0553_ = _0552_ ? (* hdlname = "csr_address_ctrl 4784" *) 1'h1 : _0555_;
  assign _0554_ = addressregbank == (* hdlname = "csr_address_ctrl 4787" *) 12'h342;
  assign _0555_ = _0554_ ? (* hdlname = "csr_address_ctrl 4788" *) 1'h1 : _0557_;
  assign _0556_ = addressregbank == (* hdlname = "csr_address_ctrl 4791" *) 12'h343;
  assign _0557_ = _0556_ ? (* hdlname = "csr_address_ctrl 4792" *) 1'h1 : _0559_;
  assign _0558_ = addressregbank == (* hdlname = "csr_address_ctrl 4795" *) 12'h303;
  assign _0559_ = _0558_ ? (* hdlname = "csr_address_ctrl 4796" *) 1'h1 : _0561_;
  assign _0560_ = addressregbank == (* hdlname = "csr_address_ctrl 4799" *) 12'h302;
  assign _0561_ = _0560_ ? (* hdlname = "csr_address_ctrl 4800" *) 1'h1 : _0563_;
  assign _0562_ = ! (* hdlname = "csr_address_ctrl 4803" *) addressregbank;
  assign _0563_ = _0562_ ? (* hdlname = "csr_address_ctrl 4804" *) 1'h1 : _0565_;
  assign _0564_ = addressregbank == (* hdlname = "csr_address_ctrl 4807" *) 12'h044;
  assign _0565_ = _0564_ ? (* hdlname = "csr_address_ctrl 4808" *) 1'h1 : _0567_;
  assign _0566_ = addressregbank == (* hdlname = "csr_address_ctrl 4811" *) 12'h004;
  assign _0567_ = _0566_ ? (* hdlname = "csr_address_ctrl 4812" *) 1'h1 : _0569_;
  assign _0568_ = addressregbank == (* hdlname = "csr_address_ctrl 4815" *) 12'h005;
  assign _0569_ = _0568_ ? (* hdlname = "csr_address_ctrl 4816" *) 1'h1 : _0571_;
  assign _0570_ = addressregbank == (* hdlname = "csr_address_ctrl 4819" *) 12'h041;
  assign _0571_ = _0570_ ? (* hdlname = "csr_address_ctrl 4820" *) 1'h1 : _0573_;
  assign _0572_ = addressregbank == (* hdlname = "csr_address_ctrl 4823" *) 12'h042;
  assign _0573_ = _0572_ ? (* hdlname = "csr_address_ctrl 4824" *) 1'h1 : _0575_;
  assign _0574_ = addressregbank == (* hdlname = "csr_address_ctrl 4827" *) 12'h043;
  assign _0575_ = _0574_ ? (* hdlname = "csr_address_ctrl 4828" *) 1'h1 : 1'h0;
  assign \csraddressingdecoder.outaddr [6] = _0576_ ? (* hdlname = "csraddressingdecoder 5073" *) 1'h1 : _0578_;
  assign _0578_ = _0577_ ? (* hdlname = "csraddressingdecoder 5077" *) 1'h1 : _0580_;
  assign _0580_ = _0579_ ? (* hdlname = "csraddressingdecoder 5081" *) 1'h1 : \csrcounter.cocntup ;
  assign \csrcounter.cocntup  = _0581_ ? (* hdlname = "csraddressingdecoder 5085" *) 1'h1 : 1'h0;
  assign _0576_ = ! (* hdlname = "csraddressingdecoder 5090" *) \csraddressingdecoder.cntoutput ;
  assign \csraddressingdecoder.outaddr [2:0] = _0576_ ? (* hdlname = "csraddressingdecoder 5091" *) 3'h4 : _0582_;
  assign _0577_ = \csraddressingdecoder.cntoutput  == (* hdlname = "csraddressingdecoder 5094" *) 3'h1;
  assign _0582_ = _0577_ ? (* hdlname = "csraddressingdecoder 5095" *) 3'h2 : _0584_;
  assign _0583_ = \csraddressingdecoder.cntoutput  == (* hdlname = "csraddressingdecoder 5098" *) 3'h4;
  assign _0584_ = _0583_ ? (* hdlname = "csraddressingdecoder 5099" *) 3'h0 : _0585_;
  assign _0579_ = \csraddressingdecoder.cntoutput  == (* hdlname = "csraddressingdecoder 5102" *) 3'h2;
  assign _0585_ = _0579_ ? (* hdlname = "csraddressingdecoder 5103" *) 3'h1 : _0587_;
  assign _0586_ = \csraddressingdecoder.cntoutput  == (* hdlname = "csraddressingdecoder 5106" *) 3'h3;
  assign _0587_ = _0586_ ? (* hdlname = "csraddressingdecoder 5107" *) 3'h5 : _0589_;
  assign _0588_ = \csraddressingdecoder.cntoutput  == (* hdlname = "csraddressingdecoder 5110" *) 3'h5;
  assign _0589_ = _0588_ ? (* hdlname = "csraddressingdecoder 5111" *) 3'h0 : _0591_;
  assign _0590_ = \csraddressingdecoder.cntoutput  == (* hdlname = "csraddressingdecoder 5114" *) 3'h6;
  assign _0591_ = _0590_ ? (* hdlname = "csraddressingdecoder 5115" *) 3'h0 : _0592_;
  assign _0581_ = \csraddressingdecoder.cntoutput  == (* hdlname = "csraddressingdecoder 5118" *) 3'h7;
  assign _0592_ = _0581_ ? (* hdlname = "csraddressingdecoder 5119" *) 3'h3 : 3'h0;
  assign _0594_ = ~ (* hdlname = "csrcounter 5039" *) \csrcounter.cocntup ;
  assign _0595_ = _0594_ & (* hdlname = "csrcounter 5040" *) upcntcsr;
  assign _0596_ = \csraddressingdecoder.cntoutput  + (* hdlname = "csrcounter 5042" *) 3'h1;
  assign _0597_ = ~ (* hdlname = "csrcounter 5043" *) \csrcounter.cocntdn ;
  assign _0598_ = _0597_ & (* hdlname = "csrcounter 5044" *) dncntcsr;
  assign _0599_ = \csraddressingdecoder.cntoutput  - (* hdlname = "csrcounter 5046" *) 3'h1;
  assign _0600_ = _0598_ ? (* hdlname = "csrcounter 5047" *) _0599_ : \csraddressingdecoder.cntoutput ;
  assign _0601_ = _0595_ ? (* hdlname = "csrcounter 5048" *) _0596_ : _0600_;
  assign _0602_ = ldcntcsr ? (* hdlname = "csrcounter 5049" *) ldvaluecsr : _0601_;
  assign \csrcounter.cocntdn  = _0576_ ? (* hdlname = "csrcounter 5064" *) 1'h1 : 1'h0;
  assign \csrisl.regorimm  = selp1csr ? (* hdlname = "csrisl 5131" *) \csrisl.p1  : _0604_;
  assign _0604_ = selimmcsr ? (* hdlname = "csrisl 5134" *) { 27'h0000000, m2wb_instr_curr[19:15] } : 32'd0;
  assign \csrisl.orres  = \csrisl.outcsr  | (* hdlname = "csrisl 5136" *) \csrisl.regorimm ;
  assign _0605_ = ~ (* hdlname = "csrisl 5137" *) \csrisl.regorimm ;
  assign \csrisl.andres  = \csrisl.outcsr  & (* hdlname = "csrisl 5138" *) _0605_;
  assign \csrisl.preincsr  = selreadwritecsr ? (* hdlname = "csrisl 5139" *) \csrisl.regorimm  : _0606_;
  assign _0606_ = setcsr ? (* hdlname = "csrisl 5140" *) \csrisl.orres  : _0607_;
  assign _0607_ = clrcsr ? (* hdlname = "csrisl 5141" *) \csrisl.andres  : _0608_;
  assign _0608_ = selccmip_csr ? (* hdlname = "csrisl 5142" *) \csrisl.ccmip  : _0609_;
  assign _0609_ = selcause_csr ? (* hdlname = "csrisl 5143" *) \csrisl.causecode  : _0610_;
  assign _0610_ = seltval_csr ? (* hdlname = "csrisl 5144" *) \csrisl.trapvalue  : _0611_;
  assign _0611_ = selpc_csr ? (* hdlname = "csrisl 5145" *) csr_pc : _0612_;
  assign _0612_ = machinestatusalterationprecsr ? (* hdlname = "csrisl 5158" *) { \csrisl.outcsr [31:8], \csrisl.outcsr [3], \csrisl.outcsr [6:4], 1'h0, \csrisl.outcsr [2:0] } : _0613_;
  assign _0613_ = userstatusalterationprecsr ? (* hdlname = "csrisl 5166" *) { \csrisl.outcsr [31:5], \csrisl.outcsr [0], \csrisl.outcsr [3:1], 1'h0 } : _0614_;
  assign _0614_ = machinestatusalterationpostcsr ? (* hdlname = "csrisl 5176" *) { \csrisl.outcsr [31:8], 1'h0, \csrisl.outcsr [6:4], 1'h1, \csrisl.outcsr [2:0] } : _0615_;
  assign _0615_ = userstatusalterationpostcsr ? (* hdlname = "csrisl 5184" *) { \csrisl.outcsr [31:5], 1'h0, \csrisl.outcsr [3:1], 1'h1 } : 32'd0;
  assign _0616_ = \csrisl.mirrorustatus  & (* hdlname = "csrisl 5188" *) mirrorusercu;
  assign \csrisl.incsr  = _0616_ ? (* hdlname = "csrisl 5189" *) { 27'h0000000, \csrisl.preincsr [4], 3'h0, \csrisl.preincsr [0] } : _0619_;
  assign _0617_ = \csrisl.mirroruie  | (* hdlname = "csrisl 5192" *) \csrisl.mirroruip ;
  assign _0618_ = _0617_ & (* hdlname = "csrisl 5193" *) mirrorusercu;
  assign _0619_ = _0618_ ? (* hdlname = "csrisl 5194" *) { 23'h000000, \csrisl.preincsr [8], 3'h0, \csrisl.preincsr [4], 3'h0, \csrisl.preincsr [0] } : \csrisl.preincsr ;
  assign _0621_ = \daru1.controller.startdaru  ? (* hdlname = "daru1 controller 5532" *) 2'h1 : 2'h0;
  assign _0625_ = _0623_ ? (* hdlname = "daru1 controller 5542" *) 2'h2 : 2'h1;
  assign _0626_ = _0624_ ? (* hdlname = "daru1 controller 5544" *) 2'h1 : _0625_;
  function [1:0] \daru1.controller.5558 ;
    input [1:0] a;
    input [3:0] b;
    input [1:0] s;
    (* hdlname = "daru1 controller 5558" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \daru1.controller.5558  = b[1:0];
      2'b1?:
        \daru1.controller.5558  = b[3:2];
      default:
        \daru1.controller.5558  = a;
    endcase
  endfunction
  assign \daru1.controller.nstate  = \daru1.controller.5558 (2'h0, { _0626_, _0621_ }, { _0627_, _0460_ });
  assign _0622_ = ! (* hdlname = "daru1 controller 5565" *) \daru1.controller.pstate ;
  assign _0629_ = _0623_ ? (* hdlname = "daru1 controller 5574" *) 1'h1 : 1'h0;
  assign _0623_ = \daru1.controller.cocnt  & (* hdlname = "daru1 controller 5575" *) memready1;
  assign _0624_ = \daru1.controller.startdaru  & (* hdlname = "daru1 controller 5576" *) _0623_;
  assign _0630_ = _0624_ ? (* hdlname = "daru1 controller 5586" *) \daru1.controller.startdaru  : 1'h0;
  assign _0627_ = \daru1.controller.pstate  == (* hdlname = "daru1 controller 5588" *) 2'h1;
  assign _0631_ = \daru1.controller.startdaru  ? (* hdlname = "daru1 controller 5598" *) 1'h1 : 1'h0;
  assign _0628_ = \daru1.controller.pstate  == (* hdlname = "daru1 controller 5600" *) 2'h2;
  function [0:0] \daru1.controller.5606 ;
    input [0:0] a;
    input [2:0] b;
    input [2:0] s;
    (* hdlname = "daru1 controller 5606" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \daru1.controller.5606  = b[0:0];
      3'b?1?:
        \daru1.controller.5606  = b[1:1];
      3'b1??:
        \daru1.controller.5606  = b[2:2];
      default:
        \daru1.controller.5606  = a;
    endcase
  endfunction
  assign \daru1.controller.initcnt  = \daru1.controller.5606 (1'h0, { _0631_, _0630_, \daru1.controller.startdaru  }, { _0628_, _0627_, _0622_ });
  assign \daru1.controller.enabledata  = _0627_ ? (* hdlname = "daru1 controller 5624" *) memready1 : 1'h0;
  assign \daru1.controller.enableaddr  = _0627_ ? (* hdlname = "daru1 controller 5634" *) 1'h1 : 1'h0;
  assign \daru1.controller.select_incoming_data  = _0627_ ? (* hdlname = "daru1 controller 5649" *) _0629_ : 1'h0;
  function [0:0] \daru1.controller.5654 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "daru1 controller 5654" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \daru1.controller.5654  = b[0:0];
      2'b1?:
        \daru1.controller.5654  = b[1:1];
      default:
        \daru1.controller.5654  = a;
    endcase
  endfunction
  assign completeddaru1 = \daru1.controller.5654 (1'h0, { 1'h1, _0629_ }, { _0628_, _0627_ });
  assign _0633_ = ! (* hdlname = "daru1 datapath 5491" *) \daru1.datapath.nbytereg.outreg ;
  assign \daru1.datapath.bytestoread_temp  = _0633_ ? (* hdlname = "daru1 datapath 5492" *) 1'h0 : 1'h1;
  assign \daru1.datapath.dataout [31:16] = \daru1.controller.select_incoming_data  ? (* hdlname = "daru1 datapath 5500" *) \daru1.datapath.datain  : \daru1.datapath.dataouthigh_reg ;
  assign _0634_ = \daru1.datapath.adder.fa2.b  == (* hdlname = "daru1 datapath 5503" *) \daru1.datapath.bytestoread_temp ;
  assign \daru1.controller.cocnt  = _0634_ ? (* hdlname = "daru1 datapath 5504" *) 1'h1 : 1'h0;
  assign \daru1.datapath.datain  = \daru1.controller.enabledata  ? memdataout1 : 16'bz;
  assign \daru1.datapath.addrout  = \daru1.controller.enableaddr  ? { \daru1.datapath.adder.gen_halfadder:30.ha.o_sum , \daru1.datapath.adder.gen_halfadder:29.ha.o_sum , \daru1.datapath.adder.gen_halfadder:28.ha.o_sum , \daru1.datapath.adder.gen_halfadder:27.ha.o_sum , \daru1.datapath.adder.gen_halfadder:26.ha.o_sum , \daru1.datapath.adder.gen_halfadder:25.ha.o_sum , \daru1.datapath.adder.gen_halfadder:24.ha.o_sum , \daru1.datapath.adder.gen_halfadder:23.ha.o_sum , \daru1.datapath.adder.gen_halfadder:22.ha.o_sum , \daru1.datapath.adder.gen_halfadder:21.ha.o_sum , \daru1.datapath.adder.gen_halfadder:20.ha.o_sum , \daru1.datapath.adder.gen_halfadder:19.ha.o_sum , \daru1.datapath.adder.gen_halfadder:18.ha.o_sum , \daru1.datapath.adder.gen_halfadder:17.ha.o_sum , \daru1.datapath.adder.gen_halfadder:16.ha.o_sum , \daru1.datapath.adder.gen_halfadder:15.ha.o_sum , \daru1.datapath.adder.gen_halfadder:14.ha.o_sum , \daru1.datapath.adder.gen_halfadder:13.ha.o_sum , \daru1.datapath.adder.gen_halfadder:12.ha.o_sum , \daru1.datapath.adder.gen_halfadder:11.ha.o_sum , \daru1.datapath.adder.gen_halfadder:10.ha.o_sum , \daru1.datapath.adder.gen_halfadder:9.ha.o_sum , \daru1.datapath.adder.gen_halfadder:8.ha.o_sum , \daru1.datapath.adder.gen_halfadder:7.ha.o_sum , \daru1.datapath.adder.gen_halfadder:6.ha.o_sum , \daru1.datapath.adder.gen_halfadder:5.ha.o_sum , \daru1.datapath.adder.gen_halfadder:4.ha.o_sum , \daru1.datapath.adder.gen_halfadder:3.ha.o_sum , \daru1.datapath.adder.gen_halfadder:2.ha.o_sum , \daru1.datapath.adder.gen_halfadder:1.ha.o_sum , \daru1.datapath.adder.fa2.s , \daru1.datapath.addrreg.outreg [0] } : 32'bz;
  assign \daru1.datapath.adder.fa2.s  = \daru1.datapath.addrreg.outreg [1] ^ (* hdlname = "daru1 datapath adder fa2 6569" *) \daru1.datapath.adder.fa2.b ;
  assign \daru1.datapath.adder.gen_halfadder:1.ha.i_bit2  = \daru1.datapath.addrreg.outreg [1] & (* hdlname = "daru1 datapath adder fa2 6571" *) \daru1.datapath.adder.fa2.b ;
  assign \daru1.datapath.adder.gen_halfadder:1.ha.o_sum  = \daru1.datapath.addrreg.outreg [2] ^ (* hdlname = "daru1 datapath adder gen_halfadder:1.ha 6578" *) \daru1.datapath.adder.gen_halfadder:1.ha.i_bit2 ;
  assign \daru1.datapath.adder.gen_halfadder:1.ha.o_carry  = \daru1.datapath.addrreg.outreg [2] & (* hdlname = "daru1 datapath adder gen_halfadder:1.ha 6579" *) \daru1.datapath.adder.gen_halfadder:1.ha.i_bit2 ;
  assign \daru1.datapath.adder.gen_halfadder:10.ha.o_sum  = \daru1.datapath.addrreg.outreg [11] ^ (* hdlname = "daru1 datapath adder gen_halfadder:10.ha 6578" *) \daru1.datapath.adder.gen_halfadder:10.ha.i_bit2 ;
  assign \daru1.datapath.adder.gen_halfadder:10.ha.o_carry  = \daru1.datapath.addrreg.outreg [11] & (* hdlname = "daru1 datapath adder gen_halfadder:10.ha 6579" *) \daru1.datapath.adder.gen_halfadder:10.ha.i_bit2 ;
  assign \daru1.datapath.adder.gen_halfadder:11.ha.o_sum  = \daru1.datapath.addrreg.outreg [12] ^ (* hdlname = "daru1 datapath adder gen_halfadder:11.ha 6578" *) \daru1.datapath.adder.gen_halfadder:10.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:11.ha.o_carry  = \daru1.datapath.addrreg.outreg [12] & (* hdlname = "daru1 datapath adder gen_halfadder:11.ha 6579" *) \daru1.datapath.adder.gen_halfadder:10.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:12.ha.o_sum  = \daru1.datapath.addrreg.outreg [13] ^ (* hdlname = "daru1 datapath adder gen_halfadder:12.ha 6578" *) \daru1.datapath.adder.gen_halfadder:11.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:12.ha.o_carry  = \daru1.datapath.addrreg.outreg [13] & (* hdlname = "daru1 datapath adder gen_halfadder:12.ha 6579" *) \daru1.datapath.adder.gen_halfadder:11.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:13.ha.o_sum  = \daru1.datapath.addrreg.outreg [14] ^ (* hdlname = "daru1 datapath adder gen_halfadder:13.ha 6578" *) \daru1.datapath.adder.gen_halfadder:12.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:13.ha.o_carry  = \daru1.datapath.addrreg.outreg [14] & (* hdlname = "daru1 datapath adder gen_halfadder:13.ha 6579" *) \daru1.datapath.adder.gen_halfadder:12.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:14.ha.o_sum  = \daru1.datapath.addrreg.outreg [15] ^ (* hdlname = "daru1 datapath adder gen_halfadder:14.ha 6578" *) \daru1.datapath.adder.gen_halfadder:13.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:14.ha.o_carry  = \daru1.datapath.addrreg.outreg [15] & (* hdlname = "daru1 datapath adder gen_halfadder:14.ha 6579" *) \daru1.datapath.adder.gen_halfadder:13.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:15.ha.o_sum  = \daru1.datapath.addrreg.outreg [16] ^ (* hdlname = "daru1 datapath adder gen_halfadder:15.ha 6578" *) \daru1.datapath.adder.gen_halfadder:14.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:15.ha.o_carry  = \daru1.datapath.addrreg.outreg [16] & (* hdlname = "daru1 datapath adder gen_halfadder:15.ha 6579" *) \daru1.datapath.adder.gen_halfadder:14.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:16.ha.o_sum  = \daru1.datapath.addrreg.outreg [17] ^ (* hdlname = "daru1 datapath adder gen_halfadder:16.ha 6578" *) \daru1.datapath.adder.gen_halfadder:15.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:16.ha.o_carry  = \daru1.datapath.addrreg.outreg [17] & (* hdlname = "daru1 datapath adder gen_halfadder:16.ha 6579" *) \daru1.datapath.adder.gen_halfadder:15.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:17.ha.o_sum  = \daru1.datapath.addrreg.outreg [18] ^ (* hdlname = "daru1 datapath adder gen_halfadder:17.ha 6578" *) \daru1.datapath.adder.gen_halfadder:16.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:17.ha.o_carry  = \daru1.datapath.addrreg.outreg [18] & (* hdlname = "daru1 datapath adder gen_halfadder:17.ha 6579" *) \daru1.datapath.adder.gen_halfadder:16.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:18.ha.o_sum  = \daru1.datapath.addrreg.outreg [19] ^ (* hdlname = "daru1 datapath adder gen_halfadder:18.ha 6578" *) \daru1.datapath.adder.gen_halfadder:17.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:18.ha.o_carry  = \daru1.datapath.addrreg.outreg [19] & (* hdlname = "daru1 datapath adder gen_halfadder:18.ha 6579" *) \daru1.datapath.adder.gen_halfadder:17.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:19.ha.o_sum  = \daru1.datapath.addrreg.outreg [20] ^ (* hdlname = "daru1 datapath adder gen_halfadder:19.ha 6578" *) \daru1.datapath.adder.gen_halfadder:18.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:19.ha.o_carry  = \daru1.datapath.addrreg.outreg [20] & (* hdlname = "daru1 datapath adder gen_halfadder:19.ha 6579" *) \daru1.datapath.adder.gen_halfadder:18.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:2.ha.o_sum  = \daru1.datapath.addrreg.outreg [3] ^ (* hdlname = "daru1 datapath adder gen_halfadder:2.ha 6578" *) \daru1.datapath.adder.gen_halfadder:1.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:2.ha.o_carry  = \daru1.datapath.addrreg.outreg [3] & (* hdlname = "daru1 datapath adder gen_halfadder:2.ha 6579" *) \daru1.datapath.adder.gen_halfadder:1.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:20.ha.o_sum  = \daru1.datapath.addrreg.outreg [21] ^ (* hdlname = "daru1 datapath adder gen_halfadder:20.ha 6578" *) \daru1.datapath.adder.gen_halfadder:19.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:20.ha.o_carry  = \daru1.datapath.addrreg.outreg [21] & (* hdlname = "daru1 datapath adder gen_halfadder:20.ha 6579" *) \daru1.datapath.adder.gen_halfadder:19.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:21.ha.o_sum  = \daru1.datapath.addrreg.outreg [22] ^ (* hdlname = "daru1 datapath adder gen_halfadder:21.ha 6578" *) \daru1.datapath.adder.gen_halfadder:20.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:21.ha.o_carry  = \daru1.datapath.addrreg.outreg [22] & (* hdlname = "daru1 datapath adder gen_halfadder:21.ha 6579" *) \daru1.datapath.adder.gen_halfadder:20.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:22.ha.o_sum  = \daru1.datapath.addrreg.outreg [23] ^ (* hdlname = "daru1 datapath adder gen_halfadder:22.ha 6578" *) \daru1.datapath.adder.gen_halfadder:21.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:22.ha.o_carry  = \daru1.datapath.addrreg.outreg [23] & (* hdlname = "daru1 datapath adder gen_halfadder:22.ha 6579" *) \daru1.datapath.adder.gen_halfadder:21.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:23.ha.o_sum  = \daru1.datapath.addrreg.outreg [24] ^ (* hdlname = "daru1 datapath adder gen_halfadder:23.ha 6578" *) \daru1.datapath.adder.gen_halfadder:22.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:23.ha.o_carry  = \daru1.datapath.addrreg.outreg [24] & (* hdlname = "daru1 datapath adder gen_halfadder:23.ha 6579" *) \daru1.datapath.adder.gen_halfadder:22.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:24.ha.o_sum  = \daru1.datapath.addrreg.outreg [25] ^ (* hdlname = "daru1 datapath adder gen_halfadder:24.ha 6578" *) \daru1.datapath.adder.gen_halfadder:23.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:24.ha.o_carry  = \daru1.datapath.addrreg.outreg [25] & (* hdlname = "daru1 datapath adder gen_halfadder:24.ha 6579" *) \daru1.datapath.adder.gen_halfadder:23.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:25.ha.o_sum  = \daru1.datapath.addrreg.outreg [26] ^ (* hdlname = "daru1 datapath adder gen_halfadder:25.ha 6578" *) \daru1.datapath.adder.gen_halfadder:24.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:25.ha.o_carry  = \daru1.datapath.addrreg.outreg [26] & (* hdlname = "daru1 datapath adder gen_halfadder:25.ha 6579" *) \daru1.datapath.adder.gen_halfadder:24.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:26.ha.o_sum  = \daru1.datapath.addrreg.outreg [27] ^ (* hdlname = "daru1 datapath adder gen_halfadder:26.ha 6578" *) \daru1.datapath.adder.gen_halfadder:25.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:26.ha.o_carry  = \daru1.datapath.addrreg.outreg [27] & (* hdlname = "daru1 datapath adder gen_halfadder:26.ha 6579" *) \daru1.datapath.adder.gen_halfadder:25.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:27.ha.o_sum  = \daru1.datapath.addrreg.outreg [28] ^ (* hdlname = "daru1 datapath adder gen_halfadder:27.ha 6578" *) \daru1.datapath.adder.gen_halfadder:26.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:27.ha.o_carry  = \daru1.datapath.addrreg.outreg [28] & (* hdlname = "daru1 datapath adder gen_halfadder:27.ha 6579" *) \daru1.datapath.adder.gen_halfadder:26.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:28.ha.o_sum  = \daru1.datapath.addrreg.outreg [29] ^ (* hdlname = "daru1 datapath adder gen_halfadder:28.ha 6578" *) \daru1.datapath.adder.gen_halfadder:27.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:28.ha.o_carry  = \daru1.datapath.addrreg.outreg [29] & (* hdlname = "daru1 datapath adder gen_halfadder:28.ha 6579" *) \daru1.datapath.adder.gen_halfadder:27.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:29.ha.o_sum  = \daru1.datapath.addrreg.outreg [30] ^ (* hdlname = "daru1 datapath adder gen_halfadder:29.ha 6578" *) \daru1.datapath.adder.gen_halfadder:28.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:29.ha.o_carry  = \daru1.datapath.addrreg.outreg [30] & (* hdlname = "daru1 datapath adder gen_halfadder:29.ha 6579" *) \daru1.datapath.adder.gen_halfadder:28.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:3.ha.o_sum  = \daru1.datapath.addrreg.outreg [4] ^ (* hdlname = "daru1 datapath adder gen_halfadder:3.ha 6578" *) \daru1.datapath.adder.gen_halfadder:2.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:3.ha.o_carry  = \daru1.datapath.addrreg.outreg [4] & (* hdlname = "daru1 datapath adder gen_halfadder:3.ha 6579" *) \daru1.datapath.adder.gen_halfadder:2.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:30.ha.o_sum  = \daru1.datapath.addrreg.outreg [31] ^ (* hdlname = "daru1 datapath adder gen_halfadder:30.ha 6578" *) \daru1.datapath.adder.gen_halfadder:29.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:4.ha.o_sum  = \daru1.datapath.addrreg.outreg [5] ^ (* hdlname = "daru1 datapath adder gen_halfadder:4.ha 6578" *) \daru1.datapath.adder.gen_halfadder:3.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:4.ha.o_carry  = \daru1.datapath.addrreg.outreg [5] & (* hdlname = "daru1 datapath adder gen_halfadder:4.ha 6579" *) \daru1.datapath.adder.gen_halfadder:3.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:5.ha.o_sum  = \daru1.datapath.addrreg.outreg [6] ^ (* hdlname = "daru1 datapath adder gen_halfadder:5.ha 6578" *) \daru1.datapath.adder.gen_halfadder:4.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:5.ha.o_carry  = \daru1.datapath.addrreg.outreg [6] & (* hdlname = "daru1 datapath adder gen_halfadder:5.ha 6579" *) \daru1.datapath.adder.gen_halfadder:4.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:6.ha.o_sum  = \daru1.datapath.addrreg.outreg [7] ^ (* hdlname = "daru1 datapath adder gen_halfadder:6.ha 6578" *) \daru1.datapath.adder.gen_halfadder:5.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:6.ha.o_carry  = \daru1.datapath.addrreg.outreg [7] & (* hdlname = "daru1 datapath adder gen_halfadder:6.ha 6579" *) \daru1.datapath.adder.gen_halfadder:5.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:7.ha.o_sum  = \daru1.datapath.addrreg.outreg [8] ^ (* hdlname = "daru1 datapath adder gen_halfadder:7.ha 6578" *) \daru1.datapath.adder.gen_halfadder:6.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:7.ha.o_carry  = \daru1.datapath.addrreg.outreg [8] & (* hdlname = "daru1 datapath adder gen_halfadder:7.ha 6579" *) \daru1.datapath.adder.gen_halfadder:6.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:8.ha.o_sum  = \daru1.datapath.addrreg.outreg [9] ^ (* hdlname = "daru1 datapath adder gen_halfadder:8.ha 6578" *) \daru1.datapath.adder.gen_halfadder:7.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:8.ha.o_carry  = \daru1.datapath.addrreg.outreg [9] & (* hdlname = "daru1 datapath adder gen_halfadder:8.ha 6579" *) \daru1.datapath.adder.gen_halfadder:7.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:9.ha.o_sum  = \daru1.datapath.addrreg.outreg [10] ^ (* hdlname = "daru1 datapath adder gen_halfadder:9.ha 6578" *) \daru1.datapath.adder.gen_halfadder:8.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:10.ha.i_bit2  = \daru1.datapath.addrreg.outreg [10] & (* hdlname = "daru1 datapath adder gen_halfadder:9.ha 6579" *) \daru1.datapath.adder.gen_halfadder:8.ha.o_carry ;
  assign _0636_ = \daru1.controller.initcnt  ? (* hdlname = "daru1 datapath addrreg 4067" *) \daru1.datapath.addrreg.inreg  : \daru1.datapath.addrreg.outreg ;
  assign _0638_ = ~ (* hdlname = "daru1 datapath counter 6168" *) \daru1.datapath.counter.cocntp ;
  assign _0639_ = _0638_ & (* hdlname = "daru1 datapath counter 6169" *) \daru1.controller.enabledata ;
  assign _0640_ = \daru1.datapath.adder.fa2.b  + (* hdlname = "daru1 datapath counter 6171" *) 1'h1;
  assign _0641_ = _0639_ ? (* hdlname = "daru1 datapath counter 6172" *) _0640_ : \daru1.datapath.adder.fa2.b ;
  assign \daru1.datapath.counter.cocntp  = \daru1.datapath.adder.fa2.b  ? (* hdlname = "daru1 datapath counter 6183" *) 1'h1 : 1'h0;
  assign _0642_ = ! (* hdlname = "daru1 datapath decoder 6134" *) { 1'h0, \daru1.datapath.adder.fa2.b  };
  function [3:0] \daru1.datapath.decoder.6147 ;
    input [3:0] a;
    input [7:0] b;
    input [1:0] s;
    (* hdlname = "daru1 datapath decoder 6147" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \daru1.datapath.decoder.6147  = b[3:0];
      2'b1?:
        \daru1.datapath.decoder.6147  = b[7:4];
      default:
        \daru1.datapath.decoder.6147  = a;
    endcase
  endfunction
  assign _0643_ = \daru1.datapath.decoder.6147 (4'h0, 8'h21, { \daru1.datapath.adder.fa2.b , _0642_ });
  assign \daru1.datapath.decoder.outdecoder  = \daru1.controller.enabledata  ? (* hdlname = "daru1 datapath decoder 6149" *) _0643_ : 4'h0;
  assign _0644_ = \daru1.datapath.addrreg.outreg [1:0] == (* hdlname = "daru1 datapath errordecoder 6336" *) 2'h1;
  assign \daru1.datapath.errordecoder.cmp_01  = _0644_ ? (* hdlname = "daru1 datapath errordecoder 6337" *) 1'h1 : 1'h0;
  assign _0645_ = \daru1.datapath.addrreg.outreg [1:0] == (* hdlname = "daru1 datapath errordecoder 6341" *) 2'h2;
  assign \daru1.datapath.errordecoder.cmp_10  = _0645_ ? (* hdlname = "daru1 datapath errordecoder 6342" *) 1'h1 : 1'h0;
  assign _0646_ = \daru1.datapath.addrreg.outreg [1:0] == (* hdlname = "daru1 datapath errordecoder 6346" *) 2'h3;
  assign \daru1.datapath.errordecoder.cmp_11  = _0646_ ? (* hdlname = "daru1 datapath errordecoder 6347" *) 1'h1 : 1'h0;
  assign _0647_ = \daru1.datapath.errordecoder.cmp_01  | (* hdlname = "daru1 datapath errordecoder 6353" *) \daru1.datapath.errordecoder.cmp_10 ;
  assign gi2d_ex_flag_next = _0647_ | (* hdlname = "daru1 datapath errordecoder 6354" *) \daru1.datapath.errordecoder.cmp_11 ;
  assign _0649_ = \daru1.controller.initcnt  ? (* hdlname = "daru1 datapath nbytereg 6155" *) 2'h3 : \daru1.datapath.nbytereg.outreg ;
  assign _0651_ = \daru1.datapath.decoder.outdecoder [0] ? (* hdlname = "daru1 datapath reg0 6190" *) \daru1.datapath.datain  : \daru1.datapath.reg0.outreg ;
  assign _0653_ = \daru1.datapath.decoder.outdecoder [1] ? (* hdlname = "daru1 datapath reg1 6190" *) \daru1.datapath.datain  : \daru1.datapath.dataouthigh_reg ;
  assign _0655_ = \daru2.controller.startdaru  ? (* hdlname = "daru2 controller 5532" *) 2'h1 : 2'h0;
  assign _0658_ = _0657_ ? (* hdlname = "daru2 controller 5542" *) 2'h2 : 2'h1;
  function [1:0] \daru2.controller.5558 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* hdlname = "daru2 controller 5558" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \daru2.controller.5558  = b[1:0];
      3'b?1?:
        \daru2.controller.5558  = b[3:2];
      3'b1??:
        \daru2.controller.5558  = b[5:4];
      default:
        \daru2.controller.5558  = a;
    endcase
  endfunction
  assign \daru2.controller.nstate  = \daru2.controller.5558 (2'h0, { 2'h2, _0658_, _0655_ }, { _0660_, _0659_, _0656_ });
  assign _0656_ = ! (* hdlname = "daru2 controller 5565" *) \daru2.controller.pstate ;
  assign _0657_ = \daru2.controller.cocnt  & (* hdlname = "daru2 controller 5575" *) memready2;
  assign _0659_ = \daru2.controller.pstate  == (* hdlname = "daru2 controller 5588" *) 2'h1;
  assign _0660_ = \daru2.controller.pstate  == (* hdlname = "daru2 controller 5600" *) 2'h2;
  assign \daru2.controller.initcnt  = _0656_ ? (* hdlname = "daru2 controller 5606" *) \daru2.controller.startdaru  : 1'h0;
  assign \daru2.controller.enabledata  = _0659_ ? (* hdlname = "daru2 controller 5624" *) memready2 : 1'h0;
  assign \daru2.controller.enableaddr  = _0659_ ? (* hdlname = "daru2 controller 5634" *) 1'h1 : 1'h0;
  assign completeddaru2 = _0660_ ? (* hdlname = "daru2 controller 5654" *) 1'h1 : 1'h0;
  assign _0662_ = ! (* hdlname = "daru2 datapath 5491" *) \daru2.datapath.nbytereg.outreg ;
  assign bytespermemaccessdaru = _0662_ ? (* hdlname = "daru2 datapath 5492" *) 1'h0 : 1'h1;
  assign _0663_ = \daru2.datapath.adder.fa2.b  == (* hdlname = "daru2 datapath 5503" *) bytespermemaccessdaru;
  assign \daru2.controller.cocnt  = _0663_ ? (* hdlname = "daru2 datapath 5504" *) 1'h1 : 1'h0;
  assign \daru2.datapath.datain  = \daru2.controller.enabledata  ? memdataout2 : 16'bz;
  assign \daru2.datapath.addrout  = \daru2.controller.enableaddr  ? { \daru2.datapath.adder.gen_halfadder:30.ha.o_sum , \daru2.datapath.adder.gen_halfadder:29.ha.o_sum , \daru2.datapath.adder.gen_halfadder:28.ha.o_sum , \daru2.datapath.adder.gen_halfadder:27.ha.o_sum , \daru2.datapath.adder.gen_halfadder:26.ha.o_sum , \daru2.datapath.adder.gen_halfadder:25.ha.o_sum , \daru2.datapath.adder.gen_halfadder:24.ha.o_sum , \daru2.datapath.adder.gen_halfadder:23.ha.o_sum , \daru2.datapath.adder.gen_halfadder:22.ha.o_sum , \daru2.datapath.adder.gen_halfadder:21.ha.o_sum , \daru2.datapath.adder.gen_halfadder:20.ha.o_sum , \daru2.datapath.adder.gen_halfadder:19.ha.o_sum , \daru2.datapath.adder.gen_halfadder:18.ha.o_sum , \daru2.datapath.adder.gen_halfadder:17.ha.o_sum , \daru2.datapath.adder.gen_halfadder:16.ha.o_sum , \daru2.datapath.adder.gen_halfadder:15.ha.o_sum , \daru2.datapath.adder.gen_halfadder:14.ha.o_sum , \daru2.datapath.adder.gen_halfadder:13.ha.o_sum , \daru2.datapath.adder.gen_halfadder:12.ha.o_sum , \daru2.datapath.adder.gen_halfadder:11.ha.o_sum , \daru2.datapath.adder.gen_halfadder:10.ha.o_sum , \daru2.datapath.adder.gen_halfadder:9.ha.o_sum , \daru2.datapath.adder.gen_halfadder:8.ha.o_sum , \daru2.datapath.adder.gen_halfadder:7.ha.o_sum , \daru2.datapath.adder.gen_halfadder:6.ha.o_sum , \daru2.datapath.adder.gen_halfadder:5.ha.o_sum , \daru2.datapath.adder.gen_halfadder:4.ha.o_sum , \daru2.datapath.adder.gen_halfadder:3.ha.o_sum , \daru2.datapath.adder.gen_halfadder:2.ha.o_sum , \daru2.datapath.adder.gen_halfadder:1.ha.o_sum , \daru2.datapath.adder.fa2.s , \daru2.datapath.addrreg.outreg [0] } : 32'bz;
  assign \daru2.datapath.adder.fa2.s  = \daru2.datapath.addrreg.outreg [1] ^ (* hdlname = "daru2 datapath adder fa2 6569" *) \daru2.datapath.adder.fa2.b ;
  assign \daru2.datapath.adder.gen_halfadder:1.ha.i_bit2  = \daru2.datapath.addrreg.outreg [1] & (* hdlname = "daru2 datapath adder fa2 6571" *) \daru2.datapath.adder.fa2.b ;
  assign \daru2.datapath.adder.gen_halfadder:1.ha.o_sum  = \daru2.datapath.addrreg.outreg [2] ^ (* hdlname = "daru2 datapath adder gen_halfadder:1.ha 6578" *) \daru2.datapath.adder.gen_halfadder:1.ha.i_bit2 ;
  assign \daru2.datapath.adder.gen_halfadder:1.ha.o_carry  = \daru2.datapath.addrreg.outreg [2] & (* hdlname = "daru2 datapath adder gen_halfadder:1.ha 6579" *) \daru2.datapath.adder.gen_halfadder:1.ha.i_bit2 ;
  assign \daru2.datapath.adder.gen_halfadder:10.ha.o_sum  = \daru2.datapath.addrreg.outreg [11] ^ (* hdlname = "daru2 datapath adder gen_halfadder:10.ha 6578" *) \daru2.datapath.adder.gen_halfadder:10.ha.i_bit2 ;
  assign \daru2.datapath.adder.gen_halfadder:10.ha.o_carry  = \daru2.datapath.addrreg.outreg [11] & (* hdlname = "daru2 datapath adder gen_halfadder:10.ha 6579" *) \daru2.datapath.adder.gen_halfadder:10.ha.i_bit2 ;
  assign \daru2.datapath.adder.gen_halfadder:11.ha.o_sum  = \daru2.datapath.addrreg.outreg [12] ^ (* hdlname = "daru2 datapath adder gen_halfadder:11.ha 6578" *) \daru2.datapath.adder.gen_halfadder:10.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:11.ha.o_carry  = \daru2.datapath.addrreg.outreg [12] & (* hdlname = "daru2 datapath adder gen_halfadder:11.ha 6579" *) \daru2.datapath.adder.gen_halfadder:10.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:12.ha.o_sum  = \daru2.datapath.addrreg.outreg [13] ^ (* hdlname = "daru2 datapath adder gen_halfadder:12.ha 6578" *) \daru2.datapath.adder.gen_halfadder:11.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:12.ha.o_carry  = \daru2.datapath.addrreg.outreg [13] & (* hdlname = "daru2 datapath adder gen_halfadder:12.ha 6579" *) \daru2.datapath.adder.gen_halfadder:11.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:13.ha.o_sum  = \daru2.datapath.addrreg.outreg [14] ^ (* hdlname = "daru2 datapath adder gen_halfadder:13.ha 6578" *) \daru2.datapath.adder.gen_halfadder:12.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:13.ha.o_carry  = \daru2.datapath.addrreg.outreg [14] & (* hdlname = "daru2 datapath adder gen_halfadder:13.ha 6579" *) \daru2.datapath.adder.gen_halfadder:12.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:14.ha.o_sum  = \daru2.datapath.addrreg.outreg [15] ^ (* hdlname = "daru2 datapath adder gen_halfadder:14.ha 6578" *) \daru2.datapath.adder.gen_halfadder:13.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:14.ha.o_carry  = \daru2.datapath.addrreg.outreg [15] & (* hdlname = "daru2 datapath adder gen_halfadder:14.ha 6579" *) \daru2.datapath.adder.gen_halfadder:13.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:15.ha.o_sum  = \daru2.datapath.addrreg.outreg [16] ^ (* hdlname = "daru2 datapath adder gen_halfadder:15.ha 6578" *) \daru2.datapath.adder.gen_halfadder:14.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:15.ha.o_carry  = \daru2.datapath.addrreg.outreg [16] & (* hdlname = "daru2 datapath adder gen_halfadder:15.ha 6579" *) \daru2.datapath.adder.gen_halfadder:14.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:16.ha.o_sum  = \daru2.datapath.addrreg.outreg [17] ^ (* hdlname = "daru2 datapath adder gen_halfadder:16.ha 6578" *) \daru2.datapath.adder.gen_halfadder:15.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:16.ha.o_carry  = \daru2.datapath.addrreg.outreg [17] & (* hdlname = "daru2 datapath adder gen_halfadder:16.ha 6579" *) \daru2.datapath.adder.gen_halfadder:15.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:17.ha.o_sum  = \daru2.datapath.addrreg.outreg [18] ^ (* hdlname = "daru2 datapath adder gen_halfadder:17.ha 6578" *) \daru2.datapath.adder.gen_halfadder:16.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:17.ha.o_carry  = \daru2.datapath.addrreg.outreg [18] & (* hdlname = "daru2 datapath adder gen_halfadder:17.ha 6579" *) \daru2.datapath.adder.gen_halfadder:16.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:18.ha.o_sum  = \daru2.datapath.addrreg.outreg [19] ^ (* hdlname = "daru2 datapath adder gen_halfadder:18.ha 6578" *) \daru2.datapath.adder.gen_halfadder:17.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:18.ha.o_carry  = \daru2.datapath.addrreg.outreg [19] & (* hdlname = "daru2 datapath adder gen_halfadder:18.ha 6579" *) \daru2.datapath.adder.gen_halfadder:17.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:19.ha.o_sum  = \daru2.datapath.addrreg.outreg [20] ^ (* hdlname = "daru2 datapath adder gen_halfadder:19.ha 6578" *) \daru2.datapath.adder.gen_halfadder:18.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:19.ha.o_carry  = \daru2.datapath.addrreg.outreg [20] & (* hdlname = "daru2 datapath adder gen_halfadder:19.ha 6579" *) \daru2.datapath.adder.gen_halfadder:18.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:2.ha.o_sum  = \daru2.datapath.addrreg.outreg [3] ^ (* hdlname = "daru2 datapath adder gen_halfadder:2.ha 6578" *) \daru2.datapath.adder.gen_halfadder:1.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:2.ha.o_carry  = \daru2.datapath.addrreg.outreg [3] & (* hdlname = "daru2 datapath adder gen_halfadder:2.ha 6579" *) \daru2.datapath.adder.gen_halfadder:1.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:20.ha.o_sum  = \daru2.datapath.addrreg.outreg [21] ^ (* hdlname = "daru2 datapath adder gen_halfadder:20.ha 6578" *) \daru2.datapath.adder.gen_halfadder:19.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:20.ha.o_carry  = \daru2.datapath.addrreg.outreg [21] & (* hdlname = "daru2 datapath adder gen_halfadder:20.ha 6579" *) \daru2.datapath.adder.gen_halfadder:19.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:21.ha.o_sum  = \daru2.datapath.addrreg.outreg [22] ^ (* hdlname = "daru2 datapath adder gen_halfadder:21.ha 6578" *) \daru2.datapath.adder.gen_halfadder:20.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:21.ha.o_carry  = \daru2.datapath.addrreg.outreg [22] & (* hdlname = "daru2 datapath adder gen_halfadder:21.ha 6579" *) \daru2.datapath.adder.gen_halfadder:20.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:22.ha.o_sum  = \daru2.datapath.addrreg.outreg [23] ^ (* hdlname = "daru2 datapath adder gen_halfadder:22.ha 6578" *) \daru2.datapath.adder.gen_halfadder:21.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:22.ha.o_carry  = \daru2.datapath.addrreg.outreg [23] & (* hdlname = "daru2 datapath adder gen_halfadder:22.ha 6579" *) \daru2.datapath.adder.gen_halfadder:21.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:23.ha.o_sum  = \daru2.datapath.addrreg.outreg [24] ^ (* hdlname = "daru2 datapath adder gen_halfadder:23.ha 6578" *) \daru2.datapath.adder.gen_halfadder:22.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:23.ha.o_carry  = \daru2.datapath.addrreg.outreg [24] & (* hdlname = "daru2 datapath adder gen_halfadder:23.ha 6579" *) \daru2.datapath.adder.gen_halfadder:22.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:24.ha.o_sum  = \daru2.datapath.addrreg.outreg [25] ^ (* hdlname = "daru2 datapath adder gen_halfadder:24.ha 6578" *) \daru2.datapath.adder.gen_halfadder:23.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:24.ha.o_carry  = \daru2.datapath.addrreg.outreg [25] & (* hdlname = "daru2 datapath adder gen_halfadder:24.ha 6579" *) \daru2.datapath.adder.gen_halfadder:23.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:25.ha.o_sum  = \daru2.datapath.addrreg.outreg [26] ^ (* hdlname = "daru2 datapath adder gen_halfadder:25.ha 6578" *) \daru2.datapath.adder.gen_halfadder:24.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:25.ha.o_carry  = \daru2.datapath.addrreg.outreg [26] & (* hdlname = "daru2 datapath adder gen_halfadder:25.ha 6579" *) \daru2.datapath.adder.gen_halfadder:24.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:26.ha.o_sum  = \daru2.datapath.addrreg.outreg [27] ^ (* hdlname = "daru2 datapath adder gen_halfadder:26.ha 6578" *) \daru2.datapath.adder.gen_halfadder:25.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:26.ha.o_carry  = \daru2.datapath.addrreg.outreg [27] & (* hdlname = "daru2 datapath adder gen_halfadder:26.ha 6579" *) \daru2.datapath.adder.gen_halfadder:25.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:27.ha.o_sum  = \daru2.datapath.addrreg.outreg [28] ^ (* hdlname = "daru2 datapath adder gen_halfadder:27.ha 6578" *) \daru2.datapath.adder.gen_halfadder:26.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:27.ha.o_carry  = \daru2.datapath.addrreg.outreg [28] & (* hdlname = "daru2 datapath adder gen_halfadder:27.ha 6579" *) \daru2.datapath.adder.gen_halfadder:26.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:28.ha.o_sum  = \daru2.datapath.addrreg.outreg [29] ^ (* hdlname = "daru2 datapath adder gen_halfadder:28.ha 6578" *) \daru2.datapath.adder.gen_halfadder:27.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:28.ha.o_carry  = \daru2.datapath.addrreg.outreg [29] & (* hdlname = "daru2 datapath adder gen_halfadder:28.ha 6579" *) \daru2.datapath.adder.gen_halfadder:27.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:29.ha.o_sum  = \daru2.datapath.addrreg.outreg [30] ^ (* hdlname = "daru2 datapath adder gen_halfadder:29.ha 6578" *) \daru2.datapath.adder.gen_halfadder:28.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:29.ha.o_carry  = \daru2.datapath.addrreg.outreg [30] & (* hdlname = "daru2 datapath adder gen_halfadder:29.ha 6579" *) \daru2.datapath.adder.gen_halfadder:28.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:3.ha.o_sum  = \daru2.datapath.addrreg.outreg [4] ^ (* hdlname = "daru2 datapath adder gen_halfadder:3.ha 6578" *) \daru2.datapath.adder.gen_halfadder:2.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:3.ha.o_carry  = \daru2.datapath.addrreg.outreg [4] & (* hdlname = "daru2 datapath adder gen_halfadder:3.ha 6579" *) \daru2.datapath.adder.gen_halfadder:2.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:30.ha.o_sum  = \daru2.datapath.addrreg.outreg [31] ^ (* hdlname = "daru2 datapath adder gen_halfadder:30.ha 6578" *) \daru2.datapath.adder.gen_halfadder:29.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:4.ha.o_sum  = \daru2.datapath.addrreg.outreg [5] ^ (* hdlname = "daru2 datapath adder gen_halfadder:4.ha 6578" *) \daru2.datapath.adder.gen_halfadder:3.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:4.ha.o_carry  = \daru2.datapath.addrreg.outreg [5] & (* hdlname = "daru2 datapath adder gen_halfadder:4.ha 6579" *) \daru2.datapath.adder.gen_halfadder:3.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:5.ha.o_sum  = \daru2.datapath.addrreg.outreg [6] ^ (* hdlname = "daru2 datapath adder gen_halfadder:5.ha 6578" *) \daru2.datapath.adder.gen_halfadder:4.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:5.ha.o_carry  = \daru2.datapath.addrreg.outreg [6] & (* hdlname = "daru2 datapath adder gen_halfadder:5.ha 6579" *) \daru2.datapath.adder.gen_halfadder:4.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:6.ha.o_sum  = \daru2.datapath.addrreg.outreg [7] ^ (* hdlname = "daru2 datapath adder gen_halfadder:6.ha 6578" *) \daru2.datapath.adder.gen_halfadder:5.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:6.ha.o_carry  = \daru2.datapath.addrreg.outreg [7] & (* hdlname = "daru2 datapath adder gen_halfadder:6.ha 6579" *) \daru2.datapath.adder.gen_halfadder:5.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:7.ha.o_sum  = \daru2.datapath.addrreg.outreg [8] ^ (* hdlname = "daru2 datapath adder gen_halfadder:7.ha 6578" *) \daru2.datapath.adder.gen_halfadder:6.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:7.ha.o_carry  = \daru2.datapath.addrreg.outreg [8] & (* hdlname = "daru2 datapath adder gen_halfadder:7.ha 6579" *) \daru2.datapath.adder.gen_halfadder:6.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:8.ha.o_sum  = \daru2.datapath.addrreg.outreg [9] ^ (* hdlname = "daru2 datapath adder gen_halfadder:8.ha 6578" *) \daru2.datapath.adder.gen_halfadder:7.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:8.ha.o_carry  = \daru2.datapath.addrreg.outreg [9] & (* hdlname = "daru2 datapath adder gen_halfadder:8.ha 6579" *) \daru2.datapath.adder.gen_halfadder:7.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:9.ha.o_sum  = \daru2.datapath.addrreg.outreg [10] ^ (* hdlname = "daru2 datapath adder gen_halfadder:9.ha 6578" *) \daru2.datapath.adder.gen_halfadder:8.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:10.ha.i_bit2  = \daru2.datapath.addrreg.outreg [10] & (* hdlname = "daru2 datapath adder gen_halfadder:9.ha 6579" *) \daru2.datapath.adder.gen_halfadder:8.ha.o_carry ;
  assign _0665_ = \daru2.controller.initcnt  ? (* hdlname = "daru2 datapath addrreg 4067" *) \daru2.datapath.addrreg.inreg  : \daru2.datapath.addrreg.outreg ;
  assign _0667_ = ~ (* hdlname = "daru2 datapath counter 6168" *) \daru2.datapath.counter.cocntp ;
  assign _0668_ = _0667_ & (* hdlname = "daru2 datapath counter 6169" *) \daru2.controller.enabledata ;
  assign _0669_ = \daru2.datapath.adder.fa2.b  + (* hdlname = "daru2 datapath counter 6171" *) 1'h1;
  assign _0670_ = _0668_ ? (* hdlname = "daru2 datapath counter 6172" *) _0669_ : \daru2.datapath.adder.fa2.b ;
  assign \daru2.datapath.counter.cocntp  = \daru2.datapath.adder.fa2.b  ? (* hdlname = "daru2 datapath counter 6183" *) 1'h1 : 1'h0;
  assign _0671_ = ! (* hdlname = "daru2 datapath decoder 6134" *) { 1'h0, \daru2.datapath.adder.fa2.b  };
  function [3:0] \daru2.datapath.decoder.6147 ;
    input [3:0] a;
    input [7:0] b;
    input [1:0] s;
    (* hdlname = "daru2 datapath decoder 6147" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \daru2.datapath.decoder.6147  = b[3:0];
      2'b1?:
        \daru2.datapath.decoder.6147  = b[7:4];
      default:
        \daru2.datapath.decoder.6147  = a;
    endcase
  endfunction
  assign _0672_ = \daru2.datapath.decoder.6147 (4'h0, 8'h21, { \daru2.datapath.adder.fa2.b , _0671_ });
  assign \daru2.datapath.decoder.outdecoder  = \daru2.controller.enabledata  ? (* hdlname = "daru2 datapath decoder 6149" *) _0672_ : 4'h0;
  assign _0674_ = \daru2.controller.initcnt  ? (* hdlname = "daru2 datapath nbytereg 6155" *) e2m_ctrl_word_curr[44:43] : \daru2.datapath.nbytereg.outreg ;
  assign _0676_ = \daru2.datapath.decoder.outdecoder [0] ? (* hdlname = "daru2 datapath reg0 6190" *) \daru2.datapath.datain  : \daru2.datapath.reg0.outreg ;
  assign _0678_ = \daru2.datapath.decoder.outdecoder [1] ? (* hdlname = "daru2 datapath reg1 6190" *) \daru2.datapath.datain  : \daru2.datapath.reg1.outreg ;
  assign _0683_ = _0682_ ? (* hdlname = "dawu controller 6031" *) 1'h0 : 1'h1;
  function [0:0] \dawu.controller.6036 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "dawu controller 6036" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \dawu.controller.6036  = b[0:0];
      2'b1?:
        \dawu.controller.6036  = b[1:1];
      default:
        \dawu.controller.6036  = a;
    endcase
  endfunction
  assign \dawu.controller.nstate  = \dawu.controller.6036 (1'h0, { _0683_, _0680_ }, { \dawu.controller.pstate , _0681_ });
  assign _0680_ = \dawu.controller.startdawu  ? (* hdlname = "dawu controller 6052" *) 1'h1 : 1'h0;
  assign _0681_ = ~ (* hdlname = "dawu controller 6054" *) \dawu.controller.pstate ;
  assign _0684_ = memready2 ? (* hdlname = "dawu controller 6057" *) 1'h1 : 1'h0;
  assign _0682_ = memready2 & (* hdlname = "dawu controller 6058" *) \dawu.controller.cocnt ;
  assign _0685_ = _0682_ ? (* hdlname = "dawu controller 6061" *) 1'h1 : 1'h0;
  assign \dawu.controller.inccnt  = \dawu.controller.pstate  ? (* hdlname = "dawu controller 6081" *) _0684_ : 1'h0;
  assign \dawu.controller.initcnt  = \dawu.controller.pstate  ? (* hdlname = "dawu controller 6093" *) 1'h0 : _0680_;
  assign \dawu.controller.enableaddr  = \dawu.controller.pstate  ? (* hdlname = "dawu controller 6114" *) 1'h1 : 1'h0;
  assign completeddawu = \dawu.controller.pstate  ? (* hdlname = "dawu controller 6118" *) _0685_ : 1'h0;
  assign _0686_ = ! (* hdlname = "dawu datapath 5974" *) \dawu.datapath.nbytesout ;
  assign bytespermemaccessdawu = _0686_ ? (* hdlname = "dawu datapath 5975" *) 1'h0 : 1'h1;
  assign _0687_ = \dawu.datapath.nbytesout  != (* hdlname = "dawu datapath 5979" *) 2'h3;
  assign \dawu.datapath.totalbytecnt  = _0687_ ? (* hdlname = "dawu datapath 5980" *) 1'h0 : 1'h1;
  assign \dawu.datapath.muxout  = \dawu.datapath.adder.fa2.b  ? (* hdlname = "dawu datapath 5994" *) \dawu.datapath.outreg1  : \dawu.datapath.outreg0 ;
  assign _0688_ = \dawu.datapath.adder.fa2.b  == (* hdlname = "dawu datapath 5996" *) \dawu.datapath.totalbytecnt ;
  assign \dawu.controller.cocnt  = _0688_ ? (* hdlname = "dawu datapath 5997" *) 1'h1 : 1'h0;
  assign \dawu.datapath.dataout  = \dawu.controller.enableaddr  ? \dawu.datapath.muxout  : 16'bz;
  assign \dawu.datapath.addrout  = \dawu.controller.enableaddr  ? { \dawu.datapath.adder.gen_halfadder:30.ha.o_sum , \dawu.datapath.adder.gen_halfadder:29.ha.o_sum , \dawu.datapath.adder.gen_halfadder:28.ha.o_sum , \dawu.datapath.adder.gen_halfadder:27.ha.o_sum , \dawu.datapath.adder.gen_halfadder:26.ha.o_sum , \dawu.datapath.adder.gen_halfadder:25.ha.o_sum , \dawu.datapath.adder.gen_halfadder:24.ha.o_sum , \dawu.datapath.adder.gen_halfadder:23.ha.o_sum , \dawu.datapath.adder.gen_halfadder:22.ha.o_sum , \dawu.datapath.adder.gen_halfadder:21.ha.o_sum , \dawu.datapath.adder.gen_halfadder:20.ha.o_sum , \dawu.datapath.adder.gen_halfadder:19.ha.o_sum , \dawu.datapath.adder.gen_halfadder:18.ha.o_sum , \dawu.datapath.adder.gen_halfadder:17.ha.o_sum , \dawu.datapath.adder.gen_halfadder:16.ha.o_sum , \dawu.datapath.adder.gen_halfadder:15.ha.o_sum , \dawu.datapath.adder.gen_halfadder:14.ha.o_sum , \dawu.datapath.adder.gen_halfadder:13.ha.o_sum , \dawu.datapath.adder.gen_halfadder:12.ha.o_sum , \dawu.datapath.adder.gen_halfadder:11.ha.o_sum , \dawu.datapath.adder.gen_halfadder:10.ha.o_sum , \dawu.datapath.adder.gen_halfadder:9.ha.o_sum , \dawu.datapath.adder.gen_halfadder:8.ha.o_sum , \dawu.datapath.adder.gen_halfadder:7.ha.o_sum , \dawu.datapath.adder.gen_halfadder:6.ha.o_sum , \dawu.datapath.adder.gen_halfadder:5.ha.o_sum , \dawu.datapath.adder.gen_halfadder:4.ha.o_sum , \dawu.datapath.adder.gen_halfadder:3.ha.o_sum , \dawu.datapath.adder.gen_halfadder:2.ha.o_sum , \dawu.datapath.adder.gen_halfadder:1.ha.o_sum , \dawu.datapath.adder.fa2.s , \dawu.datapath.addrreg.outreg [0] } : 32'bz;
  assign \dawu.datapath.adder.fa2.s  = \dawu.datapath.addrreg.outreg [1] ^ (* hdlname = "dawu datapath adder fa2 6569" *) \dawu.datapath.adder.fa2.b ;
  assign \dawu.datapath.adder.gen_halfadder:1.ha.i_bit2  = \dawu.datapath.addrreg.outreg [1] & (* hdlname = "dawu datapath adder fa2 6571" *) \dawu.datapath.adder.fa2.b ;
  assign \dawu.datapath.adder.gen_halfadder:1.ha.o_sum  = \dawu.datapath.addrreg.outreg [2] ^ (* hdlname = "dawu datapath adder gen_halfadder:1.ha 6578" *) \dawu.datapath.adder.gen_halfadder:1.ha.i_bit2 ;
  assign \dawu.datapath.adder.gen_halfadder:1.ha.o_carry  = \dawu.datapath.addrreg.outreg [2] & (* hdlname = "dawu datapath adder gen_halfadder:1.ha 6579" *) \dawu.datapath.adder.gen_halfadder:1.ha.i_bit2 ;
  assign \dawu.datapath.adder.gen_halfadder:10.ha.o_sum  = \dawu.datapath.addrreg.outreg [11] ^ (* hdlname = "dawu datapath adder gen_halfadder:10.ha 6578" *) \dawu.datapath.adder.gen_halfadder:10.ha.i_bit2 ;
  assign \dawu.datapath.adder.gen_halfadder:10.ha.o_carry  = \dawu.datapath.addrreg.outreg [11] & (* hdlname = "dawu datapath adder gen_halfadder:10.ha 6579" *) \dawu.datapath.adder.gen_halfadder:10.ha.i_bit2 ;
  assign \dawu.datapath.adder.gen_halfadder:11.ha.o_sum  = \dawu.datapath.addrreg.outreg [12] ^ (* hdlname = "dawu datapath adder gen_halfadder:11.ha 6578" *) \dawu.datapath.adder.gen_halfadder:10.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:11.ha.o_carry  = \dawu.datapath.addrreg.outreg [12] & (* hdlname = "dawu datapath adder gen_halfadder:11.ha 6579" *) \dawu.datapath.adder.gen_halfadder:10.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:12.ha.o_sum  = \dawu.datapath.addrreg.outreg [13] ^ (* hdlname = "dawu datapath adder gen_halfadder:12.ha 6578" *) \dawu.datapath.adder.gen_halfadder:11.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:12.ha.o_carry  = \dawu.datapath.addrreg.outreg [13] & (* hdlname = "dawu datapath adder gen_halfadder:12.ha 6579" *) \dawu.datapath.adder.gen_halfadder:11.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:13.ha.o_sum  = \dawu.datapath.addrreg.outreg [14] ^ (* hdlname = "dawu datapath adder gen_halfadder:13.ha 6578" *) \dawu.datapath.adder.gen_halfadder:12.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:13.ha.o_carry  = \dawu.datapath.addrreg.outreg [14] & (* hdlname = "dawu datapath adder gen_halfadder:13.ha 6579" *) \dawu.datapath.adder.gen_halfadder:12.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:14.ha.o_sum  = \dawu.datapath.addrreg.outreg [15] ^ (* hdlname = "dawu datapath adder gen_halfadder:14.ha 6578" *) \dawu.datapath.adder.gen_halfadder:13.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:14.ha.o_carry  = \dawu.datapath.addrreg.outreg [15] & (* hdlname = "dawu datapath adder gen_halfadder:14.ha 6579" *) \dawu.datapath.adder.gen_halfadder:13.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:15.ha.o_sum  = \dawu.datapath.addrreg.outreg [16] ^ (* hdlname = "dawu datapath adder gen_halfadder:15.ha 6578" *) \dawu.datapath.adder.gen_halfadder:14.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:15.ha.o_carry  = \dawu.datapath.addrreg.outreg [16] & (* hdlname = "dawu datapath adder gen_halfadder:15.ha 6579" *) \dawu.datapath.adder.gen_halfadder:14.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:16.ha.o_sum  = \dawu.datapath.addrreg.outreg [17] ^ (* hdlname = "dawu datapath adder gen_halfadder:16.ha 6578" *) \dawu.datapath.adder.gen_halfadder:15.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:16.ha.o_carry  = \dawu.datapath.addrreg.outreg [17] & (* hdlname = "dawu datapath adder gen_halfadder:16.ha 6579" *) \dawu.datapath.adder.gen_halfadder:15.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:17.ha.o_sum  = \dawu.datapath.addrreg.outreg [18] ^ (* hdlname = "dawu datapath adder gen_halfadder:17.ha 6578" *) \dawu.datapath.adder.gen_halfadder:16.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:17.ha.o_carry  = \dawu.datapath.addrreg.outreg [18] & (* hdlname = "dawu datapath adder gen_halfadder:17.ha 6579" *) \dawu.datapath.adder.gen_halfadder:16.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:18.ha.o_sum  = \dawu.datapath.addrreg.outreg [19] ^ (* hdlname = "dawu datapath adder gen_halfadder:18.ha 6578" *) \dawu.datapath.adder.gen_halfadder:17.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:18.ha.o_carry  = \dawu.datapath.addrreg.outreg [19] & (* hdlname = "dawu datapath adder gen_halfadder:18.ha 6579" *) \dawu.datapath.adder.gen_halfadder:17.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:19.ha.o_sum  = \dawu.datapath.addrreg.outreg [20] ^ (* hdlname = "dawu datapath adder gen_halfadder:19.ha 6578" *) \dawu.datapath.adder.gen_halfadder:18.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:19.ha.o_carry  = \dawu.datapath.addrreg.outreg [20] & (* hdlname = "dawu datapath adder gen_halfadder:19.ha 6579" *) \dawu.datapath.adder.gen_halfadder:18.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:2.ha.o_sum  = \dawu.datapath.addrreg.outreg [3] ^ (* hdlname = "dawu datapath adder gen_halfadder:2.ha 6578" *) \dawu.datapath.adder.gen_halfadder:1.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:2.ha.o_carry  = \dawu.datapath.addrreg.outreg [3] & (* hdlname = "dawu datapath adder gen_halfadder:2.ha 6579" *) \dawu.datapath.adder.gen_halfadder:1.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:20.ha.o_sum  = \dawu.datapath.addrreg.outreg [21] ^ (* hdlname = "dawu datapath adder gen_halfadder:20.ha 6578" *) \dawu.datapath.adder.gen_halfadder:19.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:20.ha.o_carry  = \dawu.datapath.addrreg.outreg [21] & (* hdlname = "dawu datapath adder gen_halfadder:20.ha 6579" *) \dawu.datapath.adder.gen_halfadder:19.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:21.ha.o_sum  = \dawu.datapath.addrreg.outreg [22] ^ (* hdlname = "dawu datapath adder gen_halfadder:21.ha 6578" *) \dawu.datapath.adder.gen_halfadder:20.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:21.ha.o_carry  = \dawu.datapath.addrreg.outreg [22] & (* hdlname = "dawu datapath adder gen_halfadder:21.ha 6579" *) \dawu.datapath.adder.gen_halfadder:20.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:22.ha.o_sum  = \dawu.datapath.addrreg.outreg [23] ^ (* hdlname = "dawu datapath adder gen_halfadder:22.ha 6578" *) \dawu.datapath.adder.gen_halfadder:21.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:22.ha.o_carry  = \dawu.datapath.addrreg.outreg [23] & (* hdlname = "dawu datapath adder gen_halfadder:22.ha 6579" *) \dawu.datapath.adder.gen_halfadder:21.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:23.ha.o_sum  = \dawu.datapath.addrreg.outreg [24] ^ (* hdlname = "dawu datapath adder gen_halfadder:23.ha 6578" *) \dawu.datapath.adder.gen_halfadder:22.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:23.ha.o_carry  = \dawu.datapath.addrreg.outreg [24] & (* hdlname = "dawu datapath adder gen_halfadder:23.ha 6579" *) \dawu.datapath.adder.gen_halfadder:22.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:24.ha.o_sum  = \dawu.datapath.addrreg.outreg [25] ^ (* hdlname = "dawu datapath adder gen_halfadder:24.ha 6578" *) \dawu.datapath.adder.gen_halfadder:23.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:24.ha.o_carry  = \dawu.datapath.addrreg.outreg [25] & (* hdlname = "dawu datapath adder gen_halfadder:24.ha 6579" *) \dawu.datapath.adder.gen_halfadder:23.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:25.ha.o_sum  = \dawu.datapath.addrreg.outreg [26] ^ (* hdlname = "dawu datapath adder gen_halfadder:25.ha 6578" *) \dawu.datapath.adder.gen_halfadder:24.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:25.ha.o_carry  = \dawu.datapath.addrreg.outreg [26] & (* hdlname = "dawu datapath adder gen_halfadder:25.ha 6579" *) \dawu.datapath.adder.gen_halfadder:24.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:26.ha.o_sum  = \dawu.datapath.addrreg.outreg [27] ^ (* hdlname = "dawu datapath adder gen_halfadder:26.ha 6578" *) \dawu.datapath.adder.gen_halfadder:25.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:26.ha.o_carry  = \dawu.datapath.addrreg.outreg [27] & (* hdlname = "dawu datapath adder gen_halfadder:26.ha 6579" *) \dawu.datapath.adder.gen_halfadder:25.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:27.ha.o_sum  = \dawu.datapath.addrreg.outreg [28] ^ (* hdlname = "dawu datapath adder gen_halfadder:27.ha 6578" *) \dawu.datapath.adder.gen_halfadder:26.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:27.ha.o_carry  = \dawu.datapath.addrreg.outreg [28] & (* hdlname = "dawu datapath adder gen_halfadder:27.ha 6579" *) \dawu.datapath.adder.gen_halfadder:26.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:28.ha.o_sum  = \dawu.datapath.addrreg.outreg [29] ^ (* hdlname = "dawu datapath adder gen_halfadder:28.ha 6578" *) \dawu.datapath.adder.gen_halfadder:27.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:28.ha.o_carry  = \dawu.datapath.addrreg.outreg [29] & (* hdlname = "dawu datapath adder gen_halfadder:28.ha 6579" *) \dawu.datapath.adder.gen_halfadder:27.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:29.ha.o_sum  = \dawu.datapath.addrreg.outreg [30] ^ (* hdlname = "dawu datapath adder gen_halfadder:29.ha 6578" *) \dawu.datapath.adder.gen_halfadder:28.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:29.ha.o_carry  = \dawu.datapath.addrreg.outreg [30] & (* hdlname = "dawu datapath adder gen_halfadder:29.ha 6579" *) \dawu.datapath.adder.gen_halfadder:28.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:3.ha.o_sum  = \dawu.datapath.addrreg.outreg [4] ^ (* hdlname = "dawu datapath adder gen_halfadder:3.ha 6578" *) \dawu.datapath.adder.gen_halfadder:2.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:3.ha.o_carry  = \dawu.datapath.addrreg.outreg [4] & (* hdlname = "dawu datapath adder gen_halfadder:3.ha 6579" *) \dawu.datapath.adder.gen_halfadder:2.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:30.ha.o_sum  = \dawu.datapath.addrreg.outreg [31] ^ (* hdlname = "dawu datapath adder gen_halfadder:30.ha 6578" *) \dawu.datapath.adder.gen_halfadder:29.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:4.ha.o_sum  = \dawu.datapath.addrreg.outreg [5] ^ (* hdlname = "dawu datapath adder gen_halfadder:4.ha 6578" *) \dawu.datapath.adder.gen_halfadder:3.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:4.ha.o_carry  = \dawu.datapath.addrreg.outreg [5] & (* hdlname = "dawu datapath adder gen_halfadder:4.ha 6579" *) \dawu.datapath.adder.gen_halfadder:3.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:5.ha.o_sum  = \dawu.datapath.addrreg.outreg [6] ^ (* hdlname = "dawu datapath adder gen_halfadder:5.ha 6578" *) \dawu.datapath.adder.gen_halfadder:4.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:5.ha.o_carry  = \dawu.datapath.addrreg.outreg [6] & (* hdlname = "dawu datapath adder gen_halfadder:5.ha 6579" *) \dawu.datapath.adder.gen_halfadder:4.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:6.ha.o_sum  = \dawu.datapath.addrreg.outreg [7] ^ (* hdlname = "dawu datapath adder gen_halfadder:6.ha 6578" *) \dawu.datapath.adder.gen_halfadder:5.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:6.ha.o_carry  = \dawu.datapath.addrreg.outreg [7] & (* hdlname = "dawu datapath adder gen_halfadder:6.ha 6579" *) \dawu.datapath.adder.gen_halfadder:5.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:7.ha.o_sum  = \dawu.datapath.addrreg.outreg [8] ^ (* hdlname = "dawu datapath adder gen_halfadder:7.ha 6578" *) \dawu.datapath.adder.gen_halfadder:6.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:7.ha.o_carry  = \dawu.datapath.addrreg.outreg [8] & (* hdlname = "dawu datapath adder gen_halfadder:7.ha 6579" *) \dawu.datapath.adder.gen_halfadder:6.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:8.ha.o_sum  = \dawu.datapath.addrreg.outreg [9] ^ (* hdlname = "dawu datapath adder gen_halfadder:8.ha 6578" *) \dawu.datapath.adder.gen_halfadder:7.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:8.ha.o_carry  = \dawu.datapath.addrreg.outreg [9] & (* hdlname = "dawu datapath adder gen_halfadder:8.ha 6579" *) \dawu.datapath.adder.gen_halfadder:7.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:9.ha.o_sum  = \dawu.datapath.addrreg.outreg [10] ^ (* hdlname = "dawu datapath adder gen_halfadder:9.ha 6578" *) \dawu.datapath.adder.gen_halfadder:8.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:10.ha.i_bit2  = \dawu.datapath.addrreg.outreg [10] & (* hdlname = "dawu datapath adder gen_halfadder:9.ha 6579" *) \dawu.datapath.adder.gen_halfadder:8.ha.o_carry ;
  assign _0690_ = \dawu.controller.initcnt  ? (* hdlname = "dawu datapath addrreg 4067" *) \daru2.datapath.addrreg.inreg  : \dawu.datapath.addrreg.outreg ;
  assign _0692_ = ~ (* hdlname = "dawu datapath counter 6168" *) \dawu.datapath.counter.cocntp ;
  assign _0693_ = _0692_ & (* hdlname = "dawu datapath counter 6169" *) \dawu.controller.inccnt ;
  assign _0694_ = \dawu.datapath.adder.fa2.b  + (* hdlname = "dawu datapath counter 6171" *) 1'h1;
  assign _0695_ = _0693_ ? (* hdlname = "dawu datapath counter 6172" *) _0694_ : \dawu.datapath.adder.fa2.b ;
  assign \dawu.datapath.counter.cocntp  = \dawu.datapath.adder.fa2.b  ? (* hdlname = "dawu datapath counter 6183" *) 1'h1 : 1'h0;
  assign _0697_ = \dawu.controller.initcnt  ? (* hdlname = "dawu datapath nbytesreg 6155" *) e2m_ctrl_word_curr[44:43] : \dawu.datapath.nbytesout ;
  assign _0699_ = \dawu.controller.initcnt  ? (* hdlname = "dawu datapath reg0 6190" *) e2m_op2_curr[15:0] : \dawu.datapath.outreg0 ;
  assign _0701_ = \dawu.controller.initcnt  ? (* hdlname = "dawu datapath reg1 6190" *) e2m_op2_curr[31:16] : \dawu.datapath.outreg1 ;
  assign \i4pc.add  = { 1'h0, \daru1.datapath.addrreg.inreg  } + (* hdlname = "i4pc 4081" *) 33'h000000004;
  assign \immselsignex.imm [0] = muxcode[0] ? (* hdlname = "immselsignex 4121" *) gi2d_instr_curr[20] : _0702_;
  assign _0702_ = muxcode[1] ? (* hdlname = "immselsignex 4122" *) gi2d_instr_curr[7] : 1'h0;
  assign \immselsignex.imm [4:1] = muxcode[3] ? (* hdlname = "immselsignex 4126" *) gi2d_instr_curr[24:21] : _0703_;
  assign _0703_ = muxcode[4] ? (* hdlname = "immselsignex 4127" *) gi2d_instr_curr[11:8] : 4'h0;
  assign \immselsignex.imm [10:5] = muxcode[6] ? (* hdlname = "immselsignex 4131" *) gi2d_instr_curr[30:25] : 6'h00;
  assign \immselsignex.imm [11] = muxcode[7] ? (* hdlname = "immselsignex 4135" *) gi2d_instr_curr[31] : _0704_;
  assign _0704_ = muxcode[8] ? (* hdlname = "immselsignex 4136" *) gi2d_instr_curr[7] : _0705_;
  assign _0705_ = muxcode[5] ? (* hdlname = "immselsignex 4138" *) 1'h0 : _0706_;
  assign _0706_ = muxcode[9] ? (* hdlname = "immselsignex 4139" *) gi2d_instr_curr[20] : 1'h0;
  assign \immselsignex.imm [19:12] = muxcode[10] ? (* hdlname = "immselsignex 4144" *) { gi2d_instr_curr[31], gi2d_instr_curr[31], gi2d_instr_curr[31], gi2d_instr_curr[31], gi2d_instr_curr[31], gi2d_instr_curr[31], gi2d_instr_curr[31], gi2d_instr_curr[31] } : _0707_;
  assign _0707_ = muxcode[11] ? (* hdlname = "immselsignex 4145" *) gi2d_instr_curr[19:12] : 8'h00;
  assign \immselsignex.imm [30:20] = muxcode[6] ? (* hdlname = "immselsignex 4151" *) { gi2d_instr_curr[31], gi2d_instr_curr[31], gi2d_instr_curr[31], gi2d_instr_curr[31], gi2d_instr_curr[31], gi2d_instr_curr[31], gi2d_instr_curr[31], gi2d_instr_curr[31], gi2d_instr_curr[31], gi2d_instr_curr[31], gi2d_instr_curr[31] } : _0708_;
  assign _0708_ = muxcode[5] ? (* hdlname = "immselsignex 4154" *) gi2d_instr_curr[30:20] : 11'h000;
  assign _0711_ = lduser ? (* hdlname = "interrcheckcausedetection 5206" *) 2'h0 : curprv;
  assign _0712_ = ~ (* hdlname = "interrcheckcausedetection 5222" *) curprv[1];
  assign _0713_ = ~ (* hdlname = "interrcheckcausedetection 5224" *) curprv[0];
  assign \interrcheckcausedetection.user  = _0712_ & (* hdlname = "interrcheckcausedetection 5225" *) _0713_;
  assign \interrcheckcausedetection.machine  = curprv[1] & (* hdlname = "interrcheckcausedetection 5228" *) curprv[0];
  assign _0714_ = m2wb_illegal_instruction_flag_curr | (* hdlname = "interrcheckcausedetection 5235" *) m2wb_instr_misaligned_flag_curr;
  assign _0715_ = m2wb_divided_by_zero_flag_curr | (* hdlname = "interrcheckcausedetection 5238" *) m2wb_ecall_flag_curr;
  assign exceptionraisetemp = _0714_ | (* hdlname = "interrcheckcausedetection 5239" *) _0715_;
  assign _0718_ = \csrisl.ccmip [11] & (* hdlname = "interrcheckcausedetection 5244" *) \interrcheckcausedetection.miecc [11];
  assign \interrcheckcausedetection.interraisemachineexternal  = _0717_ & (* hdlname = "interrcheckcausedetection 5245" *) _0718_;
  assign _0719_ = \csrisl.ccmip [3] & (* hdlname = "interrcheckcausedetection 5250" *) \interrcheckcausedetection.miecc [3];
  assign \interrcheckcausedetection.interraisemachinesoftware  = _0717_ & (* hdlname = "interrcheckcausedetection 5251" *) _0719_;
  assign _0716_ = \interrcheckcausedetection.machine  & (* hdlname = "interrcheckcausedetection 5252" *) \interrcheckcausedetection.miefieldcc ;
  assign _0717_ = \interrcheckcausedetection.user  | (* hdlname = "interrcheckcausedetection 5253" *) _0716_;
  assign _0720_ = \csrisl.ccmip [7] & (* hdlname = "interrcheckcausedetection 5256" *) \interrcheckcausedetection.miecc [7];
  assign \interrcheckcausedetection.interraisemachinetimer  = _0717_ & (* hdlname = "interrcheckcausedetection 5257" *) _0720_;
  assign _0722_ = \csrisl.ccmip [8] & (* hdlname = "interrcheckcausedetection 5261" *) \interrcheckcausedetection.miecc [8];
  assign \interrcheckcausedetection.interraiseuserexternal  = _0721_ & (* hdlname = "interrcheckcausedetection 5262" *) _0722_;
  assign _0723_ = \csrisl.ccmip [0] & (* hdlname = "interrcheckcausedetection 5266" *) \interrcheckcausedetection.miecc [0];
  assign \interrcheckcausedetection.interraiseusersoftware  = _0721_ & (* hdlname = "interrcheckcausedetection 5267" *) _0723_;
  assign _0721_ = \interrcheckcausedetection.user  & (* hdlname = "interrcheckcausedetection 5268" *) \interrcheckcausedetection.uiefieldcc ;
  assign _0724_ = \csrisl.ccmip [4] & (* hdlname = "interrcheckcausedetection 5271" *) \interrcheckcausedetection.miecc [4];
  assign \interrcheckcausedetection.interraiseusertimer  = _0721_ & (* hdlname = "interrcheckcausedetection 5272" *) _0724_;
  assign \interrcheckcausedetection.interreserved  = \csrisl.ccmip [31:16] & (* hdlname = "interrcheckcausedetection 5275" *) \interrcheckcausedetection.miecc [31:16];
  assign _0725_ = \interrcheckcausedetection.interreserved [15] | (* hdlname = "interrcheckcausedetection 5278" *) \interrcheckcausedetection.interreserved [14];
  assign _0726_ = _0725_ | (* hdlname = "interrcheckcausedetection 5280" *) \interrcheckcausedetection.interreserved [13];
  assign _0727_ = _0726_ | (* hdlname = "interrcheckcausedetection 5282" *) \interrcheckcausedetection.interreserved [12];
  assign _0728_ = _0727_ | (* hdlname = "interrcheckcausedetection 5284" *) \interrcheckcausedetection.interreserved [11];
  assign _0729_ = _0728_ | (* hdlname = "interrcheckcausedetection 5286" *) \interrcheckcausedetection.interreserved [10];
  assign _0730_ = _0729_ | (* hdlname = "interrcheckcausedetection 5288" *) \interrcheckcausedetection.interreserved [9];
  assign _0731_ = _0730_ | (* hdlname = "interrcheckcausedetection 5290" *) \interrcheckcausedetection.interreserved [8];
  assign _0732_ = _0731_ | (* hdlname = "interrcheckcausedetection 5292" *) \interrcheckcausedetection.interreserved [7];
  assign _0733_ = _0732_ | (* hdlname = "interrcheckcausedetection 5294" *) \interrcheckcausedetection.interreserved [6];
  assign _0734_ = _0733_ | (* hdlname = "interrcheckcausedetection 5296" *) \interrcheckcausedetection.interreserved [5];
  assign _0735_ = _0734_ | (* hdlname = "interrcheckcausedetection 5298" *) \interrcheckcausedetection.interreserved [4];
  assign _0736_ = _0735_ | (* hdlname = "interrcheckcausedetection 5300" *) \interrcheckcausedetection.interreserved [3];
  assign _0737_ = _0736_ | (* hdlname = "interrcheckcausedetection 5302" *) \interrcheckcausedetection.interreserved [2];
  assign _0738_ = _0737_ | (* hdlname = "interrcheckcausedetection 5304" *) \interrcheckcausedetection.interreserved [1];
  assign _0739_ = _0738_ | (* hdlname = "interrcheckcausedetection 5306" *) \interrcheckcausedetection.interreserved [0];
  assign \interrcheckcausedetection.interraisereserved  = \interrcheckcausedetection.miefieldcc  & (* hdlname = "interrcheckcausedetection 5307" *) _0739_;
  assign _0740_ = \interrcheckcausedetection.interraisemachineexternal  | (* hdlname = "interrcheckcausedetection 5308" *) \interrcheckcausedetection.interraisemachinesoftware ;
  assign _0741_ = _0740_ | (* hdlname = "interrcheckcausedetection 5309" *) \interrcheckcausedetection.interraisemachinetimer ;
  assign _0742_ = _0741_ | (* hdlname = "interrcheckcausedetection 5310" *) \interrcheckcausedetection.interraiseuserexternal ;
  assign _0743_ = _0742_ | (* hdlname = "interrcheckcausedetection 5311" *) \interrcheckcausedetection.interraiseusersoftware ;
  assign _0744_ = _0743_ | (* hdlname = "interrcheckcausedetection 5312" *) \interrcheckcausedetection.interraiseusertimer ;
  assign \interrcheckcausedetection.interraisetemp  = _0744_ | (* hdlname = "interrcheckcausedetection 5313" *) \interrcheckcausedetection.interraisereserved ;
  assign _0745_ = m2wb_illegal_instruction_flag_curr | (* hdlname = "interrcheckcausedetection 5315" *) m2wb_divided_by_zero_flag_curr;
  assign _0746_ = m2wb_ecall_flag_curr ? (* hdlname = "interrcheckcausedetection 5318" *) 32'd8 : 32'd0;
  assign _0747_ = _0745_ ? (* hdlname = "interrcheckcausedetection 5324" *) 32'd2 : _0746_;
  assign _0748_ = m2wb_instr_misaligned_flag_curr ? (* hdlname = "interrcheckcausedetection 5326" *) 32'd0 : _0747_;
  assign _0749_ = \csrisl.ccmip [31] ? (* hdlname = "interrcheckcausedetection 5351" *) 32'd2147483679 : 32'd0;
  assign _0750_ = \csrisl.ccmip [30] ? (* hdlname = "interrcheckcausedetection 5353" *) 32'd2147483678 : _0749_;
  assign _0751_ = \csrisl.ccmip [29] ? (* hdlname = "interrcheckcausedetection 5355" *) 32'd2147483677 : _0750_;
  assign _0752_ = \csrisl.ccmip [28] ? (* hdlname = "interrcheckcausedetection 5357" *) 32'd2147483676 : _0751_;
  assign _0753_ = \csrisl.ccmip [27] ? (* hdlname = "interrcheckcausedetection 5359" *) 32'd2147483675 : _0752_;
  assign _0754_ = \csrisl.ccmip [26] ? (* hdlname = "interrcheckcausedetection 5361" *) 32'd2147483674 : _0753_;
  assign _0755_ = \csrisl.ccmip [25] ? (* hdlname = "interrcheckcausedetection 5363" *) 32'd2147483673 : _0754_;
  assign _0756_ = \csrisl.ccmip [24] ? (* hdlname = "interrcheckcausedetection 5365" *) 32'd2147483672 : _0755_;
  assign _0757_ = \csrisl.ccmip [23] ? (* hdlname = "interrcheckcausedetection 5367" *) 32'd2147483671 : _0756_;
  assign _0758_ = \csrisl.ccmip [22] ? (* hdlname = "interrcheckcausedetection 5369" *) 32'd2147483670 : _0757_;
  assign _0759_ = \csrisl.ccmip [21] ? (* hdlname = "interrcheckcausedetection 5371" *) 32'd2147483669 : _0758_;
  assign _0760_ = \csrisl.ccmip [20] ? (* hdlname = "interrcheckcausedetection 5373" *) 32'd2147483668 : _0759_;
  assign _0761_ = \csrisl.ccmip [19] ? (* hdlname = "interrcheckcausedetection 5375" *) 32'd2147483667 : _0760_;
  assign _0762_ = \csrisl.ccmip [18] ? (* hdlname = "interrcheckcausedetection 5377" *) 32'd2147483666 : _0761_;
  assign _0763_ = \csrisl.ccmip [17] ? (* hdlname = "interrcheckcausedetection 5379" *) 32'd2147483665 : _0762_;
  assign _0764_ = \csrisl.ccmip [16] ? (* hdlname = "interrcheckcausedetection 5381" *) 32'd2147483664 : _0763_;
  assign _0765_ = \csrisl.ccmip [4] ? (* hdlname = "interrcheckcausedetection 5383" *) 32'd2147483652 : _0764_;
  assign _0766_ = \csrisl.ccmip [0] ? (* hdlname = "interrcheckcausedetection 5385" *) 32'd2147483648 : _0765_;
  assign _0767_ = \csrisl.ccmip [8] ? (* hdlname = "interrcheckcausedetection 5387" *) 32'd2147483656 : _0766_;
  assign _0768_ = \csrisl.ccmip [7] ? (* hdlname = "interrcheckcausedetection 5389" *) 32'd2147483655 : _0767_;
  assign _0769_ = \csrisl.ccmip [3] ? (* hdlname = "interrcheckcausedetection 5391" *) 32'd2147483651 : _0768_;
  assign _0770_ = \csrisl.ccmip [11] ? (* hdlname = "interrcheckcausedetection 5393" *) 32'd2147483659 : _0769_;
  assign _0771_ = \interrcheckcausedetection.interraisetemp  ? (* hdlname = "interrcheckcausedetection 5395" *) _0770_ : 32'd0;
  assign \csrisl.causecode  = exceptionraisetemp ? (* hdlname = "interrcheckcausedetection 5396" *) _0748_ : _0771_;
  assign _0772_ = \interrcheckcausedetection.user  & (* hdlname = "interrcheckcausedetection 5399" *) m2wb_illegal_instruction_flag_curr;
  assign _0773_ = d2e_outcsr_next[2] & (* hdlname = "interrcheckcausedetection 5401" *) _0772_;
  assign _0774_ = \interrcheckcausedetection.user  & (* hdlname = "interrcheckcausedetection 5402" *) m2wb_instr_misaligned_flag_curr;
  assign _0775_ = d2e_outcsr_next[0] & (* hdlname = "interrcheckcausedetection 5404" *) _0774_;
  assign _0776_ = \interrcheckcausedetection.user  & (* hdlname = "interrcheckcausedetection 5411" *) m2wb_divided_by_zero_flag_curr;
  assign _0777_ = d2e_outcsr_next[2] & (* hdlname = "interrcheckcausedetection 5413" *) _0776_;
  assign _0778_ = \interrcheckcausedetection.user  & (* hdlname = "interrcheckcausedetection 5414" *) m2wb_ecall_flag_curr;
  assign _0779_ = d2e_outcsr_next[11] & (* hdlname = "interrcheckcausedetection 5416" *) _0778_;
  assign _0780_ = _0779_ ? (* hdlname = "interrcheckcausedetection 5419" *) 2'h0 : 2'h3;
  assign _0781_ = _0777_ ? (* hdlname = "interrcheckcausedetection 5421" *) 2'h0 : _0780_;
  assign _0782_ = _0775_ ? (* hdlname = "interrcheckcausedetection 5427" *) 2'h0 : _0781_;
  assign _0783_ = _0773_ ? (* hdlname = "interrcheckcausedetection 5429" *) 2'h0 : _0782_;
  assign _0784_ = \interrcheckcausedetection.user  & (* hdlname = "interrcheckcausedetection 5431" *) \csrisl.ccmip [8];
  assign _0785_ = d2e_outcsr_next[8] & (* hdlname = "interrcheckcausedetection 5433" *) _0784_;
  assign _0786_ = \interrcheckcausedetection.user  & (* hdlname = "interrcheckcausedetection 5435" *) \csrisl.ccmip [0];
  assign _0787_ = d2e_outcsr_next[0] & (* hdlname = "interrcheckcausedetection 5437" *) _0786_;
  assign _0788_ = \interrcheckcausedetection.user  & (* hdlname = "interrcheckcausedetection 5439" *) \csrisl.ccmip [4];
  assign _0789_ = d2e_outcsr_next[4] & (* hdlname = "interrcheckcausedetection 5441" *) _0788_;
  assign _0790_ = _0789_ ? (* hdlname = "interrcheckcausedetection 5444" *) 2'h0 : 2'h3;
  assign _0791_ = _0787_ ? (* hdlname = "interrcheckcausedetection 5446" *) 2'h0 : _0790_;
  assign _0792_ = _0785_ ? (* hdlname = "interrcheckcausedetection 5448" *) 2'h0 : _0791_;
  assign _0793_ = \interrcheckcausedetection.interraisetemp  ? (* hdlname = "interrcheckcausedetection 5450" *) _0792_ : 2'h3;
  assign \interrcheckcausedetection.delegationreg  = exceptionraisetemp ? (* hdlname = "interrcheckcausedetection 5451" *) _0783_ : _0793_;
  assign \csrisl.trapvalue  = m2wb_illegal_instruction_flag_curr ? (* hdlname = "interrcheckcausedetection 5453" *) gi2d_instr_curr : _0794_;
  assign _0794_ = m2wb_instr_misaligned_flag_curr ? (* hdlname = "interrcheckcausedetection 5454" *) \interrcheckcausedetection.outpc  : 32'd0;
  assign _0795_ = lddelegation ? (* hdlname = "interrcheckcausedetection 5459" *) \interrcheckcausedetection.delegationreg  : \interrcheckcausedetection.delegationmode ;
  (* hdlname = "interrcheckcausedetection 5460" *)
  always @(posedge clk)
    if (rst) _0709_ <= 2'h0;
    else _0709_ <= _0795_;
  assign \interruptstartaddressgenerator.interruptstartaddressvectored [29:0] = d2e_outcsr_next[31:2] + (* hdlname = "interruptstartaddressgenerator 5469" *) { 22'h000000, \csrisl.causecode [31], \csrisl.causecode [4:0], 2'h0 };
  assign _0798_ = mipcclddisable ? (* hdlname = "intersrcsynchreg 4067" *) \csrisl.ccmip  : { platforminterruptsignals, 4'h0, machineexternalinterrupt, 2'h0, userexternalinterrupt, machinetimerinterrupt, 2'h0, usertimerinterrupt, machinesoftwareinterrupt, 2'h0, usersoftwareinterrupt };
  assign _0799_ = \aau.ain  ^ (* hdlname = "llu 4880" *) \aau.bin ;
  assign _0800_ = ! (* hdlname = "llu 4882" *) d2e_ctrl_word_curr[33:32];
  assign _0801_ = \aau.ain  | (* hdlname = "llu 4883" *) \aau.bin ;
  assign _0802_ = d2e_ctrl_word_curr[33:32] == (* hdlname = "llu 4885" *) 2'h2;
  assign _0803_ = \aau.ain  & (* hdlname = "llu 4886" *) \aau.bin ;
  assign _0804_ = d2e_ctrl_word_curr[33:32] == (* hdlname = "llu 4888" *) 2'h3;
  function [31:0] \llu.4891 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* hdlname = "llu 4891" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \llu.4891  = b[31:0];
      3'b?1?:
        \llu.4891  = b[63:32];
      3'b1??:
        \llu.4891  = b[95:64];
      default:
        \llu.4891  = a;
    endcase
  endfunction
  assign \llu.result  = \llu.4891 (32'd0, { _0803_, _0801_, _0799_ }, { _0804_, _0802_, _0800_ });
  assign _0805_ = selpc ? (* hdlname = "mux2 4834" *) gi2d_pc_curr : 32'd0;
  assign d2e_alu_op1_next = seljl ? (* hdlname = "mux2 4835" *) \mux2.a  : _0805_;
  assign _0806_ = selimm ? (* hdlname = "mux5 4834" *) { gi2d_instr_curr[31], \immselsignex.imm [30:0] } : 32'd0;
  assign d2e_alu_op2_next = selp2 ? (* hdlname = "mux5 4835" *) d2e_op2_next : _0806_;
  assign _0807_ = selauipc ? (* hdlname = "mux6 4834" *) gi2d_pc_curr : 32'd0;
  assign \mux2.a  = selp1 ? (* hdlname = "mux6 4835" *) d2e_op1_next : _0807_;
  assign \mux8.w  = mirrorusercu ? (* hdlname = "mux8 5127" *) { 4'h0, \mux8.a [7:0] } : \mux8.a ;
  assign _0808_ = d2e_ctrl_word_curr[58] ? (* hdlname = "muxcmp 4834" *) d2e_op2_curr : 32'd0;
  assign \comparator.bin  = d2e_ctrl_word_curr[57] ? (* hdlname = "muxcmp 4835" *) \aau.bin  : _0808_;
  assign _0810_ = \mux8.w  == (* hdlname = "register_bank csr_address_logic 5884" *) 12'h304;
  assign \register_bank.csr_address_logic.ldmiereg  = _0810_ ? (* hdlname = "register_bank csr_address_logic 5885" *) 1'h1 : 1'h0;
  assign _0811_ = \mux8.w  == (* hdlname = "register_bank csr_address_logic 5889" *) 12'h300;
  assign \register_bank.csr_address_logic.ldmieuiefield  = _0811_ ? (* hdlname = "register_bank csr_address_logic 5890" *) 1'h1 : 1'h0;
  assign _0812_ = ! (* hdlname = "register_bank csr_address_logic 5895" *) \mux8.w [7:0];
  assign \csrisl.mirrorustatus  = _0812_ ? (* hdlname = "register_bank csr_address_logic 5896" *) 1'h1 : 1'h0;
  assign _0813_ = \mux8.w [7:0] == (* hdlname = "register_bank csr_address_logic 5901" *) 8'h04;
  assign \csrisl.mirroruie  = _0813_ ? (* hdlname = "register_bank csr_address_logic 5902" *) 1'h1 : 1'h0;
  assign _0814_ = \mux8.w [7:0] == (* hdlname = "register_bank csr_address_logic 5907" *) 8'h44;
  assign \csrisl.mirroruip  = _0814_ ? (* hdlname = "register_bank csr_address_logic 5908" *) 1'h1 : 1'h0;
  assign _0815_ = \csrisl.mirrorustatus  | (* hdlname = "register_bank csr_address_logic 5910" *) \csrisl.mirroruie ;
  assign mirror_int = _0815_ | (* hdlname = "register_bank csr_address_logic 5911" *) \csrisl.mirroruip ;
  assign _0837_ = 5'h1f - (* hdlname = "register_bank csr_registers 5670" *) { addressregbank[8], addressregbank[6], addressregbank[2:0] };
  assign _0838_ = 5'h1f - (* hdlname = "register_bank csr_registers 5677" *) { \mux8.w [8], \mux8.w [6], \mux8.w [2:0] };
  assign _0839_ = writeregbank ? (* hdlname = "register_bank csr_registers 5685" *) { _0946_, _0945_, _0944_, _0943_, _0942_, _0941_, _0940_, _0939_, _0938_, _0937_, _0936_, _0935_, _0934_, _0933_, _0932_, _0931_, _0930_, _0929_, _0928_, _0927_, _0926_, _0925_, _0924_, _0923_, _0922_, _0921_, _0920_, _0919_, _0918_, _0917_, _0916_, _0915_ } : \register_bank.csr_registers.rdata ;
  (* hdlname = "register_bank csr_registers 5686" *)
  always @(posedge clk)
    if (rst) _0816_ <= 1024'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    else _0816_ <= _0839_;
  assign d2e_outcsr_next_pre_bypass = _0837_[4] ? (* hdlname = "register_bank csr_registers 5740" *) _0849_ : _0848_;
  assign _0850_ = ~ (* hdlname = "register_bank csr_registers 5742" *) _0838_[4];
  assign _0851_ = ~ (* hdlname = "register_bank csr_registers 5744" *) _0838_[3];
  assign _0852_ = _0850_ & (* hdlname = "register_bank csr_registers 5745" *) _0851_;
  assign _0853_ = _0850_ & (* hdlname = "register_bank csr_registers 5746" *) _0838_[3];
  assign _0854_ = _0838_[4] & (* hdlname = "register_bank csr_registers 5747" *) _0851_;
  assign _0855_ = _0838_[4] & (* hdlname = "register_bank csr_registers 5748" *) _0838_[3];
  assign _0856_ = ~ (* hdlname = "register_bank csr_registers 5750" *) _0838_[2];
  assign _0857_ = _0852_ & (* hdlname = "register_bank csr_registers 5751" *) _0856_;
  assign _0858_ = _0852_ & (* hdlname = "register_bank csr_registers 5752" *) _0838_[2];
  assign _0859_ = _0853_ & (* hdlname = "register_bank csr_registers 5753" *) _0856_;
  assign _0860_ = _0853_ & (* hdlname = "register_bank csr_registers 5754" *) _0838_[2];
  assign _0861_ = _0854_ & (* hdlname = "register_bank csr_registers 5755" *) _0856_;
  assign _0862_ = _0854_ & (* hdlname = "register_bank csr_registers 5756" *) _0838_[2];
  assign _0863_ = _0855_ & (* hdlname = "register_bank csr_registers 5757" *) _0856_;
  assign _0864_ = _0855_ & (* hdlname = "register_bank csr_registers 5758" *) _0838_[2];
  assign _0865_ = ~ (* hdlname = "register_bank csr_registers 5760" *) _0838_[1];
  assign _0866_ = _0857_ & (* hdlname = "register_bank csr_registers 5761" *) _0865_;
  assign _0867_ = _0857_ & (* hdlname = "register_bank csr_registers 5762" *) _0838_[1];
  assign _0868_ = _0858_ & (* hdlname = "register_bank csr_registers 5763" *) _0865_;
  assign _0869_ = _0858_ & (* hdlname = "register_bank csr_registers 5764" *) _0838_[1];
  assign _0870_ = _0859_ & (* hdlname = "register_bank csr_registers 5765" *) _0865_;
  assign _0871_ = _0859_ & (* hdlname = "register_bank csr_registers 5766" *) _0838_[1];
  assign _0872_ = _0860_ & (* hdlname = "register_bank csr_registers 5767" *) _0865_;
  assign _0873_ = _0860_ & (* hdlname = "register_bank csr_registers 5768" *) _0838_[1];
  assign _0874_ = _0861_ & (* hdlname = "register_bank csr_registers 5769" *) _0865_;
  assign _0875_ = _0861_ & (* hdlname = "register_bank csr_registers 5770" *) _0838_[1];
  assign _0876_ = _0862_ & (* hdlname = "register_bank csr_registers 5771" *) _0865_;
  assign _0877_ = _0862_ & (* hdlname = "register_bank csr_registers 5772" *) _0838_[1];
  assign _0878_ = _0863_ & (* hdlname = "register_bank csr_registers 5773" *) _0865_;
  assign _0879_ = _0863_ & (* hdlname = "register_bank csr_registers 5774" *) _0838_[1];
  assign _0880_ = _0864_ & (* hdlname = "register_bank csr_registers 5775" *) _0865_;
  assign _0881_ = _0864_ & (* hdlname = "register_bank csr_registers 5776" *) _0838_[1];
  assign _0882_ = ~ (* hdlname = "register_bank csr_registers 5778" *) _0838_[0];
  assign _0883_ = _0866_ & (* hdlname = "register_bank csr_registers 5779" *) _0882_;
  assign _0884_ = _0866_ & (* hdlname = "register_bank csr_registers 5780" *) _0838_[0];
  assign _0885_ = _0867_ & (* hdlname = "register_bank csr_registers 5781" *) _0882_;
  assign _0886_ = _0867_ & (* hdlname = "register_bank csr_registers 5782" *) _0838_[0];
  assign _0887_ = _0868_ & (* hdlname = "register_bank csr_registers 5783" *) _0882_;
  assign _0888_ = _0868_ & (* hdlname = "register_bank csr_registers 5784" *) _0838_[0];
  assign _0889_ = _0869_ & (* hdlname = "register_bank csr_registers 5785" *) _0882_;
  assign _0890_ = _0869_ & (* hdlname = "register_bank csr_registers 5786" *) _0838_[0];
  assign _0891_ = _0870_ & (* hdlname = "register_bank csr_registers 5787" *) _0882_;
  assign _0892_ = _0870_ & (* hdlname = "register_bank csr_registers 5788" *) _0838_[0];
  assign _0893_ = _0871_ & (* hdlname = "register_bank csr_registers 5789" *) _0882_;
  assign _0894_ = _0871_ & (* hdlname = "register_bank csr_registers 5790" *) _0838_[0];
  assign _0895_ = _0872_ & (* hdlname = "register_bank csr_registers 5791" *) _0882_;
  assign _0896_ = _0872_ & (* hdlname = "register_bank csr_registers 5792" *) _0838_[0];
  assign _0897_ = _0873_ & (* hdlname = "register_bank csr_registers 5793" *) _0882_;
  assign _0898_ = _0873_ & (* hdlname = "register_bank csr_registers 5794" *) _0838_[0];
  assign _0899_ = _0874_ & (* hdlname = "register_bank csr_registers 5795" *) _0882_;
  assign _0900_ = _0874_ & (* hdlname = "register_bank csr_registers 5796" *) _0838_[0];
  assign _0901_ = _0875_ & (* hdlname = "register_bank csr_registers 5797" *) _0882_;
  assign _0902_ = _0875_ & (* hdlname = "register_bank csr_registers 5798" *) _0838_[0];
  assign _0903_ = _0876_ & (* hdlname = "register_bank csr_registers 5799" *) _0882_;
  assign _0904_ = _0876_ & (* hdlname = "register_bank csr_registers 5800" *) _0838_[0];
  assign _0905_ = _0877_ & (* hdlname = "register_bank csr_registers 5801" *) _0882_;
  assign _0906_ = _0877_ & (* hdlname = "register_bank csr_registers 5802" *) _0838_[0];
  assign _0907_ = _0878_ & (* hdlname = "register_bank csr_registers 5803" *) _0882_;
  assign _0908_ = _0878_ & (* hdlname = "register_bank csr_registers 5804" *) _0838_[0];
  assign _0909_ = _0879_ & (* hdlname = "register_bank csr_registers 5805" *) _0882_;
  assign _0910_ = _0879_ & (* hdlname = "register_bank csr_registers 5806" *) _0838_[0];
  assign _0911_ = _0880_ & (* hdlname = "register_bank csr_registers 5807" *) _0882_;
  assign _0912_ = _0880_ & (* hdlname = "register_bank csr_registers 5808" *) _0838_[0];
  assign _0913_ = _0881_ & (* hdlname = "register_bank csr_registers 5809" *) _0882_;
  assign _0914_ = _0881_ & (* hdlname = "register_bank csr_registers 5810" *) _0838_[0];
  assign _0915_ = _0883_ ? (* hdlname = "register_bank csr_registers 5812" *) \csrisl.incsr  : \register_bank.csr_registers.rdata [31:0];
  assign _0916_ = _0884_ ? (* hdlname = "register_bank csr_registers 5814" *) \csrisl.incsr  : \register_bank.csr_registers.rdata [63:32];
  assign _0917_ = _0885_ ? (* hdlname = "register_bank csr_registers 5816" *) \csrisl.incsr  : \register_bank.csr_registers.rdata [95:64];
  assign _0918_ = _0886_ ? (* hdlname = "register_bank csr_registers 5818" *) \csrisl.incsr  : \register_bank.csr_registers.rdata [127:96];
  assign _0919_ = _0887_ ? (* hdlname = "register_bank csr_registers 5820" *) \csrisl.incsr  : \register_bank.csr_registers.rdata [159:128];
  assign _0920_ = _0888_ ? (* hdlname = "register_bank csr_registers 5822" *) \csrisl.incsr  : \register_bank.csr_registers.rdata [191:160];
  assign _0921_ = _0889_ ? (* hdlname = "register_bank csr_registers 5824" *) \csrisl.incsr  : \register_bank.csr_registers.rdata [223:192];
  assign _0922_ = _0890_ ? (* hdlname = "register_bank csr_registers 5826" *) \csrisl.incsr  : \register_bank.csr_registers.rdata [255:224];
  assign _0923_ = _0891_ ? (* hdlname = "register_bank csr_registers 5828" *) \csrisl.incsr  : \register_bank.csr_registers.rdata [287:256];
  assign _0924_ = _0892_ ? (* hdlname = "register_bank csr_registers 5830" *) \csrisl.incsr  : \register_bank.csr_registers.rdata [319:288];
  assign _0925_ = _0893_ ? (* hdlname = "register_bank csr_registers 5832" *) \csrisl.incsr  : \register_bank.csr_registers.rdata [351:320];
  assign _0926_ = _0894_ ? (* hdlname = "register_bank csr_registers 5834" *) \csrisl.incsr  : \register_bank.csr_registers.rdata [383:352];
  assign _0927_ = _0895_ ? (* hdlname = "register_bank csr_registers 5836" *) \csrisl.incsr  : \register_bank.csr_registers.rdata [415:384];
  assign _0928_ = _0896_ ? (* hdlname = "register_bank csr_registers 5838" *) \csrisl.incsr  : \register_bank.csr_registers.rdata [447:416];
  assign _0929_ = _0897_ ? (* hdlname = "register_bank csr_registers 5840" *) \csrisl.incsr  : \register_bank.csr_registers.rdata [479:448];
  assign _0930_ = _0898_ ? (* hdlname = "register_bank csr_registers 5842" *) \csrisl.incsr  : \register_bank.csr_registers.rdata [511:480];
  assign _0931_ = _0899_ ? (* hdlname = "register_bank csr_registers 5844" *) \csrisl.incsr  : \register_bank.csr_registers.rdata [543:512];
  assign _0932_ = _0900_ ? (* hdlname = "register_bank csr_registers 5846" *) \csrisl.incsr  : \register_bank.csr_registers.rdata [575:544];
  assign _0933_ = _0901_ ? (* hdlname = "register_bank csr_registers 5848" *) \csrisl.incsr  : \register_bank.csr_registers.rdata [607:576];
  assign _0934_ = _0902_ ? (* hdlname = "register_bank csr_registers 5850" *) \csrisl.incsr  : \register_bank.csr_registers.rdata [639:608];
  assign _0935_ = _0903_ ? (* hdlname = "register_bank csr_registers 5852" *) \csrisl.incsr  : \register_bank.csr_registers.rdata [671:640];
  assign _0936_ = _0904_ ? (* hdlname = "register_bank csr_registers 5854" *) \csrisl.incsr  : \register_bank.csr_registers.rdata [703:672];
  assign _0937_ = _0905_ ? (* hdlname = "register_bank csr_registers 5856" *) \csrisl.incsr  : \register_bank.csr_registers.rdata [735:704];
  assign _0938_ = _0906_ ? (* hdlname = "register_bank csr_registers 5858" *) \csrisl.incsr  : \register_bank.csr_registers.rdata [767:736];
  assign _0939_ = _0907_ ? (* hdlname = "register_bank csr_registers 5860" *) \csrisl.incsr  : \register_bank.csr_registers.rdata [799:768];
  assign _0940_ = _0908_ ? (* hdlname = "register_bank csr_registers 5862" *) \csrisl.incsr  : \register_bank.csr_registers.rdata [831:800];
  assign _0941_ = _0909_ ? (* hdlname = "register_bank csr_registers 5864" *) \csrisl.incsr  : \register_bank.csr_registers.rdata [863:832];
  assign _0942_ = _0910_ ? (* hdlname = "register_bank csr_registers 5866" *) \csrisl.incsr  : \register_bank.csr_registers.rdata [895:864];
  assign _0943_ = _0911_ ? (* hdlname = "register_bank csr_registers 5868" *) \csrisl.incsr  : \register_bank.csr_registers.rdata [927:896];
  assign _0944_ = _0912_ ? (* hdlname = "register_bank csr_registers 5870" *) \csrisl.incsr  : \register_bank.csr_registers.rdata [959:928];
  assign _0945_ = _0913_ ? (* hdlname = "register_bank csr_registers 5872" *) \csrisl.incsr  : \register_bank.csr_registers.rdata [991:960];
  assign _0946_ = _0914_ ? (* hdlname = "register_bank csr_registers 5874" *) \csrisl.incsr  : \register_bank.csr_registers.rdata [1023:992];
  assign _0948_ = loadmiereg ? (* hdlname = "register_bank mieccregister 4067" *) \csrisl.incsr  : { \interrcheckcausedetection.miecc [31:16], \register_bank.mieccregister.outreg [15:12], \interrcheckcausedetection.miecc [11], \register_bank.mieccregister.outreg [10:9], \interrcheckcausedetection.miecc [8:7], \register_bank.mieccregister.outreg [6:5], \interrcheckcausedetection.miecc [4:3], \register_bank.mieccregister.outreg [2:1], \interrcheckcausedetection.miecc [0] };
  assign _0950_ = loadmieuiefield ? (* hdlname = "register_bank miefieldccregister 5916" *) \csrisl.incsr [3] : \interrcheckcausedetection.miefieldcc ;
  assign _0952_ = loadmieuiefield ? (* hdlname = "register_bank uiefieldccregister 5916" *) \csrisl.incsr [0] : \interrcheckcausedetection.uiefieldcc ;
  assign _0994_ = 5'h1f - (* hdlname = "registerfile 4161" *) gi2d_instr_curr[19:15];
  assign _0995_ = | (* hdlname = "registerfile 4165" *) gi2d_instr_curr[19:15];
  assign p1 = _0995_ ? (* hdlname = "registerfile 4166" *) _1014_ : 32'd0;
  assign _0996_ = 5'h1f - (* hdlname = "registerfile 4170" *) gi2d_instr_curr[24:20];
  assign _0997_ = | (* hdlname = "registerfile 4174" *) gi2d_instr_curr[24:20];
  assign p2 = _0997_ ? (* hdlname = "registerfile 4175" *) _1025_ : 32'd0;
  assign _0998_ = | (* hdlname = "registerfile 4180" *) m2wb_instr_curr[11:7];
  assign _0999_ = 5'h1f - (* hdlname = "registerfile 4195" *) m2wb_instr_curr[11:7];
  assign _1000_ = \registerfile.writeregfile  ? (* hdlname = "registerfile 4198" *) { _1186_, _1185_, _1184_, _1183_, _1182_, _1181_, _1180_, _1179_, _1178_, _1177_, _1176_, _1175_, _1174_, _1173_, _1172_, _1171_, _1170_, _1169_, _1168_, _1167_, _1166_, _1165_, _1164_, _1163_, _1162_, _1161_, _1160_, _1159_, _1158_, _1157_, _1156_, _1155_ } : \registerfile.rdata ;
  assign _1001_ = \registerfile.setzero  ? (* hdlname = "registerfile 4199" *) { _1154_, _1153_, _1152_, _1151_, _1150_, _1149_, _1148_, _1147_, _1146_, _1145_, _1144_, _1143_, _1142_, _1141_, _1140_, _1139_, _1138_, _1137_, _1136_, _1135_, _1134_, _1133_, _1132_, _1131_, _1130_, _1129_, _1128_, _1127_, _1126_, _1125_, _1124_, _1123_ } : _1000_;
  assign _1002_ = \registerfile.setone  ? (* hdlname = "registerfile 4200" *) { _1122_, _1121_, _1120_, _1119_, _1118_, _1117_, _1116_, _1115_, _1114_, _1113_, _1112_, _1111_, _1110_, _1109_, _1108_, _1107_, _1106_, _1105_, _1104_, _1103_, _1102_, _1101_, _1100_, _1099_, _1098_, _1097_, _1096_, _1095_, _1094_, _1093_, _1092_, _1091_ } : _1001_;
  assign _1003_ = _0998_ ? (* hdlname = "registerfile 4206" *) _1002_ : \registerfile.rdata ;
  (* hdlname = "registerfile 4207" *)
  always @(posedge clk)
    if (rst) _0953_ <= 1024'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    else _0953_ <= _1003_;
  assign _1014_ = _0994_[4] ? (* hdlname = "registerfile 4261" *) _1013_ : _1012_;
  assign _1025_ = _0996_[4] ? (* hdlname = "registerfile 4315" *) _1024_ : _1023_;
  assign _1091_ = _1059_ ? (* hdlname = "registerfile 4387" *) 32'd1 : \registerfile.rdata [31:0];
  assign _1092_ = _1060_ ? (* hdlname = "registerfile 4389" *) 32'd1 : \registerfile.rdata [63:32];
  assign _1093_ = _1061_ ? (* hdlname = "registerfile 4391" *) 32'd1 : \registerfile.rdata [95:64];
  assign _1094_ = _1062_ ? (* hdlname = "registerfile 4393" *) 32'd1 : \registerfile.rdata [127:96];
  assign _1095_ = _1063_ ? (* hdlname = "registerfile 4395" *) 32'd1 : \registerfile.rdata [159:128];
  assign _1096_ = _1064_ ? (* hdlname = "registerfile 4397" *) 32'd1 : \registerfile.rdata [191:160];
  assign _1097_ = _1065_ ? (* hdlname = "registerfile 4399" *) 32'd1 : \registerfile.rdata [223:192];
  assign _1098_ = _1066_ ? (* hdlname = "registerfile 4401" *) 32'd1 : \registerfile.rdata [255:224];
  assign _1099_ = _1067_ ? (* hdlname = "registerfile 4403" *) 32'd1 : \registerfile.rdata [287:256];
  assign _1100_ = _1068_ ? (* hdlname = "registerfile 4405" *) 32'd1 : \registerfile.rdata [319:288];
  assign _1101_ = _1069_ ? (* hdlname = "registerfile 4407" *) 32'd1 : \registerfile.rdata [351:320];
  assign _1102_ = _1070_ ? (* hdlname = "registerfile 4409" *) 32'd1 : \registerfile.rdata [383:352];
  assign _1103_ = _1071_ ? (* hdlname = "registerfile 4411" *) 32'd1 : \registerfile.rdata [415:384];
  assign _1104_ = _1072_ ? (* hdlname = "registerfile 4413" *) 32'd1 : \registerfile.rdata [447:416];
  assign _1105_ = _1073_ ? (* hdlname = "registerfile 4415" *) 32'd1 : \registerfile.rdata [479:448];
  assign _1106_ = _1074_ ? (* hdlname = "registerfile 4417" *) 32'd1 : \registerfile.rdata [511:480];
  assign _1107_ = _1075_ ? (* hdlname = "registerfile 4419" *) 32'd1 : \registerfile.rdata [543:512];
  assign _1108_ = _1076_ ? (* hdlname = "registerfile 4421" *) 32'd1 : \registerfile.rdata [575:544];
  assign _1109_ = _1077_ ? (* hdlname = "registerfile 4423" *) 32'd1 : \registerfile.rdata [607:576];
  assign _1110_ = _1078_ ? (* hdlname = "registerfile 4425" *) 32'd1 : \registerfile.rdata [639:608];
  assign _1111_ = _1079_ ? (* hdlname = "registerfile 4427" *) 32'd1 : \registerfile.rdata [671:640];
  assign _1112_ = _1080_ ? (* hdlname = "registerfile 4429" *) 32'd1 : \registerfile.rdata [703:672];
  assign _1113_ = _1081_ ? (* hdlname = "registerfile 4431" *) 32'd1 : \registerfile.rdata [735:704];
  assign _1114_ = _1082_ ? (* hdlname = "registerfile 4433" *) 32'd1 : \registerfile.rdata [767:736];
  assign _1115_ = _1083_ ? (* hdlname = "registerfile 4435" *) 32'd1 : \registerfile.rdata [799:768];
  assign _1116_ = _1084_ ? (* hdlname = "registerfile 4437" *) 32'd1 : \registerfile.rdata [831:800];
  assign _1117_ = _1085_ ? (* hdlname = "registerfile 4439" *) 32'd1 : \registerfile.rdata [863:832];
  assign _1118_ = _1086_ ? (* hdlname = "registerfile 4441" *) 32'd1 : \registerfile.rdata [895:864];
  assign _1119_ = _1087_ ? (* hdlname = "registerfile 4443" *) 32'd1 : \registerfile.rdata [927:896];
  assign _1120_ = _1088_ ? (* hdlname = "registerfile 4445" *) 32'd1 : \registerfile.rdata [959:928];
  assign _1121_ = _1089_ ? (* hdlname = "registerfile 4447" *) 32'd1 : \registerfile.rdata [991:960];
  assign _1122_ = _1090_ ? (* hdlname = "registerfile 4449" *) 32'd1 : \registerfile.rdata [1023:992];
  assign _1059_ = _1042_ & (* hdlname = "registerfile 4489" *) _1058_;
  assign _1060_ = _1042_ & (* hdlname = "registerfile 4490" *) _0999_[0];
  assign _1061_ = _1043_ & (* hdlname = "registerfile 4491" *) _1058_;
  assign _1062_ = _1043_ & (* hdlname = "registerfile 4492" *) _0999_[0];
  assign _1063_ = _1044_ & (* hdlname = "registerfile 4493" *) _1058_;
  assign _1064_ = _1044_ & (* hdlname = "registerfile 4494" *) _0999_[0];
  assign _1065_ = _1045_ & (* hdlname = "registerfile 4495" *) _1058_;
  assign _1066_ = _1045_ & (* hdlname = "registerfile 4496" *) _0999_[0];
  assign _1067_ = _1046_ & (* hdlname = "registerfile 4497" *) _1058_;
  assign _1068_ = _1046_ & (* hdlname = "registerfile 4498" *) _0999_[0];
  assign _1069_ = _1047_ & (* hdlname = "registerfile 4499" *) _1058_;
  assign _1070_ = _1047_ & (* hdlname = "registerfile 4500" *) _0999_[0];
  assign _1071_ = _1048_ & (* hdlname = "registerfile 4501" *) _1058_;
  assign _1072_ = _1048_ & (* hdlname = "registerfile 4502" *) _0999_[0];
  assign _1073_ = _1049_ & (* hdlname = "registerfile 4503" *) _1058_;
  assign _1074_ = _1049_ & (* hdlname = "registerfile 4504" *) _0999_[0];
  assign _1075_ = _1050_ & (* hdlname = "registerfile 4505" *) _1058_;
  assign _1076_ = _1050_ & (* hdlname = "registerfile 4506" *) _0999_[0];
  assign _1077_ = _1051_ & (* hdlname = "registerfile 4507" *) _1058_;
  assign _1078_ = _1051_ & (* hdlname = "registerfile 4508" *) _0999_[0];
  assign _1079_ = _1052_ & (* hdlname = "registerfile 4509" *) _1058_;
  assign _1080_ = _1052_ & (* hdlname = "registerfile 4510" *) _0999_[0];
  assign _1081_ = _1053_ & (* hdlname = "registerfile 4511" *) _1058_;
  assign _1082_ = _1053_ & (* hdlname = "registerfile 4512" *) _0999_[0];
  assign _1083_ = _1054_ & (* hdlname = "registerfile 4513" *) _1058_;
  assign _1084_ = _1054_ & (* hdlname = "registerfile 4514" *) _0999_[0];
  assign _1085_ = _1055_ & (* hdlname = "registerfile 4515" *) _1058_;
  assign _1086_ = _1055_ & (* hdlname = "registerfile 4516" *) _0999_[0];
  assign _1087_ = _1056_ & (* hdlname = "registerfile 4517" *) _1058_;
  assign _1088_ = _1056_ & (* hdlname = "registerfile 4518" *) _0999_[0];
  assign _1089_ = _1057_ & (* hdlname = "registerfile 4519" *) _1058_;
  assign _1090_ = _1057_ & (* hdlname = "registerfile 4520" *) _0999_[0];
  assign _1123_ = _1059_ ? (* hdlname = "registerfile 4522" *) 32'd0 : \registerfile.rdata [31:0];
  assign _1124_ = _1060_ ? (* hdlname = "registerfile 4524" *) 32'd0 : \registerfile.rdata [63:32];
  assign _1125_ = _1061_ ? (* hdlname = "registerfile 4526" *) 32'd0 : \registerfile.rdata [95:64];
  assign _1126_ = _1062_ ? (* hdlname = "registerfile 4528" *) 32'd0 : \registerfile.rdata [127:96];
  assign _1127_ = _1063_ ? (* hdlname = "registerfile 4530" *) 32'd0 : \registerfile.rdata [159:128];
  assign _1128_ = _1064_ ? (* hdlname = "registerfile 4532" *) 32'd0 : \registerfile.rdata [191:160];
  assign _1129_ = _1065_ ? (* hdlname = "registerfile 4534" *) 32'd0 : \registerfile.rdata [223:192];
  assign _1130_ = _1066_ ? (* hdlname = "registerfile 4536" *) 32'd0 : \registerfile.rdata [255:224];
  assign _1131_ = _1067_ ? (* hdlname = "registerfile 4538" *) 32'd0 : \registerfile.rdata [287:256];
  assign _1132_ = _1068_ ? (* hdlname = "registerfile 4540" *) 32'd0 : \registerfile.rdata [319:288];
  assign _1133_ = _1069_ ? (* hdlname = "registerfile 4542" *) 32'd0 : \registerfile.rdata [351:320];
  assign _1134_ = _1070_ ? (* hdlname = "registerfile 4544" *) 32'd0 : \registerfile.rdata [383:352];
  assign _1135_ = _1071_ ? (* hdlname = "registerfile 4546" *) 32'd0 : \registerfile.rdata [415:384];
  assign _1136_ = _1072_ ? (* hdlname = "registerfile 4548" *) 32'd0 : \registerfile.rdata [447:416];
  assign _1137_ = _1073_ ? (* hdlname = "registerfile 4550" *) 32'd0 : \registerfile.rdata [479:448];
  assign _1138_ = _1074_ ? (* hdlname = "registerfile 4552" *) 32'd0 : \registerfile.rdata [511:480];
  assign _1139_ = _1075_ ? (* hdlname = "registerfile 4554" *) 32'd0 : \registerfile.rdata [543:512];
  assign _1140_ = _1076_ ? (* hdlname = "registerfile 4556" *) 32'd0 : \registerfile.rdata [575:544];
  assign _1141_ = _1077_ ? (* hdlname = "registerfile 4558" *) 32'd0 : \registerfile.rdata [607:576];
  assign _1142_ = _1078_ ? (* hdlname = "registerfile 4560" *) 32'd0 : \registerfile.rdata [639:608];
  assign _1143_ = _1079_ ? (* hdlname = "registerfile 4562" *) 32'd0 : \registerfile.rdata [671:640];
  assign _1144_ = _1080_ ? (* hdlname = "registerfile 4564" *) 32'd0 : \registerfile.rdata [703:672];
  assign _1145_ = _1081_ ? (* hdlname = "registerfile 4566" *) 32'd0 : \registerfile.rdata [735:704];
  assign _1146_ = _1082_ ? (* hdlname = "registerfile 4568" *) 32'd0 : \registerfile.rdata [767:736];
  assign _1147_ = _1083_ ? (* hdlname = "registerfile 4570" *) 32'd0 : \registerfile.rdata [799:768];
  assign _1148_ = _1084_ ? (* hdlname = "registerfile 4572" *) 32'd0 : \registerfile.rdata [831:800];
  assign _1149_ = _1085_ ? (* hdlname = "registerfile 4574" *) 32'd0 : \registerfile.rdata [863:832];
  assign _1150_ = _1086_ ? (* hdlname = "registerfile 4576" *) 32'd0 : \registerfile.rdata [895:864];
  assign _1151_ = _1087_ ? (* hdlname = "registerfile 4578" *) 32'd0 : \registerfile.rdata [927:896];
  assign _1152_ = _1088_ ? (* hdlname = "registerfile 4580" *) 32'd0 : \registerfile.rdata [959:928];
  assign _1153_ = _1089_ ? (* hdlname = "registerfile 4582" *) 32'd0 : \registerfile.rdata [991:960];
  assign _1154_ = _1090_ ? (* hdlname = "registerfile 4584" *) 32'd0 : \registerfile.rdata [1023:992];
  assign _1026_ = ~ (* hdlname = "registerfile 4587" *) _0999_[4];
  assign _1027_ = ~ (* hdlname = "registerfile 4589" *) _0999_[3];
  assign _1028_ = _1026_ & (* hdlname = "registerfile 4590" *) _1027_;
  assign _1029_ = _1026_ & (* hdlname = "registerfile 4591" *) _0999_[3];
  assign _1030_ = _0999_[4] & (* hdlname = "registerfile 4592" *) _1027_;
  assign _1031_ = _0999_[4] & (* hdlname = "registerfile 4593" *) _0999_[3];
  assign _1032_ = ~ (* hdlname = "registerfile 4595" *) _0999_[2];
  assign _1033_ = _1028_ & (* hdlname = "registerfile 4596" *) _1032_;
  assign _1034_ = _1028_ & (* hdlname = "registerfile 4597" *) _0999_[2];
  assign _1035_ = _1029_ & (* hdlname = "registerfile 4598" *) _1032_;
  assign _1036_ = _1029_ & (* hdlname = "registerfile 4599" *) _0999_[2];
  assign _1037_ = _1030_ & (* hdlname = "registerfile 4600" *) _1032_;
  assign _1038_ = _1030_ & (* hdlname = "registerfile 4601" *) _0999_[2];
  assign _1039_ = _1031_ & (* hdlname = "registerfile 4602" *) _1032_;
  assign _1040_ = _1031_ & (* hdlname = "registerfile 4603" *) _0999_[2];
  assign _1041_ = ~ (* hdlname = "registerfile 4605" *) _0999_[1];
  assign _1042_ = _1033_ & (* hdlname = "registerfile 4606" *) _1041_;
  assign _1043_ = _1033_ & (* hdlname = "registerfile 4607" *) _0999_[1];
  assign _1044_ = _1034_ & (* hdlname = "registerfile 4608" *) _1041_;
  assign _1045_ = _1034_ & (* hdlname = "registerfile 4609" *) _0999_[1];
  assign _1046_ = _1035_ & (* hdlname = "registerfile 4610" *) _1041_;
  assign _1047_ = _1035_ & (* hdlname = "registerfile 4611" *) _0999_[1];
  assign _1048_ = _1036_ & (* hdlname = "registerfile 4612" *) _1041_;
  assign _1049_ = _1036_ & (* hdlname = "registerfile 4613" *) _0999_[1];
  assign _1050_ = _1037_ & (* hdlname = "registerfile 4614" *) _1041_;
  assign _1051_ = _1037_ & (* hdlname = "registerfile 4615" *) _0999_[1];
  assign _1052_ = _1038_ & (* hdlname = "registerfile 4616" *) _1041_;
  assign _1053_ = _1038_ & (* hdlname = "registerfile 4617" *) _0999_[1];
  assign _1054_ = _1039_ & (* hdlname = "registerfile 4618" *) _1041_;
  assign _1055_ = _1039_ & (* hdlname = "registerfile 4619" *) _0999_[1];
  assign _1056_ = _1040_ & (* hdlname = "registerfile 4620" *) _1041_;
  assign _1057_ = _1040_ & (* hdlname = "registerfile 4621" *) _0999_[1];
  assign _1058_ = ~ (* hdlname = "registerfile 4623" *) _0999_[0];
  assign _1155_ = _1059_ ? (* hdlname = "registerfile 4657" *) \registerfile.writedata  : \registerfile.rdata [31:0];
  assign _1156_ = _1060_ ? (* hdlname = "registerfile 4659" *) \registerfile.writedata  : \registerfile.rdata [63:32];
  assign _1157_ = _1061_ ? (* hdlname = "registerfile 4661" *) \registerfile.writedata  : \registerfile.rdata [95:64];
  assign _1158_ = _1062_ ? (* hdlname = "registerfile 4663" *) \registerfile.writedata  : \registerfile.rdata [127:96];
  assign _1159_ = _1063_ ? (* hdlname = "registerfile 4665" *) \registerfile.writedata  : \registerfile.rdata [159:128];
  assign _1160_ = _1064_ ? (* hdlname = "registerfile 4667" *) \registerfile.writedata  : \registerfile.rdata [191:160];
  assign _1161_ = _1065_ ? (* hdlname = "registerfile 4669" *) \registerfile.writedata  : \registerfile.rdata [223:192];
  assign _1162_ = _1066_ ? (* hdlname = "registerfile 4671" *) \registerfile.writedata  : \registerfile.rdata [255:224];
  assign _1163_ = _1067_ ? (* hdlname = "registerfile 4673" *) \registerfile.writedata  : \registerfile.rdata [287:256];
  assign _1164_ = _1068_ ? (* hdlname = "registerfile 4675" *) \registerfile.writedata  : \registerfile.rdata [319:288];
  assign _1165_ = _1069_ ? (* hdlname = "registerfile 4677" *) \registerfile.writedata  : \registerfile.rdata [351:320];
  assign _1166_ = _1070_ ? (* hdlname = "registerfile 4679" *) \registerfile.writedata  : \registerfile.rdata [383:352];
  assign _1167_ = _1071_ ? (* hdlname = "registerfile 4681" *) \registerfile.writedata  : \registerfile.rdata [415:384];
  assign _1168_ = _1072_ ? (* hdlname = "registerfile 4683" *) \registerfile.writedata  : \registerfile.rdata [447:416];
  assign _1169_ = _1073_ ? (* hdlname = "registerfile 4685" *) \registerfile.writedata  : \registerfile.rdata [479:448];
  assign _1170_ = _1074_ ? (* hdlname = "registerfile 4687" *) \registerfile.writedata  : \registerfile.rdata [511:480];
  assign _1171_ = _1075_ ? (* hdlname = "registerfile 4689" *) \registerfile.writedata  : \registerfile.rdata [543:512];
  assign _1172_ = _1076_ ? (* hdlname = "registerfile 4691" *) \registerfile.writedata  : \registerfile.rdata [575:544];
  assign _1173_ = _1077_ ? (* hdlname = "registerfile 4693" *) \registerfile.writedata  : \registerfile.rdata [607:576];
  assign _1174_ = _1078_ ? (* hdlname = "registerfile 4695" *) \registerfile.writedata  : \registerfile.rdata [639:608];
  assign _1175_ = _1079_ ? (* hdlname = "registerfile 4697" *) \registerfile.writedata  : \registerfile.rdata [671:640];
  assign _1176_ = _1080_ ? (* hdlname = "registerfile 4699" *) \registerfile.writedata  : \registerfile.rdata [703:672];
  assign _1177_ = _1081_ ? (* hdlname = "registerfile 4701" *) \registerfile.writedata  : \registerfile.rdata [735:704];
  assign _1178_ = _1082_ ? (* hdlname = "registerfile 4703" *) \registerfile.writedata  : \registerfile.rdata [767:736];
  assign _1179_ = _1083_ ? (* hdlname = "registerfile 4705" *) \registerfile.writedata  : \registerfile.rdata [799:768];
  assign _1180_ = _1084_ ? (* hdlname = "registerfile 4707" *) \registerfile.writedata  : \registerfile.rdata [831:800];
  assign _1181_ = _1085_ ? (* hdlname = "registerfile 4709" *) \registerfile.writedata  : \registerfile.rdata [863:832];
  assign _1182_ = _1086_ ? (* hdlname = "registerfile 4711" *) \registerfile.writedata  : \registerfile.rdata [895:864];
  assign _1183_ = _1087_ ? (* hdlname = "registerfile 4713" *) \registerfile.writedata  : \registerfile.rdata [927:896];
  assign _1184_ = _1088_ ? (* hdlname = "registerfile 4715" *) \registerfile.writedata  : \registerfile.rdata [959:928];
  assign _1185_ = _1089_ ? (* hdlname = "registerfile 4717" *) \registerfile.writedata  : \registerfile.rdata [991:960];
  assign _1186_ = _1090_ ? (* hdlname = "registerfile 4719" *) \registerfile.writedata  : \registerfile.rdata [1023:992];
  assign _1188_ = ldpc ? (* hdlname = "regpc 4067" *) inpc : \daru1.datapath.addrreg.inreg ;
  assign m2wb_mem_res_next = e2m_ctrl_word_curr[12] ? (* hdlname = "sulu 5008" *) { \daru2.datapath.reg0.outreg [7], \daru2.datapath.reg0.outreg [7], \daru2.datapath.reg0.outreg [7], \daru2.datapath.reg0.outreg [7], \daru2.datapath.reg0.outreg [7], \daru2.datapath.reg0.outreg [7], \daru2.datapath.reg0.outreg [7], \daru2.datapath.reg0.outreg [7], \daru2.datapath.reg0.outreg [7], \daru2.datapath.reg0.outreg [7], \daru2.datapath.reg0.outreg [7], \daru2.datapath.reg0.outreg [7], \daru2.datapath.reg0.outreg [7], \daru2.datapath.reg0.outreg [7], \daru2.datapath.reg0.outreg [7], \daru2.datapath.reg0.outreg [7], \daru2.datapath.reg0.outreg [7], \daru2.datapath.reg0.outreg [7], \daru2.datapath.reg0.outreg [7], \daru2.datapath.reg0.outreg [7], \daru2.datapath.reg0.outreg [7], \daru2.datapath.reg0.outreg [7], \daru2.datapath.reg0.outreg [7], \daru2.datapath.reg0.outreg [7], \daru2.datapath.reg0.outreg [7:0] } : _1189_;
  assign _1189_ = e2m_ctrl_word_curr[13] ? (* hdlname = "sulu 5032" *) { \daru2.datapath.reg0.outreg [15], \daru2.datapath.reg0.outreg [15], \daru2.datapath.reg0.outreg [15], \daru2.datapath.reg0.outreg [15], \daru2.datapath.reg0.outreg [15], \daru2.datapath.reg0.outreg [15], \daru2.datapath.reg0.outreg [15], \daru2.datapath.reg0.outreg [15], \daru2.datapath.reg0.outreg [15], \daru2.datapath.reg0.outreg [15], \daru2.datapath.reg0.outreg [15], \daru2.datapath.reg0.outreg [15], \daru2.datapath.reg0.outreg [15], \daru2.datapath.reg0.outreg [15], \daru2.datapath.reg0.outreg [15], \daru2.datapath.reg0.outreg [15], \daru2.datapath.reg0.outreg  } : _1190_;
  assign _1190_ = e2m_ctrl_word_curr[14] ? (* hdlname = "sulu 5033" *) { \daru2.datapath.reg1.outreg , \daru2.datapath.reg0.outreg  } : 32'd0;
  assign \aau.clk  = clk;
  assign \aau.dividedbyzeroflag  = \aau.division.dividedbyzeroflag ;
  assign \aau.division.clk  = clk;
  assign \aau.division.ddin  = \aau.division.tcldividend.aout ;
  assign \aau.division.dividend  = \aau.ain ;
  assign \aau.division.divisor  = \aau.bin ;
  assign \aau.division.donesdiv  = \aau.division.unsigneddiv.controllerdiv.donediv ;
  assign \aau.division.drin  = \aau.division.tcldivisor.aout ;
  assign \aau.division.enr  = \aau.division.endd ;
  assign \aau.division.qout  = \aau.division.tclq.aout ;
  assign \aau.division.qp  = \aau.division.tclq.ain ;
  assign \aau.division.remout  = \aau.division.tclrem.aout ;
  assign \aau.division.remp  = \aau.division.unsigneddiv.datapathdiv.rprev ;
  assign \aau.division.rst  = rst;
  assign \aau.division.sync_rst  = d2e_rst_def;
  assign \aau.division.tcldividend.ain  = \aau.ain ;
  assign \aau.division.tcldividend.en  = \aau.division.endd ;
  assign \aau.division.tcldivisor.ain  = \aau.bin ;
  assign \aau.division.tcldivisor.en  = \aau.division.endr ;
  assign \aau.division.tclq.en  = \aau.division.enq ;
  assign \aau.division.tclrem.ain  = \aau.division.unsigneddiv.datapathdiv.rprev [31:0];
  assign \aau.division.tclrem.en  = \aau.division.endd ;
  assign \aau.division.unsigneddiv.clk  = clk;
  assign \aau.division.unsigneddiv.controllerdiv.clk  = clk;
  assign \aau.division.unsigneddiv.controllerdiv.counter.clk  = clk;
  assign \aau.division.unsigneddiv.controllerdiv.counter.cocnt  = \aau.division.unsigneddiv.controllerdiv.cocnt ;
  assign \aau.division.unsigneddiv.controllerdiv.counter.cocntp  = \aau.division.unsigneddiv.controllerdiv.cocnt ;
  assign \aau.division.unsigneddiv.controllerdiv.counter.initvalue  = 6'h1e;
  assign \aau.division.unsigneddiv.controllerdiv.counter.outcnt  = \aau.division.unsigneddiv.controllerdiv.counter.temp ;
  assign \aau.division.unsigneddiv.controllerdiv.counter.rst  = rst;
  assign \aau.division.unsigneddiv.controllerdiv.counter.zerocnt  = 1'h0;
  assign \aau.division.unsigneddiv.controllerdiv.inccnt  = \aau.division.unsigneddiv.controllerdiv.counter.inccnt ;
  assign \aau.division.unsigneddiv.controllerdiv.initcnt  = \aau.division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \aau.division.unsigneddiv.controllerdiv.ldregm  = \aau.division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \aau.division.unsigneddiv.controllerdiv.ldregr  = \aau.division.unsigneddiv.controllerdiv.counter.inccnt ;
  assign \aau.division.unsigneddiv.controllerdiv.qq0  = \aau.division.unsigneddiv.datapathdiv.smux ;
  assign \aau.division.unsigneddiv.controllerdiv.r33  = \aau.division.unsigneddiv.datapathdiv.sub [32];
  assign \aau.division.unsigneddiv.controllerdiv.rst  = rst;
  assign \aau.division.unsigneddiv.controllerdiv.seldividend  = \aau.division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \aau.division.unsigneddiv.controllerdiv.selline1  = \aau.division.unsigneddiv.controllerdiv.counter.inccnt ;
  assign \aau.division.unsigneddiv.controllerdiv.shlregr  = \aau.division.unsigneddiv.controllerdiv.shlregq ;
  assign \aau.division.unsigneddiv.controllerdiv.shrregq  = 1'h0;
  assign \aau.division.unsigneddiv.controllerdiv.shrregr  = 1'h0;
  assign \aau.division.unsigneddiv.controllerdiv.startdiv  = \aau.division.safestart ;
  assign \aau.division.unsigneddiv.controllerdiv.sync_rst  = d2e_rst_def;
  assign \aau.division.unsigneddiv.controllerdiv.zerocnt  = 1'h0;
  assign \aau.division.unsigneddiv.controllerdiv.zeroregm  = 1'h0;
  assign \aau.division.unsigneddiv.controllerdiv.zeroregq  = 1'h0;
  assign \aau.division.unsigneddiv.controllerdiv.zeroregr  = \aau.division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \aau.division.unsigneddiv.datapathdiv.addresult  = \aau.division.unsigneddiv.datapathdiv.mux34b.w ;
  assign \aau.division.unsigneddiv.datapathdiv.clk  = clk;
  assign \aau.division.unsigneddiv.datapathdiv.dividend  = \aau.division.tcldividend.aout ;
  assign \aau.division.unsigneddiv.datapathdiv.divisor  = \aau.division.tcldivisor.aout ;
  assign \aau.division.unsigneddiv.datapathdiv.divisorp  = { 1'h0, \aau.division.tcldivisor.aout  };
  assign \aau.division.unsigneddiv.datapathdiv.ldregm  = \aau.division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \aau.division.unsigneddiv.datapathdiv.ldregq  = \aau.division.unsigneddiv.controllerdiv.ldregq ;
  assign \aau.division.unsigneddiv.datapathdiv.ldregr  = \aau.division.unsigneddiv.controllerdiv.counter.inccnt ;
  assign \aau.division.unsigneddiv.datapathdiv.leftbitoutq  = \aau.division.unsigneddiv.datapathdiv.shregq.6866.seroutp ;
  assign \aau.division.unsigneddiv.datapathdiv.line1  = { \aau.division.tclq.ain [31:1], \aau.division.unsigneddiv.datapathdiv.smux  };
  assign \aau.division.unsigneddiv.datapathdiv.mux33b.a  = \aau.division.tcldividend.aout ;
  assign \aau.division.unsigneddiv.datapathdiv.mux33b.b  = { \aau.division.tclq.ain [31:1], \aau.division.unsigneddiv.datapathdiv.smux  };
  assign \aau.division.unsigneddiv.datapathdiv.mux33b.s0  = \aau.division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \aau.division.unsigneddiv.datapathdiv.mux33b.s1  = \aau.division.unsigneddiv.controllerdiv.counter.inccnt ;
  assign \aau.division.unsigneddiv.datapathdiv.mux34b.a [32] = \aau.division.unsigneddiv.datapathdiv.sub [32];
  assign \aau.division.unsigneddiv.datapathdiv.mux34b.b  = \aau.division.unsigneddiv.datapathdiv.rprev ;
  assign \aau.division.unsigneddiv.datapathdiv.mux34b.s0  = \aau.division.unsigneddiv.datapathdiv.smux ;
  assign \aau.division.unsigneddiv.datapathdiv.mux34b.s1  = \aau.division.unsigneddiv.datapathdiv.sub [32];
  assign \aau.division.unsigneddiv.datapathdiv.outmux1  = \aau.division.unsigneddiv.datapathdiv.mux33b.w ;
  assign \aau.division.unsigneddiv.datapathdiv.q  = \aau.division.tclq.ain ;
  assign \aau.division.unsigneddiv.datapathdiv.qprev  = \aau.division.tclq.ain ;
  assign \aau.division.unsigneddiv.datapathdiv.qq0  = \aau.division.unsigneddiv.datapathdiv.smux ;
  assign \aau.division.unsigneddiv.datapathdiv.r33  = \aau.division.unsigneddiv.datapathdiv.sub [32];
  assign \aau.division.unsigneddiv.datapathdiv.regm.clk  = clk;
  assign \aau.division.unsigneddiv.datapathdiv.regm.inreg  = { 1'h0, \aau.division.tcldivisor.aout  };
  assign \aau.division.unsigneddiv.datapathdiv.regm.load  = \aau.division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \aau.division.unsigneddiv.datapathdiv.regm.outreg  = \aau.division.unsigneddiv.datapathdiv.m ;
  assign \aau.division.unsigneddiv.datapathdiv.regm.rst  = rst;
  assign \aau.division.unsigneddiv.datapathdiv.regm.zero  = 1'h0;
  assign \aau.division.unsigneddiv.datapathdiv.remainder  = \aau.division.unsigneddiv.datapathdiv.rprev ;
  assign \aau.division.unsigneddiv.datapathdiv.rst  = rst;
  assign \aau.division.unsigneddiv.datapathdiv.seldividend  = \aau.division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \aau.division.unsigneddiv.datapathdiv.selline1  = \aau.division.unsigneddiv.controllerdiv.counter.inccnt ;
  assign \aau.division.unsigneddiv.datapathdiv.shlregq  = \aau.division.unsigneddiv.controllerdiv.shlregq ;
  assign \aau.division.unsigneddiv.datapathdiv.shlregr  = \aau.division.unsigneddiv.controllerdiv.shlregq ;
  assign \aau.division.unsigneddiv.datapathdiv.shregq.6866.outreg_t  = \aau.division.tclq.ain ;
  assign \aau.division.unsigneddiv.datapathdiv.shregq.clk  = clk;
  assign \aau.division.unsigneddiv.datapathdiv.shregq.inreg  = \aau.division.unsigneddiv.datapathdiv.mux33b.w ;
  assign \aau.division.unsigneddiv.datapathdiv.shregq.load  = \aau.division.unsigneddiv.controllerdiv.ldregq ;
  assign \aau.division.unsigneddiv.datapathdiv.shregq.outreg  = \aau.division.tclq.ain ;
  assign \aau.division.unsigneddiv.datapathdiv.shregq.rst  = rst;
  assign \aau.division.unsigneddiv.datapathdiv.shregq.serin  = 1'h0;
  assign \aau.division.unsigneddiv.datapathdiv.shregq.serout  = \aau.division.unsigneddiv.datapathdiv.shregq.6866.seroutp ;
  assign \aau.division.unsigneddiv.datapathdiv.shregq.shiftl  = \aau.division.unsigneddiv.controllerdiv.shlregq ;
  assign \aau.division.unsigneddiv.datapathdiv.shregq.shiftr  = 1'h0;
  assign \aau.division.unsigneddiv.datapathdiv.shregq.zero  = 1'h0;
  assign \aau.division.unsigneddiv.datapathdiv.shregr.6833.outreg_t  = \aau.division.unsigneddiv.datapathdiv.rprev ;
  assign \aau.division.unsigneddiv.datapathdiv.shregr.clk  = clk;
  assign \aau.division.unsigneddiv.datapathdiv.shregr.inreg  = \aau.division.unsigneddiv.datapathdiv.mux34b.w ;
  assign \aau.division.unsigneddiv.datapathdiv.shregr.load  = \aau.division.unsigneddiv.controllerdiv.counter.inccnt ;
  assign \aau.division.unsigneddiv.datapathdiv.shregr.outreg  = \aau.division.unsigneddiv.datapathdiv.rprev ;
  assign \aau.division.unsigneddiv.datapathdiv.shregr.rst  = rst;
  assign \aau.division.unsigneddiv.datapathdiv.shregr.serin  = \aau.division.unsigneddiv.datapathdiv.shregq.6866.seroutp ;
  assign \aau.division.unsigneddiv.datapathdiv.shregr.shiftl  = \aau.division.unsigneddiv.controllerdiv.shlregq ;
  assign \aau.division.unsigneddiv.datapathdiv.shregr.shiftr  = 1'h0;
  assign \aau.division.unsigneddiv.datapathdiv.shregr.zero  = \aau.division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \aau.division.unsigneddiv.datapathdiv.shrregq  = 1'h0;
  assign \aau.division.unsigneddiv.datapathdiv.shrregr  = 1'h0;
  assign \aau.division.unsigneddiv.datapathdiv.sub [31:0] = \aau.division.unsigneddiv.datapathdiv.mux34b.a [31:0];
  assign \aau.division.unsigneddiv.datapathdiv.zeroregm  = 1'h0;
  assign \aau.division.unsigneddiv.datapathdiv.zeroregq  = 1'h0;
  assign \aau.division.unsigneddiv.datapathdiv.zeroregr  = \aau.division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \aau.division.unsigneddiv.dividend  = \aau.division.tcldividend.aout ;
  assign \aau.division.unsigneddiv.divisor  = \aau.division.tcldivisor.aout ;
  assign \aau.division.unsigneddiv.donediv  = \aau.division.unsigneddiv.controllerdiv.donediv ;
  assign \aau.division.unsigneddiv.ldregm  = \aau.division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \aau.division.unsigneddiv.ldregq  = \aau.division.unsigneddiv.controllerdiv.ldregq ;
  assign \aau.division.unsigneddiv.ldregr  = \aau.division.unsigneddiv.controllerdiv.counter.inccnt ;
  assign \aau.division.unsigneddiv.q  = \aau.division.tclq.ain ;
  assign \aau.division.unsigneddiv.qq0  = \aau.division.unsigneddiv.datapathdiv.smux ;
  assign \aau.division.unsigneddiv.r33  = \aau.division.unsigneddiv.datapathdiv.sub [32];
  assign \aau.division.unsigneddiv.remainder  = \aau.division.unsigneddiv.datapathdiv.rprev ;
  assign \aau.division.unsigneddiv.rst  = rst;
  assign \aau.division.unsigneddiv.seldividend  = \aau.division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \aau.division.unsigneddiv.selline1  = \aau.division.unsigneddiv.controllerdiv.counter.inccnt ;
  assign \aau.division.unsigneddiv.shlregq  = \aau.division.unsigneddiv.controllerdiv.shlregq ;
  assign \aau.division.unsigneddiv.shlregr  = \aau.division.unsigneddiv.controllerdiv.shlregq ;
  assign \aau.division.unsigneddiv.shrregq  = 1'h0;
  assign \aau.division.unsigneddiv.shrregr  = 1'h0;
  assign \aau.division.unsigneddiv.startdiv  = \aau.division.safestart ;
  assign \aau.division.unsigneddiv.sync_rst  = d2e_rst_def;
  assign \aau.division.unsigneddiv.zeroregm  = 1'h0;
  assign \aau.division.unsigneddiv.zeroregq  = 1'h0;
  assign \aau.division.unsigneddiv.zeroregr  = \aau.division.unsigneddiv.controllerdiv.counter.initcnt ;
  assign \aau.donediv  = \aau.division.unsigneddiv.controllerdiv.donediv ;
  assign \aau.multiplication.clk  = clk;
  assign \aau.multiplication.controller.clk  = clk;
  assign \aau.multiplication.controller.cnt_rst  = 1'h0;
  assign \aau.multiplication.controller.counter.clk  = clk;
  assign \aau.multiplication.controller.counter.cocnt  = \aau.multiplication.controller.co ;
  assign \aau.multiplication.controller.counter.cocntp  = \aau.multiplication.controller.co ;
  assign \aau.multiplication.controller.counter.inccnt  = \aau.multiplication.controller.cnt_en ;
  assign \aau.multiplication.controller.counter.initvalue  = 6'h1f;
  assign \aau.multiplication.controller.counter.outcnt  = \aau.multiplication.controller.counter.temp ;
  assign \aau.multiplication.controller.counter.rst  = rst;
  assign \aau.multiplication.controller.counter.zerocnt  = 1'h0;
  assign \aau.multiplication.controller.done  = \aau.donemult ;
  assign \aau.multiplication.controller.initcnt  = \aau.multiplication.controller.counter.initcnt ;
  assign \aau.multiplication.controller.ldm  = \aau.multiplication.controller.counter.initcnt ;
  assign \aau.multiplication.controller.ldmr  = \aau.multiplication.controller.counter.initcnt ;
  assign \aau.multiplication.controller.ldp  = \aau.multiplication.controller.cnt_en ;
  assign \aau.multiplication.controller.op  = \aau.multiplication.datapath.mrreg.6594.outreg_t [1:0];
  assign \aau.multiplication.controller.rst  = rst;
  assign \aau.multiplication.controller.shrmr  = \aau.multiplication.controller.cnt_en ;
  assign \aau.multiplication.controller.sync_rst  = d2e_rst_def;
  assign \aau.multiplication.controller.zerop  = \aau.multiplication.controller.counter.initcnt ;
  assign \aau.multiplication.datapath.addsub.a  = \aau.multiplication.datapath.addsub.add.a ;
  assign \aau.multiplication.datapath.addsub.add.addresult  = \aau.multiplication.datapath.addsub.add.add [32:0];
  assign \aau.multiplication.datapath.addsub.add.carryout  = \aau.multiplication.datapath.addsub.add.add [33];
  assign \aau.multiplication.datapath.addsub.add.cin  = \aau.multiplication.controller.subsel ;
  assign \aau.multiplication.datapath.addsub.addsubresult  = \aau.multiplication.datapath.addsub.add.add [32:0];
  assign \aau.multiplication.datapath.addsub.bsel  = \aau.multiplication.datapath.addsub.add.b ;
  assign \aau.multiplication.datapath.addsub.cout  = \aau.multiplication.datapath.addsub.add.add [33];
  assign \aau.multiplication.datapath.addsub.outres  = \aau.multiplication.datapath.addsub.add.add [32:0];
  assign \aau.multiplication.datapath.addsub.pass  = 1'h0;
  assign \aau.multiplication.datapath.addsub.subsel  = \aau.multiplication.controller.subsel ;
  assign \aau.multiplication.datapath.clk  = clk;
  assign \aau.multiplication.datapath.ldm  = \aau.multiplication.controller.counter.initcnt ;
  assign \aau.multiplication.datapath.ldmr  = \aau.multiplication.controller.counter.initcnt ;
  assign \aau.multiplication.datapath.ldp  = \aau.multiplication.controller.cnt_en ;
  assign \aau.multiplication.datapath.m  = \aau.in1mult ;
  assign \aau.multiplication.datapath.mr  = \aau.in2mult ;
  assign \aau.multiplication.datapath.mreg.clk  = clk;
  assign \aau.multiplication.datapath.mreg.inreg  = \aau.in1mult ;
  assign \aau.multiplication.datapath.mreg.load  = \aau.multiplication.controller.counter.initcnt ;
  assign \aau.multiplication.datapath.mreg.outreg  = \aau.multiplication.datapath.addsub.b ;
  assign \aau.multiplication.datapath.mreg.rst  = rst;
  assign \aau.multiplication.datapath.mreg.zero  = 1'h0;
  assign \aau.multiplication.datapath.mrreg.clk  = clk;
  assign \aau.multiplication.datapath.mrreg.inreg  = { \aau.in2mult , 1'h0 };
  assign \aau.multiplication.datapath.mrreg.load  = \aau.multiplication.controller.counter.initcnt ;
  assign \aau.multiplication.datapath.mrreg.outreg  = \aau.multiplication.datapath.mrreg.6594.outreg_t ;
  assign \aau.multiplication.datapath.mrreg.rst  = rst;
  assign \aau.multiplication.datapath.mrreg.shiftl  = 1'h0;
  assign \aau.multiplication.datapath.mrreg.shiftr  = \aau.multiplication.controller.cnt_en ;
  assign \aau.multiplication.datapath.mrreg.zero  = 1'h0;
  assign \aau.multiplication.datapath.op  = \aau.multiplication.datapath.mrreg.6594.outreg_t [1:0];
  assign \aau.multiplication.datapath.outm  = \aau.multiplication.datapath.addsub.b ;
  assign \aau.multiplication.datapath.outmr  = \aau.multiplication.datapath.mrreg.6594.outreg_t ;
  assign \aau.multiplication.datapath.p  = { \aau.multiplication.datapath.addsub.add.a , \aau.multiplication.datapath.mrreg.6594.outreg_t [33:1] };
  assign \aau.multiplication.datapath.pout  = \aau.multiplication.datapath.addsub.add.a ;
  assign \aau.multiplication.datapath.preg.clk  = clk;
  assign \aau.multiplication.datapath.preg.inreg  = \aau.multiplication.datapath.pin ;
  assign \aau.multiplication.datapath.preg.load  = \aau.multiplication.controller.cnt_en ;
  assign \aau.multiplication.datapath.preg.outreg  = \aau.multiplication.datapath.addsub.add.a ;
  assign \aau.multiplication.datapath.preg.rst  = rst;
  assign \aau.multiplication.datapath.preg.zero  = \aau.multiplication.controller.counter.initcnt ;
  assign \aau.multiplication.datapath.result  = \aau.multiplication.datapath.addsub.add.add [32:0];
  assign \aau.multiplication.datapath.rst  = rst;
  assign \aau.multiplication.datapath.seimr  = \aau.multiplication.datapath.mrreg.serin ;
  assign \aau.multiplication.datapath.sel  = \aau.multiplication.controller.sel ;
  assign \aau.multiplication.datapath.shmr  = { \aau.in2mult , 1'h0 };
  assign \aau.multiplication.datapath.shrmr  = \aau.multiplication.controller.cnt_en ;
  assign \aau.multiplication.datapath.subsel  = \aau.multiplication.controller.subsel ;
  assign \aau.multiplication.datapath.zerop  = \aau.multiplication.controller.counter.initcnt ;
  assign \aau.multiplication.donebooth  = \aau.donemult ;
  assign \aau.multiplication.ldm  = \aau.multiplication.controller.counter.initcnt ;
  assign \aau.multiplication.ldmr  = \aau.multiplication.controller.counter.initcnt ;
  assign \aau.multiplication.ldp  = \aau.multiplication.controller.cnt_en ;
  assign \aau.multiplication.m  = \aau.in1mult ;
  assign \aau.multiplication.mr  = \aau.in2mult ;
  assign \aau.multiplication.op  = \aau.multiplication.datapath.mrreg.6594.outreg_t [1:0];
  assign \aau.multiplication.p  = { \aau.multiplication.datapath.addsub.add.a , \aau.multiplication.datapath.mrreg.6594.outreg_t [33:1] };
  assign \aau.multiplication.rst  = rst;
  assign \aau.multiplication.sel  = \aau.multiplication.controller.sel ;
  assign \aau.multiplication.shrmr  = \aau.multiplication.controller.cnt_en ;
  assign \aau.multiplication.startbooth  = \aau.multiplication.controller.startbooth ;
  assign \aau.multiplication.subsel  = \aau.multiplication.controller.subsel ;
  assign \aau.multiplication.sync_rst  = d2e_rst_def;
  assign \aau.multiplication.zerop  = \aau.multiplication.controller.counter.initcnt ;
  assign \aau.quotient  = \aau.division.tclq.aout ;
  assign \aau.remainder  = \aau.division.tclrem.aout ;
  assign \aau.resmult  = { \aau.multiplication.datapath.addsub.add.a , \aau.multiplication.datapath.mrreg.6594.outreg_t [33:1] };
  assign \aau.resmulth  = { \aau.multiplication.datapath.addsub.add.a [30:0], \aau.multiplication.datapath.mrreg.6594.outreg_t [33] };
  assign \aau.resmultl  = \aau.multiplication.datapath.mrreg.6594.outreg_t [32:1];
  assign \aau.rst  = rst;
  assign \aau.signedsigned  = d2e_ctrl_word_curr[38];
  assign \aau.signedunsigned  = d2e_ctrl_word_curr[39];
  assign \aau.signedunsignedbardiv  = \aau.division.signedunsignedbar ;
  assign \aau.startdivideaau  = \aau.division.startsdiv ;
  assign \aau.startmultaau  = \aau.multiplication.controller.startbooth ;
  assign \aau.sync_rst  = d2e_rst_def;
  assign \aau.unsignedunsigned  = d2e_ctrl_word_curr[40];
  assign \addsub.a  = \aau.ain ;
  assign \addsub.add.a  = \aau.ain ;
  assign \addsub.add.addresult  = \addsub.add.add [31:0];
  assign \addsub.add.carryout  = \addsub.add.add [32];
  assign \addsub.add.cin  = d2e_ctrl_word_curr[17];
  assign \addsub.addsubresult  = \addsub.add.add [31:0];
  assign \addsub.b  = \aau.bin ;
  assign \addsub.bsel  = \addsub.add.b ;
  assign \addsub.cout  = \addsub.add.add [32];
  assign \addsub.pass  = d2e_ctrl_word_curr[18];
  assign \addsub.subsel  = d2e_ctrl_word_curr[17];
  assign asuresult = \addsub.outres ;
  assign branch_taken = branch_taken_int;
  assign \bsu.nsh  = \aau.bin [4:0];
  assign \bsu.selsh  = d2e_ctrl_word_curr[16:15];
  assign \bsu.shin  = \aau.ain ;
  assign bsuresult = \bsu.shout ;
  assign bypass_zero_first_operand = hazm_zero_first_operand;
  assign bypass_zero_second_operand = hazm_zero_second_operand;
  assign bytestoreaddaru1 = \daru1.datapath.bytestoread_temp ;
  assign causecode = \csrisl.causecode ;
  assign causecodetemp = { \csrisl.causecode [31], \csrisl.causecode [4:0] };
  assign ccmie = { \interrcheckcausedetection.miecc [31:16], \register_bank.mieccregister.outreg [15:12], \interrcheckcausedetection.miecc [11], \register_bank.mieccregister.outreg [10:9], \interrcheckcausedetection.miecc [8:7], \register_bank.mieccregister.outreg [6:5], \interrcheckcausedetection.miecc [4:3], \register_bank.mieccregister.outreg [2:1], \interrcheckcausedetection.miecc [0] };
  assign ccmiefield = \interrcheckcausedetection.miefieldcc ;
  assign ccmip = \csrisl.ccmip ;
  assign ccuiefield = \interrcheckcausedetection.uiefieldcc ;
  assign cmp_op2 = \comparator.bin ;
  assign cntoutput = \csraddressingdecoder.cntoutput ;
  assign \comparator.ainp [30:0] = \comparator.ain [30:0];
  assign \comparator.binp [30:0] = \comparator.bin [30:0];
  assign \comparator.comparesignedunsignedbar  = d2e_ctrl_word_curr[2];
  assign comparisonresult = { 31'h00000000, \registerfile.setone  };
  assign completedaau = \aau.completeaau ;
  assign completedaau_aau = \aau.completeaau ;
  assign completedaau_int = \aau.completeaau ;
  assign completeddaru1_def = completeddaru1_def_int;
  assign \csr_address_ctrl.addressregbank  = addressregbank;
  assign { \csraddressingdecoder.outaddr [11:7], \csraddressingdecoder.outaddr [5:3] } = 8'h30;
  assign \csrcounter.clk  = clk;
  assign \csrcounter.dncnt  = dncntcsr;
  assign \csrcounter.ldcnt  = ldcntcsr;
  assign \csrcounter.ldvalue  = ldvaluecsr;
  assign \csrcounter.outcnt  = \csraddressingdecoder.cntoutput ;
  assign \csrcounter.rst  = rst;
  assign \csrcounter.temp  = \csraddressingdecoder.cntoutput ;
  assign \csrcounter.upcnt  = upcntcsr;
  assign \csrcounter.zerocnt  = zerocntcsr;
  assign \csrisl.clr  = clrcsr;
  assign \csrisl.curprv  = curprv;
  assign \csrisl.ir19_15  = m2wb_instr_curr[19:15];
  assign \csrisl.machinestatusalterationpostcsr  = machinestatusalterationpostcsr;
  assign \csrisl.machinestatusalterationprecsr  = machinestatusalterationprecsr;
  assign \csrisl.mirroruser  = mirrorusercu;
  assign \csrisl.pc  = csr_pc;
  assign \csrisl.previousprv  = \csrisl.outcsr [12:11];
  assign \csrisl.previousprv_int  = \csrisl.outcsr [12:11];
  assign \csrisl.selcause  = selcause_csr;
  assign \csrisl.selim  = selimmcsr;
  assign \csrisl.selmip  = selccmip_csr;
  assign \csrisl.selp1  = selp1csr;
  assign \csrisl.selpc  = selpc_csr;
  assign \csrisl.selreadwrite  = selreadwritecsr;
  assign \csrisl.seltval  = seltval_csr;
  assign \csrisl.set  = setcsr;
  assign \csrisl.userstatusalterationpostcsr  = userstatusalterationpostcsr;
  assign \csrisl.userstatusalterationprecsr  = userstatusalterationprecsr;
  assign d2e_alu_op1_curr = \aau.ain ;
  assign d2e_alu_op2_curr = \aau.bin ;
  assign d2e_ctrl_word_next = { 4'hz, iscsrinstruction, cmp_selop2, cmp_selaluop2, selmem, selpc4, selalu, ret_from_epc, inst_type, forced_rb_read, selcsraddrfrominst, checkmisaligneddawu, writerb_inst, selcsr, nbytes, selaah, selaal, unsignedunsigned, signedunsigned, signedsigned, startdivideaau, startmultiplyaau, startdaru, startdawu, sellogic, muxcode, selauipc, pass, addsubbar, selshift, load, ldhalfsigned, ldbytesigned, selimm, selp2, selp1, selaau, selasu, selllu, selbsu, seljl, selpc, comparedsignedunsignedbar, setzeroorone, writeregfile };
  assign d2e_op1_curr = \comparator.ain ;
  assign \daru1.addrin  = \daru1.datapath.addrreg.inreg ;
  assign \daru1.addrout  = \daru1.datapath.addrout ;
  assign \daru1.bytestoread  = \daru1.datapath.bytestoread_temp ;
  assign \daru1.checkmisaligneddaru  = 1'h1;
  assign \daru1.clk  = clk;
  assign \daru1.cocnt  = \daru1.controller.cocnt ;
  assign \daru1.completedaru  = completeddaru1;
  assign \daru1.controller.clk  = clk;
  assign \daru1.controller.completedaru  = completeddaru1;
  assign \daru1.controller.datainstrbar  = 1'h0;
  assign \daru1.controller.inccnt  = \daru1.controller.enabledata ;
  assign \daru1.controller.initreading  = \daru1.controller.initcnt ;
  assign \daru1.controller.ldaddr  = \daru1.controller.initcnt ;
  assign \daru1.controller.ldnumbytes  = \daru1.controller.initcnt ;
  assign \daru1.controller.memready  = memready1;
  assign \daru1.controller.readmem  = \daru1.controller.enableaddr ;
  assign \daru1.controller.rst  = rst;
  assign \daru1.controller.sellden  = \daru1.controller.enabledata ;
  assign \daru1.controller.sync_rst  = gi2d_rst;
  assign \daru1.controller.zerocnt  = 1'h0;
  assign \daru1.controller.zeronumbytes  = 1'h0;
  assign \daru1.datainstrbar  = 1'h0;
  assign \daru1.dataout  = { \daru1.datapath.dataout [31:16], \daru1.datapath.reg0.outreg  };
  assign \daru1.datapath.adder.a  = \daru1.datapath.addrreg.outreg ;
  assign \daru1.datapath.adder.b  = { \daru1.datapath.adder.fa2.b , 1'h0 };
  assign \daru1.datapath.adder.cout [30:0] = { \daru1.datapath.adder.gen_halfadder:29.ha.o_carry , \daru1.datapath.adder.gen_halfadder:28.ha.o_carry , \daru1.datapath.adder.gen_halfadder:27.ha.o_carry , \daru1.datapath.adder.gen_halfadder:26.ha.o_carry , \daru1.datapath.adder.gen_halfadder:25.ha.o_carry , \daru1.datapath.adder.gen_halfadder:24.ha.o_carry , \daru1.datapath.adder.gen_halfadder:23.ha.o_carry , \daru1.datapath.adder.gen_halfadder:22.ha.o_carry , \daru1.datapath.adder.gen_halfadder:21.ha.o_carry , \daru1.datapath.adder.gen_halfadder:20.ha.o_carry , \daru1.datapath.adder.gen_halfadder:19.ha.o_carry , \daru1.datapath.adder.gen_halfadder:18.ha.o_carry , \daru1.datapath.adder.gen_halfadder:17.ha.o_carry , \daru1.datapath.adder.gen_halfadder:16.ha.o_carry , \daru1.datapath.adder.gen_halfadder:15.ha.o_carry , \daru1.datapath.adder.gen_halfadder:14.ha.o_carry , \daru1.datapath.adder.gen_halfadder:13.ha.o_carry , \daru1.datapath.adder.gen_halfadder:12.ha.o_carry , \daru1.datapath.adder.gen_halfadder:11.ha.o_carry , \daru1.datapath.adder.gen_halfadder:10.ha.o_carry , \daru1.datapath.adder.gen_halfadder:10.ha.i_bit2 , \daru1.datapath.adder.gen_halfadder:8.ha.o_carry , \daru1.datapath.adder.gen_halfadder:7.ha.o_carry , \daru1.datapath.adder.gen_halfadder:6.ha.o_carry , \daru1.datapath.adder.gen_halfadder:5.ha.o_carry , \daru1.datapath.adder.gen_halfadder:4.ha.o_carry , \daru1.datapath.adder.gen_halfadder:3.ha.o_carry , \daru1.datapath.adder.gen_halfadder:2.ha.o_carry , \daru1.datapath.adder.gen_halfadder:1.ha.o_carry , \daru1.datapath.adder.gen_halfadder:1.ha.i_bit2 , 1'h0 };
  assign \daru1.datapath.adder.fa1.a  = \daru1.datapath.addrreg.outreg [0];
  assign \daru1.datapath.adder.fa1.b  = 1'h0;
  assign \daru1.datapath.adder.fa1.cin  = 1'h0;
  assign \daru1.datapath.adder.fa1.cout  = 1'h0;
  assign \daru1.datapath.adder.fa1.s  = \daru1.datapath.addrreg.outreg [0];
  assign \daru1.datapath.adder.fa2.a  = \daru1.datapath.addrreg.outreg [1];
  assign \daru1.datapath.adder.fa2.cin  = 1'h0;
  assign \daru1.datapath.adder.fa2.cout  = \daru1.datapath.adder.gen_halfadder:1.ha.i_bit2 ;
  assign \daru1.datapath.adder.gen_halfadder:1.ha.i_bit1  = \daru1.datapath.addrreg.outreg [2];
  assign \daru1.datapath.adder.gen_halfadder:10.ha.i_bit1  = \daru1.datapath.addrreg.outreg [11];
  assign \daru1.datapath.adder.gen_halfadder:11.ha.i_bit1  = \daru1.datapath.addrreg.outreg [12];
  assign \daru1.datapath.adder.gen_halfadder:11.ha.i_bit2  = \daru1.datapath.adder.gen_halfadder:10.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:12.ha.i_bit1  = \daru1.datapath.addrreg.outreg [13];
  assign \daru1.datapath.adder.gen_halfadder:12.ha.i_bit2  = \daru1.datapath.adder.gen_halfadder:11.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:13.ha.i_bit1  = \daru1.datapath.addrreg.outreg [14];
  assign \daru1.datapath.adder.gen_halfadder:13.ha.i_bit2  = \daru1.datapath.adder.gen_halfadder:12.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:14.ha.i_bit1  = \daru1.datapath.addrreg.outreg [15];
  assign \daru1.datapath.adder.gen_halfadder:14.ha.i_bit2  = \daru1.datapath.adder.gen_halfadder:13.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:15.ha.i_bit1  = \daru1.datapath.addrreg.outreg [16];
  assign \daru1.datapath.adder.gen_halfadder:15.ha.i_bit2  = \daru1.datapath.adder.gen_halfadder:14.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:16.ha.i_bit1  = \daru1.datapath.addrreg.outreg [17];
  assign \daru1.datapath.adder.gen_halfadder:16.ha.i_bit2  = \daru1.datapath.adder.gen_halfadder:15.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:17.ha.i_bit1  = \daru1.datapath.addrreg.outreg [18];
  assign \daru1.datapath.adder.gen_halfadder:17.ha.i_bit2  = \daru1.datapath.adder.gen_halfadder:16.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:18.ha.i_bit1  = \daru1.datapath.addrreg.outreg [19];
  assign \daru1.datapath.adder.gen_halfadder:18.ha.i_bit2  = \daru1.datapath.adder.gen_halfadder:17.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:19.ha.i_bit1  = \daru1.datapath.addrreg.outreg [20];
  assign \daru1.datapath.adder.gen_halfadder:19.ha.i_bit2  = \daru1.datapath.adder.gen_halfadder:18.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:2.ha.i_bit1  = \daru1.datapath.addrreg.outreg [3];
  assign \daru1.datapath.adder.gen_halfadder:2.ha.i_bit2  = \daru1.datapath.adder.gen_halfadder:1.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:20.ha.i_bit1  = \daru1.datapath.addrreg.outreg [21];
  assign \daru1.datapath.adder.gen_halfadder:20.ha.i_bit2  = \daru1.datapath.adder.gen_halfadder:19.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:21.ha.i_bit1  = \daru1.datapath.addrreg.outreg [22];
  assign \daru1.datapath.adder.gen_halfadder:21.ha.i_bit2  = \daru1.datapath.adder.gen_halfadder:20.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:22.ha.i_bit1  = \daru1.datapath.addrreg.outreg [23];
  assign \daru1.datapath.adder.gen_halfadder:22.ha.i_bit2  = \daru1.datapath.adder.gen_halfadder:21.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:23.ha.i_bit1  = \daru1.datapath.addrreg.outreg [24];
  assign \daru1.datapath.adder.gen_halfadder:23.ha.i_bit2  = \daru1.datapath.adder.gen_halfadder:22.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:24.ha.i_bit1  = \daru1.datapath.addrreg.outreg [25];
  assign \daru1.datapath.adder.gen_halfadder:24.ha.i_bit2  = \daru1.datapath.adder.gen_halfadder:23.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:25.ha.i_bit1  = \daru1.datapath.addrreg.outreg [26];
  assign \daru1.datapath.adder.gen_halfadder:25.ha.i_bit2  = \daru1.datapath.adder.gen_halfadder:24.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:26.ha.i_bit1  = \daru1.datapath.addrreg.outreg [27];
  assign \daru1.datapath.adder.gen_halfadder:26.ha.i_bit2  = \daru1.datapath.adder.gen_halfadder:25.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:27.ha.i_bit1  = \daru1.datapath.addrreg.outreg [28];
  assign \daru1.datapath.adder.gen_halfadder:27.ha.i_bit2  = \daru1.datapath.adder.gen_halfadder:26.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:28.ha.i_bit1  = \daru1.datapath.addrreg.outreg [29];
  assign \daru1.datapath.adder.gen_halfadder:28.ha.i_bit2  = \daru1.datapath.adder.gen_halfadder:27.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:29.ha.i_bit1  = \daru1.datapath.addrreg.outreg [30];
  assign \daru1.datapath.adder.gen_halfadder:29.ha.i_bit2  = \daru1.datapath.adder.gen_halfadder:28.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:3.ha.i_bit1  = \daru1.datapath.addrreg.outreg [4];
  assign \daru1.datapath.adder.gen_halfadder:3.ha.i_bit2  = \daru1.datapath.adder.gen_halfadder:2.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:30.ha.i_bit1  = \daru1.datapath.addrreg.outreg [31];
  assign \daru1.datapath.adder.gen_halfadder:30.ha.i_bit2  = \daru1.datapath.adder.gen_halfadder:29.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:30.ha.o_carry  = \daru1.datapath.adder.cout [31];
  assign \daru1.datapath.adder.gen_halfadder:4.ha.i_bit1  = \daru1.datapath.addrreg.outreg [5];
  assign \daru1.datapath.adder.gen_halfadder:4.ha.i_bit2  = \daru1.datapath.adder.gen_halfadder:3.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:5.ha.i_bit1  = \daru1.datapath.addrreg.outreg [6];
  assign \daru1.datapath.adder.gen_halfadder:5.ha.i_bit2  = \daru1.datapath.adder.gen_halfadder:4.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:6.ha.i_bit1  = \daru1.datapath.addrreg.outreg [7];
  assign \daru1.datapath.adder.gen_halfadder:6.ha.i_bit2  = \daru1.datapath.adder.gen_halfadder:5.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:7.ha.i_bit1  = \daru1.datapath.addrreg.outreg [8];
  assign \daru1.datapath.adder.gen_halfadder:7.ha.i_bit2  = \daru1.datapath.adder.gen_halfadder:6.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:8.ha.i_bit1  = \daru1.datapath.addrreg.outreg [9];
  assign \daru1.datapath.adder.gen_halfadder:8.ha.i_bit2  = \daru1.datapath.adder.gen_halfadder:7.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:9.ha.i_bit1  = \daru1.datapath.addrreg.outreg [10];
  assign \daru1.datapath.adder.gen_halfadder:9.ha.i_bit2  = \daru1.datapath.adder.gen_halfadder:8.ha.o_carry ;
  assign \daru1.datapath.adder.gen_halfadder:9.ha.o_carry  = \daru1.datapath.adder.gen_halfadder:10.ha.i_bit2 ;
  assign \daru1.datapath.adder.sum  = { \daru1.datapath.adder.gen_halfadder:30.ha.o_sum , \daru1.datapath.adder.gen_halfadder:29.ha.o_sum , \daru1.datapath.adder.gen_halfadder:28.ha.o_sum , \daru1.datapath.adder.gen_halfadder:27.ha.o_sum , \daru1.datapath.adder.gen_halfadder:26.ha.o_sum , \daru1.datapath.adder.gen_halfadder:25.ha.o_sum , \daru1.datapath.adder.gen_halfadder:24.ha.o_sum , \daru1.datapath.adder.gen_halfadder:23.ha.o_sum , \daru1.datapath.adder.gen_halfadder:22.ha.o_sum , \daru1.datapath.adder.gen_halfadder:21.ha.o_sum , \daru1.datapath.adder.gen_halfadder:20.ha.o_sum , \daru1.datapath.adder.gen_halfadder:19.ha.o_sum , \daru1.datapath.adder.gen_halfadder:18.ha.o_sum , \daru1.datapath.adder.gen_halfadder:17.ha.o_sum , \daru1.datapath.adder.gen_halfadder:16.ha.o_sum , \daru1.datapath.adder.gen_halfadder:15.ha.o_sum , \daru1.datapath.adder.gen_halfadder:14.ha.o_sum , \daru1.datapath.adder.gen_halfadder:13.ha.o_sum , \daru1.datapath.adder.gen_halfadder:12.ha.o_sum , \daru1.datapath.adder.gen_halfadder:11.ha.o_sum , \daru1.datapath.adder.gen_halfadder:10.ha.o_sum , \daru1.datapath.adder.gen_halfadder:9.ha.o_sum , \daru1.datapath.adder.gen_halfadder:8.ha.o_sum , \daru1.datapath.adder.gen_halfadder:7.ha.o_sum , \daru1.datapath.adder.gen_halfadder:6.ha.o_sum , \daru1.datapath.adder.gen_halfadder:5.ha.o_sum , \daru1.datapath.adder.gen_halfadder:4.ha.o_sum , \daru1.datapath.adder.gen_halfadder:3.ha.o_sum , \daru1.datapath.adder.gen_halfadder:2.ha.o_sum , \daru1.datapath.adder.gen_halfadder:1.ha.o_sum , \daru1.datapath.adder.fa2.s , \daru1.datapath.addrreg.outreg [0] };
  assign \daru1.datapath.addrin  = \daru1.datapath.addrreg.inreg ;
  assign \daru1.datapath.addrreg.clk  = clk;
  assign \daru1.datapath.addrreg.load  = \daru1.controller.initcnt ;
  assign \daru1.datapath.addrreg.rst  = rst;
  assign \daru1.datapath.addrreg.zero  = 1'h0;
  assign \daru1.datapath.bytecnt  = { \daru1.datapath.adder.fa2.b , 1'h0 };
  assign \daru1.datapath.bytestoread  = \daru1.datapath.bytestoread_temp ;
  assign \daru1.datapath.checkmisaligneddaru  = 1'h1;
  assign \daru1.datapath.clk  = clk;
  assign \daru1.datapath.cocnt  = \daru1.controller.cocnt ;
  assign \daru1.datapath.counter.clk  = clk;
  assign \daru1.datapath.counter.cocnt  = \daru1.datapath.counter.cocntp ;
  assign \daru1.datapath.counter.inccnt  = \daru1.controller.enabledata ;
  assign \daru1.datapath.counter.initcnt  = \daru1.controller.initcnt ;
  assign \daru1.datapath.counter.initvalue  = 1'h0;
  assign \daru1.datapath.counter.outcnt  = \daru1.datapath.adder.fa2.b ;
  assign \daru1.datapath.counter.rst  = rst;
  assign \daru1.datapath.counter.temp  = \daru1.datapath.adder.fa2.b ;
  assign \daru1.datapath.counter.zerocnt  = 1'h0;
  assign \daru1.datapath.datainstrbar  = 1'h0;
  assign \daru1.datapath.dataout [15:0] = \daru1.datapath.reg0.outreg ;
  assign \daru1.datapath.decoder.en  = \daru1.controller.enabledata ;
  assign \daru1.datapath.decoder.indecoder  = { 1'h0, \daru1.datapath.adder.fa2.b  };
  assign \daru1.datapath.enableaddr  = \daru1.controller.enableaddr ;
  assign \daru1.datapath.enabledata  = \daru1.controller.enabledata ;
  assign \daru1.datapath.errordecoder.addrin  = \daru1.datapath.addrreg.outreg [1:0];
  assign \daru1.datapath.errordecoder.checkmisaligneddaru  = 1'h1;
  assign \daru1.datapath.errordecoder.datainstrbar  = 1'h0;
  assign \daru1.datapath.errordecoder.instrmisalignedflag  = gi2d_ex_flag_next;
  assign \daru1.datapath.errordecoder.loadmisalignedflag  = 1'h0;
  assign \daru1.datapath.errordecoder.misalignederrorp  = gi2d_ex_flag_next;
  assign \daru1.datapath.errordecoder.nbytes  = 2'h3;
  assign \daru1.datapath.inccnt  = \daru1.controller.enabledata ;
  assign \daru1.datapath.initcnt  = \daru1.controller.initcnt ;
  assign \daru1.datapath.initreading  = \daru1.controller.initcnt ;
  assign \daru1.datapath.initvaluecnt  = 2'h0;
  assign \daru1.datapath.instrmisalignedflag  = gi2d_ex_flag_next;
  assign \daru1.datapath.ldaddr  = \daru1.controller.initcnt ;
  assign \daru1.datapath.ldnumbytes  = \daru1.controller.initcnt ;
  assign \daru1.datapath.loadmisalignedflag  = 1'h0;
  assign \daru1.datapath.memdata  = memdataout1;
  assign \daru1.datapath.nbytereg.clk  = clk;
  assign \daru1.datapath.nbytereg.inreg  = 2'h3;
  assign \daru1.datapath.nbytereg.load  = \daru1.controller.initcnt ;
  assign \daru1.datapath.nbytereg.rst  = rst;
  assign \daru1.datapath.nbytereg.zero  = 1'h0;
  assign \daru1.datapath.nbytes  = 2'h3;
  assign \daru1.datapath.nbytesout  = \daru1.datapath.nbytereg.outreg ;
  assign \daru1.datapath.outcnt  = \daru1.datapath.adder.fa2.b ;
  assign \daru1.datapath.outcnt_ext  = { 1'h0, \daru1.datapath.adder.fa2.b  };
  assign \daru1.datapath.outdecoder  = \daru1.datapath.decoder.outdecoder ;
  assign \daru1.datapath.readaddr  = \daru1.datapath.addrreg.outreg ;
  assign \daru1.datapath.readaddrout  = \daru1.datapath.addrreg.outreg ;
  assign \daru1.datapath.readaddrp  = { \daru1.datapath.adder.gen_halfadder:30.ha.o_sum , \daru1.datapath.adder.gen_halfadder:29.ha.o_sum , \daru1.datapath.adder.gen_halfadder:28.ha.o_sum , \daru1.datapath.adder.gen_halfadder:27.ha.o_sum , \daru1.datapath.adder.gen_halfadder:26.ha.o_sum , \daru1.datapath.adder.gen_halfadder:25.ha.o_sum , \daru1.datapath.adder.gen_halfadder:24.ha.o_sum , \daru1.datapath.adder.gen_halfadder:23.ha.o_sum , \daru1.datapath.adder.gen_halfadder:22.ha.o_sum , \daru1.datapath.adder.gen_halfadder:21.ha.o_sum , \daru1.datapath.adder.gen_halfadder:20.ha.o_sum , \daru1.datapath.adder.gen_halfadder:19.ha.o_sum , \daru1.datapath.adder.gen_halfadder:18.ha.o_sum , \daru1.datapath.adder.gen_halfadder:17.ha.o_sum , \daru1.datapath.adder.gen_halfadder:16.ha.o_sum , \daru1.datapath.adder.gen_halfadder:15.ha.o_sum , \daru1.datapath.adder.gen_halfadder:14.ha.o_sum , \daru1.datapath.adder.gen_halfadder:13.ha.o_sum , \daru1.datapath.adder.gen_halfadder:12.ha.o_sum , \daru1.datapath.adder.gen_halfadder:11.ha.o_sum , \daru1.datapath.adder.gen_halfadder:10.ha.o_sum , \daru1.datapath.adder.gen_halfadder:9.ha.o_sum , \daru1.datapath.adder.gen_halfadder:8.ha.o_sum , \daru1.datapath.adder.gen_halfadder:7.ha.o_sum , \daru1.datapath.adder.gen_halfadder:6.ha.o_sum , \daru1.datapath.adder.gen_halfadder:5.ha.o_sum , \daru1.datapath.adder.gen_halfadder:4.ha.o_sum , \daru1.datapath.adder.gen_halfadder:3.ha.o_sum , \daru1.datapath.adder.gen_halfadder:2.ha.o_sum , \daru1.datapath.adder.gen_halfadder:1.ha.o_sum , \daru1.datapath.adder.fa2.s , \daru1.datapath.addrreg.outreg [0] };
  assign \daru1.datapath.reg0.clk  = clk;
  assign \daru1.datapath.reg0.inreg  = \daru1.datapath.datain ;
  assign \daru1.datapath.reg0.load  = \daru1.datapath.decoder.outdecoder [0];
  assign \daru1.datapath.reg0.rst  = rst;
  assign \daru1.datapath.reg0.zero  = \daru1.controller.initcnt ;
  assign \daru1.datapath.reg1.clk  = clk;
  assign \daru1.datapath.reg1.inreg  = \daru1.datapath.datain ;
  assign \daru1.datapath.reg1.load  = \daru1.datapath.decoder.outdecoder [1];
  assign \daru1.datapath.reg1.outreg  = \daru1.datapath.dataouthigh_reg ;
  assign \daru1.datapath.reg1.rst  = rst;
  assign \daru1.datapath.reg1.zero  = \daru1.controller.initcnt ;
  assign \daru1.datapath.rst  = rst;
  assign \daru1.datapath.select_incoming_data  = \daru1.controller.select_incoming_data ;
  assign \daru1.datapath.sellden  = \daru1.controller.enabledata ;
  assign \daru1.datapath.zerocnt  = 1'h0;
  assign \daru1.datapath.zeronumbytes  = 1'h0;
  assign \daru1.enableaddr  = \daru1.controller.enableaddr ;
  assign \daru1.enabledata  = \daru1.controller.enabledata ;
  assign \daru1.inccnt  = \daru1.controller.enabledata ;
  assign \daru1.initcnt  = \daru1.controller.initcnt ;
  assign \daru1.initreading  = \daru1.controller.initcnt ;
  assign \daru1.instrmisalignedflag  = gi2d_ex_flag_next;
  assign \daru1.ldaddr  = \daru1.controller.initcnt ;
  assign \daru1.ldnumbytes  = \daru1.controller.initcnt ;
  assign \daru1.loadmisalignedflag  = 1'h0;
  assign \daru1.memdata  = memdataout1;
  assign \daru1.memready  = memready1;
  assign \daru1.nbytes  = 2'h3;
  assign \daru1.readaddrout  = \daru1.datapath.addrreg.outreg ;
  assign \daru1.readmem  = \daru1.controller.enableaddr ;
  assign \daru1.rst  = rst;
  assign \daru1.select_incoming_data  = \daru1.controller.select_incoming_data ;
  assign \daru1.sellden  = \daru1.controller.enabledata ;
  assign \daru1.startdaru  = \daru1.controller.startdaru ;
  assign \daru1.sync_rst  = gi2d_rst;
  assign \daru1.zerocnt  = 1'h0;
  assign \daru1.zeronumbytes  = 1'h0;
  assign daru1_en_def = \daru1.controller.startdaru ;
  assign \daru2.addrin  = \daru2.datapath.addrreg.inreg ;
  assign \daru2.addrout  = \daru2.datapath.addrout ;
  assign \daru2.bytestoread  = bytespermemaccessdaru;
  assign \daru2.checkmisaligneddaru  = 1'h0;
  assign \daru2.clk  = clk;
  assign \daru2.cocnt  = \daru2.controller.cocnt ;
  assign \daru2.completedaru  = completeddaru2;
  assign \daru2.controller.clk  = clk;
  assign \daru2.controller.completedaru  = completeddaru2;
  assign \daru2.controller.datainstrbar  = 1'h1;
  assign \daru2.controller.inccnt  = \daru2.controller.enabledata ;
  assign \daru2.controller.initreading  = \daru2.controller.initcnt ;
  assign \daru2.controller.ldaddr  = \daru2.controller.initcnt ;
  assign \daru2.controller.ldnumbytes  = \daru2.controller.initcnt ;
  assign \daru2.controller.memready  = memready2;
  assign \daru2.controller.readmem  = \daru2.controller.enableaddr ;
  assign \daru2.controller.rst  = rst;
  assign \daru2.controller.select_incoming_data  = 1'h0;
  assign \daru2.controller.sellden  = \daru2.controller.enabledata ;
  assign \daru2.controller.sync_rst  = m2wb_en;
  assign \daru2.controller.zerocnt  = 1'h0;
  assign \daru2.controller.zeronumbytes  = 1'h0;
  assign \daru2.datainstrbar  = 1'h1;
  assign \daru2.dataout  = { \daru2.datapath.reg1.outreg , \daru2.datapath.reg0.outreg  };
  assign \daru2.datapath.adder.a  = \daru2.datapath.addrreg.outreg ;
  assign \daru2.datapath.adder.b  = { \daru2.datapath.adder.fa2.b , 1'h0 };
  assign \daru2.datapath.adder.cout [30:0] = { \daru2.datapath.adder.gen_halfadder:29.ha.o_carry , \daru2.datapath.adder.gen_halfadder:28.ha.o_carry , \daru2.datapath.adder.gen_halfadder:27.ha.o_carry , \daru2.datapath.adder.gen_halfadder:26.ha.o_carry , \daru2.datapath.adder.gen_halfadder:25.ha.o_carry , \daru2.datapath.adder.gen_halfadder:24.ha.o_carry , \daru2.datapath.adder.gen_halfadder:23.ha.o_carry , \daru2.datapath.adder.gen_halfadder:22.ha.o_carry , \daru2.datapath.adder.gen_halfadder:21.ha.o_carry , \daru2.datapath.adder.gen_halfadder:20.ha.o_carry , \daru2.datapath.adder.gen_halfadder:19.ha.o_carry , \daru2.datapath.adder.gen_halfadder:18.ha.o_carry , \daru2.datapath.adder.gen_halfadder:17.ha.o_carry , \daru2.datapath.adder.gen_halfadder:16.ha.o_carry , \daru2.datapath.adder.gen_halfadder:15.ha.o_carry , \daru2.datapath.adder.gen_halfadder:14.ha.o_carry , \daru2.datapath.adder.gen_halfadder:13.ha.o_carry , \daru2.datapath.adder.gen_halfadder:12.ha.o_carry , \daru2.datapath.adder.gen_halfadder:11.ha.o_carry , \daru2.datapath.adder.gen_halfadder:10.ha.o_carry , \daru2.datapath.adder.gen_halfadder:10.ha.i_bit2 , \daru2.datapath.adder.gen_halfadder:8.ha.o_carry , \daru2.datapath.adder.gen_halfadder:7.ha.o_carry , \daru2.datapath.adder.gen_halfadder:6.ha.o_carry , \daru2.datapath.adder.gen_halfadder:5.ha.o_carry , \daru2.datapath.adder.gen_halfadder:4.ha.o_carry , \daru2.datapath.adder.gen_halfadder:3.ha.o_carry , \daru2.datapath.adder.gen_halfadder:2.ha.o_carry , \daru2.datapath.adder.gen_halfadder:1.ha.o_carry , \daru2.datapath.adder.gen_halfadder:1.ha.i_bit2 , 1'h0 };
  assign \daru2.datapath.adder.fa1.a  = \daru2.datapath.addrreg.outreg [0];
  assign \daru2.datapath.adder.fa1.b  = 1'h0;
  assign \daru2.datapath.adder.fa1.cin  = 1'h0;
  assign \daru2.datapath.adder.fa1.cout  = 1'h0;
  assign \daru2.datapath.adder.fa1.s  = \daru2.datapath.addrreg.outreg [0];
  assign \daru2.datapath.adder.fa2.a  = \daru2.datapath.addrreg.outreg [1];
  assign \daru2.datapath.adder.fa2.cin  = 1'h0;
  assign \daru2.datapath.adder.fa2.cout  = \daru2.datapath.adder.gen_halfadder:1.ha.i_bit2 ;
  assign \daru2.datapath.adder.gen_halfadder:1.ha.i_bit1  = \daru2.datapath.addrreg.outreg [2];
  assign \daru2.datapath.adder.gen_halfadder:10.ha.i_bit1  = \daru2.datapath.addrreg.outreg [11];
  assign \daru2.datapath.adder.gen_halfadder:11.ha.i_bit1  = \daru2.datapath.addrreg.outreg [12];
  assign \daru2.datapath.adder.gen_halfadder:11.ha.i_bit2  = \daru2.datapath.adder.gen_halfadder:10.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:12.ha.i_bit1  = \daru2.datapath.addrreg.outreg [13];
  assign \daru2.datapath.adder.gen_halfadder:12.ha.i_bit2  = \daru2.datapath.adder.gen_halfadder:11.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:13.ha.i_bit1  = \daru2.datapath.addrreg.outreg [14];
  assign \daru2.datapath.adder.gen_halfadder:13.ha.i_bit2  = \daru2.datapath.adder.gen_halfadder:12.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:14.ha.i_bit1  = \daru2.datapath.addrreg.outreg [15];
  assign \daru2.datapath.adder.gen_halfadder:14.ha.i_bit2  = \daru2.datapath.adder.gen_halfadder:13.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:15.ha.i_bit1  = \daru2.datapath.addrreg.outreg [16];
  assign \daru2.datapath.adder.gen_halfadder:15.ha.i_bit2  = \daru2.datapath.adder.gen_halfadder:14.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:16.ha.i_bit1  = \daru2.datapath.addrreg.outreg [17];
  assign \daru2.datapath.adder.gen_halfadder:16.ha.i_bit2  = \daru2.datapath.adder.gen_halfadder:15.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:17.ha.i_bit1  = \daru2.datapath.addrreg.outreg [18];
  assign \daru2.datapath.adder.gen_halfadder:17.ha.i_bit2  = \daru2.datapath.adder.gen_halfadder:16.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:18.ha.i_bit1  = \daru2.datapath.addrreg.outreg [19];
  assign \daru2.datapath.adder.gen_halfadder:18.ha.i_bit2  = \daru2.datapath.adder.gen_halfadder:17.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:19.ha.i_bit1  = \daru2.datapath.addrreg.outreg [20];
  assign \daru2.datapath.adder.gen_halfadder:19.ha.i_bit2  = \daru2.datapath.adder.gen_halfadder:18.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:2.ha.i_bit1  = \daru2.datapath.addrreg.outreg [3];
  assign \daru2.datapath.adder.gen_halfadder:2.ha.i_bit2  = \daru2.datapath.adder.gen_halfadder:1.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:20.ha.i_bit1  = \daru2.datapath.addrreg.outreg [21];
  assign \daru2.datapath.adder.gen_halfadder:20.ha.i_bit2  = \daru2.datapath.adder.gen_halfadder:19.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:21.ha.i_bit1  = \daru2.datapath.addrreg.outreg [22];
  assign \daru2.datapath.adder.gen_halfadder:21.ha.i_bit2  = \daru2.datapath.adder.gen_halfadder:20.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:22.ha.i_bit1  = \daru2.datapath.addrreg.outreg [23];
  assign \daru2.datapath.adder.gen_halfadder:22.ha.i_bit2  = \daru2.datapath.adder.gen_halfadder:21.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:23.ha.i_bit1  = \daru2.datapath.addrreg.outreg [24];
  assign \daru2.datapath.adder.gen_halfadder:23.ha.i_bit2  = \daru2.datapath.adder.gen_halfadder:22.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:24.ha.i_bit1  = \daru2.datapath.addrreg.outreg [25];
  assign \daru2.datapath.adder.gen_halfadder:24.ha.i_bit2  = \daru2.datapath.adder.gen_halfadder:23.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:25.ha.i_bit1  = \daru2.datapath.addrreg.outreg [26];
  assign \daru2.datapath.adder.gen_halfadder:25.ha.i_bit2  = \daru2.datapath.adder.gen_halfadder:24.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:26.ha.i_bit1  = \daru2.datapath.addrreg.outreg [27];
  assign \daru2.datapath.adder.gen_halfadder:26.ha.i_bit2  = \daru2.datapath.adder.gen_halfadder:25.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:27.ha.i_bit1  = \daru2.datapath.addrreg.outreg [28];
  assign \daru2.datapath.adder.gen_halfadder:27.ha.i_bit2  = \daru2.datapath.adder.gen_halfadder:26.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:28.ha.i_bit1  = \daru2.datapath.addrreg.outreg [29];
  assign \daru2.datapath.adder.gen_halfadder:28.ha.i_bit2  = \daru2.datapath.adder.gen_halfadder:27.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:29.ha.i_bit1  = \daru2.datapath.addrreg.outreg [30];
  assign \daru2.datapath.adder.gen_halfadder:29.ha.i_bit2  = \daru2.datapath.adder.gen_halfadder:28.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:3.ha.i_bit1  = \daru2.datapath.addrreg.outreg [4];
  assign \daru2.datapath.adder.gen_halfadder:3.ha.i_bit2  = \daru2.datapath.adder.gen_halfadder:2.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:30.ha.i_bit1  = \daru2.datapath.addrreg.outreg [31];
  assign \daru2.datapath.adder.gen_halfadder:30.ha.i_bit2  = \daru2.datapath.adder.gen_halfadder:29.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:30.ha.o_carry  = \daru2.datapath.adder.cout [31];
  assign \daru2.datapath.adder.gen_halfadder:4.ha.i_bit1  = \daru2.datapath.addrreg.outreg [5];
  assign \daru2.datapath.adder.gen_halfadder:4.ha.i_bit2  = \daru2.datapath.adder.gen_halfadder:3.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:5.ha.i_bit1  = \daru2.datapath.addrreg.outreg [6];
  assign \daru2.datapath.adder.gen_halfadder:5.ha.i_bit2  = \daru2.datapath.adder.gen_halfadder:4.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:6.ha.i_bit1  = \daru2.datapath.addrreg.outreg [7];
  assign \daru2.datapath.adder.gen_halfadder:6.ha.i_bit2  = \daru2.datapath.adder.gen_halfadder:5.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:7.ha.i_bit1  = \daru2.datapath.addrreg.outreg [8];
  assign \daru2.datapath.adder.gen_halfadder:7.ha.i_bit2  = \daru2.datapath.adder.gen_halfadder:6.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:8.ha.i_bit1  = \daru2.datapath.addrreg.outreg [9];
  assign \daru2.datapath.adder.gen_halfadder:8.ha.i_bit2  = \daru2.datapath.adder.gen_halfadder:7.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:9.ha.i_bit1  = \daru2.datapath.addrreg.outreg [10];
  assign \daru2.datapath.adder.gen_halfadder:9.ha.i_bit2  = \daru2.datapath.adder.gen_halfadder:8.ha.o_carry ;
  assign \daru2.datapath.adder.gen_halfadder:9.ha.o_carry  = \daru2.datapath.adder.gen_halfadder:10.ha.i_bit2 ;
  assign \daru2.datapath.adder.sum  = { \daru2.datapath.adder.gen_halfadder:30.ha.o_sum , \daru2.datapath.adder.gen_halfadder:29.ha.o_sum , \daru2.datapath.adder.gen_halfadder:28.ha.o_sum , \daru2.datapath.adder.gen_halfadder:27.ha.o_sum , \daru2.datapath.adder.gen_halfadder:26.ha.o_sum , \daru2.datapath.adder.gen_halfadder:25.ha.o_sum , \daru2.datapath.adder.gen_halfadder:24.ha.o_sum , \daru2.datapath.adder.gen_halfadder:23.ha.o_sum , \daru2.datapath.adder.gen_halfadder:22.ha.o_sum , \daru2.datapath.adder.gen_halfadder:21.ha.o_sum , \daru2.datapath.adder.gen_halfadder:20.ha.o_sum , \daru2.datapath.adder.gen_halfadder:19.ha.o_sum , \daru2.datapath.adder.gen_halfadder:18.ha.o_sum , \daru2.datapath.adder.gen_halfadder:17.ha.o_sum , \daru2.datapath.adder.gen_halfadder:16.ha.o_sum , \daru2.datapath.adder.gen_halfadder:15.ha.o_sum , \daru2.datapath.adder.gen_halfadder:14.ha.o_sum , \daru2.datapath.adder.gen_halfadder:13.ha.o_sum , \daru2.datapath.adder.gen_halfadder:12.ha.o_sum , \daru2.datapath.adder.gen_halfadder:11.ha.o_sum , \daru2.datapath.adder.gen_halfadder:10.ha.o_sum , \daru2.datapath.adder.gen_halfadder:9.ha.o_sum , \daru2.datapath.adder.gen_halfadder:8.ha.o_sum , \daru2.datapath.adder.gen_halfadder:7.ha.o_sum , \daru2.datapath.adder.gen_halfadder:6.ha.o_sum , \daru2.datapath.adder.gen_halfadder:5.ha.o_sum , \daru2.datapath.adder.gen_halfadder:4.ha.o_sum , \daru2.datapath.adder.gen_halfadder:3.ha.o_sum , \daru2.datapath.adder.gen_halfadder:2.ha.o_sum , \daru2.datapath.adder.gen_halfadder:1.ha.o_sum , \daru2.datapath.adder.fa2.s , \daru2.datapath.addrreg.outreg [0] };
  assign \daru2.datapath.addrin  = \daru2.datapath.addrreg.inreg ;
  assign \daru2.datapath.addrreg.clk  = clk;
  assign \daru2.datapath.addrreg.load  = \daru2.controller.initcnt ;
  assign \daru2.datapath.addrreg.rst  = rst;
  assign \daru2.datapath.addrreg.zero  = 1'h0;
  assign \daru2.datapath.bytecnt  = { \daru2.datapath.adder.fa2.b , 1'h0 };
  assign \daru2.datapath.bytestoread  = bytespermemaccessdaru;
  assign \daru2.datapath.bytestoread_temp  = bytespermemaccessdaru;
  assign \daru2.datapath.checkmisaligneddaru  = 1'h0;
  assign \daru2.datapath.clk  = clk;
  assign \daru2.datapath.cocnt  = \daru2.controller.cocnt ;
  assign \daru2.datapath.counter.clk  = clk;
  assign \daru2.datapath.counter.cocnt  = \daru2.datapath.counter.cocntp ;
  assign \daru2.datapath.counter.inccnt  = \daru2.controller.enabledata ;
  assign \daru2.datapath.counter.initcnt  = \daru2.controller.initcnt ;
  assign \daru2.datapath.counter.initvalue  = 1'h0;
  assign \daru2.datapath.counter.outcnt  = \daru2.datapath.adder.fa2.b ;
  assign \daru2.datapath.counter.rst  = rst;
  assign \daru2.datapath.counter.temp  = \daru2.datapath.adder.fa2.b ;
  assign \daru2.datapath.counter.zerocnt  = 1'h0;
  assign \daru2.datapath.datainstrbar  = 1'h1;
  assign \daru2.datapath.dataout  = { \daru2.datapath.reg1.outreg , \daru2.datapath.reg0.outreg  };
  assign \daru2.datapath.dataouthigh_reg  = \daru2.datapath.reg1.outreg ;
  assign \daru2.datapath.decoder.en  = \daru2.controller.enabledata ;
  assign \daru2.datapath.decoder.indecoder  = { 1'h0, \daru2.datapath.adder.fa2.b  };
  assign \daru2.datapath.enableaddr  = \daru2.controller.enableaddr ;
  assign \daru2.datapath.enabledata  = \daru2.controller.enabledata ;
  assign \daru2.datapath.errordecoder.addrin  = \daru2.datapath.addrreg.outreg [1:0];
  assign \daru2.datapath.errordecoder.checkmisaligneddaru  = 1'h0;
  assign \daru2.datapath.errordecoder.datainstrbar  = 1'h1;
  assign \daru2.datapath.errordecoder.instrmisalignedflag  = 1'h0;
  assign \daru2.datapath.errordecoder.loadmisalignedflag  = 1'h0;
  assign \daru2.datapath.errordecoder.nbytes  = e2m_ctrl_word_curr[44:43];
  assign \daru2.datapath.inccnt  = \daru2.controller.enabledata ;
  assign \daru2.datapath.initcnt  = \daru2.controller.initcnt ;
  assign \daru2.datapath.initreading  = \daru2.controller.initcnt ;
  assign \daru2.datapath.initvaluecnt  = 2'h0;
  assign \daru2.datapath.instrmisalignedflag  = 1'h0;
  assign \daru2.datapath.ldaddr  = \daru2.controller.initcnt ;
  assign \daru2.datapath.ldnumbytes  = \daru2.controller.initcnt ;
  assign \daru2.datapath.loadmisalignedflag  = 1'h0;
  assign \daru2.datapath.memdata  = memdataout2;
  assign \daru2.datapath.nbytereg.clk  = clk;
  assign \daru2.datapath.nbytereg.inreg  = e2m_ctrl_word_curr[44:43];
  assign \daru2.datapath.nbytereg.load  = \daru2.controller.initcnt ;
  assign \daru2.datapath.nbytereg.rst  = rst;
  assign \daru2.datapath.nbytereg.zero  = 1'h0;
  assign \daru2.datapath.nbytes  = e2m_ctrl_word_curr[44:43];
  assign \daru2.datapath.nbytesout  = \daru2.datapath.nbytereg.outreg ;
  assign \daru2.datapath.outcnt  = \daru2.datapath.adder.fa2.b ;
  assign \daru2.datapath.outcnt_ext  = { 1'h0, \daru2.datapath.adder.fa2.b  };
  assign \daru2.datapath.outdecoder  = \daru2.datapath.decoder.outdecoder ;
  assign \daru2.datapath.readaddr  = \daru2.datapath.addrreg.outreg ;
  assign \daru2.datapath.readaddrout  = \daru2.datapath.addrreg.outreg ;
  assign \daru2.datapath.readaddrp  = { \daru2.datapath.adder.gen_halfadder:30.ha.o_sum , \daru2.datapath.adder.gen_halfadder:29.ha.o_sum , \daru2.datapath.adder.gen_halfadder:28.ha.o_sum , \daru2.datapath.adder.gen_halfadder:27.ha.o_sum , \daru2.datapath.adder.gen_halfadder:26.ha.o_sum , \daru2.datapath.adder.gen_halfadder:25.ha.o_sum , \daru2.datapath.adder.gen_halfadder:24.ha.o_sum , \daru2.datapath.adder.gen_halfadder:23.ha.o_sum , \daru2.datapath.adder.gen_halfadder:22.ha.o_sum , \daru2.datapath.adder.gen_halfadder:21.ha.o_sum , \daru2.datapath.adder.gen_halfadder:20.ha.o_sum , \daru2.datapath.adder.gen_halfadder:19.ha.o_sum , \daru2.datapath.adder.gen_halfadder:18.ha.o_sum , \daru2.datapath.adder.gen_halfadder:17.ha.o_sum , \daru2.datapath.adder.gen_halfadder:16.ha.o_sum , \daru2.datapath.adder.gen_halfadder:15.ha.o_sum , \daru2.datapath.adder.gen_halfadder:14.ha.o_sum , \daru2.datapath.adder.gen_halfadder:13.ha.o_sum , \daru2.datapath.adder.gen_halfadder:12.ha.o_sum , \daru2.datapath.adder.gen_halfadder:11.ha.o_sum , \daru2.datapath.adder.gen_halfadder:10.ha.o_sum , \daru2.datapath.adder.gen_halfadder:9.ha.o_sum , \daru2.datapath.adder.gen_halfadder:8.ha.o_sum , \daru2.datapath.adder.gen_halfadder:7.ha.o_sum , \daru2.datapath.adder.gen_halfadder:6.ha.o_sum , \daru2.datapath.adder.gen_halfadder:5.ha.o_sum , \daru2.datapath.adder.gen_halfadder:4.ha.o_sum , \daru2.datapath.adder.gen_halfadder:3.ha.o_sum , \daru2.datapath.adder.gen_halfadder:2.ha.o_sum , \daru2.datapath.adder.gen_halfadder:1.ha.o_sum , \daru2.datapath.adder.fa2.s , \daru2.datapath.addrreg.outreg [0] };
  assign \daru2.datapath.reg0.clk  = clk;
  assign \daru2.datapath.reg0.inreg  = \daru2.datapath.datain ;
  assign \daru2.datapath.reg0.load  = \daru2.datapath.decoder.outdecoder [0];
  assign \daru2.datapath.reg0.rst  = rst;
  assign \daru2.datapath.reg0.zero  = \daru2.controller.initcnt ;
  assign \daru2.datapath.reg1.clk  = clk;
  assign \daru2.datapath.reg1.inreg  = \daru2.datapath.datain ;
  assign \daru2.datapath.reg1.load  = \daru2.datapath.decoder.outdecoder [1];
  assign \daru2.datapath.reg1.rst  = rst;
  assign \daru2.datapath.reg1.zero  = \daru2.controller.initcnt ;
  assign \daru2.datapath.rst  = rst;
  assign \daru2.datapath.select_incoming_data  = 1'h0;
  assign \daru2.datapath.sellden  = \daru2.controller.enabledata ;
  assign \daru2.datapath.zerocnt  = 1'h0;
  assign \daru2.datapath.zeronumbytes  = 1'h0;
  assign \daru2.enableaddr  = \daru2.controller.enableaddr ;
  assign \daru2.enabledata  = \daru2.controller.enabledata ;
  assign \daru2.inccnt  = \daru2.controller.enabledata ;
  assign \daru2.initcnt  = \daru2.controller.initcnt ;
  assign \daru2.initreading  = \daru2.controller.initcnt ;
  assign \daru2.instrmisalignedflag  = 1'h0;
  assign \daru2.ldaddr  = \daru2.controller.initcnt ;
  assign \daru2.ldnumbytes  = \daru2.controller.initcnt ;
  assign \daru2.loadmisalignedflag  = 1'h0;
  assign \daru2.memdata  = memdataout2;
  assign \daru2.memready  = memready2;
  assign \daru2.nbytes  = e2m_ctrl_word_curr[44:43];
  assign \daru2.readaddrout  = \daru2.datapath.addrreg.outreg ;
  assign \daru2.readmem  = \daru2.controller.enableaddr ;
  assign \daru2.rst  = rst;
  assign \daru2.select_incoming_data  = 1'h0;
  assign \daru2.sellden  = \daru2.controller.enabledata ;
  assign \daru2.startdaru  = \daru2.controller.startdaru ;
  assign \daru2.sync_rst  = m2wb_en;
  assign \daru2.zerocnt  = 1'h0;
  assign \daru2.zeronumbytes  = 1'h0;
  assign daru2_en = \daru2.controller.startdaru ;
  assign datadaru1 = { \daru1.datapath.dataout [31:16], \daru1.datapath.reg0.outreg  };
  assign datadaru2 = { \daru2.datapath.reg1.outreg , \daru2.datapath.reg0.outreg  };
  assign datadawu = \dawu.datapath.dataout ;
  assign \dawu.addrin  = \daru2.datapath.addrreg.inreg ;
  assign \dawu.addrout  = \dawu.datapath.addrout ;
  assign \dawu.bytestowrite  = bytespermemaccessdawu;
  assign \dawu.checkmisaligneddawu  = e2m_ctrl_word_curr[47];
  assign \dawu.clk  = clk;
  assign \dawu.cocnt  = \dawu.controller.cocnt ;
  assign \dawu.completedawu  = completeddawu;
  assign \dawu.controller.clk  = clk;
  assign \dawu.controller.completedawu  = completeddawu;
  assign \dawu.controller.enabledata  = \dawu.controller.enableaddr ;
  assign \dawu.controller.ldaddr  = \dawu.controller.initcnt ;
  assign \dawu.controller.lddata  = \dawu.controller.initcnt ;
  assign \dawu.controller.ldnumbytes  = \dawu.controller.initcnt ;
  assign \dawu.controller.memready  = memready2;
  assign \dawu.controller.rst  = rst;
  assign \dawu.controller.sync_rst  = m2wb_en;
  assign \dawu.controller.writemem  = \dawu.controller.enableaddr ;
  assign \dawu.controller.zeroaddr  = 1'h0;
  assign \dawu.controller.zerocnt  = 1'h0;
  assign \dawu.controller.zerodata  = 1'h0;
  assign \dawu.controller.zeronumbytes  = 1'h0;
  assign \dawu.datain  = e2m_op2_curr;
  assign \dawu.dataout  = \dawu.datapath.dataout ;
  assign \dawu.datapath.adder.a  = \dawu.datapath.addrreg.outreg ;
  assign \dawu.datapath.adder.b  = { \dawu.datapath.adder.fa2.b , 1'h0 };
  assign \dawu.datapath.adder.cout [30:0] = { \dawu.datapath.adder.gen_halfadder:29.ha.o_carry , \dawu.datapath.adder.gen_halfadder:28.ha.o_carry , \dawu.datapath.adder.gen_halfadder:27.ha.o_carry , \dawu.datapath.adder.gen_halfadder:26.ha.o_carry , \dawu.datapath.adder.gen_halfadder:25.ha.o_carry , \dawu.datapath.adder.gen_halfadder:24.ha.o_carry , \dawu.datapath.adder.gen_halfadder:23.ha.o_carry , \dawu.datapath.adder.gen_halfadder:22.ha.o_carry , \dawu.datapath.adder.gen_halfadder:21.ha.o_carry , \dawu.datapath.adder.gen_halfadder:20.ha.o_carry , \dawu.datapath.adder.gen_halfadder:19.ha.o_carry , \dawu.datapath.adder.gen_halfadder:18.ha.o_carry , \dawu.datapath.adder.gen_halfadder:17.ha.o_carry , \dawu.datapath.adder.gen_halfadder:16.ha.o_carry , \dawu.datapath.adder.gen_halfadder:15.ha.o_carry , \dawu.datapath.adder.gen_halfadder:14.ha.o_carry , \dawu.datapath.adder.gen_halfadder:13.ha.o_carry , \dawu.datapath.adder.gen_halfadder:12.ha.o_carry , \dawu.datapath.adder.gen_halfadder:11.ha.o_carry , \dawu.datapath.adder.gen_halfadder:10.ha.o_carry , \dawu.datapath.adder.gen_halfadder:10.ha.i_bit2 , \dawu.datapath.adder.gen_halfadder:8.ha.o_carry , \dawu.datapath.adder.gen_halfadder:7.ha.o_carry , \dawu.datapath.adder.gen_halfadder:6.ha.o_carry , \dawu.datapath.adder.gen_halfadder:5.ha.o_carry , \dawu.datapath.adder.gen_halfadder:4.ha.o_carry , \dawu.datapath.adder.gen_halfadder:3.ha.o_carry , \dawu.datapath.adder.gen_halfadder:2.ha.o_carry , \dawu.datapath.adder.gen_halfadder:1.ha.o_carry , \dawu.datapath.adder.gen_halfadder:1.ha.i_bit2 , 1'h0 };
  assign \dawu.datapath.adder.fa1.a  = \dawu.datapath.addrreg.outreg [0];
  assign \dawu.datapath.adder.fa1.b  = 1'h0;
  assign \dawu.datapath.adder.fa1.cin  = 1'h0;
  assign \dawu.datapath.adder.fa1.cout  = 1'h0;
  assign \dawu.datapath.adder.fa1.s  = \dawu.datapath.addrreg.outreg [0];
  assign \dawu.datapath.adder.fa2.a  = \dawu.datapath.addrreg.outreg [1];
  assign \dawu.datapath.adder.fa2.cin  = 1'h0;
  assign \dawu.datapath.adder.fa2.cout  = \dawu.datapath.adder.gen_halfadder:1.ha.i_bit2 ;
  assign \dawu.datapath.adder.gen_halfadder:1.ha.i_bit1  = \dawu.datapath.addrreg.outreg [2];
  assign \dawu.datapath.adder.gen_halfadder:10.ha.i_bit1  = \dawu.datapath.addrreg.outreg [11];
  assign \dawu.datapath.adder.gen_halfadder:11.ha.i_bit1  = \dawu.datapath.addrreg.outreg [12];
  assign \dawu.datapath.adder.gen_halfadder:11.ha.i_bit2  = \dawu.datapath.adder.gen_halfadder:10.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:12.ha.i_bit1  = \dawu.datapath.addrreg.outreg [13];
  assign \dawu.datapath.adder.gen_halfadder:12.ha.i_bit2  = \dawu.datapath.adder.gen_halfadder:11.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:13.ha.i_bit1  = \dawu.datapath.addrreg.outreg [14];
  assign \dawu.datapath.adder.gen_halfadder:13.ha.i_bit2  = \dawu.datapath.adder.gen_halfadder:12.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:14.ha.i_bit1  = \dawu.datapath.addrreg.outreg [15];
  assign \dawu.datapath.adder.gen_halfadder:14.ha.i_bit2  = \dawu.datapath.adder.gen_halfadder:13.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:15.ha.i_bit1  = \dawu.datapath.addrreg.outreg [16];
  assign \dawu.datapath.adder.gen_halfadder:15.ha.i_bit2  = \dawu.datapath.adder.gen_halfadder:14.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:16.ha.i_bit1  = \dawu.datapath.addrreg.outreg [17];
  assign \dawu.datapath.adder.gen_halfadder:16.ha.i_bit2  = \dawu.datapath.adder.gen_halfadder:15.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:17.ha.i_bit1  = \dawu.datapath.addrreg.outreg [18];
  assign \dawu.datapath.adder.gen_halfadder:17.ha.i_bit2  = \dawu.datapath.adder.gen_halfadder:16.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:18.ha.i_bit1  = \dawu.datapath.addrreg.outreg [19];
  assign \dawu.datapath.adder.gen_halfadder:18.ha.i_bit2  = \dawu.datapath.adder.gen_halfadder:17.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:19.ha.i_bit1  = \dawu.datapath.addrreg.outreg [20];
  assign \dawu.datapath.adder.gen_halfadder:19.ha.i_bit2  = \dawu.datapath.adder.gen_halfadder:18.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:2.ha.i_bit1  = \dawu.datapath.addrreg.outreg [3];
  assign \dawu.datapath.adder.gen_halfadder:2.ha.i_bit2  = \dawu.datapath.adder.gen_halfadder:1.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:20.ha.i_bit1  = \dawu.datapath.addrreg.outreg [21];
  assign \dawu.datapath.adder.gen_halfadder:20.ha.i_bit2  = \dawu.datapath.adder.gen_halfadder:19.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:21.ha.i_bit1  = \dawu.datapath.addrreg.outreg [22];
  assign \dawu.datapath.adder.gen_halfadder:21.ha.i_bit2  = \dawu.datapath.adder.gen_halfadder:20.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:22.ha.i_bit1  = \dawu.datapath.addrreg.outreg [23];
  assign \dawu.datapath.adder.gen_halfadder:22.ha.i_bit2  = \dawu.datapath.adder.gen_halfadder:21.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:23.ha.i_bit1  = \dawu.datapath.addrreg.outreg [24];
  assign \dawu.datapath.adder.gen_halfadder:23.ha.i_bit2  = \dawu.datapath.adder.gen_halfadder:22.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:24.ha.i_bit1  = \dawu.datapath.addrreg.outreg [25];
  assign \dawu.datapath.adder.gen_halfadder:24.ha.i_bit2  = \dawu.datapath.adder.gen_halfadder:23.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:25.ha.i_bit1  = \dawu.datapath.addrreg.outreg [26];
  assign \dawu.datapath.adder.gen_halfadder:25.ha.i_bit2  = \dawu.datapath.adder.gen_halfadder:24.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:26.ha.i_bit1  = \dawu.datapath.addrreg.outreg [27];
  assign \dawu.datapath.adder.gen_halfadder:26.ha.i_bit2  = \dawu.datapath.adder.gen_halfadder:25.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:27.ha.i_bit1  = \dawu.datapath.addrreg.outreg [28];
  assign \dawu.datapath.adder.gen_halfadder:27.ha.i_bit2  = \dawu.datapath.adder.gen_halfadder:26.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:28.ha.i_bit1  = \dawu.datapath.addrreg.outreg [29];
  assign \dawu.datapath.adder.gen_halfadder:28.ha.i_bit2  = \dawu.datapath.adder.gen_halfadder:27.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:29.ha.i_bit1  = \dawu.datapath.addrreg.outreg [30];
  assign \dawu.datapath.adder.gen_halfadder:29.ha.i_bit2  = \dawu.datapath.adder.gen_halfadder:28.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:3.ha.i_bit1  = \dawu.datapath.addrreg.outreg [4];
  assign \dawu.datapath.adder.gen_halfadder:3.ha.i_bit2  = \dawu.datapath.adder.gen_halfadder:2.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:30.ha.i_bit1  = \dawu.datapath.addrreg.outreg [31];
  assign \dawu.datapath.adder.gen_halfadder:30.ha.i_bit2  = \dawu.datapath.adder.gen_halfadder:29.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:30.ha.o_carry  = \dawu.datapath.adder.cout [31];
  assign \dawu.datapath.adder.gen_halfadder:4.ha.i_bit1  = \dawu.datapath.addrreg.outreg [5];
  assign \dawu.datapath.adder.gen_halfadder:4.ha.i_bit2  = \dawu.datapath.adder.gen_halfadder:3.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:5.ha.i_bit1  = \dawu.datapath.addrreg.outreg [6];
  assign \dawu.datapath.adder.gen_halfadder:5.ha.i_bit2  = \dawu.datapath.adder.gen_halfadder:4.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:6.ha.i_bit1  = \dawu.datapath.addrreg.outreg [7];
  assign \dawu.datapath.adder.gen_halfadder:6.ha.i_bit2  = \dawu.datapath.adder.gen_halfadder:5.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:7.ha.i_bit1  = \dawu.datapath.addrreg.outreg [8];
  assign \dawu.datapath.adder.gen_halfadder:7.ha.i_bit2  = \dawu.datapath.adder.gen_halfadder:6.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:8.ha.i_bit1  = \dawu.datapath.addrreg.outreg [9];
  assign \dawu.datapath.adder.gen_halfadder:8.ha.i_bit2  = \dawu.datapath.adder.gen_halfadder:7.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:9.ha.i_bit1  = \dawu.datapath.addrreg.outreg [10];
  assign \dawu.datapath.adder.gen_halfadder:9.ha.i_bit2  = \dawu.datapath.adder.gen_halfadder:8.ha.o_carry ;
  assign \dawu.datapath.adder.gen_halfadder:9.ha.o_carry  = \dawu.datapath.adder.gen_halfadder:10.ha.i_bit2 ;
  assign \dawu.datapath.adder.sum  = { \dawu.datapath.adder.gen_halfadder:30.ha.o_sum , \dawu.datapath.adder.gen_halfadder:29.ha.o_sum , \dawu.datapath.adder.gen_halfadder:28.ha.o_sum , \dawu.datapath.adder.gen_halfadder:27.ha.o_sum , \dawu.datapath.adder.gen_halfadder:26.ha.o_sum , \dawu.datapath.adder.gen_halfadder:25.ha.o_sum , \dawu.datapath.adder.gen_halfadder:24.ha.o_sum , \dawu.datapath.adder.gen_halfadder:23.ha.o_sum , \dawu.datapath.adder.gen_halfadder:22.ha.o_sum , \dawu.datapath.adder.gen_halfadder:21.ha.o_sum , \dawu.datapath.adder.gen_halfadder:20.ha.o_sum , \dawu.datapath.adder.gen_halfadder:19.ha.o_sum , \dawu.datapath.adder.gen_halfadder:18.ha.o_sum , \dawu.datapath.adder.gen_halfadder:17.ha.o_sum , \dawu.datapath.adder.gen_halfadder:16.ha.o_sum , \dawu.datapath.adder.gen_halfadder:15.ha.o_sum , \dawu.datapath.adder.gen_halfadder:14.ha.o_sum , \dawu.datapath.adder.gen_halfadder:13.ha.o_sum , \dawu.datapath.adder.gen_halfadder:12.ha.o_sum , \dawu.datapath.adder.gen_halfadder:11.ha.o_sum , \dawu.datapath.adder.gen_halfadder:10.ha.o_sum , \dawu.datapath.adder.gen_halfadder:9.ha.o_sum , \dawu.datapath.adder.gen_halfadder:8.ha.o_sum , \dawu.datapath.adder.gen_halfadder:7.ha.o_sum , \dawu.datapath.adder.gen_halfadder:6.ha.o_sum , \dawu.datapath.adder.gen_halfadder:5.ha.o_sum , \dawu.datapath.adder.gen_halfadder:4.ha.o_sum , \dawu.datapath.adder.gen_halfadder:3.ha.o_sum , \dawu.datapath.adder.gen_halfadder:2.ha.o_sum , \dawu.datapath.adder.gen_halfadder:1.ha.o_sum , \dawu.datapath.adder.fa2.s , \dawu.datapath.addrreg.outreg [0] };
  assign \dawu.datapath.addrin  = \daru2.datapath.addrreg.inreg ;
  assign \dawu.datapath.addroutreg  = \dawu.datapath.addrreg.outreg ;
  assign \dawu.datapath.addrreg.clk  = clk;
  assign \dawu.datapath.addrreg.inreg  = \daru2.datapath.addrreg.inreg ;
  assign \dawu.datapath.addrreg.load  = \dawu.controller.initcnt ;
  assign \dawu.datapath.addrreg.rst  = rst;
  assign \dawu.datapath.addrreg.zero  = 1'h0;
  assign \dawu.datapath.bytecnt  = { \dawu.datapath.adder.fa2.b , 1'h0 };
  assign \dawu.datapath.bytestowrite  = bytespermemaccessdawu;
  assign \dawu.datapath.bytestowrite_temp  = bytespermemaccessdawu;
  assign \dawu.datapath.checkmisaligneddawu  = e2m_ctrl_word_curr[47];
  assign \dawu.datapath.clk  = clk;
  assign \dawu.datapath.cocnt  = \dawu.controller.cocnt ;
  assign \dawu.datapath.counter.clk  = clk;
  assign \dawu.datapath.counter.cocnt  = \dawu.datapath.counter.cocntp ;
  assign \dawu.datapath.counter.inccnt  = \dawu.controller.inccnt ;
  assign \dawu.datapath.counter.initcnt  = \dawu.controller.initcnt ;
  assign \dawu.datapath.counter.initvalue  = 1'h0;
  assign \dawu.datapath.counter.outcnt  = \dawu.datapath.adder.fa2.b ;
  assign \dawu.datapath.counter.rst  = rst;
  assign \dawu.datapath.counter.temp  = \dawu.datapath.adder.fa2.b ;
  assign \dawu.datapath.counter.zerocnt  = 1'h0;
  assign \dawu.datapath.datain  = e2m_op2_curr;
  assign \dawu.datapath.enableaddr  = \dawu.controller.enableaddr ;
  assign \dawu.datapath.enabledata  = \dawu.controller.enableaddr ;
  assign \dawu.datapath.errordecoder.addrin  = \daru2.datapath.addrreg.inreg [1:0];
  assign \dawu.datapath.errordecoder.checkmisaligneddawu  = e2m_ctrl_word_curr[47];
  assign \dawu.datapath.errordecoder.nbytes  = e2m_ctrl_word_curr[44:43];
  assign \dawu.datapath.inccnt  = \dawu.controller.inccnt ;
  assign \dawu.datapath.initcnt  = \dawu.controller.initcnt ;
  assign \dawu.datapath.initvaluecnt  = 2'h0;
  assign \dawu.datapath.ldaddr  = \dawu.controller.initcnt ;
  assign \dawu.datapath.lddata  = \dawu.controller.initcnt ;
  assign \dawu.datapath.ldnumbytes  = \dawu.controller.initcnt ;
  assign \dawu.datapath.nbytesin  = e2m_ctrl_word_curr[44:43];
  assign \dawu.datapath.nbytesreg.clk  = clk;
  assign \dawu.datapath.nbytesreg.inreg  = e2m_ctrl_word_curr[44:43];
  assign \dawu.datapath.nbytesreg.load  = \dawu.controller.initcnt ;
  assign \dawu.datapath.nbytesreg.outreg  = \dawu.datapath.nbytesout ;
  assign \dawu.datapath.nbytesreg.rst  = rst;
  assign \dawu.datapath.nbytesreg.zero  = 1'h0;
  assign \dawu.datapath.outcnt  = \dawu.datapath.adder.fa2.b ;
  assign \dawu.datapath.reg0.clk  = clk;
  assign \dawu.datapath.reg0.inreg  = e2m_op2_curr[15:0];
  assign \dawu.datapath.reg0.load  = \dawu.controller.initcnt ;
  assign \dawu.datapath.reg0.outreg  = \dawu.datapath.outreg0 ;
  assign \dawu.datapath.reg0.rst  = rst;
  assign \dawu.datapath.reg0.zero  = 1'h0;
  assign \dawu.datapath.reg1.clk  = clk;
  assign \dawu.datapath.reg1.inreg  = e2m_op2_curr[31:16];
  assign \dawu.datapath.reg1.load  = \dawu.controller.initcnt ;
  assign \dawu.datapath.reg1.outreg  = \dawu.datapath.outreg1 ;
  assign \dawu.datapath.reg1.rst  = rst;
  assign \dawu.datapath.reg1.zero  = 1'h0;
  assign \dawu.datapath.rst  = rst;
  assign \dawu.datapath.writeaddr  = { \dawu.datapath.adder.gen_halfadder:30.ha.o_sum , \dawu.datapath.adder.gen_halfadder:29.ha.o_sum , \dawu.datapath.adder.gen_halfadder:28.ha.o_sum , \dawu.datapath.adder.gen_halfadder:27.ha.o_sum , \dawu.datapath.adder.gen_halfadder:26.ha.o_sum , \dawu.datapath.adder.gen_halfadder:25.ha.o_sum , \dawu.datapath.adder.gen_halfadder:24.ha.o_sum , \dawu.datapath.adder.gen_halfadder:23.ha.o_sum , \dawu.datapath.adder.gen_halfadder:22.ha.o_sum , \dawu.datapath.adder.gen_halfadder:21.ha.o_sum , \dawu.datapath.adder.gen_halfadder:20.ha.o_sum , \dawu.datapath.adder.gen_halfadder:19.ha.o_sum , \dawu.datapath.adder.gen_halfadder:18.ha.o_sum , \dawu.datapath.adder.gen_halfadder:17.ha.o_sum , \dawu.datapath.adder.gen_halfadder:16.ha.o_sum , \dawu.datapath.adder.gen_halfadder:15.ha.o_sum , \dawu.datapath.adder.gen_halfadder:14.ha.o_sum , \dawu.datapath.adder.gen_halfadder:13.ha.o_sum , \dawu.datapath.adder.gen_halfadder:12.ha.o_sum , \dawu.datapath.adder.gen_halfadder:11.ha.o_sum , \dawu.datapath.adder.gen_halfadder:10.ha.o_sum , \dawu.datapath.adder.gen_halfadder:9.ha.o_sum , \dawu.datapath.adder.gen_halfadder:8.ha.o_sum , \dawu.datapath.adder.gen_halfadder:7.ha.o_sum , \dawu.datapath.adder.gen_halfadder:6.ha.o_sum , \dawu.datapath.adder.gen_halfadder:5.ha.o_sum , \dawu.datapath.adder.gen_halfadder:4.ha.o_sum , \dawu.datapath.adder.gen_halfadder:3.ha.o_sum , \dawu.datapath.adder.gen_halfadder:2.ha.o_sum , \dawu.datapath.adder.gen_halfadder:1.ha.o_sum , \dawu.datapath.adder.fa2.s , \dawu.datapath.addrreg.outreg [0] };
  assign \dawu.datapath.zeroaddr  = 1'h0;
  assign \dawu.datapath.zerocnt  = 1'h0;
  assign \dawu.datapath.zerodata  = 1'h0;
  assign \dawu.datapath.zeronumbytes  = 1'h0;
  assign \dawu.enableaddr  = \dawu.controller.enableaddr ;
  assign \dawu.enabledata  = \dawu.controller.enableaddr ;
  assign \dawu.inccnt  = \dawu.controller.inccnt ;
  assign \dawu.initcnt  = \dawu.controller.initcnt ;
  assign \dawu.ldaddr  = \dawu.controller.initcnt ;
  assign \dawu.lddata  = \dawu.controller.initcnt ;
  assign \dawu.ldnumbytes  = \dawu.controller.initcnt ;
  assign \dawu.memready  = memready2;
  assign \dawu.nbytes  = e2m_ctrl_word_curr[44:43];
  assign \dawu.rst  = rst;
  assign \dawu.startdawu  = \dawu.controller.startdawu ;
  assign \dawu.sync_rst  = m2wb_en;
  assign \dawu.writemem  = \dawu.controller.enableaddr ;
  assign \dawu.zeroaddr  = 1'h0;
  assign \dawu.zerocnt  = 1'h0;
  assign \dawu.zerodata  = 1'h0;
  assign \dawu.zeronumbytes  = 1'h0;
  assign dawu_en = \dawu.controller.startdawu ;
  assign dec_valid = gi2d_valid_curr;
  assign delegationmode = \interrcheckcausedetection.delegationmode ;
  assign dividedbyzeroflag = \aau.division.dividedbyzeroflag ;
  assign e2m_alu_res_curr = \daru2.datapath.addrreg.inreg ;
  assign e2m_en_def = e2m_en;
  assign e2m_eq_next = \comparator.eq ;
  assign e2m_gt_next = \comparator.gt ;
  assign e2m_lt_next = \comparator.lt ;
  assign e_addsubbar = d2e_ctrl_word_curr[17];
  assign e_cmp_selaluop2 = d2e_ctrl_word_curr[57];
  assign e_cmp_selop2 = d2e_ctrl_word_curr[58];
  assign e_comparedsignedunsignedbar = d2e_ctrl_word_curr[2];
  assign e_pass = d2e_ctrl_word_curr[18];
  assign e_selaah = d2e_ctrl_word_curr[42];
  assign e_selaal = d2e_ctrl_word_curr[41];
  assign e_selaau = d2e_ctrl_word_curr[8];
  assign e_selasu = d2e_ctrl_word_curr[7];
  assign e_selbsu = d2e_ctrl_word_curr[5];
  assign e_selcsr = d2e_ctrl_word_curr[45];
  assign e_selllu = d2e_ctrl_word_curr[6];
  assign e_sellogic = d2e_ctrl_word_curr[33:32];
  assign e_selshift = d2e_ctrl_word_curr[16:15];
  assign e_signedsigned = d2e_ctrl_word_curr[38];
  assign e_signedunsigned = d2e_ctrl_word_curr[39];
  assign e_startdivideaau = d2e_ctrl_word_curr[37];
  assign e_startmultiplyaau = d2e_ctrl_word_curr[36];
  assign e_unsignedunsigned = d2e_ctrl_word_curr[40];
  assign ex_valid = d2e_valid_curr;
  assign exceptionraise = exceptionraise_int;
  assign f2gi_pc_plus4_next = \i4pc.add [31:0];
  assign gi2d_instr_next = { \daru1.datapath.dataout [31:16], \daru1.datapath.reg0.outreg  };
  assign gi2d_pc_next = \daru1.datapath.addrreg.outreg ;
  assign gi2d_pc_plus4_next = f2gi_pc_plus4_curr;
  assign hazex = hazex_int;
  assign hazex_csr_second_operand = bypass_csr_second_operand;
  assign hazex_csr_second_operand_en = bypass_csr_second_operand_en;
  assign hazex_first_operand = bypass_first_operand;
  assign hazex_first_operand_en = bypass_first_operand_en;
  assign hazex_second_operand = bypass_second_operand;
  assign hazex_second_operand_en = bypass_second_operand_en;
  assign hazex_zero_first_operand = hazm_zero_first_operand;
  assign hazex_zero_second_operand = hazm_zero_second_operand;
  assign hazm = hazm_int;
  assign hazm_csr_second_operand = bypass_csr_second_operand;
  assign hazm_csr_second_operand_en = bypass_csr_second_operand_en;
  assign hazm_first_operand = bypass_first_operand;
  assign hazm_first_operand_en = bypass_first_operand_en;
  assign hazm_second_operand = bypass_second_operand;
  assign hazm_second_operand_en = bypass_second_operand_en;
  assign \i4pc.a  = \daru1.datapath.addrreg.inreg ;
  assign \i4pc.addresult  = \i4pc.add [31:0];
  assign \i4pc.b  = 32'd4;
  assign \i4pc.carryout  = \i4pc.add [32];
  assign \i4pc.cin  = 1'h0;
  assign immediate = { gi2d_instr_curr[31], \immselsignex.imm [30:0] };
  assign \immselsignex.imm [31] = gi2d_instr_curr[31];
  assign \immselsignex.ir11_8  = gi2d_instr_curr[11:8];
  assign \immselsignex.ir19_12  = gi2d_instr_curr[19:12];
  assign \immselsignex.ir20  = gi2d_instr_curr[20];
  assign \immselsignex.ir24_21  = gi2d_instr_curr[24:21];
  assign \immselsignex.ir30_25  = gi2d_instr_curr[30:25];
  assign \immselsignex.ir31  = gi2d_instr_curr[31];
  assign \immselsignex.ir7  = gi2d_instr_curr[7];
  assign \immselsignex.selb  = muxcode[8];
  assign \immselsignex.selbuj  = muxcode[2];
  assign \immselsignex.seli  = muxcode[0];
  assign \immselsignex.selij  = muxcode[3];
  assign \immselsignex.selis  = muxcode[7];
  assign \immselsignex.selisb  = muxcode[10];
  assign \immselsignex.selisbj  = muxcode[6];
  assign \immselsignex.selj  = muxcode[9];
  assign \immselsignex.sels  = muxcode[1];
  assign \immselsignex.selsb  = muxcode[4];
  assign \immselsignex.selu  = muxcode[5];
  assign \immselsignex.seluj  = muxcode[11];
  assign inc4pc = \i4pc.add [31:0];
  assign incsr = \csrisl.incsr ;
  assign inst = gi2d_instr_curr;
  assign instrmisalignedflag = gi2d_ex_flag_next;
  assign instructiondone = instructiondone_int;
  assign \interrcheckcausedetection.causecode  = \csrisl.causecode ;
  assign \interrcheckcausedetection.clk  = clk;
  assign \interrcheckcausedetection.curprv  = curprv;
  assign \interrcheckcausedetection.currentprv  = curprv;
  assign \interrcheckcausedetection.exceptionraise  = exceptionraisetemp;
  assign \interrcheckcausedetection.exceptionraisetemp  = exceptionraisetemp;
  assign \interrcheckcausedetection.inst  = gi2d_instr_curr;
  assign \interrcheckcausedetection.interruptraise  = \interrcheckcausedetection.interraisetemp ;
  assign \interrcheckcausedetection.lddelegation  = lddelegation;
  assign \interrcheckcausedetection.ldmachine  = ldmachine;
  assign \interrcheckcausedetection.lduser  = lduser;
  assign \interrcheckcausedetection.medelegcsr  = d2e_outcsr_next;
  assign \interrcheckcausedetection.midelegcsr  = d2e_outcsr_next;
  assign { \interrcheckcausedetection.miecc [15:12], \interrcheckcausedetection.miecc [10:9], \interrcheckcausedetection.miecc [6:5], \interrcheckcausedetection.miecc [2:1] } = { \register_bank.mieccregister.outreg [15:12], \register_bank.mieccregister.outreg [10:9], \register_bank.mieccregister.outreg [6:5], \register_bank.mieccregister.outreg [2:1] };
  assign \interrcheckcausedetection.mipcc  = \csrisl.ccmip ;
  assign \interrcheckcausedetection.outadr  = m2wb_alu_res_curr;
  assign \interrcheckcausedetection.rst  = rst;
  assign \interrcheckcausedetection.tempdividedbyzero  = m2wb_divided_by_zero_flag_curr;
  assign \interrcheckcausedetection.tempecallflag  = m2wb_ecall_flag_curr;
  assign \interrcheckcausedetection.tempflags  = { m2wb_ecall_flag_curr, m2wb_divided_by_zero_flag_curr, m2wb_illegal_instruction_flag_curr, m2wb_instr_misaligned_flag_curr, 2'h0 };
  assign \interrcheckcausedetection.tempillegalinstr  = m2wb_illegal_instruction_flag_curr;
  assign \interrcheckcausedetection.tempinstraddrmisaligned  = m2wb_instr_misaligned_flag_curr;
  assign \interrcheckcausedetection.temploadaddrmisaligned  = 1'h0;
  assign \interrcheckcausedetection.tempstoreaddrmisaligned  = 1'h0;
  assign \interrcheckcausedetection.trapvalue  = \csrisl.trapvalue ;
  assign interruptraise = interruptraise_int;
  assign interruptraisetemp = \interrcheckcausedetection.interraisetemp ;
  assign interruptsources = { platforminterruptsignals, 4'h0, machineexternalinterrupt, 2'h0, userexternalinterrupt, machinetimerinterrupt, 2'h0, usertimerinterrupt, machinesoftwareinterrupt, 2'h0, usersoftwareinterrupt };
  assign interruptstartaddressdirect = d2e_outcsr_next;
  assign \interruptstartaddressgenerator.causecode  = { \csrisl.causecode [31], \csrisl.causecode [4:0] };
  assign \interruptstartaddressgenerator.interruptstartaddressdirect  = d2e_outcsr_next;
  assign \interruptstartaddressgenerator.interruptstartaddressvectored [31:30] = 2'h0;
  assign \interruptstartaddressgenerator.modetvec  = d2e_outcsr_next[1:0];
  assign \interruptstartaddressgenerator.tvecbase  = d2e_outcsr_next;
  assign interruptstartaddressvectored = { 2'h0, \interruptstartaddressgenerator.interruptstartaddressvectored [29:0] };
  assign \intersrcsynchreg.clk  = clk;
  assign \intersrcsynchreg.inreg  = { platforminterruptsignals, 4'h0, machineexternalinterrupt, 2'h0, userexternalinterrupt, machinetimerinterrupt, 2'h0, usertimerinterrupt, machinesoftwareinterrupt, 2'h0, usersoftwareinterrupt };
  assign \intersrcsynchreg.outreg  = \csrisl.ccmip ;
  assign \intersrcsynchreg.rst  = rst;
  assign \intersrcsynchreg.zero  = 1'h0;
  assign ir = gi2d_instr_curr;
  assign is_load_in_mem = e2m_ctrl_word_curr[35];
  assign is_store_in_mem = e2m_ctrl_word_curr[34];
  assign ldmiereg = \register_bank.csr_address_logic.ldmiereg ;
  assign ldmieuiefield = \register_bank.csr_address_logic.ldmieuiefield ;
  assign \llu.ain  = \aau.ain ;
  assign \llu.bin  = \aau.bin ;
  assign \llu.sellogic  = d2e_ctrl_word_curr[33:32];
  assign \llu.y  = \llu.result ;
  assign lluresult = \llu.result ;
  assign m2wb_op1_curr = \csrisl.p1 ;
  assign m2wb_pc_curr = \interrcheckcausedetection.outpc ;
  assign m_checkmisaligneddawu = e2m_ctrl_word_curr[47];
  assign m_func3 = e2m_instr_curr[14:12];
  assign m_ldbytesigned = e2m_ctrl_word_curr[12];
  assign m_ldhalfsigned = e2m_ctrl_word_curr[13];
  assign m_load = e2m_ctrl_word_curr[14];
  assign m_nbytes = e2m_ctrl_word_curr[44:43];
  assign m_opcode = e2m_instr_curr[6:0];
  assign m_startdaru = e2m_ctrl_word_curr[35];
  assign m_startdawu = e2m_ctrl_word_curr[34];
  assign m_valid = e2m_valid_curr;
  assign memaddr1 = \daru1.datapath.addrout ;
  assign memaddrdaru2 = \daru2.datapath.addrout ;
  assign memaddrdawu = \dawu.datapath.addrout ;
  assign mirror = mirror_int;
  assign mirroraddress = { 4'h0, \mux8.a [7:0] };
  assign mirroruie = \csrisl.mirroruie ;
  assign mirroruip = \csrisl.mirroruip ;
  assign mirrorustatus = \csrisl.mirrorustatus ;
  assign modetvec = d2e_outcsr_next[1:0];
  assign \mux2.b  = gi2d_pc_curr;
  assign \mux2.s0  = seljl;
  assign \mux2.s1  = selpc;
  assign \mux2.w  = d2e_alu_op1_next;
  assign \mux5.a  = d2e_op2_next;
  assign \mux5.b  = { gi2d_instr_curr[31], \immselsignex.imm [30:0] };
  assign \mux5.s0  = selp2;
  assign \mux5.s1  = selimm;
  assign \mux5.w  = d2e_alu_op2_next;
  assign \mux6.a  = d2e_op1_next;
  assign \mux6.b  = gi2d_pc_curr;
  assign \mux6.s0  = selp1;
  assign \mux6.s1  = selauipc;
  assign \mux6.w  = \mux2.a ;
  assign \mux8.b  = { 4'h0, \mux8.a [7:0] };
  assign \mux8.s1  = mirrorusercu;
  assign \muxcmp.a  = \aau.bin ;
  assign \muxcmp.b  = d2e_op2_curr;
  assign \muxcmp.s0  = d2e_ctrl_word_curr[57];
  assign \muxcmp.s1  = d2e_ctrl_word_curr[58];
  assign \muxcmp.w  = \comparator.bin ;
  assign op1_p1_pc = \mux2.a ;
  assign outaddr = { 5'h06, \csraddressingdecoder.outaddr [6], 3'h0, \csraddressingdecoder.outaddr [2:0] };
  assign \outcsr_register.clk  = clk;
  assign \outcsr_register.inreg  = d2e_outcsr_next;
  assign \outcsr_register.load  = 1'h1;
  assign \outcsr_register.outreg  = outcsr_reg;
  assign \outcsr_register.rst  = rst;
  assign \outcsr_register.zero  = 1'h0;
  assign outcsr_write_val = \csrisl.outcsr ;
  assign outpc = \daru1.datapath.addrreg.inreg ;
  assign preaddressregbank = \mux8.a ;
  assign previousprv = \csrisl.outcsr [12:11];
  assign readmemdaru1 = \daru1.controller.enableaddr ;
  assign readmemdaru1_int = \daru1.controller.enableaddr ;
  assign readmemdaru2 = \daru2.controller.enableaddr ;
  assign readmemdaru2_int = \daru2.controller.enableaddr ;
  assign \register_bank.addressregbank  = addressregbank;
  assign \register_bank.clk  = clk;
  assign \register_bank.csr_address_logic.addressregbank  = \mux8.w ;
  assign \register_bank.csr_address_logic.mirror  = mirror_int;
  assign \register_bank.csr_address_logic.mirroruie  = \csrisl.mirroruie ;
  assign \register_bank.csr_address_logic.mirroruietemp  = \csrisl.mirroruie ;
  assign \register_bank.csr_address_logic.mirroruip  = \csrisl.mirroruip ;
  assign \register_bank.csr_address_logic.mirroruiptemp  = \csrisl.mirroruip ;
  assign \register_bank.csr_address_logic.mirrorustatus  = \csrisl.mirrorustatus ;
  assign \register_bank.csr_address_logic.mirrorustatustemp  = \csrisl.mirrorustatus ;
  assign \register_bank.csr_registers.addressregbank  = { addressregbank[8], addressregbank[6], addressregbank[2:0] };
  assign \register_bank.csr_registers.clk  = clk;
  assign \register_bank.csr_registers.inputregbank  = \csrisl.incsr ;
  assign \register_bank.csr_registers.outregbank  = d2e_outcsr_next_pre_bypass;
  assign \register_bank.csr_registers.rst  = rst;
  assign \register_bank.csr_registers.writeaddressregbank  = { \mux8.w [8], \mux8.w [6], \mux8.w [2:0] };
  assign \register_bank.csr_registers.writeregbank  = writeregbank;
  assign \register_bank.inputregbank  = \csrisl.incsr ;
  assign \register_bank.ldmiereg  = \register_bank.csr_address_logic.ldmiereg ;
  assign \register_bank.ldmieuiefield  = \register_bank.csr_address_logic.ldmieuiefield ;
  assign \register_bank.loadmiereg  = loadmiereg;
  assign \register_bank.loadmieuiefield  = loadmieuiefield;
  assign \register_bank.mieccregister.clk  = clk;
  assign \register_bank.mieccregister.inreg  = \csrisl.incsr ;
  assign \register_bank.mieccregister.load  = loadmiereg;
  assign { \register_bank.mieccregister.outreg [31:16], \register_bank.mieccregister.outreg [11], \register_bank.mieccregister.outreg [8:7], \register_bank.mieccregister.outreg [4:3], \register_bank.mieccregister.outreg [0] } = { \interrcheckcausedetection.miecc [31:16], \interrcheckcausedetection.miecc [11], \interrcheckcausedetection.miecc [8:7], \interrcheckcausedetection.miecc [4:3], \interrcheckcausedetection.miecc [0] };
  assign \register_bank.mieccregister.rst  = rst;
  assign \register_bank.mieccregister.zero  = 1'h0;
  assign \register_bank.miefieldccregister.clk  = clk;
  assign \register_bank.miefieldccregister.inreg  = \csrisl.incsr [3];
  assign \register_bank.miefieldccregister.load  = loadmieuiefield;
  assign \register_bank.miefieldccregister.outreg  = \interrcheckcausedetection.miefieldcc ;
  assign \register_bank.miefieldccregister.rst  = rst;
  assign \register_bank.miefieldccregister.zero  = 1'h0;
  assign \register_bank.mirror  = mirror_int;
  assign \register_bank.mirroruie  = \csrisl.mirroruie ;
  assign \register_bank.mirroruip  = \csrisl.mirroruip ;
  assign \register_bank.mirrorustatus  = \csrisl.mirrorustatus ;
  assign \register_bank.outmieccreg  = { \interrcheckcausedetection.miecc [31:16], \register_bank.mieccregister.outreg [15:12], \interrcheckcausedetection.miecc [11], \register_bank.mieccregister.outreg [10:9], \interrcheckcausedetection.miecc [8:7], \register_bank.mieccregister.outreg [6:5], \interrcheckcausedetection.miecc [4:3], \register_bank.mieccregister.outreg [2:1], \interrcheckcausedetection.miecc [0] };
  assign \register_bank.outmiefieldccreg  = \interrcheckcausedetection.miefieldcc ;
  assign \register_bank.outregbank  = d2e_outcsr_next_pre_bypass;
  assign \register_bank.outuiefieldccreg  = \interrcheckcausedetection.uiefieldcc ;
  assign \register_bank.rst  = rst;
  assign \register_bank.translatedaddress  = { addressregbank[8], addressregbank[6], addressregbank[2:0] };
  assign \register_bank.translatedwriteaddress  = { \mux8.w [8], \mux8.w [6], \mux8.w [2:0] };
  assign \register_bank.uiefieldccregister.clk  = clk;
  assign \register_bank.uiefieldccregister.inreg  = \csrisl.incsr [0];
  assign \register_bank.uiefieldccregister.load  = loadmieuiefield;
  assign \register_bank.uiefieldccregister.outreg  = \interrcheckcausedetection.uiefieldcc ;
  assign \register_bank.uiefieldccregister.rst  = rst;
  assign \register_bank.uiefieldccregister.zero  = 1'h0;
  assign \register_bank.writeaddressregbank  = \mux8.w ;
  assign \register_bank.writeregbank  = writeregbank;
  assign \registerfile.clk  = clk;
  assign \registerfile.p1  = p1;
  assign \registerfile.p2  = p2;
  assign \registerfile.rd  = m2wb_instr_curr[11:7];
  assign \registerfile.rs1  = gi2d_instr_curr[19:15];
  assign \registerfile.rs2  = gi2d_instr_curr[24:20];
  assign \registerfile.rst  = rst;
  assign \regpc.clk  = clk;
  assign \regpc.inreg  = inpc;
  assign \regpc.load  = ldpc;
  assign \regpc.outreg  = \daru1.datapath.addrreg.inreg ;
  assign \regpc.rst  = rst;
  assign \regpc.zero  = 1'h0;
  assign resaah = \aau.resaau1 ;
  assign resaal = \aau.resaau2 ;
  assign setone_in = \registerfile.setone ;
  assign setzero_in = \registerfile.setzero ;
  assign startdivideaau_def = \aau.division.startsdiv ;
  assign startmultiplyaau_def = \aau.multiplication.controller.startbooth ;
  assign \sulu.datain  = { \daru2.datapath.reg1.outreg , \daru2.datapath.reg0.outreg  };
  assign \sulu.dataout  = m2wb_mem_res_next;
  assign \sulu.load  = e2m_ctrl_word_curr[14];
  assign \sulu.loadbytesigned  = e2m_ctrl_word_curr[12];
  assign \sulu.loadhalfsigned  = e2m_ctrl_word_curr[13];
  assign tempflags = { m2wb_ecall_flag_curr, m2wb_divided_by_zero_flag_curr, m2wb_illegal_instruction_flag_curr, m2wb_instr_misaligned_flag_curr, 2'h0 };
  assign trapvalue = \csrisl.trapvalue ;
  assign validaccesscsr = validaccesscsr_int;
  assign validaddresscsr = \csr_address_ctrl.validaddresscsr ;
  assign wb_addressregbank = \mux8.w ;
  assign wb_func3 = m2wb_instr_curr[14:12];
  assign wb_iscsrinstruction = m2wb_ctrl_word_curr[59];
  assign wb_mreturetbar = m2wb_instr_curr[29];
  assign wb_ret_from_epc = m2wb_ctrl_word_curr[53];
  assign wb_ret_from_epc_int = m2wb_ctrl_word_curr[53];
  assign wb_selalu = m2wb_ctrl_word_curr[54];
  assign wb_selcsraddrfrominst = m2wb_ctrl_word_curr[48];
  assign wb_selmem = m2wb_ctrl_word_curr[56];
  assign wb_selpc4 = m2wb_ctrl_word_curr[55];
  assign wb_setzeroorone = m2wb_ctrl_word_curr[1];
  assign wb_valid = m2wb_valid_curr;
  assign wb_validaccesscsr = m2wb_validaccesscsr_curr;
  assign wb_writeregfile = m2wb_ctrl_word_curr[0];
  assign writeaddressregbank = \mux8.w ;
  assign writedata = \registerfile.writedata ;
  assign writememdawu = \dawu.controller.enableaddr ;
  assign writememdawu_int = \dawu.controller.enableaddr ;
  assign writeregfile_in = \registerfile.writeregfile ;
endmodule

module aftab_dawu_32(clk, rst, sync_rst, startdawu, memready, nbytes, addrin, datain, checkmisaligneddawu, addrout, dataout, storemisalignedflag, writemem, completedawu, bytestowrite);
  wire _00_;
  reg _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  reg [31:0] _12_;
  wire [31:0] _13_;
  reg _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  wire _24_;
  wire _25_;
  wire _26_;
  wire _27_;
  wire _28_;
  wire _29_;
  reg [1:0] _30_;
  wire [1:0] _31_;
  reg [15:0] _32_;
  wire [15:0] _33_;
  reg [15:0] _34_;
  wire [15:0] _35_;
  input [31:0] addrin;
  wire [31:0] addrin;
  output [31:0] addrout;
  wire [31:0] addrout;
  output bytestowrite;
  wire bytestowrite;
  input checkmisaligneddawu;
  wire checkmisaligneddawu;
  input clk;
  wire clk;
  wire cocnt;
  output completedawu;
  wire completedawu;
  (* hdlname = "controller clk" *)
  wire \controller.clk ;
  (* hdlname = "controller cocnt" *)
  wire \controller.cocnt ;
  (* hdlname = "controller completedawu" *)
  wire \controller.completedawu ;
  (* hdlname = "controller enableaddr" *)
  wire \controller.enableaddr ;
  (* hdlname = "controller enabledata" *)
  wire \controller.enabledata ;
  (* hdlname = "controller inccnt" *)
  wire \controller.inccnt ;
  (* hdlname = "controller initcnt" *)
  wire \controller.initcnt ;
  (* hdlname = "controller ldaddr" *)
  wire \controller.ldaddr ;
  (* hdlname = "controller lddata" *)
  wire \controller.lddata ;
  (* hdlname = "controller ldnumbytes" *)
  wire \controller.ldnumbytes ;
  (* hdlname = "controller memready" *)
  wire \controller.memready ;
  (* hdlname = "controller nstate" *)
  wire \controller.nstate ;
  (* hdlname = "controller pstate" *)
  wire \controller.pstate ;
  (* hdlname = "controller rst" *)
  wire \controller.rst ;
  (* hdlname = "controller startdawu" *)
  wire \controller.startdawu ;
  (* hdlname = "controller sync_rst" *)
  wire \controller.sync_rst ;
  (* hdlname = "controller writemem" *)
  wire \controller.writemem ;
  (* hdlname = "controller zeroaddr" *)
  wire \controller.zeroaddr ;
  (* hdlname = "controller zerocnt" *)
  wire \controller.zerocnt ;
  (* hdlname = "controller zerodata" *)
  wire \controller.zerodata ;
  (* hdlname = "controller zeronumbytes" *)
  wire \controller.zeronumbytes ;
  input [31:0] datain;
  wire [31:0] datain;
  output [15:0] dataout;
  wire [15:0] dataout;
  (* hdlname = "datapath adder a" *)
  wire [31:0] \datapath.adder.a ;
  (* hdlname = "datapath adder b" *)
  wire [1:0] \datapath.adder.b ;
  (* hdlname = "datapath adder cout" *)
  (* unused_bits = "31" *)
  wire [31:0] \datapath.adder.cout ;
  (* hdlname = "datapath adder fa1 a" *)
  wire \datapath.adder.fa1.a ;
  (* hdlname = "datapath adder fa1 b" *)
  wire \datapath.adder.fa1.b ;
  (* hdlname = "datapath adder fa1 cin" *)
  wire \datapath.adder.fa1.cin ;
  (* hdlname = "datapath adder fa1 cout" *)
  wire \datapath.adder.fa1.cout ;
  (* hdlname = "datapath adder fa1 s" *)
  wire \datapath.adder.fa1.s ;
  (* hdlname = "datapath adder fa2 a" *)
  wire \datapath.adder.fa2.a ;
  (* hdlname = "datapath adder fa2 b" *)
  wire \datapath.adder.fa2.b ;
  (* hdlname = "datapath adder fa2 cin" *)
  wire \datapath.adder.fa2.cin ;
  (* hdlname = "datapath adder fa2 cout" *)
  wire \datapath.adder.fa2.cout ;
  (* hdlname = "datapath adder fa2 s" *)
  wire \datapath.adder.fa2.s ;
  (* hdlname = "datapath adder gen_halfadder:1.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:1.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:1.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:1.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:1.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:1.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:1.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:1.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:10.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:10.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:10.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:10.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:10.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:10.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:10.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:10.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:11.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:11.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:11.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:11.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:11.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:11.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:11.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:11.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:12.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:12.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:12.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:12.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:12.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:12.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:12.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:12.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:13.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:13.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:13.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:13.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:13.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:13.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:13.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:13.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:14.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:14.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:14.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:14.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:14.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:14.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:14.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:14.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:15.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:15.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:15.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:15.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:15.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:15.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:15.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:15.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:16.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:16.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:16.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:16.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:16.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:16.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:16.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:16.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:17.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:17.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:17.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:17.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:17.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:17.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:17.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:17.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:18.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:18.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:18.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:18.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:18.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:18.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:18.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:18.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:19.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:19.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:19.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:19.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:19.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:19.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:19.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:19.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:2.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:2.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:2.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:2.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:2.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:2.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:2.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:2.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:20.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:20.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:20.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:20.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:20.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:20.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:20.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:20.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:21.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:21.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:21.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:21.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:21.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:21.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:21.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:21.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:22.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:22.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:22.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:22.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:22.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:22.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:22.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:22.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:23.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:23.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:23.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:23.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:23.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:23.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:23.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:23.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:24.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:24.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:24.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:24.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:24.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:24.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:24.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:24.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:25.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:25.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:25.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:25.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:25.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:25.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:25.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:25.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:26.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:26.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:26.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:26.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:26.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:26.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:26.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:26.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:27.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:27.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:27.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:27.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:27.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:27.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:27.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:27.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:28.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:28.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:28.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:28.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:28.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:28.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:28.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:28.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:29.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:29.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:29.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:29.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:29.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:29.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:29.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:29.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:3.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:3.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:3.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:3.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:3.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:3.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:3.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:3.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:30.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:30.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:30.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:30.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:30.ha o_carry" *)
  (* unused_bits = "0" *)
  wire \datapath.adder.gen_halfadder:30.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:30.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:30.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:4.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:4.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:4.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:4.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:4.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:4.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:4.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:4.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:5.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:5.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:5.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:5.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:5.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:5.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:5.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:5.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:6.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:6.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:6.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:6.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:6.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:6.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:6.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:6.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:7.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:7.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:7.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:7.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:7.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:7.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:7.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:7.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:8.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:8.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:8.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:8.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:8.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:8.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:8.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:8.ha.o_sum ;
  (* hdlname = "datapath adder gen_halfadder:9.ha i_bit1" *)
  wire \datapath.adder.gen_halfadder:9.ha.i_bit1 ;
  (* hdlname = "datapath adder gen_halfadder:9.ha i_bit2" *)
  wire \datapath.adder.gen_halfadder:9.ha.i_bit2 ;
  (* hdlname = "datapath adder gen_halfadder:9.ha o_carry" *)
  wire \datapath.adder.gen_halfadder:9.ha.o_carry ;
  (* hdlname = "datapath adder gen_halfadder:9.ha o_sum" *)
  wire \datapath.adder.gen_halfadder:9.ha.o_sum ;
  (* hdlname = "datapath adder sum" *)
  wire [31:0] \datapath.adder.sum ;
  (* hdlname = "datapath addrin" *)
  wire [31:0] \datapath.addrin ;
  (* hdlname = "datapath addrout" *)
  wire [31:0] \datapath.addrout ;
  (* hdlname = "datapath addroutreg" *)
  wire [31:0] \datapath.addroutreg ;
  (* hdlname = "datapath addrreg clk" *)
  wire \datapath.addrreg.clk ;
  (* hdlname = "datapath addrreg inreg" *)
  wire [31:0] \datapath.addrreg.inreg ;
  (* hdlname = "datapath addrreg load" *)
  wire \datapath.addrreg.load ;
  (* hdlname = "datapath addrreg outreg" *)
  wire [31:0] \datapath.addrreg.outreg ;
  (* hdlname = "datapath addrreg rst" *)
  wire \datapath.addrreg.rst ;
  (* hdlname = "datapath addrreg zero" *)
  wire \datapath.addrreg.zero ;
  (* hdlname = "datapath bytecnt" *)
  wire [1:0] \datapath.bytecnt ;
  (* hdlname = "datapath bytestowrite" *)
  wire \datapath.bytestowrite ;
  (* hdlname = "datapath bytestowrite_temp" *)
  wire \datapath.bytestowrite_temp ;
  (* hdlname = "datapath checkmisaligneddawu" *)
  wire \datapath.checkmisaligneddawu ;
  (* hdlname = "datapath clk" *)
  wire \datapath.clk ;
  (* hdlname = "datapath cocnt" *)
  wire \datapath.cocnt ;
  (* hdlname = "datapath counter clk" *)
  wire \datapath.counter.clk ;
  (* hdlname = "datapath counter cocnt" *)
  wire \datapath.counter.cocnt ;
  (* hdlname = "datapath counter cocntp" *)
  wire \datapath.counter.cocntp ;
  (* hdlname = "datapath counter inccnt" *)
  wire \datapath.counter.inccnt ;
  (* hdlname = "datapath counter initcnt" *)
  wire \datapath.counter.initcnt ;
  (* hdlname = "datapath counter initvalue" *)
  wire \datapath.counter.initvalue ;
  (* hdlname = "datapath counter outcnt" *)
  wire \datapath.counter.outcnt ;
  (* hdlname = "datapath counter rst" *)
  wire \datapath.counter.rst ;
  (* hdlname = "datapath counter temp" *)
  wire \datapath.counter.temp ;
  (* hdlname = "datapath counter zerocnt" *)
  wire \datapath.counter.zerocnt ;
  (* hdlname = "datapath datain" *)
  wire [31:0] \datapath.datain ;
  (* hdlname = "datapath dataout" *)
  wire [15:0] \datapath.dataout ;
  (* hdlname = "datapath enableaddr" *)
  wire \datapath.enableaddr ;
  (* hdlname = "datapath enabledata" *)
  wire \datapath.enabledata ;
  (* hdlname = "datapath errordecoder addrin" *)
  wire [1:0] \datapath.errordecoder.addrin ;
  (* hdlname = "datapath errordecoder checkmisaligneddawu" *)
  wire \datapath.errordecoder.checkmisaligneddawu ;
  (* hdlname = "datapath errordecoder cmp_01" *)
  wire \datapath.errordecoder.cmp_01 ;
  (* hdlname = "datapath errordecoder cmp_10" *)
  wire \datapath.errordecoder.cmp_10 ;
  (* hdlname = "datapath errordecoder cmp_11" *)
  wire \datapath.errordecoder.cmp_11 ;
  (* hdlname = "datapath errordecoder nbytes" *)
  wire [1:0] \datapath.errordecoder.nbytes ;
  (* hdlname = "datapath errordecoder storemisalignedflag" *)
  wire \datapath.errordecoder.storemisalignedflag ;
  (* hdlname = "datapath inccnt" *)
  wire \datapath.inccnt ;
  (* hdlname = "datapath initcnt" *)
  wire \datapath.initcnt ;
  (* hdlname = "datapath initvaluecnt" *)
  wire [1:0] \datapath.initvaluecnt ;
  (* hdlname = "datapath ldaddr" *)
  wire \datapath.ldaddr ;
  (* hdlname = "datapath lddata" *)
  wire \datapath.lddata ;
  (* hdlname = "datapath ldnumbytes" *)
  wire \datapath.ldnumbytes ;
  (* hdlname = "datapath muxout" *)
  wire [15:0] \datapath.muxout ;
  (* hdlname = "datapath nbytesin" *)
  wire [1:0] \datapath.nbytesin ;
  (* hdlname = "datapath nbytesout" *)
  wire [1:0] \datapath.nbytesout ;
  (* hdlname = "datapath nbytesreg clk" *)
  wire \datapath.nbytesreg.clk ;
  (* hdlname = "datapath nbytesreg inreg" *)
  wire [1:0] \datapath.nbytesreg.inreg ;
  (* hdlname = "datapath nbytesreg load" *)
  wire \datapath.nbytesreg.load ;
  (* hdlname = "datapath nbytesreg outreg" *)
  wire [1:0] \datapath.nbytesreg.outreg ;
  (* hdlname = "datapath nbytesreg rst" *)
  wire \datapath.nbytesreg.rst ;
  (* hdlname = "datapath nbytesreg zero" *)
  wire \datapath.nbytesreg.zero ;
  (* hdlname = "datapath outcnt" *)
  wire \datapath.outcnt ;
  (* hdlname = "datapath outreg0" *)
  wire [15:0] \datapath.outreg0 ;
  (* hdlname = "datapath outreg1" *)
  wire [15:0] \datapath.outreg1 ;
  (* hdlname = "datapath reg0 clk" *)
  wire \datapath.reg0.clk ;
  (* hdlname = "datapath reg0 inreg" *)
  wire [15:0] \datapath.reg0.inreg ;
  (* hdlname = "datapath reg0 load" *)
  wire \datapath.reg0.load ;
  (* hdlname = "datapath reg0 outreg" *)
  wire [15:0] \datapath.reg0.outreg ;
  (* hdlname = "datapath reg0 rst" *)
  wire \datapath.reg0.rst ;
  (* hdlname = "datapath reg0 zero" *)
  wire \datapath.reg0.zero ;
  (* hdlname = "datapath reg1 clk" *)
  wire \datapath.reg1.clk ;
  (* hdlname = "datapath reg1 inreg" *)
  wire [15:0] \datapath.reg1.inreg ;
  (* hdlname = "datapath reg1 load" *)
  wire \datapath.reg1.load ;
  (* hdlname = "datapath reg1 outreg" *)
  wire [15:0] \datapath.reg1.outreg ;
  (* hdlname = "datapath reg1 rst" *)
  wire \datapath.reg1.rst ;
  (* hdlname = "datapath reg1 zero" *)
  wire \datapath.reg1.zero ;
  (* hdlname = "datapath rst" *)
  wire \datapath.rst ;
  (* hdlname = "datapath storemisalignedflag" *)
  wire \datapath.storemisalignedflag ;
  (* hdlname = "datapath totalbytecnt" *)
  wire \datapath.totalbytecnt ;
  (* hdlname = "datapath writeaddr" *)
  wire [31:0] \datapath.writeaddr ;
  (* hdlname = "datapath zeroaddr" *)
  wire \datapath.zeroaddr ;
  (* hdlname = "datapath zerocnt" *)
  wire \datapath.zerocnt ;
  (* hdlname = "datapath zerodata" *)
  wire \datapath.zerodata ;
  (* hdlname = "datapath zeronumbytes" *)
  wire \datapath.zeronumbytes ;
  wire enableaddr;
  wire enabledata;
  wire inccnt;
  wire initcnt;
  wire ldaddr;
  wire lddata;
  wire ldnumbytes;
  input memready;
  wire memready;
  input [1:0] nbytes;
  wire [1:0] nbytes;
  input rst;
  wire rst;
  input startdawu;
  wire startdawu;
  output storemisalignedflag;
  wire storemisalignedflag;
  input sync_rst;
  wire sync_rst;
  output writemem;
  wire writemem;
  wire zeroaddr;
  wire zerocnt;
  wire zerodata;
  wire zeronumbytes;
  always @(posedge clk)
    if (_00_) _14_ <= 1'h0;
    else _14_ <= _18_;
  assign _00_ = | { \controller.initcnt , rst };
  assign \controller.pstate  = rst ? 1'h0 : _01_;
  always @(posedge clk)
    if (_08_) _01_ <= 1'h0;
    else _01_ <= \controller.nstate ;
  assign _08_ = | { sync_rst, rst };
  assign \datapath.addrreg.outreg  = rst ? 32'd0 : _12_;
  always @(posedge clk)
    if (rst) _12_ <= 32'd0;
    else _12_ <= _13_;
  assign \datapath.adder.fa2.b  = rst ? 1'h0 : _14_;
  assign \datapath.nbytesout  = rst ? 2'h0 : _30_;
  always @(posedge clk)
    if (rst) _30_ <= 2'h0;
    else _30_ <= _31_;
  assign \datapath.outreg0  = rst ? 16'h0000 : _32_;
  always @(posedge clk)
    if (rst) _32_ <= 16'h0000;
    else _32_ <= _33_;
  assign \datapath.outreg1  = rst ? 16'h0000 : _34_;
  always @(posedge clk)
    if (rst) _34_ <= 16'h0000;
    else _34_ <= _35_;
  assign _05_ = _04_ ? (* hdlname = "controller 6031" *) 1'h0 : 1'h1;
  function [0:0] \controller.6036 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* hdlname = "controller 6036" *)
    (* parallel_case *)
    casez (s)
      2'b?1:
        \controller.6036  = b[0:0];
      2'b1?:
        \controller.6036  = b[1:1];
      default:
        \controller.6036  = a;
    endcase
  endfunction
  assign \controller.nstate  = \controller.6036 (1'h0, { _05_, _02_ }, { \controller.pstate , _03_ });
  assign _02_ = startdawu ? (* hdlname = "controller 6052" *) 1'h1 : 1'h0;
  assign _03_ = ~ (* hdlname = "controller 6054" *) \controller.pstate ;
  assign _06_ = memready ? (* hdlname = "controller 6057" *) 1'h1 : 1'h0;
  assign _04_ = memready & (* hdlname = "controller 6058" *) \controller.cocnt ;
  assign _07_ = _04_ ? (* hdlname = "controller 6061" *) 1'h1 : 1'h0;
  assign \controller.inccnt  = \controller.pstate  ? (* hdlname = "controller 6081" *) _06_ : 1'h0;
  assign \controller.initcnt  = \controller.pstate  ? (* hdlname = "controller 6093" *) 1'h0 : _02_;
  assign \controller.enableaddr  = \controller.pstate  ? (* hdlname = "controller 6114" *) 1'h1 : 1'h0;
  assign \controller.completedawu  = \controller.pstate  ? (* hdlname = "controller 6118" *) _07_ : 1'h0;
  assign _09_ = ! (* hdlname = "datapath 5974" *) \datapath.nbytesout ;
  assign \datapath.bytestowrite  = _09_ ? (* hdlname = "datapath 5975" *) 1'h0 : 1'h1;
  assign _10_ = \datapath.nbytesout  != (* hdlname = "datapath 5979" *) 2'h3;
  assign \datapath.totalbytecnt  = _10_ ? (* hdlname = "datapath 5980" *) 1'h0 : 1'h1;
  assign \datapath.muxout  = \datapath.adder.fa2.b  ? (* hdlname = "datapath 5994" *) \datapath.outreg1  : \datapath.outreg0 ;
  assign _11_ = \datapath.adder.fa2.b  == (* hdlname = "datapath 5996" *) \datapath.totalbytecnt ;
  assign \controller.cocnt  = _11_ ? (* hdlname = "datapath 5997" *) 1'h1 : 1'h0;
  assign \datapath.dataout  = \controller.enableaddr  ? \datapath.muxout  : 16'bz;
  assign \datapath.addrout  = \controller.enableaddr  ? { \datapath.adder.gen_halfadder:30.ha.o_sum , \datapath.adder.gen_halfadder:29.ha.o_sum , \datapath.adder.gen_halfadder:28.ha.o_sum , \datapath.adder.gen_halfadder:27.ha.o_sum , \datapath.adder.gen_halfadder:26.ha.o_sum , \datapath.adder.gen_halfadder:25.ha.o_sum , \datapath.adder.gen_halfadder:24.ha.o_sum , \datapath.adder.gen_halfadder:23.ha.o_sum , \datapath.adder.gen_halfadder:22.ha.o_sum , \datapath.adder.gen_halfadder:21.ha.o_sum , \datapath.adder.gen_halfadder:20.ha.o_sum , \datapath.adder.gen_halfadder:19.ha.o_sum , \datapath.adder.gen_halfadder:18.ha.o_sum , \datapath.adder.gen_halfadder:17.ha.o_sum , \datapath.adder.gen_halfadder:16.ha.o_sum , \datapath.adder.gen_halfadder:15.ha.o_sum , \datapath.adder.gen_halfadder:14.ha.o_sum , \datapath.adder.gen_halfadder:13.ha.o_sum , \datapath.adder.gen_halfadder:12.ha.o_sum , \datapath.adder.gen_halfadder:11.ha.o_sum , \datapath.adder.gen_halfadder:10.ha.o_sum , \datapath.adder.gen_halfadder:9.ha.o_sum , \datapath.adder.gen_halfadder:8.ha.o_sum , \datapath.adder.gen_halfadder:7.ha.o_sum , \datapath.adder.gen_halfadder:6.ha.o_sum , \datapath.adder.gen_halfadder:5.ha.o_sum , \datapath.adder.gen_halfadder:4.ha.o_sum , \datapath.adder.gen_halfadder:3.ha.o_sum , \datapath.adder.gen_halfadder:2.ha.o_sum , \datapath.adder.gen_halfadder:1.ha.o_sum , \datapath.adder.fa2.s , \datapath.addrreg.outreg [0] } : 32'bz;
  assign \datapath.adder.fa2.s  = \datapath.addrreg.outreg [1] ^ (* hdlname = "datapath adder fa2 6569" *) \datapath.adder.fa2.b ;
  assign \datapath.adder.gen_halfadder:1.ha.i_bit2  = \datapath.addrreg.outreg [1] & (* hdlname = "datapath adder fa2 6571" *) \datapath.adder.fa2.b ;
  assign \datapath.adder.gen_halfadder:1.ha.o_sum  = \datapath.addrreg.outreg [2] ^ (* hdlname = "datapath adder gen_halfadder:1.ha 6578" *) \datapath.adder.gen_halfadder:1.ha.i_bit2 ;
  assign \datapath.adder.gen_halfadder:1.ha.o_carry  = \datapath.addrreg.outreg [2] & (* hdlname = "datapath adder gen_halfadder:1.ha 6579" *) \datapath.adder.gen_halfadder:1.ha.i_bit2 ;
  assign \datapath.adder.gen_halfadder:10.ha.o_sum  = \datapath.addrreg.outreg [11] ^ (* hdlname = "datapath adder gen_halfadder:10.ha 6578" *) \datapath.adder.gen_halfadder:10.ha.i_bit2 ;
  assign \datapath.adder.gen_halfadder:10.ha.o_carry  = \datapath.addrreg.outreg [11] & (* hdlname = "datapath adder gen_halfadder:10.ha 6579" *) \datapath.adder.gen_halfadder:10.ha.i_bit2 ;
  assign \datapath.adder.gen_halfadder:11.ha.o_sum  = \datapath.addrreg.outreg [12] ^ (* hdlname = "datapath adder gen_halfadder:11.ha 6578" *) \datapath.adder.gen_halfadder:10.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:11.ha.o_carry  = \datapath.addrreg.outreg [12] & (* hdlname = "datapath adder gen_halfadder:11.ha 6579" *) \datapath.adder.gen_halfadder:10.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:12.ha.o_sum  = \datapath.addrreg.outreg [13] ^ (* hdlname = "datapath adder gen_halfadder:12.ha 6578" *) \datapath.adder.gen_halfadder:11.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:12.ha.o_carry  = \datapath.addrreg.outreg [13] & (* hdlname = "datapath adder gen_halfadder:12.ha 6579" *) \datapath.adder.gen_halfadder:11.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:13.ha.o_sum  = \datapath.addrreg.outreg [14] ^ (* hdlname = "datapath adder gen_halfadder:13.ha 6578" *) \datapath.adder.gen_halfadder:12.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:13.ha.o_carry  = \datapath.addrreg.outreg [14] & (* hdlname = "datapath adder gen_halfadder:13.ha 6579" *) \datapath.adder.gen_halfadder:12.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:14.ha.o_sum  = \datapath.addrreg.outreg [15] ^ (* hdlname = "datapath adder gen_halfadder:14.ha 6578" *) \datapath.adder.gen_halfadder:13.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:14.ha.o_carry  = \datapath.addrreg.outreg [15] & (* hdlname = "datapath adder gen_halfadder:14.ha 6579" *) \datapath.adder.gen_halfadder:13.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:15.ha.o_sum  = \datapath.addrreg.outreg [16] ^ (* hdlname = "datapath adder gen_halfadder:15.ha 6578" *) \datapath.adder.gen_halfadder:14.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:15.ha.o_carry  = \datapath.addrreg.outreg [16] & (* hdlname = "datapath adder gen_halfadder:15.ha 6579" *) \datapath.adder.gen_halfadder:14.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:16.ha.o_sum  = \datapath.addrreg.outreg [17] ^ (* hdlname = "datapath adder gen_halfadder:16.ha 6578" *) \datapath.adder.gen_halfadder:15.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:16.ha.o_carry  = \datapath.addrreg.outreg [17] & (* hdlname = "datapath adder gen_halfadder:16.ha 6579" *) \datapath.adder.gen_halfadder:15.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:17.ha.o_sum  = \datapath.addrreg.outreg [18] ^ (* hdlname = "datapath adder gen_halfadder:17.ha 6578" *) \datapath.adder.gen_halfadder:16.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:17.ha.o_carry  = \datapath.addrreg.outreg [18] & (* hdlname = "datapath adder gen_halfadder:17.ha 6579" *) \datapath.adder.gen_halfadder:16.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:18.ha.o_sum  = \datapath.addrreg.outreg [19] ^ (* hdlname = "datapath adder gen_halfadder:18.ha 6578" *) \datapath.adder.gen_halfadder:17.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:18.ha.o_carry  = \datapath.addrreg.outreg [19] & (* hdlname = "datapath adder gen_halfadder:18.ha 6579" *) \datapath.adder.gen_halfadder:17.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:19.ha.o_sum  = \datapath.addrreg.outreg [20] ^ (* hdlname = "datapath adder gen_halfadder:19.ha 6578" *) \datapath.adder.gen_halfadder:18.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:19.ha.o_carry  = \datapath.addrreg.outreg [20] & (* hdlname = "datapath adder gen_halfadder:19.ha 6579" *) \datapath.adder.gen_halfadder:18.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:2.ha.o_sum  = \datapath.addrreg.outreg [3] ^ (* hdlname = "datapath adder gen_halfadder:2.ha 6578" *) \datapath.adder.gen_halfadder:1.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:2.ha.o_carry  = \datapath.addrreg.outreg [3] & (* hdlname = "datapath adder gen_halfadder:2.ha 6579" *) \datapath.adder.gen_halfadder:1.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:20.ha.o_sum  = \datapath.addrreg.outreg [21] ^ (* hdlname = "datapath adder gen_halfadder:20.ha 6578" *) \datapath.adder.gen_halfadder:19.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:20.ha.o_carry  = \datapath.addrreg.outreg [21] & (* hdlname = "datapath adder gen_halfadder:20.ha 6579" *) \datapath.adder.gen_halfadder:19.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:21.ha.o_sum  = \datapath.addrreg.outreg [22] ^ (* hdlname = "datapath adder gen_halfadder:21.ha 6578" *) \datapath.adder.gen_halfadder:20.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:21.ha.o_carry  = \datapath.addrreg.outreg [22] & (* hdlname = "datapath adder gen_halfadder:21.ha 6579" *) \datapath.adder.gen_halfadder:20.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:22.ha.o_sum  = \datapath.addrreg.outreg [23] ^ (* hdlname = "datapath adder gen_halfadder:22.ha 6578" *) \datapath.adder.gen_halfadder:21.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:22.ha.o_carry  = \datapath.addrreg.outreg [23] & (* hdlname = "datapath adder gen_halfadder:22.ha 6579" *) \datapath.adder.gen_halfadder:21.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:23.ha.o_sum  = \datapath.addrreg.outreg [24] ^ (* hdlname = "datapath adder gen_halfadder:23.ha 6578" *) \datapath.adder.gen_halfadder:22.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:23.ha.o_carry  = \datapath.addrreg.outreg [24] & (* hdlname = "datapath adder gen_halfadder:23.ha 6579" *) \datapath.adder.gen_halfadder:22.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:24.ha.o_sum  = \datapath.addrreg.outreg [25] ^ (* hdlname = "datapath adder gen_halfadder:24.ha 6578" *) \datapath.adder.gen_halfadder:23.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:24.ha.o_carry  = \datapath.addrreg.outreg [25] & (* hdlname = "datapath adder gen_halfadder:24.ha 6579" *) \datapath.adder.gen_halfadder:23.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:25.ha.o_sum  = \datapath.addrreg.outreg [26] ^ (* hdlname = "datapath adder gen_halfadder:25.ha 6578" *) \datapath.adder.gen_halfadder:24.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:25.ha.o_carry  = \datapath.addrreg.outreg [26] & (* hdlname = "datapath adder gen_halfadder:25.ha 6579" *) \datapath.adder.gen_halfadder:24.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:26.ha.o_sum  = \datapath.addrreg.outreg [27] ^ (* hdlname = "datapath adder gen_halfadder:26.ha 6578" *) \datapath.adder.gen_halfadder:25.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:26.ha.o_carry  = \datapath.addrreg.outreg [27] & (* hdlname = "datapath adder gen_halfadder:26.ha 6579" *) \datapath.adder.gen_halfadder:25.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:27.ha.o_sum  = \datapath.addrreg.outreg [28] ^ (* hdlname = "datapath adder gen_halfadder:27.ha 6578" *) \datapath.adder.gen_halfadder:26.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:27.ha.o_carry  = \datapath.addrreg.outreg [28] & (* hdlname = "datapath adder gen_halfadder:27.ha 6579" *) \datapath.adder.gen_halfadder:26.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:28.ha.o_sum  = \datapath.addrreg.outreg [29] ^ (* hdlname = "datapath adder gen_halfadder:28.ha 6578" *) \datapath.adder.gen_halfadder:27.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:28.ha.o_carry  = \datapath.addrreg.outreg [29] & (* hdlname = "datapath adder gen_halfadder:28.ha 6579" *) \datapath.adder.gen_halfadder:27.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:29.ha.o_sum  = \datapath.addrreg.outreg [30] ^ (* hdlname = "datapath adder gen_halfadder:29.ha 6578" *) \datapath.adder.gen_halfadder:28.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:29.ha.o_carry  = \datapath.addrreg.outreg [30] & (* hdlname = "datapath adder gen_halfadder:29.ha 6579" *) \datapath.adder.gen_halfadder:28.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:3.ha.o_sum  = \datapath.addrreg.outreg [4] ^ (* hdlname = "datapath adder gen_halfadder:3.ha 6578" *) \datapath.adder.gen_halfadder:2.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:3.ha.o_carry  = \datapath.addrreg.outreg [4] & (* hdlname = "datapath adder gen_halfadder:3.ha 6579" *) \datapath.adder.gen_halfadder:2.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:30.ha.o_sum  = \datapath.addrreg.outreg [31] ^ (* hdlname = "datapath adder gen_halfadder:30.ha 6578" *) \datapath.adder.gen_halfadder:29.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:4.ha.o_sum  = \datapath.addrreg.outreg [5] ^ (* hdlname = "datapath adder gen_halfadder:4.ha 6578" *) \datapath.adder.gen_halfadder:3.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:4.ha.o_carry  = \datapath.addrreg.outreg [5] & (* hdlname = "datapath adder gen_halfadder:4.ha 6579" *) \datapath.adder.gen_halfadder:3.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:5.ha.o_sum  = \datapath.addrreg.outreg [6] ^ (* hdlname = "datapath adder gen_halfadder:5.ha 6578" *) \datapath.adder.gen_halfadder:4.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:5.ha.o_carry  = \datapath.addrreg.outreg [6] & (* hdlname = "datapath adder gen_halfadder:5.ha 6579" *) \datapath.adder.gen_halfadder:4.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:6.ha.o_sum  = \datapath.addrreg.outreg [7] ^ (* hdlname = "datapath adder gen_halfadder:6.ha 6578" *) \datapath.adder.gen_halfadder:5.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:6.ha.o_carry  = \datapath.addrreg.outreg [7] & (* hdlname = "datapath adder gen_halfadder:6.ha 6579" *) \datapath.adder.gen_halfadder:5.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:7.ha.o_sum  = \datapath.addrreg.outreg [8] ^ (* hdlname = "datapath adder gen_halfadder:7.ha 6578" *) \datapath.adder.gen_halfadder:6.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:7.ha.o_carry  = \datapath.addrreg.outreg [8] & (* hdlname = "datapath adder gen_halfadder:7.ha 6579" *) \datapath.adder.gen_halfadder:6.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:8.ha.o_sum  = \datapath.addrreg.outreg [9] ^ (* hdlname = "datapath adder gen_halfadder:8.ha 6578" *) \datapath.adder.gen_halfadder:7.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:8.ha.o_carry  = \datapath.addrreg.outreg [9] & (* hdlname = "datapath adder gen_halfadder:8.ha 6579" *) \datapath.adder.gen_halfadder:7.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:9.ha.o_sum  = \datapath.addrreg.outreg [10] ^ (* hdlname = "datapath adder gen_halfadder:9.ha 6578" *) \datapath.adder.gen_halfadder:8.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:10.ha.i_bit2  = \datapath.addrreg.outreg [10] & (* hdlname = "datapath adder gen_halfadder:9.ha 6579" *) \datapath.adder.gen_halfadder:8.ha.o_carry ;
  assign _13_ = \controller.initcnt  ? (* hdlname = "datapath addrreg 4067" *) addrin : \datapath.addrreg.outreg ;
  assign _15_ = ~ (* hdlname = "datapath counter 6168" *) \datapath.counter.cocntp ;
  assign _16_ = _15_ & (* hdlname = "datapath counter 6169" *) \controller.inccnt ;
  assign _17_ = \datapath.adder.fa2.b  + (* hdlname = "datapath counter 6171" *) 1'h1;
  assign _18_ = _16_ ? (* hdlname = "datapath counter 6172" *) _17_ : \datapath.adder.fa2.b ;
  assign \datapath.counter.cocntp  = \datapath.adder.fa2.b  ? (* hdlname = "datapath counter 6183" *) 1'h1 : 1'h0;
  assign _19_ = addrin[1:0] == (* hdlname = "datapath errordecoder 6542" *) 2'h1;
  assign \datapath.errordecoder.cmp_01  = _19_ ? (* hdlname = "datapath errordecoder 6543" *) 1'h1 : 1'h0;
  assign _20_ = addrin[1:0] == (* hdlname = "datapath errordecoder 6547" *) 2'h2;
  assign \datapath.errordecoder.cmp_10  = _20_ ? (* hdlname = "datapath errordecoder 6548" *) 1'h1 : 1'h0;
  assign _21_ = addrin[1:0] == (* hdlname = "datapath errordecoder 6552" *) 2'h3;
  assign \datapath.errordecoder.cmp_11  = _21_ ? (* hdlname = "datapath errordecoder 6553" *) 1'h1 : 1'h0;
  assign _22_ = \datapath.errordecoder.cmp_01  | (* hdlname = "datapath errordecoder 6555" *) \datapath.errordecoder.cmp_11 ;
  assign _23_ = _22_ & (* hdlname = "datapath errordecoder 6556" *) checkmisaligneddawu;
  assign _24_ = nbytes == (* hdlname = "datapath errordecoder 6558" *) 2'h1;
  assign \datapath.errordecoder.storemisalignedflag  = _24_ ? (* hdlname = "datapath errordecoder 6559" *) _23_ : _29_;
  assign _25_ = \datapath.errordecoder.cmp_01  | (* hdlname = "datapath errordecoder 6560" *) \datapath.errordecoder.cmp_10 ;
  assign _26_ = _25_ | (* hdlname = "datapath errordecoder 6561" *) \datapath.errordecoder.cmp_11 ;
  assign _27_ = _26_ & (* hdlname = "datapath errordecoder 6562" *) checkmisaligneddawu;
  assign _28_ = nbytes == (* hdlname = "datapath errordecoder 6564" *) 2'h3;
  assign _29_ = _28_ ? (* hdlname = "datapath errordecoder 6565" *) _27_ : 1'h0;
  assign _31_ = \controller.initcnt  ? (* hdlname = "datapath nbytesreg 6155" *) nbytes : \datapath.nbytesout ;
  assign _33_ = \controller.initcnt  ? (* hdlname = "datapath reg0 6190" *) datain[15:0] : \datapath.outreg0 ;
  assign _35_ = \controller.initcnt  ? (* hdlname = "datapath reg1 6190" *) datain[31:16] : \datapath.outreg1 ;
  assign addrout = \datapath.addrout ;
  assign bytestowrite = \datapath.bytestowrite ;
  assign cocnt = \controller.cocnt ;
  assign completedawu = \controller.completedawu ;
  assign \controller.clk  = clk;
  assign \controller.enabledata  = \controller.enableaddr ;
  assign \controller.ldaddr  = \controller.initcnt ;
  assign \controller.lddata  = \controller.initcnt ;
  assign \controller.ldnumbytes  = \controller.initcnt ;
  assign \controller.memready  = memready;
  assign \controller.rst  = rst;
  assign \controller.startdawu  = startdawu;
  assign \controller.sync_rst  = sync_rst;
  assign \controller.writemem  = \controller.enableaddr ;
  assign \controller.zeroaddr  = 1'h0;
  assign \controller.zerocnt  = 1'h0;
  assign \controller.zerodata  = 1'h0;
  assign \controller.zeronumbytes  = 1'h0;
  assign dataout = \datapath.dataout ;
  assign \datapath.adder.a  = \datapath.addrreg.outreg ;
  assign \datapath.adder.b  = { \datapath.adder.fa2.b , 1'h0 };
  assign \datapath.adder.cout [30:0] = { \datapath.adder.gen_halfadder:29.ha.o_carry , \datapath.adder.gen_halfadder:28.ha.o_carry , \datapath.adder.gen_halfadder:27.ha.o_carry , \datapath.adder.gen_halfadder:26.ha.o_carry , \datapath.adder.gen_halfadder:25.ha.o_carry , \datapath.adder.gen_halfadder:24.ha.o_carry , \datapath.adder.gen_halfadder:23.ha.o_carry , \datapath.adder.gen_halfadder:22.ha.o_carry , \datapath.adder.gen_halfadder:21.ha.o_carry , \datapath.adder.gen_halfadder:20.ha.o_carry , \datapath.adder.gen_halfadder:19.ha.o_carry , \datapath.adder.gen_halfadder:18.ha.o_carry , \datapath.adder.gen_halfadder:17.ha.o_carry , \datapath.adder.gen_halfadder:16.ha.o_carry , \datapath.adder.gen_halfadder:15.ha.o_carry , \datapath.adder.gen_halfadder:14.ha.o_carry , \datapath.adder.gen_halfadder:13.ha.o_carry , \datapath.adder.gen_halfadder:12.ha.o_carry , \datapath.adder.gen_halfadder:11.ha.o_carry , \datapath.adder.gen_halfadder:10.ha.o_carry , \datapath.adder.gen_halfadder:10.ha.i_bit2 , \datapath.adder.gen_halfadder:8.ha.o_carry , \datapath.adder.gen_halfadder:7.ha.o_carry , \datapath.adder.gen_halfadder:6.ha.o_carry , \datapath.adder.gen_halfadder:5.ha.o_carry , \datapath.adder.gen_halfadder:4.ha.o_carry , \datapath.adder.gen_halfadder:3.ha.o_carry , \datapath.adder.gen_halfadder:2.ha.o_carry , \datapath.adder.gen_halfadder:1.ha.o_carry , \datapath.adder.gen_halfadder:1.ha.i_bit2 , 1'h0 };
  assign \datapath.adder.fa1.a  = \datapath.addrreg.outreg [0];
  assign \datapath.adder.fa1.b  = 1'h0;
  assign \datapath.adder.fa1.cin  = 1'h0;
  assign \datapath.adder.fa1.cout  = 1'h0;
  assign \datapath.adder.fa1.s  = \datapath.addrreg.outreg [0];
  assign \datapath.adder.fa2.a  = \datapath.addrreg.outreg [1];
  assign \datapath.adder.fa2.cin  = 1'h0;
  assign \datapath.adder.fa2.cout  = \datapath.adder.gen_halfadder:1.ha.i_bit2 ;
  assign \datapath.adder.gen_halfadder:1.ha.i_bit1  = \datapath.addrreg.outreg [2];
  assign \datapath.adder.gen_halfadder:10.ha.i_bit1  = \datapath.addrreg.outreg [11];
  assign \datapath.adder.gen_halfadder:11.ha.i_bit1  = \datapath.addrreg.outreg [12];
  assign \datapath.adder.gen_halfadder:11.ha.i_bit2  = \datapath.adder.gen_halfadder:10.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:12.ha.i_bit1  = \datapath.addrreg.outreg [13];
  assign \datapath.adder.gen_halfadder:12.ha.i_bit2  = \datapath.adder.gen_halfadder:11.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:13.ha.i_bit1  = \datapath.addrreg.outreg [14];
  assign \datapath.adder.gen_halfadder:13.ha.i_bit2  = \datapath.adder.gen_halfadder:12.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:14.ha.i_bit1  = \datapath.addrreg.outreg [15];
  assign \datapath.adder.gen_halfadder:14.ha.i_bit2  = \datapath.adder.gen_halfadder:13.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:15.ha.i_bit1  = \datapath.addrreg.outreg [16];
  assign \datapath.adder.gen_halfadder:15.ha.i_bit2  = \datapath.adder.gen_halfadder:14.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:16.ha.i_bit1  = \datapath.addrreg.outreg [17];
  assign \datapath.adder.gen_halfadder:16.ha.i_bit2  = \datapath.adder.gen_halfadder:15.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:17.ha.i_bit1  = \datapath.addrreg.outreg [18];
  assign \datapath.adder.gen_halfadder:17.ha.i_bit2  = \datapath.adder.gen_halfadder:16.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:18.ha.i_bit1  = \datapath.addrreg.outreg [19];
  assign \datapath.adder.gen_halfadder:18.ha.i_bit2  = \datapath.adder.gen_halfadder:17.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:19.ha.i_bit1  = \datapath.addrreg.outreg [20];
  assign \datapath.adder.gen_halfadder:19.ha.i_bit2  = \datapath.adder.gen_halfadder:18.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:2.ha.i_bit1  = \datapath.addrreg.outreg [3];
  assign \datapath.adder.gen_halfadder:2.ha.i_bit2  = \datapath.adder.gen_halfadder:1.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:20.ha.i_bit1  = \datapath.addrreg.outreg [21];
  assign \datapath.adder.gen_halfadder:20.ha.i_bit2  = \datapath.adder.gen_halfadder:19.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:21.ha.i_bit1  = \datapath.addrreg.outreg [22];
  assign \datapath.adder.gen_halfadder:21.ha.i_bit2  = \datapath.adder.gen_halfadder:20.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:22.ha.i_bit1  = \datapath.addrreg.outreg [23];
  assign \datapath.adder.gen_halfadder:22.ha.i_bit2  = \datapath.adder.gen_halfadder:21.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:23.ha.i_bit1  = \datapath.addrreg.outreg [24];
  assign \datapath.adder.gen_halfadder:23.ha.i_bit2  = \datapath.adder.gen_halfadder:22.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:24.ha.i_bit1  = \datapath.addrreg.outreg [25];
  assign \datapath.adder.gen_halfadder:24.ha.i_bit2  = \datapath.adder.gen_halfadder:23.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:25.ha.i_bit1  = \datapath.addrreg.outreg [26];
  assign \datapath.adder.gen_halfadder:25.ha.i_bit2  = \datapath.adder.gen_halfadder:24.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:26.ha.i_bit1  = \datapath.addrreg.outreg [27];
  assign \datapath.adder.gen_halfadder:26.ha.i_bit2  = \datapath.adder.gen_halfadder:25.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:27.ha.i_bit1  = \datapath.addrreg.outreg [28];
  assign \datapath.adder.gen_halfadder:27.ha.i_bit2  = \datapath.adder.gen_halfadder:26.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:28.ha.i_bit1  = \datapath.addrreg.outreg [29];
  assign \datapath.adder.gen_halfadder:28.ha.i_bit2  = \datapath.adder.gen_halfadder:27.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:29.ha.i_bit1  = \datapath.addrreg.outreg [30];
  assign \datapath.adder.gen_halfadder:29.ha.i_bit2  = \datapath.adder.gen_halfadder:28.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:3.ha.i_bit1  = \datapath.addrreg.outreg [4];
  assign \datapath.adder.gen_halfadder:3.ha.i_bit2  = \datapath.adder.gen_halfadder:2.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:30.ha.i_bit1  = \datapath.addrreg.outreg [31];
  assign \datapath.adder.gen_halfadder:30.ha.i_bit2  = \datapath.adder.gen_halfadder:29.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:30.ha.o_carry  = \datapath.adder.cout [31];
  assign \datapath.adder.gen_halfadder:4.ha.i_bit1  = \datapath.addrreg.outreg [5];
  assign \datapath.adder.gen_halfadder:4.ha.i_bit2  = \datapath.adder.gen_halfadder:3.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:5.ha.i_bit1  = \datapath.addrreg.outreg [6];
  assign \datapath.adder.gen_halfadder:5.ha.i_bit2  = \datapath.adder.gen_halfadder:4.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:6.ha.i_bit1  = \datapath.addrreg.outreg [7];
  assign \datapath.adder.gen_halfadder:6.ha.i_bit2  = \datapath.adder.gen_halfadder:5.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:7.ha.i_bit1  = \datapath.addrreg.outreg [8];
  assign \datapath.adder.gen_halfadder:7.ha.i_bit2  = \datapath.adder.gen_halfadder:6.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:8.ha.i_bit1  = \datapath.addrreg.outreg [9];
  assign \datapath.adder.gen_halfadder:8.ha.i_bit2  = \datapath.adder.gen_halfadder:7.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:9.ha.i_bit1  = \datapath.addrreg.outreg [10];
  assign \datapath.adder.gen_halfadder:9.ha.i_bit2  = \datapath.adder.gen_halfadder:8.ha.o_carry ;
  assign \datapath.adder.gen_halfadder:9.ha.o_carry  = \datapath.adder.gen_halfadder:10.ha.i_bit2 ;
  assign \datapath.adder.sum  = { \datapath.adder.gen_halfadder:30.ha.o_sum , \datapath.adder.gen_halfadder:29.ha.o_sum , \datapath.adder.gen_halfadder:28.ha.o_sum , \datapath.adder.gen_halfadder:27.ha.o_sum , \datapath.adder.gen_halfadder:26.ha.o_sum , \datapath.adder.gen_halfadder:25.ha.o_sum , \datapath.adder.gen_halfadder:24.ha.o_sum , \datapath.adder.gen_halfadder:23.ha.o_sum , \datapath.adder.gen_halfadder:22.ha.o_sum , \datapath.adder.gen_halfadder:21.ha.o_sum , \datapath.adder.gen_halfadder:20.ha.o_sum , \datapath.adder.gen_halfadder:19.ha.o_sum , \datapath.adder.gen_halfadder:18.ha.o_sum , \datapath.adder.gen_halfadder:17.ha.o_sum , \datapath.adder.gen_halfadder:16.ha.o_sum , \datapath.adder.gen_halfadder:15.ha.o_sum , \datapath.adder.gen_halfadder:14.ha.o_sum , \datapath.adder.gen_halfadder:13.ha.o_sum , \datapath.adder.gen_halfadder:12.ha.o_sum , \datapath.adder.gen_halfadder:11.ha.o_sum , \datapath.adder.gen_halfadder:10.ha.o_sum , \datapath.adder.gen_halfadder:9.ha.o_sum , \datapath.adder.gen_halfadder:8.ha.o_sum , \datapath.adder.gen_halfadder:7.ha.o_sum , \datapath.adder.gen_halfadder:6.ha.o_sum , \datapath.adder.gen_halfadder:5.ha.o_sum , \datapath.adder.gen_halfadder:4.ha.o_sum , \datapath.adder.gen_halfadder:3.ha.o_sum , \datapath.adder.gen_halfadder:2.ha.o_sum , \datapath.adder.gen_halfadder:1.ha.o_sum , \datapath.adder.fa2.s , \datapath.addrreg.outreg [0] };
  assign \datapath.addrin  = addrin;
  assign \datapath.addroutreg  = \datapath.addrreg.outreg ;
  assign \datapath.addrreg.clk  = clk;
  assign \datapath.addrreg.inreg  = addrin;
  assign \datapath.addrreg.load  = \controller.initcnt ;
  assign \datapath.addrreg.rst  = rst;
  assign \datapath.addrreg.zero  = 1'h0;
  assign \datapath.bytecnt  = { \datapath.adder.fa2.b , 1'h0 };
  assign \datapath.bytestowrite_temp  = \datapath.bytestowrite ;
  assign \datapath.checkmisaligneddawu  = checkmisaligneddawu;
  assign \datapath.clk  = clk;
  assign \datapath.cocnt  = \controller.cocnt ;
  assign \datapath.counter.clk  = clk;
  assign \datapath.counter.cocnt  = \datapath.counter.cocntp ;
  assign \datapath.counter.inccnt  = \controller.inccnt ;
  assign \datapath.counter.initcnt  = \controller.initcnt ;
  assign \datapath.counter.initvalue  = 1'h0;
  assign \datapath.counter.outcnt  = \datapath.adder.fa2.b ;
  assign \datapath.counter.rst  = rst;
  assign \datapath.counter.temp  = \datapath.adder.fa2.b ;
  assign \datapath.counter.zerocnt  = 1'h0;
  assign \datapath.datain  = datain;
  assign \datapath.enableaddr  = \controller.enableaddr ;
  assign \datapath.enabledata  = \controller.enableaddr ;
  assign \datapath.errordecoder.addrin  = addrin[1:0];
  assign \datapath.errordecoder.checkmisaligneddawu  = checkmisaligneddawu;
  assign \datapath.errordecoder.nbytes  = nbytes;
  assign \datapath.inccnt  = \controller.inccnt ;
  assign \datapath.initcnt  = \controller.initcnt ;
  assign \datapath.initvaluecnt  = 2'h0;
  assign \datapath.ldaddr  = \controller.initcnt ;
  assign \datapath.lddata  = \controller.initcnt ;
  assign \datapath.ldnumbytes  = \controller.initcnt ;
  assign \datapath.nbytesin  = nbytes;
  assign \datapath.nbytesreg.clk  = clk;
  assign \datapath.nbytesreg.inreg  = nbytes;
  assign \datapath.nbytesreg.load  = \controller.initcnt ;
  assign \datapath.nbytesreg.outreg  = \datapath.nbytesout ;
  assign \datapath.nbytesreg.rst  = rst;
  assign \datapath.nbytesreg.zero  = 1'h0;
  assign \datapath.outcnt  = \datapath.adder.fa2.b ;
  assign \datapath.reg0.clk  = clk;
  assign \datapath.reg0.inreg  = datain[15:0];
  assign \datapath.reg0.load  = \controller.initcnt ;
  assign \datapath.reg0.outreg  = \datapath.outreg0 ;
  assign \datapath.reg0.rst  = rst;
  assign \datapath.reg0.zero  = 1'h0;
  assign \datapath.reg1.clk  = clk;
  assign \datapath.reg1.inreg  = datain[31:16];
  assign \datapath.reg1.load  = \controller.initcnt ;
  assign \datapath.reg1.outreg  = \datapath.outreg1 ;
  assign \datapath.reg1.rst  = rst;
  assign \datapath.reg1.zero  = 1'h0;
  assign \datapath.rst  = rst;
  assign \datapath.storemisalignedflag  = \datapath.errordecoder.storemisalignedflag ;
  assign \datapath.writeaddr  = { \datapath.adder.gen_halfadder:30.ha.o_sum , \datapath.adder.gen_halfadder:29.ha.o_sum , \datapath.adder.gen_halfadder:28.ha.o_sum , \datapath.adder.gen_halfadder:27.ha.o_sum , \datapath.adder.gen_halfadder:26.ha.o_sum , \datapath.adder.gen_halfadder:25.ha.o_sum , \datapath.adder.gen_halfadder:24.ha.o_sum , \datapath.adder.gen_halfadder:23.ha.o_sum , \datapath.adder.gen_halfadder:22.ha.o_sum , \datapath.adder.gen_halfadder:21.ha.o_sum , \datapath.adder.gen_halfadder:20.ha.o_sum , \datapath.adder.gen_halfadder:19.ha.o_sum , \datapath.adder.gen_halfadder:18.ha.o_sum , \datapath.adder.gen_halfadder:17.ha.o_sum , \datapath.adder.gen_halfadder:16.ha.o_sum , \datapath.adder.gen_halfadder:15.ha.o_sum , \datapath.adder.gen_halfadder:14.ha.o_sum , \datapath.adder.gen_halfadder:13.ha.o_sum , \datapath.adder.gen_halfadder:12.ha.o_sum , \datapath.adder.gen_halfadder:11.ha.o_sum , \datapath.adder.gen_halfadder:10.ha.o_sum , \datapath.adder.gen_halfadder:9.ha.o_sum , \datapath.adder.gen_halfadder:8.ha.o_sum , \datapath.adder.gen_halfadder:7.ha.o_sum , \datapath.adder.gen_halfadder:6.ha.o_sum , \datapath.adder.gen_halfadder:5.ha.o_sum , \datapath.adder.gen_halfadder:4.ha.o_sum , \datapath.adder.gen_halfadder:3.ha.o_sum , \datapath.adder.gen_halfadder:2.ha.o_sum , \datapath.adder.gen_halfadder:1.ha.o_sum , \datapath.adder.fa2.s , \datapath.addrreg.outreg [0] };
  assign \datapath.zeroaddr  = 1'h0;
  assign \datapath.zerocnt  = 1'h0;
  assign \datapath.zerodata  = 1'h0;
  assign \datapath.zeronumbytes  = 1'h0;
  assign enableaddr = \controller.enableaddr ;
  assign enabledata = \controller.enableaddr ;
  assign inccnt = \controller.inccnt ;
  assign initcnt = \controller.initcnt ;
  assign ldaddr = \controller.initcnt ;
  assign lddata = \controller.initcnt ;
  assign ldnumbytes = \controller.initcnt ;
  assign storemisalignedflag = \datapath.errordecoder.storemisalignedflag ;
  assign writemem = \controller.enableaddr ;
  assign zeroaddr = 1'h0;
  assign zerocnt = 1'h0;
  assign zerodata = 1'h0;
  assign zeronumbytes = 1'h0;
endmodule

module aftab_dawu_controller(clk, rst, sync_rst, cocnt, startdawu, memready, lddata, enabledata, enableaddr, inccnt, zerocnt, initcnt, ldnumbytes, zeronumbytes, ldaddr, zeroaddr, zerodata, writemem, completedawu);
  reg _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  input clk;
  wire clk;
  input cocnt;
  wire cocnt;
  output completedawu;
  wire completedawu;
  output enableaddr;
  wire enableaddr;
  output enabledata;
  wire enabledata;
  output inccnt;
  wire inccnt;
  output initcnt;
  wire initcnt;
  output ldaddr;
  wire ldaddr;
  output lddata;
  wire lddata;
  output ldnumbytes;
  wire ldnumbytes;
  input memready;
  wire memready;
  wire nstate;
  wire pstate;
  input rst;
  wire rst;
  input startdawu;
  wire startdawu;
  input sync_rst;
  wire sync_rst;
  output writemem;
  wire writemem;
  output zeroaddr;
  wire zeroaddr;
  output zerocnt;
  wire zerocnt;
  output zerodata;
  wire zerodata;
  output zeronumbytes;
  wire zeronumbytes;
  assign pstate = rst ? 1'h0 : _00_;
  always @(posedge clk)
    if (_07_) _00_ <= 1'h0;
    else _00_ <= nstate;
  assign _07_ = | { sync_rst, rst };
  assign _04_ = _03_ ? 1'h0 : 1'h1;
  function [0:0] \6036 ;
    input [0:0] a;
    input [1:0] b;
    input [1:0] s;
    (* parallel_case *)
    casez (s)
      2'b?1:
        \6036  = b[0:0];
      2'b1?:
        \6036  = b[1:1];
      default:
        \6036  = a;
    endcase
  endfunction
  assign nstate = \6036 (1'h0, { _04_, _01_ }, { pstate, _02_ });
  assign _01_ = startdawu ? 1'h1 : 1'h0;
  assign _02_ = ~ pstate;
  assign _05_ = memready ? 1'h1 : 1'h0;
  assign _03_ = memready & cocnt;
  assign _06_ = _03_ ? 1'h1 : 1'h0;
  assign inccnt = pstate ? _05_ : 1'h0;
  assign initcnt = pstate ? 1'h0 : _01_;
  assign enableaddr = pstate ? 1'h1 : 1'h0;
  assign completedawu = pstate ? _06_ : 1'h0;
  assign enabledata = enableaddr;
  assign ldaddr = initcnt;
  assign lddata = initcnt;
  assign ldnumbytes = initcnt;
  assign writemem = enableaddr;
  assign zeroaddr = 1'h0;
  assign zerocnt = 1'h0;
  assign zerodata = 1'h0;
  assign zeronumbytes = 1'h0;
endmodule

module aftab_dawu_datapath_32(clk, rst, lddata, enabledata, enableaddr, inccnt, zerocnt, initcnt, ldnumbytes, zeronumbytes, ldaddr, zeroaddr, zerodata, nbytesin, initvaluecnt, datain, addrin, checkmisaligneddawu, storemisalignedflag, cocnt, dataout
, addrout, bytestowrite);
  wire _00_;
  wire _01_;
  wire _02_;
  reg [31:0] _03_;
  wire [31:0] _04_;
  wire _05_;
  reg _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  wire _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  wire _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire _21_;
  wire _22_;
  wire _23_;
  reg [1:0] _24_;
  wire [1:0] _25_;
  wire _26_;
  reg [15:0] _27_;
  wire [15:0] _28_;
  wire _29_;
  reg [15:0] _30_;
  wire [15:0] _31_;
  (* hdlname = "adder a" *)
  wire [31:0] \adder.a ;
  (* hdlname = "adder b" *)
  wire [1:0] \adder.b ;
  (* hdlname = "adder cout" *)
  (* unused_bits = "31" *)
  wire [31:0] \adder.cout ;
  (* hdlname = "adder fa1 a" *)
  wire \adder.fa1.a ;
  (* hdlname = "adder fa1 b" *)
  wire \adder.fa1.b ;
  (* hdlname = "adder fa1 cin" *)
  wire \adder.fa1.cin ;
  (* hdlname = "adder fa1 cout" *)
  wire \adder.fa1.cout ;
  (* hdlname = "adder fa1 s" *)
  wire \adder.fa1.s ;
  (* hdlname = "adder fa2 a" *)
  wire \adder.fa2.a ;
  (* hdlname = "adder fa2 b" *)
  wire \adder.fa2.b ;
  (* hdlname = "adder fa2 cin" *)
  wire \adder.fa2.cin ;
  (* hdlname = "adder fa2 cout" *)
  wire \adder.fa2.cout ;
  (* hdlname = "adder fa2 s" *)
  wire \adder.fa2.s ;
  (* hdlname = "adder gen_halfadder:1.ha i_bit1" *)
  wire \adder.gen_halfadder:1.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:1.ha i_bit2" *)
  wire \adder.gen_halfadder:1.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:1.ha o_carry" *)
  wire \adder.gen_halfadder:1.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:1.ha o_sum" *)
  wire \adder.gen_halfadder:1.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:10.ha i_bit1" *)
  wire \adder.gen_halfadder:10.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:10.ha i_bit2" *)
  wire \adder.gen_halfadder:10.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:10.ha o_carry" *)
  wire \adder.gen_halfadder:10.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:10.ha o_sum" *)
  wire \adder.gen_halfadder:10.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:11.ha i_bit1" *)
  wire \adder.gen_halfadder:11.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:11.ha i_bit2" *)
  wire \adder.gen_halfadder:11.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:11.ha o_carry" *)
  wire \adder.gen_halfadder:11.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:11.ha o_sum" *)
  wire \adder.gen_halfadder:11.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:12.ha i_bit1" *)
  wire \adder.gen_halfadder:12.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:12.ha i_bit2" *)
  wire \adder.gen_halfadder:12.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:12.ha o_carry" *)
  wire \adder.gen_halfadder:12.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:12.ha o_sum" *)
  wire \adder.gen_halfadder:12.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:13.ha i_bit1" *)
  wire \adder.gen_halfadder:13.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:13.ha i_bit2" *)
  wire \adder.gen_halfadder:13.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:13.ha o_carry" *)
  wire \adder.gen_halfadder:13.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:13.ha o_sum" *)
  wire \adder.gen_halfadder:13.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:14.ha i_bit1" *)
  wire \adder.gen_halfadder:14.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:14.ha i_bit2" *)
  wire \adder.gen_halfadder:14.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:14.ha o_carry" *)
  wire \adder.gen_halfadder:14.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:14.ha o_sum" *)
  wire \adder.gen_halfadder:14.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:15.ha i_bit1" *)
  wire \adder.gen_halfadder:15.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:15.ha i_bit2" *)
  wire \adder.gen_halfadder:15.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:15.ha o_carry" *)
  wire \adder.gen_halfadder:15.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:15.ha o_sum" *)
  wire \adder.gen_halfadder:15.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:16.ha i_bit1" *)
  wire \adder.gen_halfadder:16.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:16.ha i_bit2" *)
  wire \adder.gen_halfadder:16.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:16.ha o_carry" *)
  wire \adder.gen_halfadder:16.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:16.ha o_sum" *)
  wire \adder.gen_halfadder:16.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:17.ha i_bit1" *)
  wire \adder.gen_halfadder:17.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:17.ha i_bit2" *)
  wire \adder.gen_halfadder:17.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:17.ha o_carry" *)
  wire \adder.gen_halfadder:17.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:17.ha o_sum" *)
  wire \adder.gen_halfadder:17.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:18.ha i_bit1" *)
  wire \adder.gen_halfadder:18.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:18.ha i_bit2" *)
  wire \adder.gen_halfadder:18.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:18.ha o_carry" *)
  wire \adder.gen_halfadder:18.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:18.ha o_sum" *)
  wire \adder.gen_halfadder:18.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:19.ha i_bit1" *)
  wire \adder.gen_halfadder:19.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:19.ha i_bit2" *)
  wire \adder.gen_halfadder:19.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:19.ha o_carry" *)
  wire \adder.gen_halfadder:19.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:19.ha o_sum" *)
  wire \adder.gen_halfadder:19.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:2.ha i_bit1" *)
  wire \adder.gen_halfadder:2.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:2.ha i_bit2" *)
  wire \adder.gen_halfadder:2.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:2.ha o_carry" *)
  wire \adder.gen_halfadder:2.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:2.ha o_sum" *)
  wire \adder.gen_halfadder:2.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:20.ha i_bit1" *)
  wire \adder.gen_halfadder:20.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:20.ha i_bit2" *)
  wire \adder.gen_halfadder:20.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:20.ha o_carry" *)
  wire \adder.gen_halfadder:20.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:20.ha o_sum" *)
  wire \adder.gen_halfadder:20.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:21.ha i_bit1" *)
  wire \adder.gen_halfadder:21.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:21.ha i_bit2" *)
  wire \adder.gen_halfadder:21.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:21.ha o_carry" *)
  wire \adder.gen_halfadder:21.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:21.ha o_sum" *)
  wire \adder.gen_halfadder:21.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:22.ha i_bit1" *)
  wire \adder.gen_halfadder:22.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:22.ha i_bit2" *)
  wire \adder.gen_halfadder:22.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:22.ha o_carry" *)
  wire \adder.gen_halfadder:22.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:22.ha o_sum" *)
  wire \adder.gen_halfadder:22.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:23.ha i_bit1" *)
  wire \adder.gen_halfadder:23.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:23.ha i_bit2" *)
  wire \adder.gen_halfadder:23.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:23.ha o_carry" *)
  wire \adder.gen_halfadder:23.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:23.ha o_sum" *)
  wire \adder.gen_halfadder:23.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:24.ha i_bit1" *)
  wire \adder.gen_halfadder:24.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:24.ha i_bit2" *)
  wire \adder.gen_halfadder:24.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:24.ha o_carry" *)
  wire \adder.gen_halfadder:24.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:24.ha o_sum" *)
  wire \adder.gen_halfadder:24.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:25.ha i_bit1" *)
  wire \adder.gen_halfadder:25.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:25.ha i_bit2" *)
  wire \adder.gen_halfadder:25.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:25.ha o_carry" *)
  wire \adder.gen_halfadder:25.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:25.ha o_sum" *)
  wire \adder.gen_halfadder:25.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:26.ha i_bit1" *)
  wire \adder.gen_halfadder:26.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:26.ha i_bit2" *)
  wire \adder.gen_halfadder:26.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:26.ha o_carry" *)
  wire \adder.gen_halfadder:26.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:26.ha o_sum" *)
  wire \adder.gen_halfadder:26.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:27.ha i_bit1" *)
  wire \adder.gen_halfadder:27.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:27.ha i_bit2" *)
  wire \adder.gen_halfadder:27.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:27.ha o_carry" *)
  wire \adder.gen_halfadder:27.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:27.ha o_sum" *)
  wire \adder.gen_halfadder:27.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:28.ha i_bit1" *)
  wire \adder.gen_halfadder:28.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:28.ha i_bit2" *)
  wire \adder.gen_halfadder:28.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:28.ha o_carry" *)
  wire \adder.gen_halfadder:28.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:28.ha o_sum" *)
  wire \adder.gen_halfadder:28.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:29.ha i_bit1" *)
  wire \adder.gen_halfadder:29.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:29.ha i_bit2" *)
  wire \adder.gen_halfadder:29.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:29.ha o_carry" *)
  wire \adder.gen_halfadder:29.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:29.ha o_sum" *)
  wire \adder.gen_halfadder:29.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:3.ha i_bit1" *)
  wire \adder.gen_halfadder:3.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:3.ha i_bit2" *)
  wire \adder.gen_halfadder:3.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:3.ha o_carry" *)
  wire \adder.gen_halfadder:3.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:3.ha o_sum" *)
  wire \adder.gen_halfadder:3.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:30.ha i_bit1" *)
  wire \adder.gen_halfadder:30.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:30.ha i_bit2" *)
  wire \adder.gen_halfadder:30.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:30.ha o_carry" *)
  (* unused_bits = "0" *)
  wire \adder.gen_halfadder:30.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:30.ha o_sum" *)
  wire \adder.gen_halfadder:30.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:4.ha i_bit1" *)
  wire \adder.gen_halfadder:4.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:4.ha i_bit2" *)
  wire \adder.gen_halfadder:4.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:4.ha o_carry" *)
  wire \adder.gen_halfadder:4.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:4.ha o_sum" *)
  wire \adder.gen_halfadder:4.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:5.ha i_bit1" *)
  wire \adder.gen_halfadder:5.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:5.ha i_bit2" *)
  wire \adder.gen_halfadder:5.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:5.ha o_carry" *)
  wire \adder.gen_halfadder:5.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:5.ha o_sum" *)
  wire \adder.gen_halfadder:5.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:6.ha i_bit1" *)
  wire \adder.gen_halfadder:6.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:6.ha i_bit2" *)
  wire \adder.gen_halfadder:6.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:6.ha o_carry" *)
  wire \adder.gen_halfadder:6.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:6.ha o_sum" *)
  wire \adder.gen_halfadder:6.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:7.ha i_bit1" *)
  wire \adder.gen_halfadder:7.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:7.ha i_bit2" *)
  wire \adder.gen_halfadder:7.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:7.ha o_carry" *)
  wire \adder.gen_halfadder:7.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:7.ha o_sum" *)
  wire \adder.gen_halfadder:7.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:8.ha i_bit1" *)
  wire \adder.gen_halfadder:8.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:8.ha i_bit2" *)
  wire \adder.gen_halfadder:8.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:8.ha o_carry" *)
  wire \adder.gen_halfadder:8.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:8.ha o_sum" *)
  wire \adder.gen_halfadder:8.ha.o_sum ;
  (* hdlname = "adder gen_halfadder:9.ha i_bit1" *)
  wire \adder.gen_halfadder:9.ha.i_bit1 ;
  (* hdlname = "adder gen_halfadder:9.ha i_bit2" *)
  wire \adder.gen_halfadder:9.ha.i_bit2 ;
  (* hdlname = "adder gen_halfadder:9.ha o_carry" *)
  wire \adder.gen_halfadder:9.ha.o_carry ;
  (* hdlname = "adder gen_halfadder:9.ha o_sum" *)
  wire \adder.gen_halfadder:9.ha.o_sum ;
  (* hdlname = "adder sum" *)
  wire [31:0] \adder.sum ;
  input [31:0] addrin;
  wire [31:0] addrin;
  output [31:0] addrout;
  wire [31:0] addrout;
  wire [31:0] addroutreg;
  (* hdlname = "addrreg clk" *)
  wire \addrreg.clk ;
  (* hdlname = "addrreg inreg" *)
  wire [31:0] \addrreg.inreg ;
  (* hdlname = "addrreg load" *)
  wire \addrreg.load ;
  (* hdlname = "addrreg outreg" *)
  wire [31:0] \addrreg.outreg ;
  (* hdlname = "addrreg rst" *)
  wire \addrreg.rst ;
  (* hdlname = "addrreg zero" *)
  wire \addrreg.zero ;
  wire [1:0] bytecnt;
  output bytestowrite;
  wire bytestowrite;
  wire bytestowrite_temp;
  input checkmisaligneddawu;
  wire checkmisaligneddawu;
  input clk;
  wire clk;
  output cocnt;
  wire cocnt;
  (* hdlname = "counter clk" *)
  wire \counter.clk ;
  (* hdlname = "counter cocnt" *)
  wire \counter.cocnt ;
  (* hdlname = "counter cocntp" *)
  wire \counter.cocntp ;
  (* hdlname = "counter inccnt" *)
  wire \counter.inccnt ;
  (* hdlname = "counter initcnt" *)
  wire \counter.initcnt ;
  (* hdlname = "counter initvalue" *)
  wire \counter.initvalue ;
  (* hdlname = "counter outcnt" *)
  wire \counter.outcnt ;
  (* hdlname = "counter rst" *)
  wire \counter.rst ;
  (* hdlname = "counter temp" *)
  wire \counter.temp ;
  (* hdlname = "counter zerocnt" *)
  wire \counter.zerocnt ;
  input [31:0] datain;
  wire [31:0] datain;
  output [15:0] dataout;
  wire [15:0] dataout;
  input enableaddr;
  wire enableaddr;
  input enabledata;
  wire enabledata;
  (* hdlname = "errordecoder addrin" *)
  wire [1:0] \errordecoder.addrin ;
  (* hdlname = "errordecoder checkmisaligneddawu" *)
  wire \errordecoder.checkmisaligneddawu ;
  (* hdlname = "errordecoder cmp_01" *)
  wire \errordecoder.cmp_01 ;
  (* hdlname = "errordecoder cmp_10" *)
  wire \errordecoder.cmp_10 ;
  (* hdlname = "errordecoder cmp_11" *)
  wire \errordecoder.cmp_11 ;
  (* hdlname = "errordecoder nbytes" *)
  wire [1:0] \errordecoder.nbytes ;
  (* hdlname = "errordecoder storemisalignedflag" *)
  wire \errordecoder.storemisalignedflag ;
  input inccnt;
  wire inccnt;
  input initcnt;
  wire initcnt;
  input [1:0] initvaluecnt;
  wire [1:0] initvaluecnt;
  input ldaddr;
  wire ldaddr;
  input lddata;
  wire lddata;
  input ldnumbytes;
  wire ldnumbytes;
  wire [15:0] muxout;
  input [1:0] nbytesin;
  wire [1:0] nbytesin;
  wire [1:0] nbytesout;
  (* hdlname = "nbytesreg clk" *)
  wire \nbytesreg.clk ;
  (* hdlname = "nbytesreg inreg" *)
  wire [1:0] \nbytesreg.inreg ;
  (* hdlname = "nbytesreg load" *)
  wire \nbytesreg.load ;
  (* hdlname = "nbytesreg outreg" *)
  wire [1:0] \nbytesreg.outreg ;
  (* hdlname = "nbytesreg rst" *)
  wire \nbytesreg.rst ;
  (* hdlname = "nbytesreg zero" *)
  wire \nbytesreg.zero ;
  wire outcnt;
  wire [15:0] outreg0;
  wire [15:0] outreg1;
  (* hdlname = "reg0 clk" *)
  wire \reg0.clk ;
  (* hdlname = "reg0 inreg" *)
  wire [15:0] \reg0.inreg ;
  (* hdlname = "reg0 load" *)
  wire \reg0.load ;
  (* hdlname = "reg0 outreg" *)
  wire [15:0] \reg0.outreg ;
  (* hdlname = "reg0 rst" *)
  wire \reg0.rst ;
  (* hdlname = "reg0 zero" *)
  wire \reg0.zero ;
  (* hdlname = "reg1 clk" *)
  wire \reg1.clk ;
  (* hdlname = "reg1 inreg" *)
  wire [15:0] \reg1.inreg ;
  (* hdlname = "reg1 load" *)
  wire \reg1.load ;
  (* hdlname = "reg1 outreg" *)
  wire [15:0] \reg1.outreg ;
  (* hdlname = "reg1 rst" *)
  wire \reg1.rst ;
  (* hdlname = "reg1 zero" *)
  wire \reg1.zero ;
  input rst;
  wire rst;
  output storemisalignedflag;
  wire storemisalignedflag;
  wire totalbytecnt;
  wire [31:0] writeaddr;
  input zeroaddr;
  wire zeroaddr;
  input zerocnt;
  wire zerocnt;
  input zerodata;
  wire zerodata;
  input zeronumbytes;
  wire zeronumbytes;
  assign \addrreg.outreg  = rst ? 32'd0 : _03_;
  always @(posedge clk)
    if (_05_) _03_ <= 32'd0;
    else _03_ <= _04_;
  assign _05_ = | { zeroaddr, rst };
  assign \adder.fa2.b  = rst ? 1'h0 : _06_;
  always @(posedge clk)
    if (_12_) _06_ <= 1'h0;
    else _06_ <= _11_;
  assign _12_ = | { zerocnt, rst };
  assign nbytesout = rst ? 2'h0 : _24_;
  always @(posedge clk)
    if (_26_) _24_ <= 2'h0;
    else _24_ <= _25_;
  assign _26_ = | { zeronumbytes, rst };
  assign outreg0 = rst ? 16'h0000 : _27_;
  always @(posedge clk)
    if (_29_) _27_ <= 16'h0000;
    else _27_ <= _28_;
  assign _29_ = | { zerodata, rst };
  assign outreg1 = rst ? 16'h0000 : _30_;
  always @(posedge clk)
    if (_29_) _30_ <= 16'h0000;
    else _30_ <= _31_;
  assign _00_ = ! nbytesout;
  assign bytestowrite = _00_ ? 1'h0 : 1'h1;
  assign _01_ = nbytesout != 2'h3;
  assign totalbytecnt = _01_ ? 1'h0 : 1'h1;
  assign muxout = \adder.fa2.b  ? outreg1 : outreg0;
  assign _02_ = \adder.fa2.b  == totalbytecnt;
  assign cocnt = _02_ ? 1'h1 : 1'h0;
  assign dataout = enabledata ? muxout : 16'bz;
  assign addrout = enableaddr ? { \adder.gen_halfadder:30.ha.o_sum , \adder.gen_halfadder:29.ha.o_sum , \adder.gen_halfadder:28.ha.o_sum , \adder.gen_halfadder:27.ha.o_sum , \adder.gen_halfadder:26.ha.o_sum , \adder.gen_halfadder:25.ha.o_sum , \adder.gen_halfadder:24.ha.o_sum , \adder.gen_halfadder:23.ha.o_sum , \adder.gen_halfadder:22.ha.o_sum , \adder.gen_halfadder:21.ha.o_sum , \adder.gen_halfadder:20.ha.o_sum , \adder.gen_halfadder:19.ha.o_sum , \adder.gen_halfadder:18.ha.o_sum , \adder.gen_halfadder:17.ha.o_sum , \adder.gen_halfadder:16.ha.o_sum , \adder.gen_halfadder:15.ha.o_sum , \adder.gen_halfadder:14.ha.o_sum , \adder.gen_halfadder:13.ha.o_sum , \adder.gen_halfadder:12.ha.o_sum , \adder.gen_halfadder:11.ha.o_sum , \adder.gen_halfadder:10.ha.o_sum , \adder.gen_halfadder:9.ha.o_sum , \adder.gen_halfadder:8.ha.o_sum , \adder.gen_halfadder:7.ha.o_sum , \adder.gen_halfadder:6.ha.o_sum , \adder.gen_halfadder:5.ha.o_sum , \adder.gen_halfadder:4.ha.o_sum , \adder.gen_halfadder:3.ha.o_sum , \adder.gen_halfadder:2.ha.o_sum , \adder.gen_halfadder:1.ha.o_sum , \adder.fa2.s , \addrreg.outreg [0] } : 32'bz;
  assign \adder.fa2.s  = \addrreg.outreg [1] ^ (* hdlname = "adder fa2 6569" *) \adder.fa2.b ;
  assign \adder.gen_halfadder:1.ha.i_bit2  = \addrreg.outreg [1] & (* hdlname = "adder fa2 6571" *) \adder.fa2.b ;
  assign \adder.gen_halfadder:1.ha.o_sum  = \addrreg.outreg [2] ^ (* hdlname = "adder gen_halfadder:1.ha 6578" *) \adder.gen_halfadder:1.ha.i_bit2 ;
  assign \adder.gen_halfadder:1.ha.o_carry  = \addrreg.outreg [2] & (* hdlname = "adder gen_halfadder:1.ha 6579" *) \adder.gen_halfadder:1.ha.i_bit2 ;
  assign \adder.gen_halfadder:10.ha.o_sum  = \addrreg.outreg [11] ^ (* hdlname = "adder gen_halfadder:10.ha 6578" *) \adder.gen_halfadder:10.ha.i_bit2 ;
  assign \adder.gen_halfadder:10.ha.o_carry  = \addrreg.outreg [11] & (* hdlname = "adder gen_halfadder:10.ha 6579" *) \adder.gen_halfadder:10.ha.i_bit2 ;
  assign \adder.gen_halfadder:11.ha.o_sum  = \addrreg.outreg [12] ^ (* hdlname = "adder gen_halfadder:11.ha 6578" *) \adder.gen_halfadder:10.ha.o_carry ;
  assign \adder.gen_halfadder:11.ha.o_carry  = \addrreg.outreg [12] & (* hdlname = "adder gen_halfadder:11.ha 6579" *) \adder.gen_halfadder:10.ha.o_carry ;
  assign \adder.gen_halfadder:12.ha.o_sum  = \addrreg.outreg [13] ^ (* hdlname = "adder gen_halfadder:12.ha 6578" *) \adder.gen_halfadder:11.ha.o_carry ;
  assign \adder.gen_halfadder:12.ha.o_carry  = \addrreg.outreg [13] & (* hdlname = "adder gen_halfadder:12.ha 6579" *) \adder.gen_halfadder:11.ha.o_carry ;
  assign \adder.gen_halfadder:13.ha.o_sum  = \addrreg.outreg [14] ^ (* hdlname = "adder gen_halfadder:13.ha 6578" *) \adder.gen_halfadder:12.ha.o_carry ;
  assign \adder.gen_halfadder:13.ha.o_carry  = \addrreg.outreg [14] & (* hdlname = "adder gen_halfadder:13.ha 6579" *) \adder.gen_halfadder:12.ha.o_carry ;
  assign \adder.gen_halfadder:14.ha.o_sum  = \addrreg.outreg [15] ^ (* hdlname = "adder gen_halfadder:14.ha 6578" *) \adder.gen_halfadder:13.ha.o_carry ;
  assign \adder.gen_halfadder:14.ha.o_carry  = \addrreg.outreg [15] & (* hdlname = "adder gen_halfadder:14.ha 6579" *) \adder.gen_halfadder:13.ha.o_carry ;
  assign \adder.gen_halfadder:15.ha.o_sum  = \addrreg.outreg [16] ^ (* hdlname = "adder gen_halfadder:15.ha 6578" *) \adder.gen_halfadder:14.ha.o_carry ;
  assign \adder.gen_halfadder:15.ha.o_carry  = \addrreg.outreg [16] & (* hdlname = "adder gen_halfadder:15.ha 6579" *) \adder.gen_halfadder:14.ha.o_carry ;
  assign \adder.gen_halfadder:16.ha.o_sum  = \addrreg.outreg [17] ^ (* hdlname = "adder gen_halfadder:16.ha 6578" *) \adder.gen_halfadder:15.ha.o_carry ;
  assign \adder.gen_halfadder:16.ha.o_carry  = \addrreg.outreg [17] & (* hdlname = "adder gen_halfadder:16.ha 6579" *) \adder.gen_halfadder:15.ha.o_carry ;
  assign \adder.gen_halfadder:17.ha.o_sum  = \addrreg.outreg [18] ^ (* hdlname = "adder gen_halfadder:17.ha 6578" *) \adder.gen_halfadder:16.ha.o_carry ;
  assign \adder.gen_halfadder:17.ha.o_carry  = \addrreg.outreg [18] & (* hdlname = "adder gen_halfadder:17.ha 6579" *) \adder.gen_halfadder:16.ha.o_carry ;
  assign \adder.gen_halfadder:18.ha.o_sum  = \addrreg.outreg [19] ^ (* hdlname = "adder gen_halfadder:18.ha 6578" *) \adder.gen_halfadder:17.ha.o_carry ;
  assign \adder.gen_halfadder:18.ha.o_carry  = \addrreg.outreg [19] & (* hdlname = "adder gen_halfadder:18.ha 6579" *) \adder.gen_halfadder:17.ha.o_carry ;
  assign \adder.gen_halfadder:19.ha.o_sum  = \addrreg.outreg [20] ^ (* hdlname = "adder gen_halfadder:19.ha 6578" *) \adder.gen_halfadder:18.ha.o_carry ;
  assign \adder.gen_halfadder:19.ha.o_carry  = \addrreg.outreg [20] & (* hdlname = "adder gen_halfadder:19.ha 6579" *) \adder.gen_halfadder:18.ha.o_carry ;
  assign \adder.gen_halfadder:2.ha.o_sum  = \addrreg.outreg [3] ^ (* hdlname = "adder gen_halfadder:2.ha 6578" *) \adder.gen_halfadder:1.ha.o_carry ;
  assign \adder.gen_halfadder:2.ha.o_carry  = \addrreg.outreg [3] & (* hdlname = "adder gen_halfadder:2.ha 6579" *) \adder.gen_halfadder:1.ha.o_carry ;
  assign \adder.gen_halfadder:20.ha.o_sum  = \addrreg.outreg [21] ^ (* hdlname = "adder gen_halfadder:20.ha 6578" *) \adder.gen_halfadder:19.ha.o_carry ;
  assign \adder.gen_halfadder:20.ha.o_carry  = \addrreg.outreg [21] & (* hdlname = "adder gen_halfadder:20.ha 6579" *) \adder.gen_halfadder:19.ha.o_carry ;
  assign \adder.gen_halfadder:21.ha.o_sum  = \addrreg.outreg [22] ^ (* hdlname = "adder gen_halfadder:21.ha 6578" *) \adder.gen_halfadder:20.ha.o_carry ;
  assign \adder.gen_halfadder:21.ha.o_carry  = \addrreg.outreg [22] & (* hdlname = "adder gen_halfadder:21.ha 6579" *) \adder.gen_halfadder:20.ha.o_carry ;
  assign \adder.gen_halfadder:22.ha.o_sum  = \addrreg.outreg [23] ^ (* hdlname = "adder gen_halfadder:22.ha 6578" *) \adder.gen_halfadder:21.ha.o_carry ;
  assign \adder.gen_halfadder:22.ha.o_carry  = \addrreg.outreg [23] & (* hdlname = "adder gen_halfadder:22.ha 6579" *) \adder.gen_halfadder:21.ha.o_carry ;
  assign \adder.gen_halfadder:23.ha.o_sum  = \addrreg.outreg [24] ^ (* hdlname = "adder gen_halfadder:23.ha 6578" *) \adder.gen_halfadder:22.ha.o_carry ;
  assign \adder.gen_halfadder:23.ha.o_carry  = \addrreg.outreg [24] & (* hdlname = "adder gen_halfadder:23.ha 6579" *) \adder.gen_halfadder:22.ha.o_carry ;
  assign \adder.gen_halfadder:24.ha.o_sum  = \addrreg.outreg [25] ^ (* hdlname = "adder gen_halfadder:24.ha 6578" *) \adder.gen_halfadder:23.ha.o_carry ;
  assign \adder.gen_halfadder:24.ha.o_carry  = \addrreg.outreg [25] & (* hdlname = "adder gen_halfadder:24.ha 6579" *) \adder.gen_halfadder:23.ha.o_carry ;
  assign \adder.gen_halfadder:25.ha.o_sum  = \addrreg.outreg [26] ^ (* hdlname = "adder gen_halfadder:25.ha 6578" *) \adder.gen_halfadder:24.ha.o_carry ;
  assign \adder.gen_halfadder:25.ha.o_carry  = \addrreg.outreg [26] & (* hdlname = "adder gen_halfadder:25.ha 6579" *) \adder.gen_halfadder:24.ha.o_carry ;
  assign \adder.gen_halfadder:26.ha.o_sum  = \addrreg.outreg [27] ^ (* hdlname = "adder gen_halfadder:26.ha 6578" *) \adder.gen_halfadder:25.ha.o_carry ;
  assign \adder.gen_halfadder:26.ha.o_carry  = \addrreg.outreg [27] & (* hdlname = "adder gen_halfadder:26.ha 6579" *) \adder.gen_halfadder:25.ha.o_carry ;
  assign \adder.gen_halfadder:27.ha.o_sum  = \addrreg.outreg [28] ^ (* hdlname = "adder gen_halfadder:27.ha 6578" *) \adder.gen_halfadder:26.ha.o_carry ;
  assign \adder.gen_halfadder:27.ha.o_carry  = \addrreg.outreg [28] & (* hdlname = "adder gen_halfadder:27.ha 6579" *) \adder.gen_halfadder:26.ha.o_carry ;
  assign \adder.gen_halfadder:28.ha.o_sum  = \addrreg.outreg [29] ^ (* hdlname = "adder gen_halfadder:28.ha 6578" *) \adder.gen_halfadder:27.ha.o_carry ;
  assign \adder.gen_halfadder:28.ha.o_carry  = \addrreg.outreg [29] & (* hdlname = "adder gen_halfadder:28.ha 6579" *) \adder.gen_halfadder:27.ha.o_carry ;
  assign \adder.gen_halfadder:29.ha.o_sum  = \addrreg.outreg [30] ^ (* hdlname = "adder gen_halfadder:29.ha 6578" *) \adder.gen_halfadder:28.ha.o_carry ;
  assign \adder.gen_halfadder:29.ha.o_carry  = \addrreg.outreg [30] & (* hdlname = "adder gen_halfadder:29.ha 6579" *) \adder.gen_halfadder:28.ha.o_carry ;
  assign \adder.gen_halfadder:3.ha.o_sum  = \addrreg.outreg [4] ^ (* hdlname = "adder gen_halfadder:3.ha 6578" *) \adder.gen_halfadder:2.ha.o_carry ;
  assign \adder.gen_halfadder:3.ha.o_carry  = \addrreg.outreg [4] & (* hdlname = "adder gen_halfadder:3.ha 6579" *) \adder.gen_halfadder:2.ha.o_carry ;
  assign \adder.gen_halfadder:30.ha.o_sum  = \addrreg.outreg [31] ^ (* hdlname = "adder gen_halfadder:30.ha 6578" *) \adder.gen_halfadder:29.ha.o_carry ;
  assign \adder.gen_halfadder:4.ha.o_sum  = \addrreg.outreg [5] ^ (* hdlname = "adder gen_halfadder:4.ha 6578" *) \adder.gen_halfadder:3.ha.o_carry ;
  assign \adder.gen_halfadder:4.ha.o_carry  = \addrreg.outreg [5] & (* hdlname = "adder gen_halfadder:4.ha 6579" *) \adder.gen_halfadder:3.ha.o_carry ;
  assign \adder.gen_halfadder:5.ha.o_sum  = \addrreg.outreg [6] ^ (* hdlname = "adder gen_halfadder:5.ha 6578" *) \adder.gen_halfadder:4.ha.o_carry ;
  assign \adder.gen_halfadder:5.ha.o_carry  = \addrreg.outreg [6] & (* hdlname = "adder gen_halfadder:5.ha 6579" *) \adder.gen_halfadder:4.ha.o_carry ;
  assign \adder.gen_halfadder:6.ha.o_sum  = \addrreg.outreg [7] ^ (* hdlname = "adder gen_halfadder:6.ha 6578" *) \adder.gen_halfadder:5.ha.o_carry ;
  assign \adder.gen_halfadder:6.ha.o_carry  = \addrreg.outreg [7] & (* hdlname = "adder gen_halfadder:6.ha 6579" *) \adder.gen_halfadder:5.ha.o_carry ;
  assign \adder.gen_halfadder:7.ha.o_sum  = \addrreg.outreg [8] ^ (* hdlname = "adder gen_halfadder:7.ha 6578" *) \adder.gen_halfadder:6.ha.o_carry ;
  assign \adder.gen_halfadder:7.ha.o_carry  = \addrreg.outreg [8] & (* hdlname = "adder gen_halfadder:7.ha 6579" *) \adder.gen_halfadder:6.ha.o_carry ;
  assign \adder.gen_halfadder:8.ha.o_sum  = \addrreg.outreg [9] ^ (* hdlname = "adder gen_halfadder:8.ha 6578" *) \adder.gen_halfadder:7.ha.o_carry ;
  assign \adder.gen_halfadder:8.ha.o_carry  = \addrreg.outreg [9] & (* hdlname = "adder gen_halfadder:8.ha 6579" *) \adder.gen_halfadder:7.ha.o_carry ;
  assign \adder.gen_halfadder:9.ha.o_sum  = \addrreg.outreg [10] ^ (* hdlname = "adder gen_halfadder:9.ha 6578" *) \adder.gen_halfadder:8.ha.o_carry ;
  assign \adder.gen_halfadder:10.ha.i_bit2  = \addrreg.outreg [10] & (* hdlname = "adder gen_halfadder:9.ha 6579" *) \adder.gen_halfadder:8.ha.o_carry ;
  assign _04_ = ldaddr ? (* hdlname = "addrreg 4067" *) addrin : \addrreg.outreg ;
  assign _07_ = ~ (* hdlname = "counter 6168" *) \counter.cocntp ;
  assign _08_ = _07_ & (* hdlname = "counter 6169" *) inccnt;
  assign _09_ = \adder.fa2.b  + (* hdlname = "counter 6171" *) 1'h1;
  assign _10_ = _08_ ? (* hdlname = "counter 6172" *) _09_ : \adder.fa2.b ;
  assign _11_ = initcnt ? (* hdlname = "counter 6173" *) initvaluecnt[0] : _10_;
  assign \counter.cocntp  = \adder.fa2.b  ? (* hdlname = "counter 6183" *) 1'h1 : 1'h0;
  assign _13_ = addrin[1:0] == (* hdlname = "errordecoder 6542" *) 2'h1;
  assign \errordecoder.cmp_01  = _13_ ? (* hdlname = "errordecoder 6543" *) 1'h1 : 1'h0;
  assign _14_ = addrin[1:0] == (* hdlname = "errordecoder 6547" *) 2'h2;
  assign \errordecoder.cmp_10  = _14_ ? (* hdlname = "errordecoder 6548" *) 1'h1 : 1'h0;
  assign _15_ = addrin[1:0] == (* hdlname = "errordecoder 6552" *) 2'h3;
  assign \errordecoder.cmp_11  = _15_ ? (* hdlname = "errordecoder 6553" *) 1'h1 : 1'h0;
  assign _16_ = \errordecoder.cmp_01  | (* hdlname = "errordecoder 6555" *) \errordecoder.cmp_11 ;
  assign _17_ = _16_ & (* hdlname = "errordecoder 6556" *) checkmisaligneddawu;
  assign _18_ = nbytesin == (* hdlname = "errordecoder 6558" *) 2'h1;
  assign \errordecoder.storemisalignedflag  = _18_ ? (* hdlname = "errordecoder 6559" *) _17_ : _23_;
  assign _19_ = \errordecoder.cmp_01  | (* hdlname = "errordecoder 6560" *) \errordecoder.cmp_10 ;
  assign _20_ = _19_ | (* hdlname = "errordecoder 6561" *) \errordecoder.cmp_11 ;
  assign _21_ = _20_ & (* hdlname = "errordecoder 6562" *) checkmisaligneddawu;
  assign _22_ = nbytesin == (* hdlname = "errordecoder 6564" *) 2'h3;
  assign _23_ = _22_ ? (* hdlname = "errordecoder 6565" *) _21_ : 1'h0;
  assign _25_ = ldnumbytes ? (* hdlname = "nbytesreg 6155" *) nbytesin : nbytesout;
  assign _28_ = lddata ? (* hdlname = "reg0 6190" *) datain[15:0] : outreg0;
  assign _31_ = lddata ? (* hdlname = "reg1 6190" *) datain[31:16] : outreg1;
  assign \adder.a  = \addrreg.outreg ;
  assign \adder.b  = { \adder.fa2.b , 1'h0 };
  assign \adder.cout [30:0] = { \adder.gen_halfadder:29.ha.o_carry , \adder.gen_halfadder:28.ha.o_carry , \adder.gen_halfadder:27.ha.o_carry , \adder.gen_halfadder:26.ha.o_carry , \adder.gen_halfadder:25.ha.o_carry , \adder.gen_halfadder:24.ha.o_carry , \adder.gen_halfadder:23.ha.o_carry , \adder.gen_halfadder:22.ha.o_carry , \adder.gen_halfadder:21.ha.o_carry , \adder.gen_halfadder:20.ha.o_carry , \adder.gen_halfadder:19.ha.o_carry , \adder.gen_halfadder:18.ha.o_carry , \adder.gen_halfadder:17.ha.o_carry , \adder.gen_halfadder:16.ha.o_carry , \adder.gen_halfadder:15.ha.o_carry , \adder.gen_halfadder:14.ha.o_carry , \adder.gen_halfadder:13.ha.o_carry , \adder.gen_halfadder:12.ha.o_carry , \adder.gen_halfadder:11.ha.o_carry , \adder.gen_halfadder:10.ha.o_carry , \adder.gen_halfadder:10.ha.i_bit2 , \adder.gen_halfadder:8.ha.o_carry , \adder.gen_halfadder:7.ha.o_carry , \adder.gen_halfadder:6.ha.o_carry , \adder.gen_halfadder:5.ha.o_carry , \adder.gen_halfadder:4.ha.o_carry , \adder.gen_halfadder:3.ha.o_carry , \adder.gen_halfadder:2.ha.o_carry , \adder.gen_halfadder:1.ha.o_carry , \adder.gen_halfadder:1.ha.i_bit2 , 1'h0 };
  assign \adder.fa1.a  = \addrreg.outreg [0];
  assign \adder.fa1.b  = 1'h0;
  assign \adder.fa1.cin  = 1'h0;
  assign \adder.fa1.cout  = 1'h0;
  assign \adder.fa1.s  = \addrreg.outreg [0];
  assign \adder.fa2.a  = \addrreg.outreg [1];
  assign \adder.fa2.cin  = 1'h0;
  assign \adder.fa2.cout  = \adder.gen_halfadder:1.ha.i_bit2 ;
  assign \adder.gen_halfadder:1.ha.i_bit1  = \addrreg.outreg [2];
  assign \adder.gen_halfadder:10.ha.i_bit1  = \addrreg.outreg [11];
  assign \adder.gen_halfadder:11.ha.i_bit1  = \addrreg.outreg [12];
  assign \adder.gen_halfadder:11.ha.i_bit2  = \adder.gen_halfadder:10.ha.o_carry ;
  assign \adder.gen_halfadder:12.ha.i_bit1  = \addrreg.outreg [13];
  assign \adder.gen_halfadder:12.ha.i_bit2  = \adder.gen_halfadder:11.ha.o_carry ;
  assign \adder.gen_halfadder:13.ha.i_bit1  = \addrreg.outreg [14];
  assign \adder.gen_halfadder:13.ha.i_bit2  = \adder.gen_halfadder:12.ha.o_carry ;
  assign \adder.gen_halfadder:14.ha.i_bit1  = \addrreg.outreg [15];
  assign \adder.gen_halfadder:14.ha.i_bit2  = \adder.gen_halfadder:13.ha.o_carry ;
  assign \adder.gen_halfadder:15.ha.i_bit1  = \addrreg.outreg [16];
  assign \adder.gen_halfadder:15.ha.i_bit2  = \adder.gen_halfadder:14.ha.o_carry ;
  assign \adder.gen_halfadder:16.ha.i_bit1  = \addrreg.outreg [17];
  assign \adder.gen_halfadder:16.ha.i_bit2  = \adder.gen_halfadder:15.ha.o_carry ;
  assign \adder.gen_halfadder:17.ha.i_bit1  = \addrreg.outreg [18];
  assign \adder.gen_halfadder:17.ha.i_bit2  = \adder.gen_halfadder:16.ha.o_carry ;
  assign \adder.gen_halfadder:18.ha.i_bit1  = \addrreg.outreg [19];
  assign \adder.gen_halfadder:18.ha.i_bit2  = \adder.gen_halfadder:17.ha.o_carry ;
  assign \adder.gen_halfadder:19.ha.i_bit1  = \addrreg.outreg [20];
  assign \adder.gen_halfadder:19.ha.i_bit2  = \adder.gen_halfadder:18.ha.o_carry ;
  assign \adder.gen_halfadder:2.ha.i_bit1  = \addrreg.outreg [3];
  assign \adder.gen_halfadder:2.ha.i_bit2  = \adder.gen_halfadder:1.ha.o_carry ;
  assign \adder.gen_halfadder:20.ha.i_bit1  = \addrreg.outreg [21];
  assign \adder.gen_halfadder:20.ha.i_bit2  = \adder.gen_halfadder:19.ha.o_carry ;
  assign \adder.gen_halfadder:21.ha.i_bit1  = \addrreg.outreg [22];
  assign \adder.gen_halfadder:21.ha.i_bit2  = \adder.gen_halfadder:20.ha.o_carry ;
  assign \adder.gen_halfadder:22.ha.i_bit1  = \addrreg.outreg [23];
  assign \adder.gen_halfadder:22.ha.i_bit2  = \adder.gen_halfadder:21.ha.o_carry ;
  assign \adder.gen_halfadder:23.ha.i_bit1  = \addrreg.outreg [24];
  assign \adder.gen_halfadder:23.ha.i_bit2  = \adder.gen_halfadder:22.ha.o_carry ;
  assign \adder.gen_halfadder:24.ha.i_bit1  = \addrreg.outreg [25];
  assign \adder.gen_halfadder:24.ha.i_bit2  = \adder.gen_halfadder:23.ha.o_carry ;
  assign \adder.gen_halfadder:25.ha.i_bit1  = \addrreg.outreg [26];
  assign \adder.gen_halfadder:25.ha.i_bit2  = \adder.gen_halfadder:24.ha.o_carry ;
  assign \adder.gen_halfadder:26.ha.i_bit1  = \addrreg.outreg [27];
  assign \adder.gen_halfadder:26.ha.i_bit2  = \adder.gen_halfadder:25.ha.o_carry ;
  assign \adder.gen_halfadder:27.ha.i_bit1  = \addrreg.outreg [28];
  assign \adder.gen_halfadder:27.ha.i_bit2  = \adder.gen_halfadder:26.ha.o_carry ;
  assign \adder.gen_halfadder:28.ha.i_bit1  = \addrreg.outreg [29];
  assign \adder.gen_halfadder:28.ha.i_bit2  = \adder.gen_halfadder:27.ha.o_carry ;
  assign \adder.gen_halfadder:29.ha.i_bit1  = \addrreg.outreg [30];
  assign \adder.gen_halfadder:29.ha.i_bit2  = \adder.gen_halfadder:28.ha.o_carry ;
  assign \adder.gen_halfadder:3.ha.i_bit1  = \addrreg.outreg [4];
  assign \adder.gen_halfadder:3.ha.i_bit2  = \adder.gen_halfadder:2.ha.o_carry ;
  assign \adder.gen_halfadder:30.ha.i_bit1  = \addrreg.outreg [31];
  assign \adder.gen_halfadder:30.ha.i_bit2  = \adder.gen_halfadder:29.ha.o_carry ;
  assign \adder.gen_halfadder:30.ha.o_carry  = \adder.cout [31];
  assign \adder.gen_halfadder:4.ha.i_bit1  = \addrreg.outreg [5];
  assign \adder.gen_halfadder:4.ha.i_bit2  = \adder.gen_halfadder:3.ha.o_carry ;
  assign \adder.gen_halfadder:5.ha.i_bit1  = \addrreg.outreg [6];
  assign \adder.gen_halfadder:5.ha.i_bit2  = \adder.gen_halfadder:4.ha.o_carry ;
  assign \adder.gen_halfadder:6.ha.i_bit1  = \addrreg.outreg [7];
  assign \adder.gen_halfadder:6.ha.i_bit2  = \adder.gen_halfadder:5.ha.o_carry ;
  assign \adder.gen_halfadder:7.ha.i_bit1  = \addrreg.outreg [8];
  assign \adder.gen_halfadder:7.ha.i_bit2  = \adder.gen_halfadder:6.ha.o_carry ;
  assign \adder.gen_halfadder:8.ha.i_bit1  = \addrreg.outreg [9];
  assign \adder.gen_halfadder:8.ha.i_bit2  = \adder.gen_halfadder:7.ha.o_carry ;
  assign \adder.gen_halfadder:9.ha.i_bit1  = \addrreg.outreg [10];
  assign \adder.gen_halfadder:9.ha.i_bit2  = \adder.gen_halfadder:8.ha.o_carry ;
  assign \adder.gen_halfadder:9.ha.o_carry  = \adder.gen_halfadder:10.ha.i_bit2 ;
  assign \adder.sum  = { \adder.gen_halfadder:30.ha.o_sum , \adder.gen_halfadder:29.ha.o_sum , \adder.gen_halfadder:28.ha.o_sum , \adder.gen_halfadder:27.ha.o_sum , \adder.gen_halfadder:26.ha.o_sum , \adder.gen_halfadder:25.ha.o_sum , \adder.gen_halfadder:24.ha.o_sum , \adder.gen_halfadder:23.ha.o_sum , \adder.gen_halfadder:22.ha.o_sum , \adder.gen_halfadder:21.ha.o_sum , \adder.gen_halfadder:20.ha.o_sum , \adder.gen_halfadder:19.ha.o_sum , \adder.gen_halfadder:18.ha.o_sum , \adder.gen_halfadder:17.ha.o_sum , \adder.gen_halfadder:16.ha.o_sum , \adder.gen_halfadder:15.ha.o_sum , \adder.gen_halfadder:14.ha.o_sum , \adder.gen_halfadder:13.ha.o_sum , \adder.gen_halfadder:12.ha.o_sum , \adder.gen_halfadder:11.ha.o_sum , \adder.gen_halfadder:10.ha.o_sum , \adder.gen_halfadder:9.ha.o_sum , \adder.gen_halfadder:8.ha.o_sum , \adder.gen_halfadder:7.ha.o_sum , \adder.gen_halfadder:6.ha.o_sum , \adder.gen_halfadder:5.ha.o_sum , \adder.gen_halfadder:4.ha.o_sum , \adder.gen_halfadder:3.ha.o_sum , \adder.gen_halfadder:2.ha.o_sum , \adder.gen_halfadder:1.ha.o_sum , \adder.fa2.s , \addrreg.outreg [0] };
  assign addroutreg = \addrreg.outreg ;
  assign \addrreg.clk  = clk;
  assign \addrreg.inreg  = addrin;
  assign \addrreg.load  = ldaddr;
  assign \addrreg.rst  = rst;
  assign \addrreg.zero  = zeroaddr;
  assign bytecnt = { \adder.fa2.b , 1'h0 };
  assign bytestowrite_temp = bytestowrite;
  assign \counter.clk  = clk;
  assign \counter.cocnt  = \counter.cocntp ;
  assign \counter.inccnt  = inccnt;
  assign \counter.initcnt  = initcnt;
  assign \counter.initvalue  = initvaluecnt[0];
  assign \counter.outcnt  = \adder.fa2.b ;
  assign \counter.rst  = rst;
  assign \counter.temp  = \adder.fa2.b ;
  assign \counter.zerocnt  = zerocnt;
  assign \errordecoder.addrin  = addrin[1:0];
  assign \errordecoder.checkmisaligneddawu  = checkmisaligneddawu;
  assign \errordecoder.nbytes  = nbytesin;
  assign \nbytesreg.clk  = clk;
  assign \nbytesreg.inreg  = nbytesin;
  assign \nbytesreg.load  = ldnumbytes;
  assign \nbytesreg.outreg  = nbytesout;
  assign \nbytesreg.rst  = rst;
  assign \nbytesreg.zero  = zeronumbytes;
  assign outcnt = \adder.fa2.b ;
  assign \reg0.clk  = clk;
  assign \reg0.inreg  = datain[15:0];
  assign \reg0.load  = lddata;
  assign \reg0.outreg  = outreg0;
  assign \reg0.rst  = rst;
  assign \reg0.zero  = zerodata;
  assign \reg1.clk  = clk;
  assign \reg1.inreg  = datain[31:16];
  assign \reg1.load  = lddata;
  assign \reg1.outreg  = outreg1;
  assign \reg1.rst  = rst;
  assign \reg1.zero  = zerodata;
  assign storemisalignedflag = \errordecoder.storemisalignedflag ;
  assign writeaddr = { \adder.gen_halfadder:30.ha.o_sum , \adder.gen_halfadder:29.ha.o_sum , \adder.gen_halfadder:28.ha.o_sum , \adder.gen_halfadder:27.ha.o_sum , \adder.gen_halfadder:26.ha.o_sum , \adder.gen_halfadder:25.ha.o_sum , \adder.gen_halfadder:24.ha.o_sum , \adder.gen_halfadder:23.ha.o_sum , \adder.gen_halfadder:22.ha.o_sum , \adder.gen_halfadder:21.ha.o_sum , \adder.gen_halfadder:20.ha.o_sum , \adder.gen_halfadder:19.ha.o_sum , \adder.gen_halfadder:18.ha.o_sum , \adder.gen_halfadder:17.ha.o_sum , \adder.gen_halfadder:16.ha.o_sum , \adder.gen_halfadder:15.ha.o_sum , \adder.gen_halfadder:14.ha.o_sum , \adder.gen_halfadder:13.ha.o_sum , \adder.gen_halfadder:12.ha.o_sum , \adder.gen_halfadder:11.ha.o_sum , \adder.gen_halfadder:10.ha.o_sum , \adder.gen_halfadder:9.ha.o_sum , \adder.gen_halfadder:8.ha.o_sum , \adder.gen_halfadder:7.ha.o_sum , \adder.gen_halfadder:6.ha.o_sum , \adder.gen_halfadder:5.ha.o_sum , \adder.gen_halfadder:4.ha.o_sum , \adder.gen_halfadder:3.ha.o_sum , \adder.gen_halfadder:2.ha.o_sum , \adder.gen_halfadder:1.ha.o_sum , \adder.fa2.s , \addrreg.outreg [0] };
endmodule

module aftab_dawu_error_detector_32(nbytes, addrin, checkmisaligneddawu, storemisalignedflag);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire _10_;
  input [1:0] addrin;
  wire [1:0] addrin;
  input checkmisaligneddawu;
  wire checkmisaligneddawu;
  wire cmp_01;
  wire cmp_10;
  wire cmp_11;
  input [1:0] nbytes;
  wire [1:0] nbytes;
  output storemisalignedflag;
  wire storemisalignedflag;
  assign _00_ = addrin == 2'h1;
  assign cmp_01 = _00_ ? 1'h1 : 1'h0;
  assign _01_ = addrin == 2'h2;
  assign cmp_10 = _01_ ? 1'h1 : 1'h0;
  assign _02_ = addrin == 2'h3;
  assign cmp_11 = _02_ ? 1'h1 : 1'h0;
  assign _03_ = cmp_01 | cmp_11;
  assign _04_ = _03_ & checkmisaligneddawu;
  assign _05_ = nbytes == 2'h1;
  assign storemisalignedflag = _05_ ? _04_ : _10_;
  assign _06_ = cmp_01 | cmp_10;
  assign _07_ = _06_ | cmp_11;
  assign _08_ = _07_ & checkmisaligneddawu;
  assign _09_ = nbytes == 2'h3;
  assign _10_ = _09_ ? _08_ : 1'h0;
endmodule

module aftab_decoder(en, indecoder, outdecoder);
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  wire [3:0] _4_;
  input en;
  wire en;
  input [1:0] indecoder;
  wire [1:0] indecoder;
  output [3:0] outdecoder;
  wire [3:0] outdecoder;
  assign _0_ = ! indecoder;
  assign _1_ = indecoder == 2'h1;
  assign _2_ = indecoder == 2'h2;
  assign _3_ = indecoder == 2'h3;
  function [3:0] \6147 ;
    input [3:0] a;
    input [15:0] b;
    input [3:0] s;
    (* parallel_case *)
    casez (s)
      4'b???1:
        \6147  = b[3:0];
      4'b??1?:
        \6147  = b[7:4];
      4'b?1??:
        \6147  = b[11:8];
      4'b1???:
        \6147  = b[15:12];
      default:
        \6147  = a;
    endcase
  endfunction
  assign _4_ = \6147 (4'h0, 16'h8421, { _3_, _2_, _1_, _0_ });
  assign outdecoder = en ? _4_ : 4'h0;
endmodule

module aftab_divider_32(clk, rst, sync_rst, startdiv, dividend, divisor, donediv, q, remainder);
  wire _00_;
  reg [1:0] _01_;
  wire [1:0] _02_;
  wire _03_;
  wire [1:0] _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire [5:0] _10_;
  wire _11_;
  wire _12_;
  wire [5:0] _13_;
  wire [5:0] _14_;
  (* unused_bits = "0 5" *)
  wire [5:0] _15_;
  wire _16_;
  wire [31:0] _17_;
  reg [32:0] _18_;
  (* unused_bits = "32" *)
  wire [32:0] _19_;
  reg _20_;
  reg [31:0] _21_;
  wire [31:0] _22_;
  wire _23_;
  wire [31:0] _24_;
  wire _25_;
  reg [32:0] _26_;
  wire [32:0] _27_;
  wire [32:0] _28_;
  input clk;
  wire clk;
  (* hdlname = "controllerdiv clk" *)
  wire \controllerdiv.clk ;
  (* hdlname = "controllerdiv cocnt" *)
  wire \controllerdiv.cocnt ;
  (* hdlname = "controllerdiv counter clk" *)
  wire \controllerdiv.counter.clk ;
  (* hdlname = "controllerdiv counter cocnt" *)
  wire \controllerdiv.counter.cocnt ;
  (* hdlname = "controllerdiv counter cocntp" *)
  wire \controllerdiv.counter.cocntp ;
  (* hdlname = "controllerdiv counter inccnt" *)
  wire \controllerdiv.counter.inccnt ;
  (* hdlname = "controllerdiv counter initcnt" *)
  wire \controllerdiv.counter.initcnt ;
  (* hdlname = "controllerdiv counter initvalue" *)
  wire [5:0] \controllerdiv.counter.initvalue ;
  (* hdlname = "controllerdiv counter outcnt" *)
  wire [5:0] \controllerdiv.counter.outcnt ;
  (* hdlname = "controllerdiv counter rst" *)
  wire \controllerdiv.counter.rst ;
  (* hdlname = "controllerdiv counter temp" *)
  wire [5:0] \controllerdiv.counter.temp ;
  (* hdlname = "controllerdiv counter zerocnt" *)
  wire \controllerdiv.counter.zerocnt ;
  (* hdlname = "controllerdiv donediv" *)
  wire \controllerdiv.donediv ;
  (* hdlname = "controllerdiv inccnt" *)
  wire \controllerdiv.inccnt ;
  (* hdlname = "controllerdiv initcnt" *)
  wire \controllerdiv.initcnt ;
  (* hdlname = "controllerdiv ldregm" *)
  wire \controllerdiv.ldregm ;
  (* hdlname = "controllerdiv ldregq" *)
  wire \controllerdiv.ldregq ;
  (* hdlname = "controllerdiv ldregr" *)
  wire \controllerdiv.ldregr ;
  (* hdlname = "controllerdiv nstate" *)
  wire [1:0] \controllerdiv.nstate ;
  (* hdlname = "controllerdiv pstate" *)
  wire [1:0] \controllerdiv.pstate ;
  (* hdlname = "controllerdiv qq0" *)
  wire \controllerdiv.qq0 ;
  (* hdlname = "controllerdiv r33" *)
  wire \controllerdiv.r33 ;
  (* hdlname = "controllerdiv rst" *)
  wire \controllerdiv.rst ;
  (* hdlname = "controllerdiv seldividend" *)
  wire \controllerdiv.seldividend ;
  (* hdlname = "controllerdiv selline1" *)
  wire \controllerdiv.selline1 ;
  (* hdlname = "controllerdiv shlregq" *)
  wire \controllerdiv.shlregq ;
  (* hdlname = "controllerdiv shlregr" *)
  wire \controllerdiv.shlregr ;
  (* hdlname = "controllerdiv shrregq" *)
  wire \controllerdiv.shrregq ;
  (* hdlname = "controllerdiv shrregr" *)
  wire \controllerdiv.shrregr ;
  (* hdlname = "controllerdiv startdiv" *)
  wire \controllerdiv.startdiv ;
  (* hdlname = "controllerdiv sync_rst" *)
  wire \controllerdiv.sync_rst ;
  (* hdlname = "controllerdiv zerocnt" *)
  wire \controllerdiv.zerocnt ;
  (* hdlname = "controllerdiv zeroregm" *)
  wire \controllerdiv.zeroregm ;
  (* hdlname = "controllerdiv zeroregq" *)
  wire \controllerdiv.zeroregq ;
  (* hdlname = "controllerdiv zeroregr" *)
  wire \controllerdiv.zeroregr ;
  (* hdlname = "datapathdiv addresult" *)
  wire [32:0] \datapathdiv.addresult ;
  (* hdlname = "datapathdiv clk" *)
  wire \datapathdiv.clk ;
  (* hdlname = "datapathdiv dividend" *)
  wire [31:0] \datapathdiv.dividend ;
  (* hdlname = "datapathdiv divisor" *)
  wire [31:0] \datapathdiv.divisor ;
  (* hdlname = "datapathdiv divisorp" *)
  wire [32:0] \datapathdiv.divisorp ;
  (* hdlname = "datapathdiv ldregm" *)
  wire \datapathdiv.ldregm ;
  (* hdlname = "datapathdiv ldregq" *)
  wire \datapathdiv.ldregq ;
  (* hdlname = "datapathdiv ldregr" *)
  wire \datapathdiv.ldregr ;
  (* hdlname = "datapathdiv leftbitoutq" *)
  wire \datapathdiv.leftbitoutq ;
  (* hdlname = "datapathdiv line1" *)
  wire [31:0] \datapathdiv.line1 ;
  (* hdlname = "datapathdiv m" *)
  wire [32:0] \datapathdiv.m ;
  (* hdlname = "datapathdiv mux33b a" *)
  wire [31:0] \datapathdiv.mux33b.a ;
  (* hdlname = "datapathdiv mux33b b" *)
  wire [31:0] \datapathdiv.mux33b.b ;
  (* hdlname = "datapathdiv mux33b s0" *)
  wire \datapathdiv.mux33b.s0 ;
  (* hdlname = "datapathdiv mux33b s1" *)
  wire \datapathdiv.mux33b.s1 ;
  (* hdlname = "datapathdiv mux33b w" *)
  wire [31:0] \datapathdiv.mux33b.w ;
  (* hdlname = "datapathdiv mux34b a" *)
  wire [32:0] \datapathdiv.mux34b.a ;
  (* hdlname = "datapathdiv mux34b b" *)
  wire [32:0] \datapathdiv.mux34b.b ;
  (* hdlname = "datapathdiv mux34b s0" *)
  wire \datapathdiv.mux34b.s0 ;
  (* hdlname = "datapathdiv mux34b s1" *)
  wire \datapathdiv.mux34b.s1 ;
  (* hdlname = "datapathdiv mux34b w" *)
  wire [32:0] \datapathdiv.mux34b.w ;
  (* hdlname = "datapathdiv outmux1" *)
  wire [31:0] \datapathdiv.outmux1 ;
  (* hdlname = "datapathdiv q" *)
  wire [31:0] \datapathdiv.q ;
  (* hdlname = "datapathdiv qprev" *)
  wire [31:0] \datapathdiv.qprev ;
  (* hdlname = "datapathdiv qq0" *)
  wire \datapathdiv.qq0 ;
  (* hdlname = "datapathdiv r33" *)
  wire \datapathdiv.r33 ;
  (* hdlname = "datapathdiv regm clk" *)
  wire \datapathdiv.regm.clk ;
  (* hdlname = "datapathdiv regm inreg" *)
  wire [32:0] \datapathdiv.regm.inreg ;
  (* hdlname = "datapathdiv regm load" *)
  wire \datapathdiv.regm.load ;
  (* hdlname = "datapathdiv regm outreg" *)
  wire [32:0] \datapathdiv.regm.outreg ;
  (* hdlname = "datapathdiv regm rst" *)
  wire \datapathdiv.regm.rst ;
  (* hdlname = "datapathdiv regm zero" *)
  wire \datapathdiv.regm.zero ;
  (* hdlname = "datapathdiv remainder" *)
  wire [32:0] \datapathdiv.remainder ;
  (* hdlname = "datapathdiv rprev" *)
  wire [32:0] \datapathdiv.rprev ;
  (* hdlname = "datapathdiv rst" *)
  wire \datapathdiv.rst ;
  (* hdlname = "datapathdiv seldividend" *)
  wire \datapathdiv.seldividend ;
  (* hdlname = "datapathdiv selline1" *)
  wire \datapathdiv.selline1 ;
  (* hdlname = "datapathdiv shlregq" *)
  wire \datapathdiv.shlregq ;
  (* hdlname = "datapathdiv shlregr" *)
  wire \datapathdiv.shlregr ;
  (* hdlname = "datapathdiv shregq 6866.outreg_t" *)
  wire [31:0] \datapathdiv.shregq.6866.outreg_t ;
  (* hdlname = "datapathdiv shregq 6866.seroutp" *)
  wire \datapathdiv.shregq.6866.seroutp ;
  (* hdlname = "datapathdiv shregq clk" *)
  wire \datapathdiv.shregq.clk ;
  (* hdlname = "datapathdiv shregq inreg" *)
  wire [31:0] \datapathdiv.shregq.inreg ;
  (* hdlname = "datapathdiv shregq load" *)
  wire \datapathdiv.shregq.load ;
  (* hdlname = "datapathdiv shregq outreg" *)
  wire [31:0] \datapathdiv.shregq.outreg ;
  (* hdlname = "datapathdiv shregq rst" *)
  wire \datapathdiv.shregq.rst ;
  (* hdlname = "datapathdiv shregq serin" *)
  wire \datapathdiv.shregq.serin ;
  (* hdlname = "datapathdiv shregq serout" *)
  wire \datapathdiv.shregq.serout ;
  (* hdlname = "datapathdiv shregq shiftl" *)
  wire \datapathdiv.shregq.shiftl ;
  (* hdlname = "datapathdiv shregq shiftr" *)
  wire \datapathdiv.shregq.shiftr ;
  (* hdlname = "datapathdiv shregq zero" *)
  wire \datapathdiv.shregq.zero ;
  (* hdlname = "datapathdiv shregr 6833.outreg_t" *)
  wire [32:0] \datapathdiv.shregr.6833.outreg_t ;
  (* hdlname = "datapathdiv shregr clk" *)
  wire \datapathdiv.shregr.clk ;
  (* hdlname = "datapathdiv shregr inreg" *)
  wire [32:0] \datapathdiv.shregr.inreg ;
  (* hdlname = "datapathdiv shregr load" *)
  wire \datapathdiv.shregr.load ;
  (* hdlname = "datapathdiv shregr outreg" *)
  wire [32:0] \datapathdiv.shregr.outreg ;
  (* hdlname = "datapathdiv shregr rst" *)
  wire \datapathdiv.shregr.rst ;
  (* hdlname = "datapathdiv shregr serin" *)
  wire \datapathdiv.shregr.serin ;
  (* hdlname = "datapathdiv shregr shiftl" *)
  wire \datapathdiv.shregr.shiftl ;
  (* hdlname = "datapathdiv shregr shiftr" *)
  wire \datapathdiv.shregr.shiftr ;
  (* hdlname = "datapathdiv shregr zero" *)
  wire \datapathdiv.shregr.zero ;
  (* hdlname = "datapathdiv shrregq" *)
  wire \datapathdiv.shrregq ;
  (* hdlname = "datapathdiv shrregr" *)
  wire \datapathdiv.shrregr ;
  (* hdlname = "datapathdiv smux" *)
  wire \datapathdiv.smux ;
  (* hdlname = "datapathdiv sub" *)
  wire [32:0] \datapathdiv.sub ;
  (* hdlname = "datapathdiv zeroregm" *)
  wire \datapathdiv.zeroregm ;
  (* hdlname = "datapathdiv zeroregq" *)
  wire \datapathdiv.zeroregq ;
  (* hdlname = "datapathdiv zeroregr" *)
  wire \datapathdiv.zeroregr ;
  input [31:0] dividend;
  wire [31:0] dividend;
  input [31:0] divisor;
  wire [31:0] divisor;
  output donediv;
  wire donediv;
  wire ldregm;
  wire ldregq;
  wire ldregr;
  output [31:0] q;
  wire [31:0] q;
  wire qq0;
  wire r33;
  output [32:0] remainder;
  wire [32:0] remainder;
  input rst;
  wire rst;
  wire seldividend;
  wire selline1;
  wire shlregq;
  wire shlregr;
  wire shrregq;
  wire shrregr;
  input startdiv;
  wire startdiv;
  input sync_rst;
  wire sync_rst;
  wire zeroregm;
  wire zeroregq;
  wire zeroregr;
  reg [1:0] _29_;
  always @(posedge clk)
    if (_00_) _29_ <= 2'h0;
    else _29_ <= { _14_[5], _14_[0] };
  assign { _10_[5], _10_[0] } = _29_;
  reg [3:0] _30_;
  always @(posedge clk)
    if (rst) _30_ <= 4'h0;
    else _30_ <= _15_[4:1];
  assign _10_[4:1] = _30_;
  always @(posedge clk)
    if (_00_) _18_[32] <= 1'h0;
    else _18_[32] <= \datapathdiv.m [32];
  always @(posedge clk)
    if (rst) _18_[31:0] <= 32'd0;
    else _18_[31:0] <= _19_[31:0];
  assign _00_ = | { \controllerdiv.counter.initcnt , rst };
  assign \controllerdiv.pstate  = rst ? 2'h0 : _01_;
  always @(posedge clk)
    if (_08_) _01_ <= 2'h0;
    else _01_ <= \controllerdiv.nstate ;
  assign _08_ = | { sync_rst, rst };
  assign _09_ = | { _06_, _03_ };
  assign \controllerdiv.counter.temp  = rst ? 6'h00 : _10_;
  assign \datapathdiv.m  = rst ? 33'h000000000 : _18_;
  assign \datapathdiv.shregq.6866.seroutp  = rst ? 1'h0 : _20_;
  assign \datapathdiv.shregq.6866.outreg_t  = rst ? 32'd0 : _21_;
  always @(posedge clk)
    if (rst) _21_ <= 32'd0;
    else _21_ <= _24_;
  assign \datapathdiv.rprev  = rst ? 33'h000000000 : _26_;
  always @(posedge clk)
    if (_00_) _26_ <= 33'h000000000;
    else _26_ <= _28_;
  assign \controllerdiv.qq0  = ~ (* hdlname = "controllerdiv 6693" *) \datapathdiv.sub [32];
  assign _02_ = startdiv ? (* hdlname = "controllerdiv 6698" *) 2'h1 : 2'h0;
  assign _04_ = \controllerdiv.cocnt  ? (* hdlname = "controllerdiv 6703" *) 2'h0 : 2'h2;
  function [1:0] \controllerdiv.6711 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* hdlname = "controllerdiv 6711" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \controllerdiv.6711  = b[1:0];
      3'b?1?:
        \controllerdiv.6711  = b[3:2];
      3'b1??:
        \controllerdiv.6711  = b[5:4];
      default:
        \controllerdiv.6711  = a;
    endcase
  endfunction
  assign \controllerdiv.nstate  = \controllerdiv.6711 (2'hx, { 2'h1, _04_, _02_ }, { _06_, _05_, _03_ });
  assign _03_ = ! (* hdlname = "controllerdiv 6717" *) \controllerdiv.pstate ;
  assign _07_ = \controllerdiv.cocnt  ? (* hdlname = "controllerdiv 6720" *) 1'h1 : 1'h0;
  assign _05_ = \controllerdiv.pstate  == (* hdlname = "controllerdiv 6722" *) 2'h1;
  assign _06_ = \controllerdiv.pstate  == (* hdlname = "controllerdiv 6724" *) 2'h2;
  assign \controllerdiv.donediv  = _05_ ? (* hdlname = "controllerdiv 6729" *) _07_ : 1'h0;
  assign \controllerdiv.shlregq  = _05_ ? (* hdlname = "controllerdiv 6769" *) 1'h1 : 1'h0;
  assign \controllerdiv.ldregq  = _09_ ? (* hdlname = "controllerdiv 6775" *) 1'h1 : 1'h0;
  assign \controllerdiv.counter.inccnt  = _06_ ? (* hdlname = "controllerdiv 6799" *) 1'h1 : 1'h0;
  assign \controllerdiv.counter.initcnt  = _03_ ? (* hdlname = "controllerdiv 6805" *) 1'h1 : 1'h0;
  assign _11_ = ~ (* hdlname = "controllerdiv counter 6638" *) \controllerdiv.cocnt ;
  assign _12_ = _11_ & (* hdlname = "controllerdiv counter 6639" *) \controllerdiv.counter.inccnt ;
  assign _13_ = \controllerdiv.counter.temp  + (* hdlname = "controllerdiv counter 6641" *) 6'h01;
  assign _14_ = _12_ ? (* hdlname = "controllerdiv counter 6642" *) _13_ : \controllerdiv.counter.temp ;
  assign _15_ = \controllerdiv.counter.initcnt  ? (* hdlname = "controllerdiv counter 6643" *) 6'h1e : _14_;
  assign _16_ = \controllerdiv.counter.temp  == (* hdlname = "controllerdiv counter 6652" *) 6'h3f;
  assign \controllerdiv.cocnt  = _16_ ? (* hdlname = "controllerdiv counter 6653" *) 1'h1 : 1'h0;
  assign { \datapathdiv.sub [32], \datapathdiv.mux34b.a [31:0] } = \datapathdiv.rprev  - (* hdlname = "datapathdiv 6667" *) \datapathdiv.m ;
  assign _17_ = \controllerdiv.counter.inccnt  ? (* hdlname = "datapathdiv mux33b 4834" *) { \datapathdiv.shregq.6866.outreg_t [31:1], \controllerdiv.qq0  } : 32'd0;
  assign \datapathdiv.mux33b.w  = \controllerdiv.counter.initcnt  ? (* hdlname = "datapathdiv mux33b 4835" *) dividend : _17_;
  assign \datapathdiv.mux34b.w  = \datapathdiv.sub [32] ? (* hdlname = "datapathdiv mux34b 6902" *) \datapathdiv.rprev  : { 1'h0, \datapathdiv.mux34b.a [31:0] };
  assign _19_ = \controllerdiv.counter.initcnt  ? (* hdlname = "datapathdiv regm 6584" *) { 1'h0, divisor } : \datapathdiv.m ;
  assign _22_ = \controllerdiv.shlregq  ? (* hdlname = "datapathdiv shregq 6879" *) { \datapathdiv.shregq.6866.outreg_t [30:0], 1'h0 } : \datapathdiv.shregq.6866.outreg_t ;
  assign _23_ = \controllerdiv.shlregq  ? (* hdlname = "datapathdiv shregq 6880" *) \datapathdiv.shregq.6866.outreg_t [31] : \datapathdiv.shregq.6866.seroutp ;
  assign _24_ = \controllerdiv.ldregq  ? (* hdlname = "datapathdiv shregq 6881" *) \datapathdiv.mux33b.w  : _22_;
  assign _25_ = \controllerdiv.ldregq  ? (* hdlname = "datapathdiv shregq 6882" *) \datapathdiv.shregq.6866.seroutp  : _23_;
  (* hdlname = "datapathdiv shregq 6896" *)
  always @(posedge clk)
    if (rst) _20_ <= 1'h0;
    else _20_ <= _25_;
  assign _27_ = \controllerdiv.shlregq  ? (* hdlname = "datapathdiv shregr 6846" *) { \datapathdiv.rprev [31:0], \datapathdiv.shregq.6866.seroutp  } : \datapathdiv.rprev ;
  assign _28_ = \controllerdiv.counter.inccnt  ? (* hdlname = "datapathdiv shregr 6848" *) \datapathdiv.mux34b.w  : _27_;
  assign \controllerdiv.clk  = clk;
  assign \controllerdiv.counter.clk  = clk;
  assign \controllerdiv.counter.cocnt  = \controllerdiv.cocnt ;
  assign \controllerdiv.counter.cocntp  = \controllerdiv.cocnt ;
  assign \controllerdiv.counter.initvalue  = 6'h1e;
  assign \controllerdiv.counter.outcnt  = \controllerdiv.counter.temp ;
  assign \controllerdiv.counter.rst  = rst;
  assign \controllerdiv.counter.zerocnt  = 1'h0;
  assign \controllerdiv.inccnt  = \controllerdiv.counter.inccnt ;
  assign \controllerdiv.initcnt  = \controllerdiv.counter.initcnt ;
  assign \controllerdiv.ldregm  = \controllerdiv.counter.initcnt ;
  assign \controllerdiv.ldregr  = \controllerdiv.counter.inccnt ;
  assign \controllerdiv.r33  = \datapathdiv.sub [32];
  assign \controllerdiv.rst  = rst;
  assign \controllerdiv.seldividend  = \controllerdiv.counter.initcnt ;
  assign \controllerdiv.selline1  = \controllerdiv.counter.inccnt ;
  assign \controllerdiv.shlregr  = \controllerdiv.shlregq ;
  assign \controllerdiv.shrregq  = 1'h0;
  assign \controllerdiv.shrregr  = 1'h0;
  assign \controllerdiv.startdiv  = startdiv;
  assign \controllerdiv.sync_rst  = sync_rst;
  assign \controllerdiv.zerocnt  = 1'h0;
  assign \controllerdiv.zeroregm  = 1'h0;
  assign \controllerdiv.zeroregq  = 1'h0;
  assign \controllerdiv.zeroregr  = \controllerdiv.counter.initcnt ;
  assign \datapathdiv.addresult  = \datapathdiv.mux34b.w ;
  assign \datapathdiv.clk  = clk;
  assign \datapathdiv.dividend  = dividend;
  assign \datapathdiv.divisor  = divisor;
  assign \datapathdiv.divisorp  = { 1'h0, divisor };
  assign \datapathdiv.ldregm  = \controllerdiv.counter.initcnt ;
  assign \datapathdiv.ldregq  = \controllerdiv.ldregq ;
  assign \datapathdiv.ldregr  = \controllerdiv.counter.inccnt ;
  assign \datapathdiv.leftbitoutq  = \datapathdiv.shregq.6866.seroutp ;
  assign \datapathdiv.line1  = { \datapathdiv.shregq.6866.outreg_t [31:1], \controllerdiv.qq0  };
  assign \datapathdiv.mux33b.a  = dividend;
  assign \datapathdiv.mux33b.b  = { \datapathdiv.shregq.6866.outreg_t [31:1], \controllerdiv.qq0  };
  assign \datapathdiv.mux33b.s0  = \controllerdiv.counter.initcnt ;
  assign \datapathdiv.mux33b.s1  = \controllerdiv.counter.inccnt ;
  assign \datapathdiv.mux34b.a [32] = \datapathdiv.sub [32];
  assign \datapathdiv.mux34b.b  = \datapathdiv.rprev ;
  assign \datapathdiv.mux34b.s0  = \controllerdiv.qq0 ;
  assign \datapathdiv.mux34b.s1  = \datapathdiv.sub [32];
  assign \datapathdiv.outmux1  = \datapathdiv.mux33b.w ;
  assign \datapathdiv.q  = \datapathdiv.shregq.6866.outreg_t ;
  assign \datapathdiv.qprev  = \datapathdiv.shregq.6866.outreg_t ;
  assign \datapathdiv.qq0  = \controllerdiv.qq0 ;
  assign \datapathdiv.r33  = \datapathdiv.sub [32];
  assign \datapathdiv.regm.clk  = clk;
  assign \datapathdiv.regm.inreg  = { 1'h0, divisor };
  assign \datapathdiv.regm.load  = \controllerdiv.counter.initcnt ;
  assign \datapathdiv.regm.outreg  = \datapathdiv.m ;
  assign \datapathdiv.regm.rst  = rst;
  assign \datapathdiv.regm.zero  = 1'h0;
  assign \datapathdiv.remainder  = \datapathdiv.rprev ;
  assign \datapathdiv.rst  = rst;
  assign \datapathdiv.seldividend  = \controllerdiv.counter.initcnt ;
  assign \datapathdiv.selline1  = \controllerdiv.counter.inccnt ;
  assign \datapathdiv.shlregq  = \controllerdiv.shlregq ;
  assign \datapathdiv.shlregr  = \controllerdiv.shlregq ;
  assign \datapathdiv.shregq.clk  = clk;
  assign \datapathdiv.shregq.inreg  = \datapathdiv.mux33b.w ;
  assign \datapathdiv.shregq.load  = \controllerdiv.ldregq ;
  assign \datapathdiv.shregq.outreg  = \datapathdiv.shregq.6866.outreg_t ;
  assign \datapathdiv.shregq.rst  = rst;
  assign \datapathdiv.shregq.serin  = 1'h0;
  assign \datapathdiv.shregq.serout  = \datapathdiv.shregq.6866.seroutp ;
  assign \datapathdiv.shregq.shiftl  = \controllerdiv.shlregq ;
  assign \datapathdiv.shregq.shiftr  = 1'h0;
  assign \datapathdiv.shregq.zero  = 1'h0;
  assign \datapathdiv.shregr.6833.outreg_t  = \datapathdiv.rprev ;
  assign \datapathdiv.shregr.clk  = clk;
  assign \datapathdiv.shregr.inreg  = \datapathdiv.mux34b.w ;
  assign \datapathdiv.shregr.load  = \controllerdiv.counter.inccnt ;
  assign \datapathdiv.shregr.outreg  = \datapathdiv.rprev ;
  assign \datapathdiv.shregr.rst  = rst;
  assign \datapathdiv.shregr.serin  = \datapathdiv.shregq.6866.seroutp ;
  assign \datapathdiv.shregr.shiftl  = \controllerdiv.shlregq ;
  assign \datapathdiv.shregr.shiftr  = 1'h0;
  assign \datapathdiv.shregr.zero  = \controllerdiv.counter.initcnt ;
  assign \datapathdiv.shrregq  = 1'h0;
  assign \datapathdiv.shrregr  = 1'h0;
  assign \datapathdiv.smux  = \controllerdiv.qq0 ;
  assign \datapathdiv.sub [31:0] = \datapathdiv.mux34b.a [31:0];
  assign \datapathdiv.zeroregm  = 1'h0;
  assign \datapathdiv.zeroregq  = 1'h0;
  assign \datapathdiv.zeroregr  = \controllerdiv.counter.initcnt ;
  assign donediv = \controllerdiv.donediv ;
  assign ldregm = \controllerdiv.counter.initcnt ;
  assign ldregq = \controllerdiv.ldregq ;
  assign ldregr = \controllerdiv.counter.inccnt ;
  assign q = \datapathdiv.shregq.6866.outreg_t ;
  assign qq0 = \controllerdiv.qq0 ;
  assign r33 = \datapathdiv.sub [32];
  assign remainder = \datapathdiv.rprev ;
  assign seldividend = \controllerdiv.counter.initcnt ;
  assign selline1 = \controllerdiv.counter.inccnt ;
  assign shlregq = \controllerdiv.shlregq ;
  assign shlregr = \controllerdiv.shlregq ;
  assign shrregq = 1'h0;
  assign shrregr = 1'h0;
  assign zeroregm = 1'h0;
  assign zeroregq = 1'h0;
  assign zeroregr = \controllerdiv.counter.initcnt ;
endmodule

module aftab_divider_controller_32_6(clk, rst, sync_rst, startdiv, r33, donediv, shrregr, shlregr, ldregr, zeroregr, seldividend, selline1, shrregq, shlregq, ldregq, zeroregq, zeroregm, ldregm, qq0);
  reg [1:0] _00_;
  wire [1:0] _01_;
  wire _02_;
  wire [1:0] _03_;
  wire _04_;
  wire _05_;
  wire _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire [5:0] _10_;
  wire _11_;
  wire _12_;
  wire [5:0] _13_;
  wire [5:0] _14_;
  (* unused_bits = "0 5" *)
  wire [5:0] _15_;
  wire _16_;
  input clk;
  wire clk;
  wire cocnt;
  (* hdlname = "counter clk" *)
  wire \counter.clk ;
  (* hdlname = "counter cocnt" *)
  wire \counter.cocnt ;
  (* hdlname = "counter cocntp" *)
  wire \counter.cocntp ;
  (* hdlname = "counter inccnt" *)
  wire \counter.inccnt ;
  (* hdlname = "counter initcnt" *)
  wire \counter.initcnt ;
  (* hdlname = "counter initvalue" *)
  wire [5:0] \counter.initvalue ;
  (* hdlname = "counter outcnt" *)
  wire [5:0] \counter.outcnt ;
  (* hdlname = "counter rst" *)
  wire \counter.rst ;
  (* hdlname = "counter temp" *)
  wire [5:0] \counter.temp ;
  (* hdlname = "counter zerocnt" *)
  wire \counter.zerocnt ;
  output donediv;
  wire donediv;
  wire inccnt;
  wire initcnt;
  output ldregm;
  wire ldregm;
  output ldregq;
  wire ldregq;
  output ldregr;
  wire ldregr;
  wire [1:0] nstate;
  wire [1:0] pstate;
  output qq0;
  wire qq0;
  input r33;
  wire r33;
  input rst;
  wire rst;
  output seldividend;
  wire seldividend;
  output selline1;
  wire selline1;
  output shlregq;
  wire shlregq;
  output shlregr;
  wire shlregr;
  output shrregq;
  wire shrregq;
  output shrregr;
  wire shrregr;
  input startdiv;
  wire startdiv;
  input sync_rst;
  wire sync_rst;
  wire zerocnt;
  output zeroregm;
  wire zeroregm;
  output zeroregq;
  wire zeroregq;
  output zeroregr;
  wire zeroregr;
  assign pstate = rst ? 2'h0 : _00_;
  always @(posedge clk)
    if (_07_) _00_ <= 2'h0;
    else _00_ <= nstate;
  reg [1:0] _19_;
  always @(posedge clk)
    if (_08_) _19_ <= 2'h0;
    else _19_ <= { _14_[5], _14_[0] };
  assign { _10_[5], _10_[0] } = _19_;
  reg [3:0] _20_;
  always @(posedge clk)
    if (rst) _20_ <= 4'h0;
    else _20_ <= _15_[4:1];
  assign _10_[4:1] = _20_;
  assign _07_ = | { sync_rst, rst };
  assign _08_ = | { \counter.initcnt , rst };
  assign _09_ = | { _05_, _02_ };
  assign \counter.temp  = rst ? 6'h00 : _10_;
  assign qq0 = ~ r33;
  assign _01_ = startdiv ? 2'h1 : 2'h0;
  assign _03_ = cocnt ? 2'h0 : 2'h2;
  function [1:0] \6711 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \6711  = b[1:0];
      3'b?1?:
        \6711  = b[3:2];
      3'b1??:
        \6711  = b[5:4];
      default:
        \6711  = a;
    endcase
  endfunction
  assign nstate = \6711 (2'hx, { 2'h1, _03_, _01_ }, { _05_, _04_, _02_ });
  assign _02_ = ! pstate;
  assign _06_ = cocnt ? 1'h1 : 1'h0;
  assign _04_ = pstate == 2'h1;
  assign _05_ = pstate == 2'h2;
  assign donediv = _04_ ? _06_ : 1'h0;
  assign shlregq = _04_ ? 1'h1 : 1'h0;
  assign ldregq = _09_ ? 1'h1 : 1'h0;
  assign \counter.inccnt  = _05_ ? 1'h1 : 1'h0;
  assign \counter.initcnt  = _02_ ? 1'h1 : 1'h0;
  assign _11_ = ~ (* hdlname = "counter 6638" *) cocnt;
  assign _12_ = _11_ & (* hdlname = "counter 6639" *) \counter.inccnt ;
  assign _13_ = \counter.temp  + (* hdlname = "counter 6641" *) 6'h01;
  assign _14_ = _12_ ? (* hdlname = "counter 6642" *) _13_ : \counter.temp ;
  assign _15_ = \counter.initcnt  ? (* hdlname = "counter 6643" *) 6'h1e : _14_;
  assign _16_ = \counter.temp  == (* hdlname = "counter 6652" *) 6'h3f;
  assign cocnt = _16_ ? (* hdlname = "counter 6653" *) 1'h1 : 1'h0;
  assign \counter.clk  = clk;
  assign \counter.cocnt  = cocnt;
  assign \counter.cocntp  = cocnt;
  assign \counter.initvalue  = 6'h1e;
  assign \counter.outcnt  = \counter.temp ;
  assign \counter.rst  = rst;
  assign \counter.zerocnt  = 1'h0;
  assign inccnt = \counter.inccnt ;
  assign initcnt = \counter.initcnt ;
  assign ldregm = \counter.initcnt ;
  assign ldregr = \counter.inccnt ;
  assign seldividend = \counter.initcnt ;
  assign selline1 = \counter.inccnt ;
  assign shlregr = shlregq;
  assign shrregq = 1'h0;
  assign shrregr = 1'h0;
  assign zerocnt = 1'h0;
  assign zeroregm = 1'h0;
  assign zeroregq = 1'h0;
  assign zeroregr = \counter.initcnt ;
endmodule

module aftab_divider_datapath_32(clk, rst, dividend, divisor, shrregr, shlregr, ldregr, zeroregr, qq0, seldividend, selline1, shrregq, shlregq, ldregq, zeroregq, zeroregm, ldregm, r33, q, remainder);
  wire _00_;
  wire [31:0] _01_;
  reg [32:0] _02_;
  (* unused_bits = "32" *)
  wire [32:0] _03_;
  wire _04_;
  reg _05_;
  reg [31:0] _06_;
  wire [31:0] _07_;
  wire _08_;
  wire [31:0] _09_;
  wire _10_;
  wire [31:0] _11_;
  wire _12_;
  wire _13_;
  wire _14_;
  reg [32:0] _15_;
  wire [32:0] _16_;
  wire [32:0] _17_;
  wire [32:0] _18_;
  wire _19_;
  wire [32:0] addresult;
  input clk;
  wire clk;
  input [31:0] dividend;
  wire [31:0] dividend;
  input [31:0] divisor;
  wire [31:0] divisor;
  wire [32:0] divisorp;
  input ldregm;
  wire ldregm;
  input ldregq;
  wire ldregq;
  input ldregr;
  wire ldregr;
  wire leftbitoutq;
  wire [31:0] line1;
  wire [32:0] m;
  (* hdlname = "mux33b a" *)
  wire [31:0] \mux33b.a ;
  (* hdlname = "mux33b b" *)
  wire [31:0] \mux33b.b ;
  (* hdlname = "mux33b s0" *)
  wire \mux33b.s0 ;
  (* hdlname = "mux33b s1" *)
  wire \mux33b.s1 ;
  (* hdlname = "mux33b w" *)
  wire [31:0] \mux33b.w ;
  (* hdlname = "mux34b a" *)
  wire [32:0] \mux34b.a ;
  (* hdlname = "mux34b b" *)
  wire [32:0] \mux34b.b ;
  (* hdlname = "mux34b s1" *)
  wire \mux34b.s1 ;
  (* hdlname = "mux34b w" *)
  wire [32:0] \mux34b.w ;
  wire [31:0] outmux1;
  output [31:0] q;
  wire [31:0] q;
  wire [31:0] qprev;
  input qq0;
  wire qq0;
  output r33;
  wire r33;
  (* hdlname = "regm clk" *)
  wire \regm.clk ;
  (* hdlname = "regm inreg" *)
  wire [32:0] \regm.inreg ;
  (* hdlname = "regm load" *)
  wire \regm.load ;
  (* hdlname = "regm outreg" *)
  wire [32:0] \regm.outreg ;
  (* hdlname = "regm rst" *)
  wire \regm.rst ;
  (* hdlname = "regm zero" *)
  wire \regm.zero ;
  output [32:0] remainder;
  wire [32:0] remainder;
  wire [32:0] rprev;
  input rst;
  wire rst;
  input seldividend;
  wire seldividend;
  input selline1;
  wire selline1;
  input shlregq;
  wire shlregq;
  input shlregr;
  wire shlregr;
  (* hdlname = "shregq 6866.outreg_t" *)
  wire [31:0] \shregq.6866.outreg_t ;
  (* hdlname = "shregq 6866.seroutp" *)
  wire \shregq.6866.seroutp ;
  (* hdlname = "shregq clk" *)
  wire \shregq.clk ;
  (* hdlname = "shregq inreg" *)
  wire [31:0] \shregq.inreg ;
  (* hdlname = "shregq load" *)
  wire \shregq.load ;
  (* hdlname = "shregq outreg" *)
  wire [31:0] \shregq.outreg ;
  (* hdlname = "shregq rst" *)
  wire \shregq.rst ;
  (* hdlname = "shregq serin" *)
  wire \shregq.serin ;
  (* hdlname = "shregq serout" *)
  wire \shregq.serout ;
  (* hdlname = "shregq shiftl" *)
  wire \shregq.shiftl ;
  (* hdlname = "shregq shiftr" *)
  wire \shregq.shiftr ;
  (* hdlname = "shregq zero" *)
  wire \shregq.zero ;
  (* hdlname = "shregr 6833.outreg_t" *)
  wire [32:0] \shregr.6833.outreg_t ;
  (* hdlname = "shregr clk" *)
  wire \shregr.clk ;
  (* hdlname = "shregr inreg" *)
  wire [32:0] \shregr.inreg ;
  (* hdlname = "shregr load" *)
  wire \shregr.load ;
  (* hdlname = "shregr outreg" *)
  wire [32:0] \shregr.outreg ;
  (* hdlname = "shregr rst" *)
  wire \shregr.rst ;
  (* hdlname = "shregr serin" *)
  wire \shregr.serin ;
  (* hdlname = "shregr shiftl" *)
  wire \shregr.shiftl ;
  (* hdlname = "shregr shiftr" *)
  wire \shregr.shiftr ;
  (* hdlname = "shregr zero" *)
  wire \shregr.zero ;
  input shrregq;
  wire shrregq;
  input shrregr;
  wire shrregr;
  wire [32:0] sub;
  input zeroregm;
  wire zeroregm;
  input zeroregq;
  wire zeroregq;
  input zeroregr;
  wire zeroregr;
  always @(posedge clk)
    if (_00_) _02_[32] <= 1'h0;
    else _02_[32] <= m[32];
  always @(posedge clk)
    if (_04_) _02_[31:0] <= 32'd0;
    else _02_[31:0] <= _03_[31:0];
  assign _00_ = | { ldregm, zeroregm, rst };
  assign m = rst ? 33'h000000000 : _02_;
  assign _04_ = | { zeroregm, rst };
  assign \shregq.6866.seroutp  = rst ? 1'h0 : _05_;
  assign \shregq.6866.outreg_t  = rst ? 32'd0 : _06_;
  always @(posedge clk)
    if (_14_) _06_ <= 32'd0;
    else _06_ <= _11_;
  assign _14_ = | { zeroregq, rst };
  assign rprev = rst ? 33'h000000000 : _15_;
  always @(posedge clk)
    if (_19_) _15_ <= 33'h000000000;
    else _15_ <= _18_;
  assign _19_ = | { zeroregr, rst };
  assign { sub[32], \mux34b.a [31:0] } = rprev - m;
  assign _01_ = selline1 ? (* hdlname = "mux33b 4834" *) { \shregq.6866.outreg_t [31:1], qq0 } : 32'd0;
  assign \mux33b.w  = seldividend ? (* hdlname = "mux33b 4835" *) dividend : _01_;
  assign \mux34b.w  = sub[32] ? (* hdlname = "mux34b 6902" *) rprev : { 1'h0, \mux34b.a [31:0] };
  assign _03_ = ldregm ? (* hdlname = "regm 6584" *) { 1'h0, divisor } : m;
  assign _07_ = shrregq ? (* hdlname = "shregq 6877" *) { 1'h0, \shregq.6866.outreg_t [31:1] } : \shregq.6866.outreg_t ;
  assign _08_ = shrregq ? (* hdlname = "shregq 6878" *) \shregq.6866.outreg_t [0] : \shregq.6866.seroutp ;
  assign _09_ = shlregq ? (* hdlname = "shregq 6879" *) { \shregq.6866.outreg_t [30:0], 1'h0 } : _07_;
  assign _10_ = shlregq ? (* hdlname = "shregq 6880" *) \shregq.6866.outreg_t [31] : _08_;
  assign _11_ = ldregq ? (* hdlname = "shregq 6881" *) \mux33b.w  : _09_;
  assign _12_ = ldregq ? (* hdlname = "shregq 6882" *) \shregq.6866.seroutp  : _10_;
  assign _13_ = zeroregq ? (* hdlname = "shregq 6885" *) \shregq.6866.seroutp  : _12_;
  (* hdlname = "shregq 6896" *)
  always @(posedge clk)
    if (rst) _05_ <= 1'h0;
    else _05_ <= _13_;
  assign _16_ = shrregr ? (* hdlname = "shregr 6844" *) { \shregq.6866.seroutp , rprev[32:1] } : rprev;
  assign _17_ = shlregr ? (* hdlname = "shregr 6846" *) { rprev[31:0], \shregq.6866.seroutp  } : _16_;
  assign _18_ = ldregr ? (* hdlname = "shregr 6848" *) \mux34b.w  : _17_;
  assign addresult = \mux34b.w ;
  assign divisorp = { 1'h0, divisor };
  assign leftbitoutq = \shregq.6866.seroutp ;
  assign line1 = { \shregq.6866.outreg_t [31:1], qq0 };
  assign \mux33b.a  = dividend;
  assign \mux33b.b  = { \shregq.6866.outreg_t [31:1], qq0 };
  assign \mux33b.s0  = seldividend;
  assign \mux33b.s1  = selline1;
  assign \mux34b.a [32] = sub[32];
  assign \mux34b.b  = rprev;
  assign \mux34b.s1  = sub[32];
  assign outmux1 = \mux33b.w ;
  assign q = \shregq.6866.outreg_t ;
  assign qprev = \shregq.6866.outreg_t ;
  assign r33 = sub[32];
  assign \regm.clk  = clk;
  assign \regm.inreg  = { 1'h0, divisor };
  assign \regm.load  = ldregm;
  assign \regm.outreg  = m;
  assign \regm.rst  = rst;
  assign \regm.zero  = zeroregm;
  assign remainder = rprev;
  assign \shregq.clk  = clk;
  assign \shregq.inreg  = \mux33b.w ;
  assign \shregq.load  = ldregq;
  assign \shregq.outreg  = \shregq.6866.outreg_t ;
  assign \shregq.rst  = rst;
  assign \shregq.serin  = 1'h0;
  assign \shregq.serout  = \shregq.6866.seroutp ;
  assign \shregq.shiftl  = shlregq;
  assign \shregq.shiftr  = shrregq;
  assign \shregq.zero  = zeroregq;
  assign \shregr.6833.outreg_t  = rprev;
  assign \shregr.clk  = clk;
  assign \shregr.inreg  = \mux34b.w ;
  assign \shregr.load  = ldregr;
  assign \shregr.outreg  = rprev;
  assign \shregr.rst  = rst;
  assign \shregr.serin  = \shregq.6866.seroutp ;
  assign \shregr.shiftl  = shlregr;
  assign \shregr.shiftr  = shrregr;
  assign \shregr.zero  = zeroregr;
  assign sub[31:0] = \mux34b.a [31:0];
endmodule

module aftab_full_adder(a, b, cin, s, cout);
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  wire _4_;
  input a;
  wire a;
  input b;
  wire b;
  input cin;
  wire cin;
  output cout;
  wire cout;
  output s;
  wire s;
  assign _0_ = a ^ b;
  assign s = _0_ ^ cin;
  assign _1_ = a & b;
  assign _2_ = cin & a;
  assign _3_ = _1_ | _2_;
  assign _4_ = cin & b;
  assign cout = _3_ | _4_;
endmodule

module aftab_half_adder(i_bit1, i_bit2, o_sum, o_carry);
  input i_bit1;
  wire i_bit1;
  input i_bit2;
  wire i_bit2;
  output o_carry;
  wire o_carry;
  output o_sum;
  wire o_sum;
  assign o_sum = i_bit1 ^ i_bit2;
  assign o_carry = i_bit1 & i_bit2;
endmodule

module aftab_iccd_32(clk, rst, inst, outpc, outadr, mipcc, miecc, midelegcsr, medelegcsr, miefieldcc, uiefieldcc, lddelegation, ldmachine, lduser, tempflags, interruptraise, exceptionraise, delegationmode, curprv, causecode, trapvalue
);
  reg [1:0] _000_;
  reg [1:0] _001_;
  wire [1:0] _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  wire _006_;
  wire _007_;
  wire _008_;
  wire _009_;
  wire _010_;
  wire _011_;
  wire _012_;
  wire _013_;
  wire _014_;
  wire _015_;
  wire _016_;
  wire _017_;
  wire _018_;
  wire _019_;
  wire _020_;
  wire _021_;
  wire _022_;
  wire _023_;
  wire _024_;
  wire _025_;
  wire _026_;
  wire _027_;
  wire _028_;
  wire _029_;
  wire _030_;
  wire _031_;
  wire _032_;
  wire _033_;
  wire _034_;
  wire _035_;
  wire _036_;
  wire _037_;
  wire _038_;
  wire [31:0] _039_;
  wire [31:0] _040_;
  wire [31:0] _041_;
  wire [31:0] _042_;
  wire [31:0] _043_;
  wire [31:0] _044_;
  wire [31:0] _045_;
  wire [31:0] _046_;
  wire [31:0] _047_;
  wire [31:0] _048_;
  wire [31:0] _049_;
  wire [31:0] _050_;
  wire [31:0] _051_;
  wire [31:0] _052_;
  wire [31:0] _053_;
  wire [31:0] _054_;
  wire [31:0] _055_;
  wire [31:0] _056_;
  wire [31:0] _057_;
  wire [31:0] _058_;
  wire [31:0] _059_;
  wire [31:0] _060_;
  wire [31:0] _061_;
  wire [31:0] _062_;
  wire [31:0] _063_;
  wire [31:0] _064_;
  wire [31:0] _065_;
  wire [31:0] _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire [1:0] _079_;
  wire [1:0] _080_;
  wire [1:0] _081_;
  wire [1:0] _082_;
  wire [1:0] _083_;
  wire [1:0] _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire [1:0] _091_;
  wire [1:0] _092_;
  wire [1:0] _093_;
  wire [1:0] _094_;
  wire [31:0] _095_;
  wire [31:0] _096_;
  wire [1:0] _097_;
  wire _098_;
  output [31:0] causecode;
  wire [31:0] causecode;
  input clk;
  wire clk;
  output [1:0] curprv;
  wire [1:0] curprv;
  wire [1:0] currentprv;
  output [1:0] delegationmode;
  wire [1:0] delegationmode;
  wire [1:0] delegationreg;
  output exceptionraise;
  wire exceptionraise;
  wire exceptionraisetemp;
  input [31:0] inst;
  wire [31:0] inst;
  wire interraisemachineexternal;
  wire interraisemachinesoftware;
  wire interraisemachinetimer;
  wire interraisereserved;
  wire interraisetemp;
  wire interraiseuserexternal;
  wire interraiseusersoftware;
  wire interraiseusertimer;
  wire [15:0] interreserved;
  output interruptraise;
  wire interruptraise;
  input lddelegation;
  wire lddelegation;
  input ldmachine;
  wire ldmachine;
  input lduser;
  wire lduser;
  wire machine;
  input [31:0] medelegcsr;
  wire [31:0] medelegcsr;
  input [31:0] midelegcsr;
  wire [31:0] midelegcsr;
  input [31:0] miecc;
  wire [31:0] miecc;
  input miefieldcc;
  wire miefieldcc;
  input [31:0] mipcc;
  wire [31:0] mipcc;
  input [31:0] outadr;
  wire [31:0] outadr;
  input [31:0] outpc;
  wire [31:0] outpc;
  input rst;
  wire rst;
  wire tempdividedbyzero;
  wire tempecallflag;
  input [5:0] tempflags;
  wire [5:0] tempflags;
  wire tempillegalinstr;
  wire tempinstraddrmisaligned;
  wire temploadaddrmisaligned;
  wire tempstoreaddrmisaligned;
  output [31:0] trapvalue;
  wire [31:0] trapvalue;
  input uiefieldcc;
  wire uiefieldcc;
  wire user;
  assign delegationmode = rst ? 2'h0 : _000_;
  assign currentprv = rst ? 2'h3 : _001_;
  always @(posedge clk)
    if (_098_) _001_ <= 2'h3;
    else _001_ <= _002_;
  assign _098_ = | { ldmachine, rst };
  assign _002_ = lduser ? 2'h0 : currentprv;
  assign _003_ = ~ currentprv[1];
  assign _004_ = ~ currentprv[0];
  assign user = _003_ & _004_;
  assign machine = currentprv[1] & currentprv[0];
  assign _005_ = tempflags[3] | tempflags[2];
  assign _007_ = _005_ | _006_;
  assign _008_ = tempflags[4] | tempflags[5];
  assign exceptionraisetemp = _007_ | _008_;
  assign _011_ = mipcc[11] & miecc[11];
  assign interraisemachineexternal = _010_ & _011_;
  assign _012_ = mipcc[3] & miecc[3];
  assign interraisemachinesoftware = _010_ & _012_;
  assign _009_ = machine & miefieldcc;
  assign _010_ = user | _009_;
  assign _013_ = mipcc[7] & miecc[7];
  assign interraisemachinetimer = _010_ & _013_;
  assign _015_ = mipcc[8] & miecc[8];
  assign interraiseuserexternal = _014_ & _015_;
  assign _016_ = mipcc[0] & miecc[0];
  assign interraiseusersoftware = _014_ & _016_;
  assign _014_ = user & uiefieldcc;
  assign _017_ = mipcc[4] & miecc[4];
  assign interraiseusertimer = _014_ & _017_;
  assign interreserved = mipcc[31:16] & miecc[31:16];
  assign _018_ = interreserved[15] | interreserved[14];
  assign _019_ = _018_ | interreserved[13];
  assign _020_ = _019_ | interreserved[12];
  assign _021_ = _020_ | interreserved[11];
  assign _022_ = _021_ | interreserved[10];
  assign _023_ = _022_ | interreserved[9];
  assign _024_ = _023_ | interreserved[8];
  assign _025_ = _024_ | interreserved[7];
  assign _026_ = _025_ | interreserved[6];
  assign _027_ = _026_ | interreserved[5];
  assign _028_ = _027_ | interreserved[4];
  assign _029_ = _028_ | interreserved[3];
  assign _030_ = _029_ | interreserved[2];
  assign _031_ = _030_ | interreserved[1];
  assign _032_ = _031_ | interreserved[0];
  assign interraisereserved = miefieldcc & _032_;
  assign _033_ = interraisemachineexternal | interraisemachinesoftware;
  assign _034_ = _033_ | interraisemachinetimer;
  assign _035_ = _034_ | interraiseuserexternal;
  assign _036_ = _035_ | interraiseusersoftware;
  assign _037_ = _036_ | interraiseusertimer;
  assign interraisetemp = _037_ | interraisereserved;
  assign _038_ = tempflags[3] | tempflags[4];
  assign _039_ = tempflags[5] ? 32'd8 : 32'd0;
  assign _040_ = tempflags[1] ? 32'd4 : _039_;
  assign _041_ = tempflags[0] ? 32'd6 : _040_;
  assign _042_ = _038_ ? 32'd2 : _041_;
  assign _043_ = tempflags[2] ? 32'd0 : _042_;
  assign _044_ = mipcc[31] ? 32'd2147483679 : 32'd0;
  assign _045_ = mipcc[30] ? 32'd2147483678 : _044_;
  assign _046_ = mipcc[29] ? 32'd2147483677 : _045_;
  assign _047_ = mipcc[28] ? 32'd2147483676 : _046_;
  assign _048_ = mipcc[27] ? 32'd2147483675 : _047_;
  assign _049_ = mipcc[26] ? 32'd2147483674 : _048_;
  assign _050_ = mipcc[25] ? 32'd2147483673 : _049_;
  assign _051_ = mipcc[24] ? 32'd2147483672 : _050_;
  assign _052_ = mipcc[23] ? 32'd2147483671 : _051_;
  assign _053_ = mipcc[22] ? 32'd2147483670 : _052_;
  assign _054_ = mipcc[21] ? 32'd2147483669 : _053_;
  assign _055_ = mipcc[20] ? 32'd2147483668 : _054_;
  assign _056_ = mipcc[19] ? 32'd2147483667 : _055_;
  assign _057_ = mipcc[18] ? 32'd2147483666 : _056_;
  assign _058_ = mipcc[17] ? 32'd2147483665 : _057_;
  assign _059_ = mipcc[16] ? 32'd2147483664 : _058_;
  assign _060_ = mipcc[4] ? 32'd2147483652 : _059_;
  assign _061_ = mipcc[0] ? 32'd2147483648 : _060_;
  assign _062_ = mipcc[8] ? 32'd2147483656 : _061_;
  assign _063_ = mipcc[7] ? 32'd2147483655 : _062_;
  assign _064_ = mipcc[3] ? 32'd2147483651 : _063_;
  assign _065_ = mipcc[11] ? 32'd2147483659 : _064_;
  assign _066_ = interraisetemp ? _065_ : 32'd0;
  assign causecode = exceptionraisetemp ? _043_ : _066_;
  assign _067_ = user & tempflags[3];
  assign _068_ = medelegcsr[2] & _067_;
  assign _069_ = user & tempflags[2];
  assign _070_ = medelegcsr[0] & _069_;
  assign _071_ = user & tempflags[0];
  assign _072_ = medelegcsr[6] & _071_;
  assign _073_ = user & tempflags[1];
  assign _074_ = medelegcsr[4] & _073_;
  assign _075_ = user & tempflags[4];
  assign _076_ = medelegcsr[2] & _075_;
  assign _077_ = user & tempflags[5];
  assign _078_ = medelegcsr[11] & _077_;
  assign _079_ = _078_ ? 2'h0 : 2'h3;
  assign _080_ = _076_ ? 2'h0 : _079_;
  assign _081_ = _074_ ? 2'h0 : _080_;
  assign _082_ = _072_ ? 2'h0 : _081_;
  assign _083_ = _070_ ? 2'h0 : _082_;
  assign _084_ = _068_ ? 2'h0 : _083_;
  assign _085_ = user & mipcc[8];
  assign _086_ = midelegcsr[8] & _085_;
  assign _087_ = user & mipcc[0];
  assign _088_ = midelegcsr[0] & _087_;
  assign _089_ = user & mipcc[4];
  assign _090_ = midelegcsr[4] & _089_;
  assign _091_ = _090_ ? 2'h0 : 2'h3;
  assign _092_ = _088_ ? 2'h0 : _091_;
  assign _093_ = _086_ ? 2'h0 : _092_;
  assign _094_ = interraisetemp ? _093_ : 2'h3;
  assign delegationreg = exceptionraisetemp ? _084_ : _094_;
  assign trapvalue = tempflags[3] ? inst : _095_;
  assign _095_ = tempflags[2] ? outpc : _096_;
  assign _006_ = tempflags[0] | tempflags[1];
  assign _096_ = _006_ ? outadr : 32'd0;
  assign _097_ = lddelegation ? delegationreg : delegationmode;
  always @(posedge clk)
    if (rst) _000_ <= 2'h0;
    else _000_ <= _097_;
  assign curprv = currentprv;
  assign exceptionraise = exceptionraisetemp;
  assign interruptraise = interraisetemp;
  assign tempdividedbyzero = tempflags[4];
  assign tempecallflag = tempflags[5];
  assign tempillegalinstr = tempflags[3];
  assign tempinstraddrmisaligned = tempflags[2];
  assign temploadaddrmisaligned = tempflags[1];
  assign tempstoreaddrmisaligned = tempflags[0];
endmodule

module aftab_isagu_32(tvecbase, causecode, modetvec, interruptstartaddressdirect, interruptstartaddressvectored);
  input [5:0] causecode;
  wire [5:0] causecode;
  output [31:0] interruptstartaddressdirect;
  wire [31:0] interruptstartaddressdirect;
  output [31:0] interruptstartaddressvectored;
  wire [31:0] interruptstartaddressvectored;
  output [1:0] modetvec;
  wire [1:0] modetvec;
  input [31:0] tvecbase;
  wire [31:0] tvecbase;
  assign interruptstartaddressvectored[29:0] = tvecbase[31:2] + { 22'h000000, causecode, 2'h0 };
  assign interruptstartaddressdirect = tvecbase;
  assign interruptstartaddressvectored[31:30] = 2'h0;
  assign modetvec = tvecbase[1:0];
endmodule

module aftab_isseu(ir7, ir20, ir31, ir11_8, ir19_12, ir24_21, ir30_25, seli, sels, selbuj, selij, selsb, selu, selisbj, selis, selb, selj, selisb, seluj, imm);
  wire _0_;
  wire [3:0] _1_;
  wire _2_;
  wire _3_;
  wire _4_;
  wire [7:0] _5_;
  wire [10:0] _6_;
  output [31:0] imm;
  wire [31:0] imm;
  input [3:0] ir11_8;
  wire [3:0] ir11_8;
  input [7:0] ir19_12;
  wire [7:0] ir19_12;
  input ir20;
  wire ir20;
  input [3:0] ir24_21;
  wire [3:0] ir24_21;
  input [5:0] ir30_25;
  wire [5:0] ir30_25;
  input ir31;
  wire ir31;
  input ir7;
  wire ir7;
  input selb;
  wire selb;
  input selbuj;
  wire selbuj;
  input seli;
  wire seli;
  input selij;
  wire selij;
  input selis;
  wire selis;
  input selisb;
  wire selisb;
  input selisbj;
  wire selisbj;
  input selj;
  wire selj;
  input sels;
  wire sels;
  input selsb;
  wire selsb;
  input selu;
  wire selu;
  input seluj;
  wire seluj;
  assign imm[0] = seli ? ir20 : _0_;
  assign _0_ = sels ? ir7 : 1'h0;
  assign imm[4:1] = selij ? ir24_21 : _1_;
  assign _1_ = selsb ? ir11_8 : 4'h0;
  assign imm[10:5] = selisbj ? ir30_25 : 6'h00;
  assign imm[11] = selis ? ir31 : _2_;
  assign _2_ = selb ? ir7 : _3_;
  assign _3_ = selu ? 1'h0 : _4_;
  assign _4_ = selj ? ir20 : 1'h0;
  assign imm[19:12] = selisb ? { ir31, ir31, ir31, ir31, ir31, ir31, ir31, ir31 } : _5_;
  assign _5_ = seluj ? ir19_12 : 8'h00;
  assign imm[30:20] = selisbj ? { ir31, ir31, ir31, ir31, ir31, ir31, ir31, ir31, ir31, ir31, ir31 } : _6_;
  assign _6_ = selu ? { ir30_25, ir24_21, ir20 } : 11'h000;
  assign imm[31] = ir31;
endmodule

module aftab_llu_32(ain, bin, sellogic, result);
  wire [31:0] _0_;
  wire _1_;
  wire [31:0] _2_;
  wire _3_;
  wire [31:0] _4_;
  wire _5_;
  input [31:0] ain;
  wire [31:0] ain;
  input [31:0] bin;
  wire [31:0] bin;
  output [31:0] result;
  wire [31:0] result;
  input [1:0] sellogic;
  wire [1:0] sellogic;
  wire [31:0] y;
  assign _0_ = ain ^ bin;
  assign _1_ = ! sellogic;
  assign _2_ = ain | bin;
  assign _3_ = sellogic == 2'h2;
  assign _4_ = ain & bin;
  assign _5_ = sellogic == 2'h3;
  function [31:0] \4891 ;
    input [31:0] a;
    input [95:0] b;
    input [2:0] s;
    (* parallel_case *)
    casez (s)
      3'b??1:
        \4891  = b[31:0];
      3'b?1?:
        \4891  = b[63:32];
      3'b1??:
        \4891  = b[95:64];
      default:
        \4891  = a;
    endcase
  endfunction
  assign result = \4891 (32'd0, { _4_, _2_, _0_ }, { _5_, _3_, _1_ });
  assign y = result;
endmodule

module aftab_multiplexer_12(a, b, s0, s1, w);
  wire [11:0] _0_;
  input [11:0] a;
  wire [11:0] a;
  input [11:0] b;
  wire [11:0] b;
  input s0;
  wire s0;
  input s1;
  wire s1;
  output [11:0] w;
  wire [11:0] w;
  assign _0_ = s1 ? b : 12'h000;
  assign w = s0 ? a : _0_;
endmodule

module aftab_multiplexer_32(a, b, s0, s1, w);
  wire [31:0] _0_;
  input [31:0] a;
  wire [31:0] a;
  input [31:0] b;
  wire [31:0] b;
  input s0;
  wire s0;
  input s1;
  wire s1;
  output [31:0] w;
  wire [31:0] w;
  assign _0_ = s1 ? b : 32'd0;
  assign w = s0 ? a : _0_;
endmodule

module aftab_multiplexer_33(a, b, s0, s1, w);
  wire [32:0] _0_;
  input [32:0] a;
  wire [32:0] a;
  input [32:0] b;
  wire [32:0] b;
  input s0;
  wire s0;
  input s1;
  wire s1;
  output [32:0] w;
  wire [32:0] w;
  assign _0_ = s1 ? b : 33'h000000000;
  assign w = s0 ? a : _0_;
endmodule

module aftab_one_bit_register(clk, rst, zero, load, inreg, outreg);
  reg _0_;
  wire _1_;
  wire _2_;
  input clk;
  wire clk;
  input inreg;
  wire inreg;
  input load;
  wire load;
  output outreg;
  wire outreg;
  input rst;
  wire rst;
  input zero;
  wire zero;
  assign outreg = rst ? 1'h0 : _0_;
  always @(posedge clk)
    if (_2_) _0_ <= 1'h0;
    else _0_ <= _1_;
  assign _2_ = | { zero, rst };
  assign _1_ = load ? inreg : outreg;
endmodule

module aftab_opt_adder_32(a, b, sum);
  wire _0_;
  wire _1_;
  wire _2_;
  wire _3_;
  wire _4_;
  input [31:0] a;
  wire [31:0] a;
  input [1:0] b;
  wire [1:0] b;
  (* unused_bits = "31" *)
  wire [31:0] cout;
  (* hdlname = "fa1 a" *)
  wire \fa1.a ;
  (* hdlname = "fa1 b" *)
  wire \fa1.b ;
  (* hdlname = "fa1 cin" *)
  wire \fa1.cin ;
  (* hdlname = "fa1 cout" *)
  wire \fa1.cout ;
  (* hdlname = "fa1 s" *)
  wire \fa1.s ;
  (* hdlname = "fa2 a" *)
  wire \fa2.a ;
  (* hdlname = "fa2 b" *)
  wire \fa2.b ;
  (* hdlname = "fa2 cin" *)
  wire \fa2.cin ;
  (* hdlname = "fa2 cout" *)
  wire \fa2.cout ;
  (* hdlname = "fa2 s" *)
  wire \fa2.s ;
  (* hdlname = "gen_halfadder:1.ha i_bit1" *)
  wire \gen_halfadder:1.ha.i_bit1 ;
  (* hdlname = "gen_halfadder:1.ha i_bit2" *)
  wire \gen_halfadder:1.ha.i_bit2 ;
  (* hdlname = "gen_halfadder:1.ha o_carry" *)
  wire \gen_halfadder:1.ha.o_carry ;
  (* hdlname = "gen_halfadder:1.ha o_sum" *)
  wire \gen_halfadder:1.ha.o_sum ;
  (* hdlname = "gen_halfadder:10.ha i_bit1" *)
  wire \gen_halfadder:10.ha.i_bit1 ;
  (* hdlname = "gen_halfadder:10.ha i_bit2" *)
  wire \gen_halfadder:10.ha.i_bit2 ;
  (* hdlname = "gen_halfadder:10.ha o_carry" *)
  wire \gen_halfadder:10.ha.o_carry ;
  (* hdlname = "gen_halfadder:10.ha o_sum" *)
  wire \gen_halfadder:10.ha.o_sum ;
  (* hdlname = "gen_halfadder:11.ha i_bit1" *)
  wire \gen_halfadder:11.ha.i_bit1 ;
  (* hdlname = "gen_halfadder:11.ha i_bit2" *)
  wire \gen_halfadder:11.ha.i_bit2 ;
  (* hdlname = "gen_halfadder:11.ha o_carry" *)
  wire \gen_halfadder:11.ha.o_carry ;
  (* hdlname = "gen_halfadder:11.ha o_sum" *)
  wire \gen_halfadder:11.ha.o_sum ;
  (* hdlname = "gen_halfadder:12.ha i_bit1" *)
  wire \gen_halfadder:12.ha.i_bit1 ;
  (* hdlname = "gen_halfadder:12.ha i_bit2" *)
  wire \gen_halfadder:12.ha.i_bit2 ;
  (* hdlname = "gen_halfadder:12.ha o_carry" *)
  wire \gen_halfadder:12.ha.o_carry ;
  (* hdlname = "gen_halfadder:12.ha o_sum" *)
  wire \gen_halfadder:12.ha.o_sum ;
  (* hdlname = "gen_halfadder:13.ha i_bit1" *)
  wire \gen_halfadder:13.ha.i_bit1 ;
  (* hdlname = "gen_halfadder:13.ha i_bit2" *)
  wire \gen_halfadder:13.ha.i_bit2 ;
  (* hdlname = "gen_halfadder:13.ha o_carry" *)
  wire \gen_halfadder:13.ha.o_carry ;
  (* hdlname = "gen_halfadder:13.ha o_sum" *)
  wire \gen_halfadder:13.ha.o_sum ;
  (* hdlname = "gen_halfadder:14.ha i_bit1" *)
  wire \gen_halfadder:14.ha.i_bit1 ;
  (* hdlname = "gen_halfadder:14.ha i_bit2" *)
  wire \gen_halfadder:14.ha.i_bit2 ;
  (* hdlname = "gen_halfadder:14.ha o_carry" *)
  wire \gen_halfadder:14.ha.o_carry ;
  (* hdlname = "gen_halfadder:14.ha o_sum" *)
  wire \gen_halfadder:14.ha.o_sum ;
  (* hdlname = "gen_halfadder:15.ha i_bit1" *)
  wire \gen_halfadder:15.ha.i_bit1 ;
  (* hdlname = "gen_halfadder:15.ha i_bit2" *)
  wire \gen_halfadder:15.ha.i_bit2 ;
  (* hdlname = "gen_halfadder:15.ha o_carry" *)
  wire \gen_halfadder:15.ha.o_carry ;
  (* hdlname = "gen_halfadder:15.ha o_sum" *)
  wire \gen_halfadder:15.ha.o_sum ;
  (* hdlname = "gen_halfadder:16.ha i_bit1" *)
  wire \gen_halfadder:16.ha.i_bit1 ;
  (* hdlname = "gen_halfadder:16.ha i_bit2" *)
  wire \gen_halfadder:16.ha.i_bit2 ;
  (* hdlname = "gen_halfadder:16.ha o_carry" *)
  wire \gen_halfadder:16.ha.o_carry ;
  (* hdlname = "gen_halfadder:16.ha o_sum" *)
  wire \gen_halfadder:16.ha.o_sum ;
  (* hdlname = "gen_halfadder:17.ha i_bit1" *)
  wire \gen_halfadder:17.ha.i_bit1 ;
  (* hdlname = "gen_halfadder:17.ha i_bit2" *)
  wire \gen_halfadder:17.ha.i_bit2 ;
  (* hdlname = "gen_halfadder:17.ha o_carry" *)
  wire \gen_halfadder:17.ha.o_carry ;
  (* hdlname = "gen_halfadder:17.ha o_sum" *)
  wire \gen_halfadder:17.ha.o_sum ;
  (* hdlname = "gen_halfadder:18.ha i_bit1" *)
  wire \gen_halfadder:18.ha.i_bit1 ;
  (* hdlname = "gen_halfadder:18.ha i_bit2" *)
  wire \gen_halfadder:18.ha.i_bit2 ;
  (* hdlname = "gen_halfadder:18.ha o_carry" *)
  wire \gen_halfadder:18.ha.o_carry ;
  (* hdlname = "gen_halfadder:18.ha o_sum" *)
  wire \gen_halfadder:18.ha.o_sum ;
  (* hdlname = "gen_halfadder:19.ha i_bit1" *)
  wire \gen_halfadder:19.ha.i_bit1 ;
  (* hdlname = "gen_halfadder:19.ha i_bit2" *)
  wire \gen_halfadder:19.ha.i_bit2 ;
  (* hdlname = "gen_halfadder:19.ha o_carry" *)
  wire \gen_halfadder:19.ha.o_carry ;
  (* hdlname = "gen_halfadder:19.ha o_sum" *)
  wire \gen_halfadder:19.ha.o_sum ;
  (* hdlname = "gen_halfadder:2.ha i_bit1" *)
  wire \gen_halfadder:2.ha.i_bit1 ;
  (* hdlname = "gen_halfadder:2.ha i_bit2" *)
  wire \gen_halfadder:2.ha.i_bit2 ;
  (* hdlname = "gen_halfadder:2.ha o_carry" *)
  wire \gen_halfadder:2.ha.o_carry ;
  (* hdlname = "gen_halfadder:2.ha o_sum" *)
  wire \gen_halfadder:2.ha.o_sum ;
  (* hdlname = "gen_halfadder:20.ha i_bit1" *)
  wire \gen_halfadder:20.ha.i_bit1 ;
  (* hdlname = "gen_halfadder:20.ha i_bit2" *)
  wire \gen_halfadder:20.ha.i_bit2 ;
  (* hdlname = "gen_halfadder:20.ha o_carry" *)
  wire \gen_halfadder:20.ha.o_carry ;
  (* hdlname = "gen_halfadder:20.ha o_sum" *)
  wire \gen_halfadder:20.ha.o_sum ;
  (* hdlname = "gen_halfadder:21.ha i_bit1" *)
  wire \gen_halfadder:21.ha.i_bit1 ;
  (* hdlname = "gen_halfadder:21.ha i_bit2" *)
  wire \gen_halfadder:21.ha.i_bit2 ;
  (* hdlname = "gen_halfadder:21.ha o_carry" *)
  wire \gen_halfadder:21.ha.o_carry ;
  (* hdlname = "gen_halfadder:21.ha o_sum" *)
  wire \gen_halfadder:21.ha.o_sum ;
  (* hdlname = "gen_halfadder:22.ha i_bit1" *)
  wire \gen_halfadder:22.ha.i_bit1 ;
  (* hdlname = "gen_halfadder:22.ha i_bit2" *)
  wire \gen_halfadder:22.ha.i_bit2 ;
  (* hdlname = "gen_halfadder:22.ha o_carry" *)
  wire \gen_halfadder:22.ha.o_carry ;
  (* hdlname = "gen_halfadder:22.ha o_sum" *)
  wire \gen_halfadder:22.ha.o_sum ;
  (* hdlname = "gen_halfadder:23.ha i_bit1" *)
  wire \gen_halfadder:23.ha.i_bit1 ;
  (* hdlname = "gen_halfadder:23.ha i_bit2" *)
  wire \gen_halfadder:23.ha.i_bit2 ;
  (* hdlname = "gen_halfadder:23.ha o_carry" *)
  wire \gen_halfadder:23.ha.o_carry ;
  (* hdlname = "gen_halfadder:23.ha o_sum" *)
  wire \gen_halfadder:23.ha.o_sum ;
  (* hdlname = "gen_halfadder:24.ha i_bit1" *)
  wire \gen_halfadder:24.ha.i_bit1 ;
  (* hdlname = "gen_halfadder:24.ha i_bit2" *)
  wire \gen_halfadder:24.ha.i_bit2 ;
  (* hdlname = "gen_halfadder:24.ha o_carry" *)
  wire \gen_halfadder:24.ha.o_carry ;
  (* hdlname = "gen_halfadder:24.ha o_sum" *)
  wire \gen_halfadder:24.ha.o_sum ;
  (* hdlname = "gen_halfadder:25.ha i_bit1" *)
  wire \gen_halfadder:25.ha.i_bit1 ;
  (* hdlname = "gen_halfadder:25.ha i_bit2" *)
  wire \gen_halfadder:25.ha.i_bit2 ;
  (* hdlname = "gen_halfadder:25.ha o_carry" *)
  wire \gen_halfadder:25.ha.o_carry ;
  (* hdlname = "gen_halfadder:25.ha o_sum" *)
  wire \gen_halfadder:25.ha.o_sum ;
  (* hdlname = "gen_halfadder:26.ha i_bit1" *)
  wire \gen_halfadder:26.ha.i_bit1 ;
  (* hdlname = "gen_halfadder:26.ha i_bit2" *)
  wire \gen_halfadder:26.ha.i_bit2 ;
  (* hdlname = "gen_halfadder:26.ha o_carry" *)
  wire \gen_halfadder:26.ha.o_carry ;
  (* hdlname = "gen_halfadder:26.ha o_sum" *)
  wire \gen_halfadder:26.ha.o_sum ;
  (* hdlname = "gen_halfadder:27.ha i_bit1" *)
  wire \gen_halfadder:27.ha.i_bit1 ;
  (* hdlname = "gen_halfadder:27.ha i_bit2" *)
  wire \gen_halfadder:27.ha.i_bit2 ;
  (* hdlname = "gen_halfadder:27.ha o_carry" *)
  wire \gen_halfadder:27.ha.o_carry ;
  (* hdlname = "gen_halfadder:27.ha o_sum" *)
  wire \gen_halfadder:27.ha.o_sum ;
  (* hdlname = "gen_halfadder:28.ha i_bit1" *)
  wire \gen_halfadder:28.ha.i_bit1 ;
  (* hdlname = "gen_halfadder:28.ha i_bit2" *)
  wire \gen_halfadder:28.ha.i_bit2 ;
  (* hdlname = "gen_halfadder:28.ha o_carry" *)
  wire \gen_halfadder:28.ha.o_carry ;
  (* hdlname = "gen_halfadder:28.ha o_sum" *)
  wire \gen_halfadder:28.ha.o_sum ;
  (* hdlname = "gen_halfadder:29.ha i_bit1" *)
  wire \gen_halfadder:29.ha.i_bit1 ;
  (* hdlname = "gen_halfadder:29.ha i_bit2" *)
  wire \gen_halfadder:29.ha.i_bit2 ;
  (* hdlname = "gen_halfadder:29.ha o_carry" *)
  wire \gen_halfadder:29.ha.o_carry ;
  (* hdlname = "gen_halfadder:29.ha o_sum" *)
  wire \gen_halfadder:29.ha.o_sum ;
  (* hdlname = "gen_halfadder:3.ha i_bit1" *)
  wire \gen_halfadder:3.ha.i_bit1 ;
  (* hdlname = "gen_halfadder:3.ha i_bit2" *)
  wire \gen_halfadder:3.ha.i_bit2 ;
  (* hdlname = "gen_halfadder:3.ha o_carry" *)
  wire \gen_halfadder:3.ha.o_carry ;
  (* hdlname = "gen_halfadder:3.ha o_sum" *)
  wire \gen_halfadder:3.ha.o_sum ;
  (* hdlname = "gen_halfadder:30.ha i_bit1" *)
  wire \gen_halfadder:30.ha.i_bit1 ;
  (* hdlname = "gen_halfadder:30.ha i_bit2" *)
  wire \gen_halfadder:30.ha.i_bit2 ;
  (* hdlname = "gen_halfadder:30.ha o_carry" *)
  (* unused_bits = "0" *)
  wire \gen_halfadder:30.ha.o_carry ;
  (* hdlname = "gen_halfadder:30.ha o_sum" *)
  wire \gen_halfadder:30.ha.o_sum ;
  (* hdlname = "gen_halfadder:4.ha i_bit1" *)
  wire \gen_halfadder:4.ha.i_bit1 ;
  (* hdlname = "gen_halfadder:4.ha i_bit2" *)
  wire \gen_halfadder:4.ha.i_bit2 ;
  (* hdlname = "gen_halfadder:4.ha o_carry" *)
  wire \gen_halfadder:4.ha.o_carry ;
  (* hdlname = "gen_halfadder:4.ha o_sum" *)
  wire \gen_halfadder:4.ha.o_sum ;
  (* hdlname = "gen_halfadder:5.ha i_bit1" *)
  wire \gen_halfadder:5.ha.i_bit1 ;
  (* hdlname = "gen_halfadder:5.ha i_bit2" *)
  wire \gen_halfadder:5.ha.i_bit2 ;
  (* hdlname = "gen_halfadder:5.ha o_carry" *)
  wire \gen_halfadder:5.ha.o_carry ;
  (* hdlname = "gen_halfadder:5.ha o_sum" *)
  wire \gen_halfadder:5.ha.o_sum ;
  (* hdlname = "gen_halfadder:6.ha i_bit1" *)
  wire \gen_halfadder:6.ha.i_bit1 ;
  (* hdlname = "gen_halfadder:6.ha i_bit2" *)
  wire \gen_halfadder:6.ha.i_bit2 ;
  (* hdlname = "gen_halfadder:6.ha o_carry" *)
  wire \gen_halfadder:6.ha.o_carry ;
  (* hdlname = "gen_halfadder:6.ha o_sum" *)
  wire \gen_halfadder:6.ha.o_sum ;
  (* hdlname = "gen_halfadder:7.ha i_bit1" *)
  wire \gen_halfadder:7.ha.i_bit1 ;
  (* hdlname = "gen_halfadder:7.ha i_bit2" *)
  wire \gen_halfadder:7.ha.i_bit2 ;
  (* hdlname = "gen_halfadder:7.ha o_carry" *)
  wire \gen_halfadder:7.ha.o_carry ;
  (* hdlname = "gen_halfadder:7.ha o_sum" *)
  wire \gen_halfadder:7.ha.o_sum ;
  (* hdlname = "gen_halfadder:8.ha i_bit1" *)
  wire \gen_halfadder:8.ha.i_bit1 ;
  (* hdlname = "gen_halfadder:8.ha i_bit2" *)
  wire \gen_halfadder:8.ha.i_bit2 ;
  (* hdlname = "gen_halfadder:8.ha o_carry" *)
  wire \gen_halfadder:8.ha.o_carry ;
  (* hdlname = "gen_halfadder:8.ha o_sum" *)
  wire \gen_halfadder:8.ha.o_sum ;
  (* hdlname = "gen_halfadder:9.ha i_bit1" *)
  wire \gen_halfadder:9.ha.i_bit1 ;
  (* hdlname = "gen_halfadder:9.ha i_bit2" *)
  wire \gen_halfadder:9.ha.i_bit2 ;
  (* hdlname = "gen_halfadder:9.ha o_carry" *)
  wire \gen_halfadder:9.ha.o_carry ;
  (* hdlname = "gen_halfadder:9.ha o_sum" *)
  wire \gen_halfadder:9.ha.o_sum ;
  output [31:0] sum;
  wire [31:0] sum;
  assign \fa1.s  = a[0] ^ (* hdlname = "fa1 6569" *) b[0];
  assign \fa2.cin  = a[0] & (* hdlname = "fa1 6571" *) b[0];
  assign _0_ = a[1] ^ (* hdlname = "fa2 6569" *) b[1];
  assign \fa2.s  = _0_ ^ (* hdlname = "fa2 6570" *) \fa2.cin ;
  assign _1_ = a[1] & (* hdlname = "fa2 6571" *) b[1];
  assign _2_ = \fa2.cin  & (* hdlname = "fa2 6572" *) a[1];
  assign _3_ = _1_ | (* hdlname = "fa2 6573" *) _2_;
  assign _4_ = \fa2.cin  & (* hdlname = "fa2 6574" *) b[1];
  assign \fa2.cout  = _3_ | (* hdlname = "fa2 6575" *) _4_;
  assign \gen_halfadder:1.ha.o_sum  = a[2] ^ (* hdlname = "gen_halfadder:1.ha 6578" *) \fa2.cout ;
  assign \gen_halfadder:1.ha.o_carry  = a[2] & (* hdlname = "gen_halfadder:1.ha 6579" *) \fa2.cout ;
  assign \gen_halfadder:10.ha.o_sum  = a[11] ^ (* hdlname = "gen_halfadder:10.ha 6578" *) \gen_halfadder:10.ha.i_bit2 ;
  assign \gen_halfadder:10.ha.o_carry  = a[11] & (* hdlname = "gen_halfadder:10.ha 6579" *) \gen_halfadder:10.ha.i_bit2 ;
  assign \gen_halfadder:11.ha.o_sum  = a[12] ^ (* hdlname = "gen_halfadder:11.ha 6578" *) \gen_halfadder:10.ha.o_carry ;
  assign \gen_halfadder:11.ha.o_carry  = a[12] & (* hdlname = "gen_halfadder:11.ha 6579" *) \gen_halfadder:10.ha.o_carry ;
  assign \gen_halfadder:12.ha.o_sum  = a[13] ^ (* hdlname = "gen_halfadder:12.ha 6578" *) \gen_halfadder:11.ha.o_carry ;
  assign \gen_halfadder:12.ha.o_carry  = a[13] & (* hdlname = "gen_halfadder:12.ha 6579" *) \gen_halfadder:11.ha.o_carry ;
  assign \gen_halfadder:13.ha.o_sum  = a[14] ^ (* hdlname = "gen_halfadder:13.ha 6578" *) \gen_halfadder:12.ha.o_carry ;
  assign \gen_halfadder:13.ha.o_carry  = a[14] & (* hdlname = "gen_halfadder:13.ha 6579" *) \gen_halfadder:12.ha.o_carry ;
  assign \gen_halfadder:14.ha.o_sum  = a[15] ^ (* hdlname = "gen_halfadder:14.ha 6578" *) \gen_halfadder:13.ha.o_carry ;
  assign \gen_halfadder:14.ha.o_carry  = a[15] & (* hdlname = "gen_halfadder:14.ha 6579" *) \gen_halfadder:13.ha.o_carry ;
  assign \gen_halfadder:15.ha.o_sum  = a[16] ^ (* hdlname = "gen_halfadder:15.ha 6578" *) \gen_halfadder:14.ha.o_carry ;
  assign \gen_halfadder:15.ha.o_carry  = a[16] & (* hdlname = "gen_halfadder:15.ha 6579" *) \gen_halfadder:14.ha.o_carry ;
  assign \gen_halfadder:16.ha.o_sum  = a[17] ^ (* hdlname = "gen_halfadder:16.ha 6578" *) \gen_halfadder:15.ha.o_carry ;
  assign \gen_halfadder:16.ha.o_carry  = a[17] & (* hdlname = "gen_halfadder:16.ha 6579" *) \gen_halfadder:15.ha.o_carry ;
  assign \gen_halfadder:17.ha.o_sum  = a[18] ^ (* hdlname = "gen_halfadder:17.ha 6578" *) \gen_halfadder:16.ha.o_carry ;
  assign \gen_halfadder:17.ha.o_carry  = a[18] & (* hdlname = "gen_halfadder:17.ha 6579" *) \gen_halfadder:16.ha.o_carry ;
  assign \gen_halfadder:18.ha.o_sum  = a[19] ^ (* hdlname = "gen_halfadder:18.ha 6578" *) \gen_halfadder:17.ha.o_carry ;
  assign \gen_halfadder:18.ha.o_carry  = a[19] & (* hdlname = "gen_halfadder:18.ha 6579" *) \gen_halfadder:17.ha.o_carry ;
  assign \gen_halfadder:19.ha.o_sum  = a[20] ^ (* hdlname = "gen_halfadder:19.ha 6578" *) \gen_halfadder:18.ha.o_carry ;
  assign \gen_halfadder:19.ha.o_carry  = a[20] & (* hdlname = "gen_halfadder:19.ha 6579" *) \gen_halfadder:18.ha.o_carry ;
  assign \gen_halfadder:2.ha.o_sum  = a[3] ^ (* hdlname = "gen_halfadder:2.ha 6578" *) \gen_halfadder:1.ha.o_carry ;
  assign \gen_halfadder:2.ha.o_carry  = a[3] & (* hdlname = "gen_halfadder:2.ha 6579" *) \gen_halfadder:1.ha.o_carry ;
  assign \gen_halfadder:20.ha.o_sum  = a[21] ^ (* hdlname = "gen_halfadder:20.ha 6578" *) \gen_halfadder:19.ha.o_carry ;
  assign \gen_halfadder:20.ha.o_carry  = a[21] & (* hdlname = "gen_halfadder:20.ha 6579" *) \gen_halfadder:19.ha.o_carry ;
  assign \gen_halfadder:21.ha.o_sum  = a[22] ^ (* hdlname = "gen_halfadder:21.ha 6578" *) \gen_halfadder:20.ha.o_carry ;
  assign \gen_halfadder:21.ha.o_carry  = a[22] & (* hdlname = "gen_halfadder:21.ha 6579" *) \gen_halfadder:20.ha.o_carry ;
  assign \gen_halfadder:22.ha.o_sum  = a[23] ^ (* hdlname = "gen_halfadder:22.ha 6578" *) \gen_halfadder:21.ha.o_carry ;
  assign \gen_halfadder:22.ha.o_carry  = a[23] & (* hdlname = "gen_halfadder:22.ha 6579" *) \gen_halfadder:21.ha.o_carry ;
  assign \gen_halfadder:23.ha.o_sum  = a[24] ^ (* hdlname = "gen_halfadder:23.ha 6578" *) \gen_halfadder:22.ha.o_carry ;
  assign \gen_halfadder:23.ha.o_carry  = a[24] & (* hdlname = "gen_halfadder:23.ha 6579" *) \gen_halfadder:22.ha.o_carry ;
  assign \gen_halfadder:24.ha.o_sum  = a[25] ^ (* hdlname = "gen_halfadder:24.ha 6578" *) \gen_halfadder:23.ha.o_carry ;
  assign \gen_halfadder:24.ha.o_carry  = a[25] & (* hdlname = "gen_halfadder:24.ha 6579" *) \gen_halfadder:23.ha.o_carry ;
  assign \gen_halfadder:25.ha.o_sum  = a[26] ^ (* hdlname = "gen_halfadder:25.ha 6578" *) \gen_halfadder:24.ha.o_carry ;
  assign \gen_halfadder:25.ha.o_carry  = a[26] & (* hdlname = "gen_halfadder:25.ha 6579" *) \gen_halfadder:24.ha.o_carry ;
  assign \gen_halfadder:26.ha.o_sum  = a[27] ^ (* hdlname = "gen_halfadder:26.ha 6578" *) \gen_halfadder:25.ha.o_carry ;
  assign \gen_halfadder:26.ha.o_carry  = a[27] & (* hdlname = "gen_halfadder:26.ha 6579" *) \gen_halfadder:25.ha.o_carry ;
  assign \gen_halfadder:27.ha.o_sum  = a[28] ^ (* hdlname = "gen_halfadder:27.ha 6578" *) \gen_halfadder:26.ha.o_carry ;
  assign \gen_halfadder:27.ha.o_carry  = a[28] & (* hdlname = "gen_halfadder:27.ha 6579" *) \gen_halfadder:26.ha.o_carry ;
  assign \gen_halfadder:28.ha.o_sum  = a[29] ^ (* hdlname = "gen_halfadder:28.ha 6578" *) \gen_halfadder:27.ha.o_carry ;
  assign \gen_halfadder:28.ha.o_carry  = a[29] & (* hdlname = "gen_halfadder:28.ha 6579" *) \gen_halfadder:27.ha.o_carry ;
  assign \gen_halfadder:29.ha.o_sum  = a[30] ^ (* hdlname = "gen_halfadder:29.ha 6578" *) \gen_halfadder:28.ha.o_carry ;
  assign \gen_halfadder:29.ha.o_carry  = a[30] & (* hdlname = "gen_halfadder:29.ha 6579" *) \gen_halfadder:28.ha.o_carry ;
  assign \gen_halfadder:3.ha.o_sum  = a[4] ^ (* hdlname = "gen_halfadder:3.ha 6578" *) \gen_halfadder:2.ha.o_carry ;
  assign \gen_halfadder:3.ha.o_carry  = a[4] & (* hdlname = "gen_halfadder:3.ha 6579" *) \gen_halfadder:2.ha.o_carry ;
  assign \gen_halfadder:30.ha.o_sum  = a[31] ^ (* hdlname = "gen_halfadder:30.ha 6578" *) \gen_halfadder:29.ha.o_carry ;
  assign \gen_halfadder:4.ha.o_sum  = a[5] ^ (* hdlname = "gen_halfadder:4.ha 6578" *) \gen_halfadder:3.ha.o_carry ;
  assign \gen_halfadder:4.ha.o_carry  = a[5] & (* hdlname = "gen_halfadder:4.ha 6579" *) \gen_halfadder:3.ha.o_carry ;
  assign \gen_halfadder:5.ha.o_sum  = a[6] ^ (* hdlname = "gen_halfadder:5.ha 6578" *) \gen_halfadder:4.ha.o_carry ;
  assign \gen_halfadder:5.ha.o_carry  = a[6] & (* hdlname = "gen_halfadder:5.ha 6579" *) \gen_halfadder:4.ha.o_carry ;
  assign \gen_halfadder:6.ha.o_sum  = a[7] ^ (* hdlname = "gen_halfadder:6.ha 6578" *) \gen_halfadder:5.ha.o_carry ;
  assign \gen_halfadder:6.ha.o_carry  = a[7] & (* hdlname = "gen_halfadder:6.ha 6579" *) \gen_halfadder:5.ha.o_carry ;
  assign \gen_halfadder:7.ha.o_sum  = a[8] ^ (* hdlname = "gen_halfadder:7.ha 6578" *) \gen_halfadder:6.ha.o_carry ;
  assign \gen_halfadder:7.ha.o_carry  = a[8] & (* hdlname = "gen_halfadder:7.ha 6579" *) \gen_halfadder:6.ha.o_carry ;
  assign \gen_halfadder:8.ha.o_sum  = a[9] ^ (* hdlname = "gen_halfadder:8.ha 6578" *) \gen_halfadder:7.ha.o_carry ;
  assign \gen_halfadder:8.ha.o_carry  = a[9] & (* hdlname = "gen_halfadder:8.ha 6579" *) \gen_halfadder:7.ha.o_carry ;
  assign \gen_halfadder:9.ha.o_sum  = a[10] ^ (* hdlname = "gen_halfadder:9.ha 6578" *) \gen_halfadder:8.ha.o_carry ;
  assign \gen_halfadder:10.ha.i_bit2  = a[10] & (* hdlname = "gen_halfadder:9.ha 6579" *) \gen_halfadder:8.ha.o_carry ;
  assign cout[30:0] = { \gen_halfadder:29.ha.o_carry , \gen_halfadder:28.ha.o_carry , \gen_halfadder:27.ha.o_carry , \gen_halfadder:26.ha.o_carry , \gen_halfadder:25.ha.o_carry , \gen_halfadder:24.ha.o_carry , \gen_halfadder:23.ha.o_carry , \gen_halfadder:22.ha.o_carry , \gen_halfadder:21.ha.o_carry , \gen_halfadder:20.ha.o_carry , \gen_halfadder:19.ha.o_carry , \gen_halfadder:18.ha.o_carry , \gen_halfadder:17.ha.o_carry , \gen_halfadder:16.ha.o_carry , \gen_halfadder:15.ha.o_carry , \gen_halfadder:14.ha.o_carry , \gen_halfadder:13.ha.o_carry , \gen_halfadder:12.ha.o_carry , \gen_halfadder:11.ha.o_carry , \gen_halfadder:10.ha.o_carry , \gen_halfadder:10.ha.i_bit2 , \gen_halfadder:8.ha.o_carry , \gen_halfadder:7.ha.o_carry , \gen_halfadder:6.ha.o_carry , \gen_halfadder:5.ha.o_carry , \gen_halfadder:4.ha.o_carry , \gen_halfadder:3.ha.o_carry , \gen_halfadder:2.ha.o_carry , \gen_halfadder:1.ha.o_carry , \fa2.cout , \fa2.cin  };
  assign \fa1.a  = a[0];
  assign \fa1.b  = b[0];
  assign \fa1.cin  = 1'h0;
  assign \fa1.cout  = \fa2.cin ;
  assign \fa2.a  = a[1];
  assign \fa2.b  = b[1];
  assign \gen_halfadder:1.ha.i_bit1  = a[2];
  assign \gen_halfadder:1.ha.i_bit2  = \fa2.cout ;
  assign \gen_halfadder:10.ha.i_bit1  = a[11];
  assign \gen_halfadder:11.ha.i_bit1  = a[12];
  assign \gen_halfadder:11.ha.i_bit2  = \gen_halfadder:10.ha.o_carry ;
  assign \gen_halfadder:12.ha.i_bit1  = a[13];
  assign \gen_halfadder:12.ha.i_bit2  = \gen_halfadder:11.ha.o_carry ;
  assign \gen_halfadder:13.ha.i_bit1  = a[14];
  assign \gen_halfadder:13.ha.i_bit2  = \gen_halfadder:12.ha.o_carry ;
  assign \gen_halfadder:14.ha.i_bit1  = a[15];
  assign \gen_halfadder:14.ha.i_bit2  = \gen_halfadder:13.ha.o_carry ;
  assign \gen_halfadder:15.ha.i_bit1  = a[16];
  assign \gen_halfadder:15.ha.i_bit2  = \gen_halfadder:14.ha.o_carry ;
  assign \gen_halfadder:16.ha.i_bit1  = a[17];
  assign \gen_halfadder:16.ha.i_bit2  = \gen_halfadder:15.ha.o_carry ;
  assign \gen_halfadder:17.ha.i_bit1  = a[18];
  assign \gen_halfadder:17.ha.i_bit2  = \gen_halfadder:16.ha.o_carry ;
  assign \gen_halfadder:18.ha.i_bit1  = a[19];
  assign \gen_halfadder:18.ha.i_bit2  = \gen_halfadder:17.ha.o_carry ;
  assign \gen_halfadder:19.ha.i_bit1  = a[20];
  assign \gen_halfadder:19.ha.i_bit2  = \gen_halfadder:18.ha.o_carry ;
  assign \gen_halfadder:2.ha.i_bit1  = a[3];
  assign \gen_halfadder:2.ha.i_bit2  = \gen_halfadder:1.ha.o_carry ;
  assign \gen_halfadder:20.ha.i_bit1  = a[21];
  assign \gen_halfadder:20.ha.i_bit2  = \gen_halfadder:19.ha.o_carry ;
  assign \gen_halfadder:21.ha.i_bit1  = a[22];
  assign \gen_halfadder:21.ha.i_bit2  = \gen_halfadder:20.ha.o_carry ;
  assign \gen_halfadder:22.ha.i_bit1  = a[23];
  assign \gen_halfadder:22.ha.i_bit2  = \gen_halfadder:21.ha.o_carry ;
  assign \gen_halfadder:23.ha.i_bit1  = a[24];
  assign \gen_halfadder:23.ha.i_bit2  = \gen_halfadder:22.ha.o_carry ;
  assign \gen_halfadder:24.ha.i_bit1  = a[25];
  assign \gen_halfadder:24.ha.i_bit2  = \gen_halfadder:23.ha.o_carry ;
  assign \gen_halfadder:25.ha.i_bit1  = a[26];
  assign \gen_halfadder:25.ha.i_bit2  = \gen_halfadder:24.ha.o_carry ;
  assign \gen_halfadder:26.ha.i_bit1  = a[27];
  assign \gen_halfadder:26.ha.i_bit2  = \gen_halfadder:25.ha.o_carry ;
  assign \gen_halfadder:27.ha.i_bit1  = a[28];
  assign \gen_halfadder:27.ha.i_bit2  = \gen_halfadder:26.ha.o_carry ;
  assign \gen_halfadder:28.ha.i_bit1  = a[29];
  assign \gen_halfadder:28.ha.i_bit2  = \gen_halfadder:27.ha.o_carry ;
  assign \gen_halfadder:29.ha.i_bit1  = a[30];
  assign \gen_halfadder:29.ha.i_bit2  = \gen_halfadder:28.ha.o_carry ;
  assign \gen_halfadder:3.ha.i_bit1  = a[4];
  assign \gen_halfadder:3.ha.i_bit2  = \gen_halfadder:2.ha.o_carry ;
  assign \gen_halfadder:30.ha.i_bit1  = a[31];
  assign \gen_halfadder:30.ha.i_bit2  = \gen_halfadder:29.ha.o_carry ;
  assign \gen_halfadder:30.ha.o_carry  = cout[31];
  assign \gen_halfadder:4.ha.i_bit1  = a[5];
  assign \gen_halfadder:4.ha.i_bit2  = \gen_halfadder:3.ha.o_carry ;
  assign \gen_halfadder:5.ha.i_bit1  = a[6];
  assign \gen_halfadder:5.ha.i_bit2  = \gen_halfadder:4.ha.o_carry ;
  assign \gen_halfadder:6.ha.i_bit1  = a[7];
  assign \gen_halfadder:6.ha.i_bit2  = \gen_halfadder:5.ha.o_carry ;
  assign \gen_halfadder:7.ha.i_bit1  = a[8];
  assign \gen_halfadder:7.ha.i_bit2  = \gen_halfadder:6.ha.o_carry ;
  assign \gen_halfadder:8.ha.i_bit1  = a[9];
  assign \gen_halfadder:8.ha.i_bit2  = \gen_halfadder:7.ha.o_carry ;
  assign \gen_halfadder:9.ha.i_bit1  = a[10];
  assign \gen_halfadder:9.ha.i_bit2  = \gen_halfadder:8.ha.o_carry ;
  assign \gen_halfadder:9.ha.o_carry  = \gen_halfadder:10.ha.i_bit2 ;
  assign sum = { \gen_halfadder:30.ha.o_sum , \gen_halfadder:29.ha.o_sum , \gen_halfadder:28.ha.o_sum , \gen_halfadder:27.ha.o_sum , \gen_halfadder:26.ha.o_sum , \gen_halfadder:25.ha.o_sum , \gen_halfadder:24.ha.o_sum , \gen_halfadder:23.ha.o_sum , \gen_halfadder:22.ha.o_sum , \gen_halfadder:21.ha.o_sum , \gen_halfadder:20.ha.o_sum , \gen_halfadder:19.ha.o_sum , \gen_halfadder:18.ha.o_sum , \gen_halfadder:17.ha.o_sum , \gen_halfadder:16.ha.o_sum , \gen_halfadder:15.ha.o_sum , \gen_halfadder:14.ha.o_sum , \gen_halfadder:13.ha.o_sum , \gen_halfadder:12.ha.o_sum , \gen_halfadder:11.ha.o_sum , \gen_halfadder:10.ha.o_sum , \gen_halfadder:9.ha.o_sum , \gen_halfadder:8.ha.o_sum , \gen_halfadder:7.ha.o_sum , \gen_halfadder:6.ha.o_sum , \gen_halfadder:5.ha.o_sum , \gen_halfadder:4.ha.o_sum , \gen_halfadder:3.ha.o_sum , \gen_halfadder:2.ha.o_sum , \gen_halfadder:1.ha.o_sum , \fa2.s , \fa1.s  };
endmodule

module aftab_register_16(clk, rst, zero, load, inreg, outreg);
  reg [15:0] _0_;
  wire [15:0] _1_;
  wire _2_;
  input clk;
  wire clk;
  input [15:0] inreg;
  wire [15:0] inreg;
  input load;
  wire load;
  output [15:0] outreg;
  wire [15:0] outreg;
  input rst;
  wire rst;
  input zero;
  wire zero;
  assign outreg = rst ? 16'h0000 : _0_;
  always @(posedge clk)
    if (_2_) _0_ <= 16'h0000;
    else _0_ <= _1_;
  assign _2_ = | { zero, rst };
  assign _1_ = load ? inreg : outreg;
endmodule

module aftab_register_2(clk, rst, zero, load, inreg, outreg);
  reg [1:0] _0_;
  wire [1:0] _1_;
  wire _2_;
  input clk;
  wire clk;
  input [1:0] inreg;
  wire [1:0] inreg;
  input load;
  wire load;
  output [1:0] outreg;
  wire [1:0] outreg;
  input rst;
  wire rst;
  input zero;
  wire zero;
  assign outreg = rst ? 2'h0 : _0_;
  always @(posedge clk)
    if (_2_) _0_ <= 2'h0;
    else _0_ <= _1_;
  assign _2_ = | { zero, rst };
  assign _1_ = load ? inreg : outreg;
endmodule

module aftab_register_32(clk, rst, zero, load, inreg, outreg);
  reg [31:0] _0_;
  wire [31:0] _1_;
  wire _2_;
  input clk;
  wire clk;
  input [31:0] inreg;
  wire [31:0] inreg;
  input load;
  wire load;
  output [31:0] outreg;
  wire [31:0] outreg;
  input rst;
  wire rst;
  input zero;
  wire zero;
  assign outreg = rst ? 32'd0 : _0_;
  always @(posedge clk)
    if (_2_) _0_ <= 32'd0;
    else _0_ <= _1_;
  assign _2_ = | { zero, rst };
  assign _1_ = load ? inreg : outreg;
endmodule

module aftab_register_33(clk, rst, zero, load, inreg, outreg);
  reg [32:0] _0_;
  wire [32:0] _1_;
  wire _2_;
  input clk;
  wire clk;
  input [32:0] inreg;
  wire [32:0] inreg;
  input load;
  wire load;
  output [32:0] outreg;
  wire [32:0] outreg;
  input rst;
  wire rst;
  input zero;
  wire zero;
  assign outreg = rst ? 33'h000000000 : _0_;
  always @(posedge clk)
    if (_2_) _0_ <= 33'h000000000;
    else _0_ <= _1_;
  assign _2_ = | { zero, rst };
  assign _1_ = load ? inreg : outreg;
endmodule

module aftab_register_bank_32(clk, rst, writeregbank, addressregbank, writeaddressregbank, inputregbank, loadmiereg, loadmieuiefield, outregbank, mirrorustatus, mirroruie, mirroruip, mirror, ldmiereg, ldmieuiefield, outmiefieldccreg, outuiefieldccreg, outmieccreg);
  wire _000_;
  wire _001_;
  wire _002_;
  wire _003_;
  wire _004_;
  wire _005_;
  reg [1023:0] _006_;
  wire [31:0] _007_;
  wire [31:0] _008_;
  wire [31:0] _009_;
  wire [31:0] _010_;
  wire [31:0] _011_;
  wire [31:0] _012_;
  wire [31:0] _013_;
  wire [31:0] _014_;
  wire [31:0] _015_;
  wire [31:0] _016_;
  wire [31:0] _017_;
  wire [31:0] _018_;
  wire [31:0] _019_;
  wire [31:0] _020_;
  wire [31:0] _021_;
  wire [31:0] _022_;
  wire [31:0] _023_;
  wire [31:0] _024_;
  wire [31:0] _025_;
  wire [31:0] _026_;
  wire [4:0] _027_;
  wire [4:0] _028_;
  wire [1023:0] _029_;
  wire [31:0] _030_;
  wire [31:0] _031_;
  wire [31:0] _032_;
  wire [31:0] _033_;
  wire [31:0] _034_;
  wire [31:0] _035_;
  wire [31:0] _036_;
  wire [31:0] _037_;
  wire [31:0] _038_;
  wire [31:0] _039_;
  wire _040_;
  wire _041_;
  wire _042_;
  wire _043_;
  wire _044_;
  wire _045_;
  wire _046_;
  wire _047_;
  wire _048_;
  wire _049_;
  wire _050_;
  wire _051_;
  wire _052_;
  wire _053_;
  wire _054_;
  wire _055_;
  wire _056_;
  wire _057_;
  wire _058_;
  wire _059_;
  wire _060_;
  wire _061_;
  wire _062_;
  wire _063_;
  wire _064_;
  wire _065_;
  wire _066_;
  wire _067_;
  wire _068_;
  wire _069_;
  wire _070_;
  wire _071_;
  wire _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire [31:0] _105_;
  wire [31:0] _106_;
  wire [31:0] _107_;
  wire [31:0] _108_;
  wire [31:0] _109_;
  wire [31:0] _110_;
  wire [31:0] _111_;
  wire [31:0] _112_;
  wire [31:0] _113_;
  wire [31:0] _114_;
  wire [31:0] _115_;
  wire [31:0] _116_;
  wire [31:0] _117_;
  wire [31:0] _118_;
  wire [31:0] _119_;
  wire [31:0] _120_;
  wire [31:0] _121_;
  wire [31:0] _122_;
  wire [31:0] _123_;
  wire [31:0] _124_;
  wire [31:0] _125_;
  wire [31:0] _126_;
  wire [31:0] _127_;
  wire [31:0] _128_;
  wire [31:0] _129_;
  wire [31:0] _130_;
  wire [31:0] _131_;
  wire [31:0] _132_;
  wire [31:0] _133_;
  wire [31:0] _134_;
  wire [31:0] _135_;
  wire [31:0] _136_;
  reg [31:0] _137_;
  wire [31:0] _138_;
  reg _139_;
  wire _140_;
  reg _141_;
  wire _142_;
  input [11:0] addressregbank;
  wire [11:0] addressregbank;
  input clk;
  wire clk;
  (* hdlname = "csr_address_logic addressregbank" *)
  wire [11:0] \csr_address_logic.addressregbank ;
  (* hdlname = "csr_address_logic ldmiereg" *)
  wire \csr_address_logic.ldmiereg ;
  (* hdlname = "csr_address_logic ldmieuiefield" *)
  wire \csr_address_logic.ldmieuiefield ;
  (* hdlname = "csr_address_logic mirror" *)
  wire \csr_address_logic.mirror ;
  (* hdlname = "csr_address_logic mirroruie" *)
  wire \csr_address_logic.mirroruie ;
  (* hdlname = "csr_address_logic mirroruietemp" *)
  wire \csr_address_logic.mirroruietemp ;
  (* hdlname = "csr_address_logic mirroruip" *)
  wire \csr_address_logic.mirroruip ;
  (* hdlname = "csr_address_logic mirroruiptemp" *)
  wire \csr_address_logic.mirroruiptemp ;
  (* hdlname = "csr_address_logic mirrorustatus" *)
  wire \csr_address_logic.mirrorustatus ;
  (* hdlname = "csr_address_logic mirrorustatustemp" *)
  wire \csr_address_logic.mirrorustatustemp ;
  (* hdlname = "csr_registers addressregbank" *)
  wire [4:0] \csr_registers.addressregbank ;
  (* hdlname = "csr_registers clk" *)
  wire \csr_registers.clk ;
  (* hdlname = "csr_registers inputregbank" *)
  wire [31:0] \csr_registers.inputregbank ;
  (* hdlname = "csr_registers outregbank" *)
  wire [31:0] \csr_registers.outregbank ;
  (* hdlname = "csr_registers rdata" *)
  (* ramstyle = "M9K" *)
  wire [1023:0] \csr_registers.rdata ;
  (* hdlname = "csr_registers rst" *)
  wire \csr_registers.rst ;
  (* hdlname = "csr_registers writeaddressregbank" *)
  wire [4:0] \csr_registers.writeaddressregbank ;
  (* hdlname = "csr_registers writeregbank" *)
  wire \csr_registers.writeregbank ;
  input [31:0] inputregbank;
  wire [31:0] inputregbank;
  output ldmiereg;
  wire ldmiereg;
  output ldmieuiefield;
  wire ldmieuiefield;
  input loadmiereg;
  wire loadmiereg;
  input loadmieuiefield;
  wire loadmieuiefield;
  (* hdlname = "mieccregister clk" *)
  wire \mieccregister.clk ;
  (* hdlname = "mieccregister inreg" *)
  wire [31:0] \mieccregister.inreg ;
  (* hdlname = "mieccregister load" *)
  wire \mieccregister.load ;
  (* hdlname = "mieccregister outreg" *)
  wire [31:0] \mieccregister.outreg ;
  (* hdlname = "mieccregister rst" *)
  wire \mieccregister.rst ;
  (* hdlname = "mieccregister zero" *)
  wire \mieccregister.zero ;
  (* hdlname = "miefieldccregister clk" *)
  wire \miefieldccregister.clk ;
  (* hdlname = "miefieldccregister inreg" *)
  wire \miefieldccregister.inreg ;
  (* hdlname = "miefieldccregister load" *)
  wire \miefieldccregister.load ;
  (* hdlname = "miefieldccregister outreg" *)
  wire \miefieldccregister.outreg ;
  (* hdlname = "miefieldccregister rst" *)
  wire \miefieldccregister.rst ;
  (* hdlname = "miefieldccregister zero" *)
  wire \miefieldccregister.zero ;
  output mirror;
  wire mirror;
  output mirroruie;
  wire mirroruie;
  output mirroruip;
  wire mirroruip;
  output mirrorustatus;
  wire mirrorustatus;
  output [31:0] outmieccreg;
  wire [31:0] outmieccreg;
  output outmiefieldccreg;
  wire outmiefieldccreg;
  output [31:0] outregbank;
  wire [31:0] outregbank;
  output outuiefieldccreg;
  wire outuiefieldccreg;
  input rst;
  wire rst;
  wire [4:0] translatedaddress;
  wire [4:0] translatedwriteaddress;
  (* hdlname = "uiefieldccregister clk" *)
  wire \uiefieldccregister.clk ;
  (* hdlname = "uiefieldccregister inreg" *)
  wire \uiefieldccregister.inreg ;
  (* hdlname = "uiefieldccregister load" *)
  wire \uiefieldccregister.load ;
  (* hdlname = "uiefieldccregister outreg" *)
  wire \uiefieldccregister.outreg ;
  (* hdlname = "uiefieldccregister rst" *)
  wire \uiefieldccregister.rst ;
  (* hdlname = "uiefieldccregister zero" *)
  wire \uiefieldccregister.zero ;
  input [11:0] writeaddressregbank;
  wire [11:0] writeaddressregbank;
  input writeregbank;
  wire writeregbank;
  assign \csr_registers.rdata  = rst ? 1024'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : _006_;
  assign _007_ = _027_[0] ? \csr_registers.rdata [63:32] : \csr_registers.rdata [31:0];
  assign _008_ = _027_[0] ? \csr_registers.rdata [191:160] : \csr_registers.rdata [159:128];
  assign _009_ = _027_[0] ? \csr_registers.rdata [319:288] : \csr_registers.rdata [287:256];
  assign _010_ = _027_[0] ? \csr_registers.rdata [447:416] : \csr_registers.rdata [415:384];
  assign _011_ = _027_[0] ? \csr_registers.rdata [575:544] : \csr_registers.rdata [543:512];
  assign _012_ = _027_[0] ? \csr_registers.rdata [703:672] : \csr_registers.rdata [671:640];
  assign _013_ = _027_[0] ? \csr_registers.rdata [831:800] : \csr_registers.rdata [799:768];
  assign _014_ = _027_[0] ? \csr_registers.rdata [959:928] : \csr_registers.rdata [927:896];
  assign _015_ = _027_[2] ? _031_ : _030_;
  assign _016_ = _027_[2] ? _035_ : _034_;
  assign _017_ = _027_[0] ? \csr_registers.rdata [127:96] : \csr_registers.rdata [95:64];
  assign _018_ = _027_[0] ? \csr_registers.rdata [255:224] : \csr_registers.rdata [223:192];
  assign _019_ = _027_[0] ? \csr_registers.rdata [383:352] : \csr_registers.rdata [351:320];
  assign _020_ = _027_[0] ? \csr_registers.rdata [511:480] : \csr_registers.rdata [479:448];
  assign _021_ = _027_[0] ? \csr_registers.rdata [639:608] : \csr_registers.rdata [607:576];
  assign _022_ = _027_[0] ? \csr_registers.rdata [767:736] : \csr_registers.rdata [735:704];
  assign _023_ = _027_[0] ? \csr_registers.rdata [895:864] : \csr_registers.rdata [863:832];
  assign _024_ = _027_[0] ? \csr_registers.rdata [1023:992] : \csr_registers.rdata [991:960];
  assign _025_ = _027_[2] ? _033_ : _032_;
  assign _026_ = _027_[2] ? _037_ : _036_;
  assign _030_ = _027_[1] ? _017_ : _007_;
  assign _031_ = _027_[1] ? _018_ : _008_;
  assign _032_ = _027_[1] ? _019_ : _009_;
  assign _033_ = _027_[1] ? _020_ : _010_;
  assign _034_ = _027_[1] ? _021_ : _011_;
  assign _035_ = _027_[1] ? _022_ : _012_;
  assign _036_ = _027_[1] ? _023_ : _013_;
  assign _037_ = _027_[1] ? _024_ : _014_;
  assign _038_ = _027_[3] ? _025_ : _015_;
  assign _039_ = _027_[3] ? _026_ : _016_;
  assign \mieccregister.outreg  = rst ? 32'd0 : _137_;
  always @(posedge clk)
    if (rst) _137_ <= 32'd0;
    else _137_ <= _138_;
  assign \miefieldccregister.outreg  = rst ? 1'h0 : _139_;
  always @(posedge clk)
    if (rst) _139_ <= 1'h0;
    else _139_ <= _140_;
  assign \uiefieldccregister.outreg  = rst ? 1'h0 : _141_;
  always @(posedge clk)
    if (rst) _141_ <= 1'h0;
    else _141_ <= _142_;
  assign _000_ = writeaddressregbank == (* hdlname = "csr_address_logic 5884" *) 12'h304;
  assign \csr_address_logic.ldmiereg  = _000_ ? (* hdlname = "csr_address_logic 5885" *) 1'h1 : 1'h0;
  assign _001_ = writeaddressregbank == (* hdlname = "csr_address_logic 5889" *) 12'h300;
  assign \csr_address_logic.ldmieuiefield  = _001_ ? (* hdlname = "csr_address_logic 5890" *) 1'h1 : 1'h0;
  assign _002_ = ! (* hdlname = "csr_address_logic 5895" *) writeaddressregbank[7:0];
  assign \csr_address_logic.mirrorustatustemp  = _002_ ? (* hdlname = "csr_address_logic 5896" *) 1'h1 : 1'h0;
  assign _003_ = writeaddressregbank[7:0] == (* hdlname = "csr_address_logic 5901" *) 8'h04;
  assign \csr_address_logic.mirroruietemp  = _003_ ? (* hdlname = "csr_address_logic 5902" *) 1'h1 : 1'h0;
  assign _004_ = writeaddressregbank[7:0] == (* hdlname = "csr_address_logic 5907" *) 8'h44;
  assign \csr_address_logic.mirroruiptemp  = _004_ ? (* hdlname = "csr_address_logic 5908" *) 1'h1 : 1'h0;
  assign _005_ = \csr_address_logic.mirrorustatustemp  | (* hdlname = "csr_address_logic 5910" *) \csr_address_logic.mirroruietemp ;
  assign \csr_address_logic.mirror  = _005_ | (* hdlname = "csr_address_logic 5911" *) \csr_address_logic.mirroruiptemp ;
  assign _027_ = 5'h1f - (* hdlname = "csr_registers 5670" *) { addressregbank[8], addressregbank[6], addressregbank[2:0] };
  assign _028_ = 5'h1f - (* hdlname = "csr_registers 5677" *) { writeaddressregbank[8], writeaddressregbank[6], writeaddressregbank[2:0] };
  assign _029_ = writeregbank ? (* hdlname = "csr_registers 5685" *) { _136_, _135_, _134_, _133_, _132_, _131_, _130_, _129_, _128_, _127_, _126_, _125_, _124_, _123_, _122_, _121_, _120_, _119_, _118_, _117_, _116_, _115_, _114_, _113_, _112_, _111_, _110_, _109_, _108_, _107_, _106_, _105_ } : \csr_registers.rdata ;
  (* hdlname = "csr_registers 5686" *)
  always @(posedge clk)
    if (rst) _006_ <= 1024'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    else _006_ <= _029_;
  assign \csr_registers.outregbank  = _027_[4] ? (* hdlname = "csr_registers 5740" *) _039_ : _038_;
  assign _040_ = ~ (* hdlname = "csr_registers 5742" *) _028_[4];
  assign _041_ = ~ (* hdlname = "csr_registers 5744" *) _028_[3];
  assign _042_ = _040_ & (* hdlname = "csr_registers 5745" *) _041_;
  assign _043_ = _040_ & (* hdlname = "csr_registers 5746" *) _028_[3];
  assign _044_ = _028_[4] & (* hdlname = "csr_registers 5747" *) _041_;
  assign _045_ = _028_[4] & (* hdlname = "csr_registers 5748" *) _028_[3];
  assign _046_ = ~ (* hdlname = "csr_registers 5750" *) _028_[2];
  assign _047_ = _042_ & (* hdlname = "csr_registers 5751" *) _046_;
  assign _048_ = _042_ & (* hdlname = "csr_registers 5752" *) _028_[2];
  assign _049_ = _043_ & (* hdlname = "csr_registers 5753" *) _046_;
  assign _050_ = _043_ & (* hdlname = "csr_registers 5754" *) _028_[2];
  assign _051_ = _044_ & (* hdlname = "csr_registers 5755" *) _046_;
  assign _052_ = _044_ & (* hdlname = "csr_registers 5756" *) _028_[2];
  assign _053_ = _045_ & (* hdlname = "csr_registers 5757" *) _046_;
  assign _054_ = _045_ & (* hdlname = "csr_registers 5758" *) _028_[2];
  assign _055_ = ~ (* hdlname = "csr_registers 5760" *) _028_[1];
  assign _056_ = _047_ & (* hdlname = "csr_registers 5761" *) _055_;
  assign _057_ = _047_ & (* hdlname = "csr_registers 5762" *) _028_[1];
  assign _058_ = _048_ & (* hdlname = "csr_registers 5763" *) _055_;
  assign _059_ = _048_ & (* hdlname = "csr_registers 5764" *) _028_[1];
  assign _060_ = _049_ & (* hdlname = "csr_registers 5765" *) _055_;
  assign _061_ = _049_ & (* hdlname = "csr_registers 5766" *) _028_[1];
  assign _062_ = _050_ & (* hdlname = "csr_registers 5767" *) _055_;
  assign _063_ = _050_ & (* hdlname = "csr_registers 5768" *) _028_[1];
  assign _064_ = _051_ & (* hdlname = "csr_registers 5769" *) _055_;
  assign _065_ = _051_ & (* hdlname = "csr_registers 5770" *) _028_[1];
  assign _066_ = _052_ & (* hdlname = "csr_registers 5771" *) _055_;
  assign _067_ = _052_ & (* hdlname = "csr_registers 5772" *) _028_[1];
  assign _068_ = _053_ & (* hdlname = "csr_registers 5773" *) _055_;
  assign _069_ = _053_ & (* hdlname = "csr_registers 5774" *) _028_[1];
  assign _070_ = _054_ & (* hdlname = "csr_registers 5775" *) _055_;
  assign _071_ = _054_ & (* hdlname = "csr_registers 5776" *) _028_[1];
  assign _072_ = ~ (* hdlname = "csr_registers 5778" *) _028_[0];
  assign _073_ = _056_ & (* hdlname = "csr_registers 5779" *) _072_;
  assign _074_ = _056_ & (* hdlname = "csr_registers 5780" *) _028_[0];
  assign _075_ = _057_ & (* hdlname = "csr_registers 5781" *) _072_;
  assign _076_ = _057_ & (* hdlname = "csr_registers 5782" *) _028_[0];
  assign _077_ = _058_ & (* hdlname = "csr_registers 5783" *) _072_;
  assign _078_ = _058_ & (* hdlname = "csr_registers 5784" *) _028_[0];
  assign _079_ = _059_ & (* hdlname = "csr_registers 5785" *) _072_;
  assign _080_ = _059_ & (* hdlname = "csr_registers 5786" *) _028_[0];
  assign _081_ = _060_ & (* hdlname = "csr_registers 5787" *) _072_;
  assign _082_ = _060_ & (* hdlname = "csr_registers 5788" *) _028_[0];
  assign _083_ = _061_ & (* hdlname = "csr_registers 5789" *) _072_;
  assign _084_ = _061_ & (* hdlname = "csr_registers 5790" *) _028_[0];
  assign _085_ = _062_ & (* hdlname = "csr_registers 5791" *) _072_;
  assign _086_ = _062_ & (* hdlname = "csr_registers 5792" *) _028_[0];
  assign _087_ = _063_ & (* hdlname = "csr_registers 5793" *) _072_;
  assign _088_ = _063_ & (* hdlname = "csr_registers 5794" *) _028_[0];
  assign _089_ = _064_ & (* hdlname = "csr_registers 5795" *) _072_;
  assign _090_ = _064_ & (* hdlname = "csr_registers 5796" *) _028_[0];
  assign _091_ = _065_ & (* hdlname = "csr_registers 5797" *) _072_;
  assign _092_ = _065_ & (* hdlname = "csr_registers 5798" *) _028_[0];
  assign _093_ = _066_ & (* hdlname = "csr_registers 5799" *) _072_;
  assign _094_ = _066_ & (* hdlname = "csr_registers 5800" *) _028_[0];
  assign _095_ = _067_ & (* hdlname = "csr_registers 5801" *) _072_;
  assign _096_ = _067_ & (* hdlname = "csr_registers 5802" *) _028_[0];
  assign _097_ = _068_ & (* hdlname = "csr_registers 5803" *) _072_;
  assign _098_ = _068_ & (* hdlname = "csr_registers 5804" *) _028_[0];
  assign _099_ = _069_ & (* hdlname = "csr_registers 5805" *) _072_;
  assign _100_ = _069_ & (* hdlname = "csr_registers 5806" *) _028_[0];
  assign _101_ = _070_ & (* hdlname = "csr_registers 5807" *) _072_;
  assign _102_ = _070_ & (* hdlname = "csr_registers 5808" *) _028_[0];
  assign _103_ = _071_ & (* hdlname = "csr_registers 5809" *) _072_;
  assign _104_ = _071_ & (* hdlname = "csr_registers 5810" *) _028_[0];
  assign _105_ = _073_ ? (* hdlname = "csr_registers 5812" *) inputregbank : \csr_registers.rdata [31:0];
  assign _106_ = _074_ ? (* hdlname = "csr_registers 5814" *) inputregbank : \csr_registers.rdata [63:32];
  assign _107_ = _075_ ? (* hdlname = "csr_registers 5816" *) inputregbank : \csr_registers.rdata [95:64];
  assign _108_ = _076_ ? (* hdlname = "csr_registers 5818" *) inputregbank : \csr_registers.rdata [127:96];
  assign _109_ = _077_ ? (* hdlname = "csr_registers 5820" *) inputregbank : \csr_registers.rdata [159:128];
  assign _110_ = _078_ ? (* hdlname = "csr_registers 5822" *) inputregbank : \csr_registers.rdata [191:160];
  assign _111_ = _079_ ? (* hdlname = "csr_registers 5824" *) inputregbank : \csr_registers.rdata [223:192];
  assign _112_ = _080_ ? (* hdlname = "csr_registers 5826" *) inputregbank : \csr_registers.rdata [255:224];
  assign _113_ = _081_ ? (* hdlname = "csr_registers 5828" *) inputregbank : \csr_registers.rdata [287:256];
  assign _114_ = _082_ ? (* hdlname = "csr_registers 5830" *) inputregbank : \csr_registers.rdata [319:288];
  assign _115_ = _083_ ? (* hdlname = "csr_registers 5832" *) inputregbank : \csr_registers.rdata [351:320];
  assign _116_ = _084_ ? (* hdlname = "csr_registers 5834" *) inputregbank : \csr_registers.rdata [383:352];
  assign _117_ = _085_ ? (* hdlname = "csr_registers 5836" *) inputregbank : \csr_registers.rdata [415:384];
  assign _118_ = _086_ ? (* hdlname = "csr_registers 5838" *) inputregbank : \csr_registers.rdata [447:416];
  assign _119_ = _087_ ? (* hdlname = "csr_registers 5840" *) inputregbank : \csr_registers.rdata [479:448];
  assign _120_ = _088_ ? (* hdlname = "csr_registers 5842" *) inputregbank : \csr_registers.rdata [511:480];
  assign _121_ = _089_ ? (* hdlname = "csr_registers 5844" *) inputregbank : \csr_registers.rdata [543:512];
  assign _122_ = _090_ ? (* hdlname = "csr_registers 5846" *) inputregbank : \csr_registers.rdata [575:544];
  assign _123_ = _091_ ? (* hdlname = "csr_registers 5848" *) inputregbank : \csr_registers.rdata [607:576];
  assign _124_ = _092_ ? (* hdlname = "csr_registers 5850" *) inputregbank : \csr_registers.rdata [639:608];
  assign _125_ = _093_ ? (* hdlname = "csr_registers 5852" *) inputregbank : \csr_registers.rdata [671:640];
  assign _126_ = _094_ ? (* hdlname = "csr_registers 5854" *) inputregbank : \csr_registers.rdata [703:672];
  assign _127_ = _095_ ? (* hdlname = "csr_registers 5856" *) inputregbank : \csr_registers.rdata [735:704];
  assign _128_ = _096_ ? (* hdlname = "csr_registers 5858" *) inputregbank : \csr_registers.rdata [767:736];
  assign _129_ = _097_ ? (* hdlname = "csr_registers 5860" *) inputregbank : \csr_registers.rdata [799:768];
  assign _130_ = _098_ ? (* hdlname = "csr_registers 5862" *) inputregbank : \csr_registers.rdata [831:800];
  assign _131_ = _099_ ? (* hdlname = "csr_registers 5864" *) inputregbank : \csr_registers.rdata [863:832];
  assign _132_ = _100_ ? (* hdlname = "csr_registers 5866" *) inputregbank : \csr_registers.rdata [895:864];
  assign _133_ = _101_ ? (* hdlname = "csr_registers 5868" *) inputregbank : \csr_registers.rdata [927:896];
  assign _134_ = _102_ ? (* hdlname = "csr_registers 5870" *) inputregbank : \csr_registers.rdata [959:928];
  assign _135_ = _103_ ? (* hdlname = "csr_registers 5872" *) inputregbank : \csr_registers.rdata [991:960];
  assign _136_ = _104_ ? (* hdlname = "csr_registers 5874" *) inputregbank : \csr_registers.rdata [1023:992];
  assign _138_ = loadmiereg ? (* hdlname = "mieccregister 4067" *) inputregbank : \mieccregister.outreg ;
  assign _140_ = loadmieuiefield ? (* hdlname = "miefieldccregister 5916" *) inputregbank[3] : \miefieldccregister.outreg ;
  assign _142_ = loadmieuiefield ? (* hdlname = "uiefieldccregister 5916" *) inputregbank[0] : \uiefieldccregister.outreg ;
  assign \csr_address_logic.addressregbank  = writeaddressregbank;
  assign \csr_address_logic.mirroruie  = \csr_address_logic.mirroruietemp ;
  assign \csr_address_logic.mirroruip  = \csr_address_logic.mirroruiptemp ;
  assign \csr_address_logic.mirrorustatus  = \csr_address_logic.mirrorustatustemp ;
  assign \csr_registers.addressregbank  = { addressregbank[8], addressregbank[6], addressregbank[2:0] };
  assign \csr_registers.clk  = clk;
  assign \csr_registers.inputregbank  = inputregbank;
  assign \csr_registers.rst  = rst;
  assign \csr_registers.writeaddressregbank  = { writeaddressregbank[8], writeaddressregbank[6], writeaddressregbank[2:0] };
  assign \csr_registers.writeregbank  = writeregbank;
  assign ldmiereg = \csr_address_logic.ldmiereg ;
  assign ldmieuiefield = \csr_address_logic.ldmieuiefield ;
  assign \mieccregister.clk  = clk;
  assign \mieccregister.inreg  = inputregbank;
  assign \mieccregister.load  = loadmiereg;
  assign \mieccregister.rst  = rst;
  assign \mieccregister.zero  = 1'h0;
  assign \miefieldccregister.clk  = clk;
  assign \miefieldccregister.inreg  = inputregbank[3];
  assign \miefieldccregister.load  = loadmieuiefield;
  assign \miefieldccregister.rst  = rst;
  assign \miefieldccregister.zero  = 1'h0;
  assign mirror = \csr_address_logic.mirror ;
  assign mirroruie = \csr_address_logic.mirroruietemp ;
  assign mirroruip = \csr_address_logic.mirroruiptemp ;
  assign mirrorustatus = \csr_address_logic.mirrorustatustemp ;
  assign outmieccreg = \mieccregister.outreg ;
  assign outmiefieldccreg = \miefieldccregister.outreg ;
  assign outregbank = \csr_registers.outregbank ;
  assign outuiefieldccreg = \uiefieldccregister.outreg ;
  assign translatedaddress = { addressregbank[8], addressregbank[6], addressregbank[2:0] };
  assign translatedwriteaddress = { writeaddressregbank[8], writeaddressregbank[6], writeaddressregbank[2:0] };
  assign \uiefieldccregister.clk  = clk;
  assign \uiefieldccregister.inreg  = inputregbank[0];
  assign \uiefieldccregister.load  = loadmieuiefield;
  assign \uiefieldccregister.rst  = rst;
  assign \uiefieldccregister.zero  = 1'h0;
endmodule

module aftab_register_file_32(clk, rst, setzero, setone, rs1, rs2, rd, writedata, writeregfile, p1, p2);
  reg [1023:0] _000_;
  wire [31:0] _001_;
  wire [31:0] _002_;
  wire [31:0] _003_;
  wire [31:0] _004_;
  wire [31:0] _005_;
  wire [31:0] _006_;
  wire [31:0] _007_;
  wire [31:0] _008_;
  wire [31:0] _009_;
  wire [31:0] _010_;
  wire [31:0] _011_;
  wire [31:0] _012_;
  wire [31:0] _013_;
  wire [31:0] _014_;
  wire [31:0] _015_;
  wire [31:0] _016_;
  wire [31:0] _017_;
  wire [31:0] _018_;
  wire [31:0] _019_;
  wire [31:0] _020_;
  wire [31:0] _021_;
  wire [31:0] _022_;
  wire [31:0] _023_;
  wire [31:0] _024_;
  wire [31:0] _025_;
  wire [31:0] _026_;
  wire [31:0] _027_;
  wire [31:0] _028_;
  wire [31:0] _029_;
  wire [31:0] _030_;
  wire [31:0] _031_;
  wire [31:0] _032_;
  wire [31:0] _033_;
  wire [31:0] _034_;
  wire [31:0] _035_;
  wire [31:0] _036_;
  wire [31:0] _037_;
  wire [31:0] _038_;
  wire [31:0] _039_;
  wire [31:0] _040_;
  wire [4:0] _041_;
  wire _042_;
  wire [4:0] _043_;
  wire _044_;
  wire _045_;
  wire [4:0] _046_;
  wire [1023:0] _047_;
  wire [1023:0] _048_;
  wire [1023:0] _049_;
  wire [1023:0] _050_;
  wire [31:0] _051_;
  wire [31:0] _052_;
  wire [31:0] _053_;
  wire [31:0] _054_;
  wire [31:0] _055_;
  wire [31:0] _056_;
  wire [31:0] _057_;
  wire [31:0] _058_;
  wire [31:0] _059_;
  wire [31:0] _060_;
  wire [31:0] _061_;
  wire [31:0] _062_;
  wire [31:0] _063_;
  wire [31:0] _064_;
  wire [31:0] _065_;
  wire [31:0] _066_;
  wire [31:0] _067_;
  wire [31:0] _068_;
  wire [31:0] _069_;
  wire [31:0] _070_;
  wire [31:0] _071_;
  wire [31:0] _072_;
  wire _073_;
  wire _074_;
  wire _075_;
  wire _076_;
  wire _077_;
  wire _078_;
  wire _079_;
  wire _080_;
  wire _081_;
  wire _082_;
  wire _083_;
  wire _084_;
  wire _085_;
  wire _086_;
  wire _087_;
  wire _088_;
  wire _089_;
  wire _090_;
  wire _091_;
  wire _092_;
  wire _093_;
  wire _094_;
  wire _095_;
  wire _096_;
  wire _097_;
  wire _098_;
  wire _099_;
  wire _100_;
  wire _101_;
  wire _102_;
  wire _103_;
  wire _104_;
  wire _105_;
  wire _106_;
  wire _107_;
  wire _108_;
  wire _109_;
  wire _110_;
  wire _111_;
  wire _112_;
  wire _113_;
  wire _114_;
  wire _115_;
  wire _116_;
  wire _117_;
  wire _118_;
  wire _119_;
  wire _120_;
  wire _121_;
  wire _122_;
  wire _123_;
  wire _124_;
  wire _125_;
  wire _126_;
  wire _127_;
  wire _128_;
  wire _129_;
  wire _130_;
  wire _131_;
  wire _132_;
  wire _133_;
  wire _134_;
  wire _135_;
  wire _136_;
  wire _137_;
  wire [31:0] _138_;
  wire [31:0] _139_;
  wire [31:0] _140_;
  wire [31:0] _141_;
  wire [31:0] _142_;
  wire [31:0] _143_;
  wire [31:0] _144_;
  wire [31:0] _145_;
  wire [31:0] _146_;
  wire [31:0] _147_;
  wire [31:0] _148_;
  wire [31:0] _149_;
  wire [31:0] _150_;
  wire [31:0] _151_;
  wire [31:0] _152_;
  wire [31:0] _153_;
  wire [31:0] _154_;
  wire [31:0] _155_;
  wire [31:0] _156_;
  wire [31:0] _157_;
  wire [31:0] _158_;
  wire [31:0] _159_;
  wire [31:0] _160_;
  wire [31:0] _161_;
  wire [31:0] _162_;
  wire [31:0] _163_;
  wire [31:0] _164_;
  wire [31:0] _165_;
  wire [31:0] _166_;
  wire [31:0] _167_;
  wire [31:0] _168_;
  wire [31:0] _169_;
  wire [31:0] _170_;
  wire [31:0] _171_;
  wire [31:0] _172_;
  wire [31:0] _173_;
  wire [31:0] _174_;
  wire [31:0] _175_;
  wire [31:0] _176_;
  wire [31:0] _177_;
  wire [31:0] _178_;
  wire [31:0] _179_;
  wire [31:0] _180_;
  wire [31:0] _181_;
  wire [31:0] _182_;
  wire [31:0] _183_;
  wire [31:0] _184_;
  wire [31:0] _185_;
  wire [31:0] _186_;
  wire [31:0] _187_;
  wire [31:0] _188_;
  wire [31:0] _189_;
  wire [31:0] _190_;
  wire [31:0] _191_;
  wire [31:0] _192_;
  wire [31:0] _193_;
  wire [31:0] _194_;
  wire [31:0] _195_;
  wire [31:0] _196_;
  wire [31:0] _197_;
  wire [31:0] _198_;
  wire [31:0] _199_;
  wire [31:0] _200_;
  wire [31:0] _201_;
  wire [31:0] _202_;
  wire [31:0] _203_;
  wire [31:0] _204_;
  wire [31:0] _205_;
  wire [31:0] _206_;
  wire [31:0] _207_;
  wire [31:0] _208_;
  wire [31:0] _209_;
  wire [31:0] _210_;
  wire [31:0] _211_;
  wire [31:0] _212_;
  wire [31:0] _213_;
  wire [31:0] _214_;
  wire [31:0] _215_;
  wire [31:0] _216_;
  wire [31:0] _217_;
  wire [31:0] _218_;
  wire [31:0] _219_;
  wire [31:0] _220_;
  wire [31:0] _221_;
  wire [31:0] _222_;
  wire [31:0] _223_;
  wire [31:0] _224_;
  wire [31:0] _225_;
  wire [31:0] _226_;
  wire [31:0] _227_;
  wire [31:0] _228_;
  wire [31:0] _229_;
  wire [31:0] _230_;
  wire [31:0] _231_;
  wire [31:0] _232_;
  wire [31:0] _233_;
  input clk;
  wire clk;
  output [31:0] p1;
  wire [31:0] p1;
  output [31:0] p2;
  wire [31:0] p2;
  input [4:0] rd;
  wire [4:0] rd;
  (* ramstyle = "M9K" *)
  wire [1023:0] rdata;
  input [4:0] rs1;
  wire [4:0] rs1;
  input [4:0] rs2;
  wire [4:0] rs2;
  input rst;
  wire rst;
  input setone;
  wire setone;
  input setzero;
  wire setzero;
  input [31:0] writedata;
  wire [31:0] writedata;
  input writeregfile;
  wire writeregfile;
  assign rdata = rst ? 1024'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000 : _000_;
  assign _001_ = _041_[0] ? rdata[63:32] : rdata[31:0];
  assign _002_ = _041_[0] ? rdata[191:160] : rdata[159:128];
  assign _003_ = _041_[0] ? rdata[319:288] : rdata[287:256];
  assign _004_ = _041_[0] ? rdata[447:416] : rdata[415:384];
  assign _005_ = _041_[0] ? rdata[575:544] : rdata[543:512];
  assign _006_ = _041_[0] ? rdata[703:672] : rdata[671:640];
  assign _007_ = _041_[0] ? rdata[831:800] : rdata[799:768];
  assign _008_ = _041_[0] ? rdata[959:928] : rdata[927:896];
  assign _009_ = _041_[2] ? _052_ : _051_;
  assign _010_ = _041_[2] ? _056_ : _055_;
  assign _011_ = _043_[0] ? rdata[63:32] : rdata[31:0];
  assign _012_ = _043_[0] ? rdata[191:160] : rdata[159:128];
  assign _013_ = _043_[0] ? rdata[319:288] : rdata[287:256];
  assign _014_ = _043_[0] ? rdata[447:416] : rdata[415:384];
  assign _015_ = _043_[0] ? rdata[575:544] : rdata[543:512];
  assign _016_ = _043_[0] ? rdata[703:672] : rdata[671:640];
  assign _017_ = _043_[0] ? rdata[831:800] : rdata[799:768];
  assign _018_ = _043_[0] ? rdata[959:928] : rdata[927:896];
  assign _019_ = _043_[2] ? _063_ : _062_;
  assign _020_ = _043_[2] ? _067_ : _066_;
  assign _021_ = _041_[0] ? rdata[127:96] : rdata[95:64];
  assign _022_ = _041_[0] ? rdata[255:224] : rdata[223:192];
  assign _023_ = _041_[0] ? rdata[383:352] : rdata[351:320];
  assign _024_ = _041_[0] ? rdata[511:480] : rdata[479:448];
  assign _025_ = _041_[0] ? rdata[639:608] : rdata[607:576];
  assign _026_ = _041_[0] ? rdata[767:736] : rdata[735:704];
  assign _027_ = _041_[0] ? rdata[895:864] : rdata[863:832];
  assign _028_ = _041_[0] ? rdata[1023:992] : rdata[991:960];
  assign _029_ = _041_[2] ? _054_ : _053_;
  assign _030_ = _041_[2] ? _058_ : _057_;
  assign _031_ = _043_[0] ? rdata[127:96] : rdata[95:64];
  assign _032_ = _043_[0] ? rdata[255:224] : rdata[223:192];
  assign _033_ = _043_[0] ? rdata[383:352] : rdata[351:320];
  assign _034_ = _043_[0] ? rdata[511:480] : rdata[479:448];
  assign _035_ = _043_[0] ? rdata[639:608] : rdata[607:576];
  assign _036_ = _043_[0] ? rdata[767:736] : rdata[735:704];
  assign _037_ = _043_[0] ? rdata[895:864] : rdata[863:832];
  assign _038_ = _043_[0] ? rdata[1023:992] : rdata[991:960];
  assign _039_ = _043_[2] ? _065_ : _064_;
  assign _040_ = _043_[2] ? _069_ : _068_;
  assign _051_ = _041_[1] ? _021_ : _001_;
  assign _052_ = _041_[1] ? _022_ : _002_;
  assign _053_ = _041_[1] ? _023_ : _003_;
  assign _054_ = _041_[1] ? _024_ : _004_;
  assign _055_ = _041_[1] ? _025_ : _005_;
  assign _056_ = _041_[1] ? _026_ : _006_;
  assign _057_ = _041_[1] ? _027_ : _007_;
  assign _058_ = _041_[1] ? _028_ : _008_;
  assign _059_ = _041_[3] ? _029_ : _009_;
  assign _060_ = _041_[3] ? _030_ : _010_;
  assign _062_ = _043_[1] ? _031_ : _011_;
  assign _063_ = _043_[1] ? _032_ : _012_;
  assign _064_ = _043_[1] ? _033_ : _013_;
  assign _065_ = _043_[1] ? _034_ : _014_;
  assign _066_ = _043_[1] ? _035_ : _015_;
  assign _067_ = _043_[1] ? _036_ : _016_;
  assign _068_ = _043_[1] ? _037_ : _017_;
  assign _069_ = _043_[1] ? _038_ : _018_;
  assign _070_ = _043_[3] ? _039_ : _019_;
  assign _071_ = _043_[3] ? _040_ : _020_;
  assign _041_ = 5'h1f - rs1;
  assign _042_ = | rs1;
  assign p1 = _042_ ? _061_ : 32'd0;
  assign _043_ = 5'h1f - rs2;
  assign _044_ = | rs2;
  assign p2 = _044_ ? _072_ : 32'd0;
  assign _045_ = | rd;
  assign _046_ = 5'h1f - rd;
  assign _047_ = writeregfile ? { _233_, _232_, _231_, _230_, _229_, _228_, _227_, _226_, _225_, _224_, _223_, _222_, _221_, _220_, _219_, _218_, _217_, _216_, _215_, _214_, _213_, _212_, _211_, _210_, _209_, _208_, _207_, _206_, _205_, _204_, _203_, _202_ } : rdata;
  assign _048_ = setzero ? { _201_, _200_, _199_, _198_, _197_, _196_, _195_, _194_, _193_, _192_, _191_, _190_, _189_, _188_, _187_, _186_, _185_, _184_, _183_, _182_, _181_, _180_, _179_, _178_, _177_, _176_, _175_, _174_, _173_, _172_, _171_, _170_ } : _047_;
  assign _049_ = setone ? { _169_, _168_, _167_, _166_, _165_, _164_, _163_, _162_, _161_, _160_, _159_, _158_, _157_, _156_, _155_, _154_, _153_, _152_, _151_, _150_, _149_, _148_, _147_, _146_, _145_, _144_, _143_, _142_, _141_, _140_, _139_, _138_ } : _048_;
  assign _050_ = _045_ ? _049_ : rdata;
  always @(posedge clk)
    if (rst) _000_ <= 1024'h0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000;
    else _000_ <= _050_;
  assign _061_ = _041_[4] ? _060_ : _059_;
  assign _072_ = _043_[4] ? _071_ : _070_;
  assign _138_ = _106_ ? 32'd1 : rdata[31:0];
  assign _139_ = _107_ ? 32'd1 : rdata[63:32];
  assign _140_ = _108_ ? 32'd1 : rdata[95:64];
  assign _141_ = _109_ ? 32'd1 : rdata[127:96];
  assign _142_ = _110_ ? 32'd1 : rdata[159:128];
  assign _143_ = _111_ ? 32'd1 : rdata[191:160];
  assign _144_ = _112_ ? 32'd1 : rdata[223:192];
  assign _145_ = _113_ ? 32'd1 : rdata[255:224];
  assign _146_ = _114_ ? 32'd1 : rdata[287:256];
  assign _147_ = _115_ ? 32'd1 : rdata[319:288];
  assign _148_ = _116_ ? 32'd1 : rdata[351:320];
  assign _149_ = _117_ ? 32'd1 : rdata[383:352];
  assign _150_ = _118_ ? 32'd1 : rdata[415:384];
  assign _151_ = _119_ ? 32'd1 : rdata[447:416];
  assign _152_ = _120_ ? 32'd1 : rdata[479:448];
  assign _153_ = _121_ ? 32'd1 : rdata[511:480];
  assign _154_ = _122_ ? 32'd1 : rdata[543:512];
  assign _155_ = _123_ ? 32'd1 : rdata[575:544];
  assign _156_ = _124_ ? 32'd1 : rdata[607:576];
  assign _157_ = _125_ ? 32'd1 : rdata[639:608];
  assign _158_ = _126_ ? 32'd1 : rdata[671:640];
  assign _159_ = _127_ ? 32'd1 : rdata[703:672];
  assign _160_ = _128_ ? 32'd1 : rdata[735:704];
  assign _161_ = _129_ ? 32'd1 : rdata[767:736];
  assign _162_ = _130_ ? 32'd1 : rdata[799:768];
  assign _163_ = _131_ ? 32'd1 : rdata[831:800];
  assign _164_ = _132_ ? 32'd1 : rdata[863:832];
  assign _165_ = _133_ ? 32'd1 : rdata[895:864];
  assign _166_ = _134_ ? 32'd1 : rdata[927:896];
  assign _167_ = _135_ ? 32'd1 : rdata[959:928];
  assign _168_ = _136_ ? 32'd1 : rdata[991:960];
  assign _169_ = _137_ ? 32'd1 : rdata[1023:992];
  assign _106_ = _089_ & _105_;
  assign _107_ = _089_ & _046_[0];
  assign _108_ = _090_ & _105_;
  assign _109_ = _090_ & _046_[0];
  assign _110_ = _091_ & _105_;
  assign _111_ = _091_ & _046_[0];
  assign _112_ = _092_ & _105_;
  assign _113_ = _092_ & _046_[0];
  assign _114_ = _093_ & _105_;
  assign _115_ = _093_ & _046_[0];
  assign _116_ = _094_ & _105_;
  assign _117_ = _094_ & _046_[0];
  assign _118_ = _095_ & _105_;
  assign _119_ = _095_ & _046_[0];
  assign _120_ = _096_ & _105_;
  assign _121_ = _096_ & _046_[0];
  assign _122_ = _097_ & _105_;
  assign _123_ = _097_ & _046_[0];
  assign _124_ = _098_ & _105_;
  assign _125_ = _098_ & _046_[0];
  assign _126_ = _099_ & _105_;
  assign _127_ = _099_ & _046_[0];
  assign _128_ = _100_ & _105_;
  assign _129_ = _100_ & _046_[0];
  assign _130_ = _101_ & _105_;
  assign _131_ = _101_ & _046_[0];
  assign _132_ = _102_ & _105_;
  assign _133_ = _102_ & _046_[0];
  assign _134_ = _103_ & _105_;
  assign _135_ = _103_ & _046_[0];
  assign _136_ = _104_ & _105_;
  assign _137_ = _104_ & _046_[0];
  assign _170_ = _106_ ? 32'd0 : rdata[31:0];
  assign _171_ = _107_ ? 32'd0 : rdata[63:32];
  assign _172_ = _108_ ? 32'd0 : rdata[95:64];
  assign _173_ = _109_ ? 32'd0 : rdata[127:96];
  assign _174_ = _110_ ? 32'd0 : rdata[159:128];
  assign _175_ = _111_ ? 32'd0 : rdata[191:160];
  assign _176_ = _112_ ? 32'd0 : rdata[223:192];
  assign _177_ = _113_ ? 32'd0 : rdata[255:224];
  assign _178_ = _114_ ? 32'd0 : rdata[287:256];
  assign _179_ = _115_ ? 32'd0 : rdata[319:288];
  assign _180_ = _116_ ? 32'd0 : rdata[351:320];
  assign _181_ = _117_ ? 32'd0 : rdata[383:352];
  assign _182_ = _118_ ? 32'd0 : rdata[415:384];
  assign _183_ = _119_ ? 32'd0 : rdata[447:416];
  assign _184_ = _120_ ? 32'd0 : rdata[479:448];
  assign _185_ = _121_ ? 32'd0 : rdata[511:480];
  assign _186_ = _122_ ? 32'd0 : rdata[543:512];
  assign _187_ = _123_ ? 32'd0 : rdata[575:544];
  assign _188_ = _124_ ? 32'd0 : rdata[607:576];
  assign _189_ = _125_ ? 32'd0 : rdata[639:608];
  assign _190_ = _126_ ? 32'd0 : rdata[671:640];
  assign _191_ = _127_ ? 32'd0 : rdata[703:672];
  assign _192_ = _128_ ? 32'd0 : rdata[735:704];
  assign _193_ = _129_ ? 32'd0 : rdata[767:736];
  assign _194_ = _130_ ? 32'd0 : rdata[799:768];
  assign _195_ = _131_ ? 32'd0 : rdata[831:800];
  assign _196_ = _132_ ? 32'd0 : rdata[863:832];
  assign _197_ = _133_ ? 32'd0 : rdata[895:864];
  assign _198_ = _134_ ? 32'd0 : rdata[927:896];
  assign _199_ = _135_ ? 32'd0 : rdata[959:928];
  assign _200_ = _136_ ? 32'd0 : rdata[991:960];
  assign _201_ = _137_ ? 32'd0 : rdata[1023:992];
  assign _073_ = ~ _046_[4];
  assign _074_ = ~ _046_[3];
  assign _075_ = _073_ & _074_;
  assign _076_ = _073_ & _046_[3];
  assign _077_ = _046_[4] & _074_;
  assign _078_ = _046_[4] & _046_[3];
  assign _079_ = ~ _046_[2];
  assign _080_ = _075_ & _079_;
  assign _081_ = _075_ & _046_[2];
  assign _082_ = _076_ & _079_;
  assign _083_ = _076_ & _046_[2];
  assign _084_ = _077_ & _079_;
  assign _085_ = _077_ & _046_[2];
  assign _086_ = _078_ & _079_;
  assign _087_ = _078_ & _046_[2];
  assign _088_ = ~ _046_[1];
  assign _089_ = _080_ & _088_;
  assign _090_ = _080_ & _046_[1];
  assign _091_ = _081_ & _088_;
  assign _092_ = _081_ & _046_[1];
  assign _093_ = _082_ & _088_;
  assign _094_ = _082_ & _046_[1];
  assign _095_ = _083_ & _088_;
  assign _096_ = _083_ & _046_[1];
  assign _097_ = _084_ & _088_;
  assign _098_ = _084_ & _046_[1];
  assign _099_ = _085_ & _088_;
  assign _100_ = _085_ & _046_[1];
  assign _101_ = _086_ & _088_;
  assign _102_ = _086_ & _046_[1];
  assign _103_ = _087_ & _088_;
  assign _104_ = _087_ & _046_[1];
  assign _105_ = ~ _046_[0];
  assign _202_ = _106_ ? writedata : rdata[31:0];
  assign _203_ = _107_ ? writedata : rdata[63:32];
  assign _204_ = _108_ ? writedata : rdata[95:64];
  assign _205_ = _109_ ? writedata : rdata[127:96];
  assign _206_ = _110_ ? writedata : rdata[159:128];
  assign _207_ = _111_ ? writedata : rdata[191:160];
  assign _208_ = _112_ ? writedata : rdata[223:192];
  assign _209_ = _113_ ? writedata : rdata[255:224];
  assign _210_ = _114_ ? writedata : rdata[287:256];
  assign _211_ = _115_ ? writedata : rdata[319:288];
  assign _212_ = _116_ ? writedata : rdata[351:320];
  assign _213_ = _117_ ? writedata : rdata[383:352];
  assign _214_ = _118_ ? writedata : rdata[415:384];
  assign _215_ = _119_ ? writedata : rdata[447:416];
  assign _216_ = _120_ ? writedata : rdata[479:448];
  assign _217_ = _121_ ? writedata : rdata[511:480];
  assign _218_ = _122_ ? writedata : rdata[543:512];
  assign _219_ = _123_ ? writedata : rdata[575:544];
  assign _220_ = _124_ ? writedata : rdata[607:576];
  assign _221_ = _125_ ? writedata : rdata[639:608];
  assign _222_ = _126_ ? writedata : rdata[671:640];
  assign _223_ = _127_ ? writedata : rdata[703:672];
  assign _224_ = _128_ ? writedata : rdata[735:704];
  assign _225_ = _129_ ? writedata : rdata[767:736];
  assign _226_ = _130_ ? writedata : rdata[799:768];
  assign _227_ = _131_ ? writedata : rdata[831:800];
  assign _228_ = _132_ ? writedata : rdata[863:832];
  assign _229_ = _133_ ? writedata : rdata[895:864];
  assign _230_ = _134_ ? writedata : rdata[927:896];
  assign _231_ = _135_ ? writedata : rdata[959:928];
  assign _232_ = _136_ ? writedata : rdata[991:960];
  assign _233_ = _137_ ? writedata : rdata[1023:992];
endmodule

module aftab_shift_register_32(clk, rst, inreg, shiftr, shiftl, load, zero, serin, serout, outreg);
  reg _00_;
  reg [31:0] _01_;
  wire [31:0] _02_;
  wire _03_;
  wire [31:0] _04_;
  wire _05_;
  wire [31:0] _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire [31:0] \6866.outreg_t ;
  wire \6866.seroutp ;
  input clk;
  wire clk;
  input [31:0] inreg;
  wire [31:0] inreg;
  input load;
  wire load;
  output [31:0] outreg;
  wire [31:0] outreg;
  input rst;
  wire rst;
  input serin;
  wire serin;
  output serout;
  wire serout;
  input shiftl;
  wire shiftl;
  input shiftr;
  wire shiftr;
  input zero;
  wire zero;
  assign \6866.seroutp  = rst ? 1'h0 : _00_;
  assign \6866.outreg_t  = rst ? 32'd0 : _01_;
  always @(posedge clk)
    if (_09_) _01_ <= 32'd0;
    else _01_ <= _06_;
  assign _09_ = | { zero, rst };
  assign _02_ = shiftr ? { serin, \6866.outreg_t [31:1] } : \6866.outreg_t ;
  assign _03_ = shiftr ? \6866.outreg_t [0] : \6866.seroutp ;
  assign _04_ = shiftl ? { \6866.outreg_t [30:0], serin } : _02_;
  assign _05_ = shiftl ? \6866.outreg_t [31] : _03_;
  assign _06_ = load ? inreg : _04_;
  assign _07_ = load ? \6866.seroutp  : _05_;
  assign _08_ = zero ? \6866.seroutp  : _07_;
  always @(posedge clk)
    if (rst) _00_ <= 1'h0;
    else _00_ <= _08_;
  assign outreg = \6866.outreg_t ;
  assign serout = \6866.seroutp ;
endmodule

module aftab_shift_register_33(clk, rst, inreg, shiftr, shiftl, load, zero, serin, serout, outreg);
  reg _00_;
  reg [32:0] _01_;
  wire [32:0] _02_;
  wire _03_;
  wire [32:0] _04_;
  wire _05_;
  wire [32:0] _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire [32:0] \6833.outreg_t ;
  wire \6833.seroutp ;
  input clk;
  wire clk;
  input [32:0] inreg;
  wire [32:0] inreg;
  input load;
  wire load;
  output [32:0] outreg;
  wire [32:0] outreg;
  input rst;
  wire rst;
  input serin;
  wire serin;
  output serout;
  wire serout;
  input shiftl;
  wire shiftl;
  input shiftr;
  wire shiftr;
  input zero;
  wire zero;
  assign \6833.seroutp  = rst ? 1'h0 : _00_;
  assign \6833.outreg_t  = rst ? 33'h000000000 : _01_;
  always @(posedge clk)
    if (_09_) _01_ <= 33'h000000000;
    else _01_ <= _06_;
  assign _09_ = | { zero, rst };
  assign _02_ = shiftr ? { serin, \6833.outreg_t [32:1] } : \6833.outreg_t ;
  assign _03_ = shiftr ? \6833.outreg_t [0] : \6833.seroutp ;
  assign _04_ = shiftl ? { \6833.outreg_t [31:0], serin } : _02_;
  assign _05_ = shiftl ? \6833.outreg_t [32] : _03_;
  assign _06_ = load ? inreg : _04_;
  assign _07_ = load ? \6833.seroutp  : _05_;
  assign _08_ = zero ? \6833.seroutp  : _07_;
  always @(posedge clk)
    if (rst) _00_ <= 1'h0;
    else _00_ <= _08_;
  assign outreg = \6833.outreg_t ;
  assign serout = \6833.seroutp ;
endmodule

module aftab_shift_register_34(clk, rst, inreg, shiftr, shiftl, load, zero, serin, serout, outreg);
  reg _00_;
  reg [33:0] _01_;
  wire [33:0] _02_;
  wire _03_;
  wire [33:0] _04_;
  wire _05_;
  wire [33:0] _06_;
  wire _07_;
  wire _08_;
  wire _09_;
  wire [33:0] \6594.outreg_t ;
  wire \6594.seroutp ;
  input clk;
  wire clk;
  input [33:0] inreg;
  wire [33:0] inreg;
  input load;
  wire load;
  output [33:0] outreg;
  wire [33:0] outreg;
  input rst;
  wire rst;
  input serin;
  wire serin;
  output serout;
  wire serout;
  input shiftl;
  wire shiftl;
  input shiftr;
  wire shiftr;
  input zero;
  wire zero;
  assign \6594.seroutp  = rst ? 1'h0 : _00_;
  assign \6594.outreg_t  = rst ? 34'h000000000 : _01_;
  always @(posedge clk)
    if (_09_) _01_ <= 34'h000000000;
    else _01_ <= _06_;
  assign _09_ = | { zero, rst };
  assign _02_ = shiftr ? { serin, \6594.outreg_t [33:1] } : \6594.outreg_t ;
  assign _03_ = shiftr ? \6594.outreg_t [0] : \6594.seroutp ;
  assign _04_ = shiftl ? { \6594.outreg_t [32:0], serin } : _02_;
  assign _05_ = shiftl ? \6594.outreg_t [33] : _03_;
  assign _06_ = load ? inreg : _04_;
  assign _07_ = load ? \6594.seroutp  : _05_;
  assign _08_ = zero ? \6594.seroutp  : _07_;
  always @(posedge clk)
    if (rst) _00_ <= 1'h0;
    else _00_ <= _08_;
  assign outreg = \6594.outreg_t ;
  assign serout = \6594.seroutp ;
endmodule

module aftab_su_divider_32(clk, rst, sync_rst, startsdiv, signedunsignedbar, dividend, divisor, donesdiv, dividedbyzeroflag, qout, remout);
  wire _00_;
  wire _01_;
  wire _02_;
  wire _03_;
  wire [31:0] _04_;
  wire [31:0] _05_;
  wire [31:0] _06_;
  wire [31:0] _07_;
  wire [31:0] _08_;
  wire [31:0] _09_;
  wire [31:0] _10_;
  wire [31:0] _11_;
  reg [1:0] _12_;
  wire [1:0] _13_;
  wire _14_;
  wire [1:0] _15_;
  wire _16_;
  wire _17_;
  wire _18_;
  wire _19_;
  wire _20_;
  wire [5:0] _21_;
  wire _22_;
  wire _23_;
  wire [5:0] _24_;
  wire [5:0] _25_;
  (* unused_bits = "0 5" *)
  wire [5:0] _26_;
  wire _27_;
  wire [31:0] _28_;
  reg [32:0] _29_;
  (* unused_bits = "32" *)
  wire [32:0] _30_;
  reg _31_;
  reg [31:0] _32_;
  wire [31:0] _33_;
  wire _34_;
  wire [31:0] _35_;
  wire _36_;
  reg [32:0] _37_;
  wire [32:0] _38_;
  wire [32:0] _39_;
  input clk;
  wire clk;
  wire [31:0] ddin;
  output dividedbyzeroflag;
  wire dividedbyzeroflag;
  input [31:0] dividend;
  wire [31:0] dividend;
  input [31:0] divisor;
  wire [31:0] divisor;
  wire divisorzero;
  output donesdiv;
  wire donesdiv;
  wire [31:0] drin;
  wire endd;
  wire endr;
  wire enq;
  wire enr;
  output [31:0] qout;
  wire [31:0] qout;
  wire [31:0] qp;
  output [31:0] remout;
  wire [31:0] remout;
  wire [32:0] remp;
  input rst;
  wire rst;
  wire safestart;
  input signedunsignedbar;
  wire signedunsignedbar;
  input startsdiv;
  wire startsdiv;
  input sync_rst;
  wire sync_rst;
  (* hdlname = "tcldividend ain" *)
  wire [31:0] \tcldividend.ain ;
  (* hdlname = "tcldividend ainp" *)
  wire [31:0] \tcldividend.ainp ;
  (* hdlname = "tcldividend aout" *)
  wire [31:0] \tcldividend.aout ;
  (* hdlname = "tcldividend en" *)
  wire \tcldividend.en ;
  (* hdlname = "tcldivisor ain" *)
  wire [31:0] \tcldivisor.ain ;
  (* hdlname = "tcldivisor ainp" *)
  wire [31:0] \tcldivisor.ainp ;
  (* hdlname = "tcldivisor aout" *)
  wire [31:0] \tcldivisor.aout ;
  (* hdlname = "tcldivisor en" *)
  wire \tcldivisor.en ;
  (* hdlname = "tclq ain" *)
  wire [31:0] \tclq.ain ;
  (* hdlname = "tclq ainp" *)
  wire [31:0] \tclq.ainp ;
  (* hdlname = "tclq aout" *)
  wire [31:0] \tclq.aout ;
  (* hdlname = "tclq en" *)
  wire \tclq.en ;
  (* hdlname = "tclrem ain" *)
  wire [31:0] \tclrem.ain ;
  (* hdlname = "tclrem ainp" *)
  wire [31:0] \tclrem.ainp ;
  (* hdlname = "tclrem aout" *)
  wire [31:0] \tclrem.aout ;
  (* hdlname = "tclrem en" *)
  wire \tclrem.en ;
  (* hdlname = "unsigneddiv clk" *)
  wire \unsigneddiv.clk ;
  (* hdlname = "unsigneddiv controllerdiv clk" *)
  wire \unsigneddiv.controllerdiv.clk ;
  (* hdlname = "unsigneddiv controllerdiv cocnt" *)
  wire \unsigneddiv.controllerdiv.cocnt ;
  (* hdlname = "unsigneddiv controllerdiv counter clk" *)
  wire \unsigneddiv.controllerdiv.counter.clk ;
  (* hdlname = "unsigneddiv controllerdiv counter cocnt" *)
  wire \unsigneddiv.controllerdiv.counter.cocnt ;
  (* hdlname = "unsigneddiv controllerdiv counter cocntp" *)
  wire \unsigneddiv.controllerdiv.counter.cocntp ;
  (* hdlname = "unsigneddiv controllerdiv counter inccnt" *)
  wire \unsigneddiv.controllerdiv.counter.inccnt ;
  (* hdlname = "unsigneddiv controllerdiv counter initcnt" *)
  wire \unsigneddiv.controllerdiv.counter.initcnt ;
  (* hdlname = "unsigneddiv controllerdiv counter initvalue" *)
  wire [5:0] \unsigneddiv.controllerdiv.counter.initvalue ;
  (* hdlname = "unsigneddiv controllerdiv counter outcnt" *)
  wire [5:0] \unsigneddiv.controllerdiv.counter.outcnt ;
  (* hdlname = "unsigneddiv controllerdiv counter rst" *)
  wire \unsigneddiv.controllerdiv.counter.rst ;
  (* hdlname = "unsigneddiv controllerdiv counter temp" *)
  wire [5:0] \unsigneddiv.controllerdiv.counter.temp ;
  (* hdlname = "unsigneddiv controllerdiv counter zerocnt" *)
  wire \unsigneddiv.controllerdiv.counter.zerocnt ;
  (* hdlname = "unsigneddiv controllerdiv donediv" *)
  wire \unsigneddiv.controllerdiv.donediv ;
  (* hdlname = "unsigneddiv controllerdiv inccnt" *)
  wire \unsigneddiv.controllerdiv.inccnt ;
  (* hdlname = "unsigneddiv controllerdiv initcnt" *)
  wire \unsigneddiv.controllerdiv.initcnt ;
  (* hdlname = "unsigneddiv controllerdiv ldregm" *)
  wire \unsigneddiv.controllerdiv.ldregm ;
  (* hdlname = "unsigneddiv controllerdiv ldregq" *)
  wire \unsigneddiv.controllerdiv.ldregq ;
  (* hdlname = "unsigneddiv controllerdiv ldregr" *)
  wire \unsigneddiv.controllerdiv.ldregr ;
  (* hdlname = "unsigneddiv controllerdiv nstate" *)
  wire [1:0] \unsigneddiv.controllerdiv.nstate ;
  (* hdlname = "unsigneddiv controllerdiv pstate" *)
  wire [1:0] \unsigneddiv.controllerdiv.pstate ;
  (* hdlname = "unsigneddiv controllerdiv qq0" *)
  wire \unsigneddiv.controllerdiv.qq0 ;
  (* hdlname = "unsigneddiv controllerdiv r33" *)
  wire \unsigneddiv.controllerdiv.r33 ;
  (* hdlname = "unsigneddiv controllerdiv rst" *)
  wire \unsigneddiv.controllerdiv.rst ;
  (* hdlname = "unsigneddiv controllerdiv seldividend" *)
  wire \unsigneddiv.controllerdiv.seldividend ;
  (* hdlname = "unsigneddiv controllerdiv selline1" *)
  wire \unsigneddiv.controllerdiv.selline1 ;
  (* hdlname = "unsigneddiv controllerdiv shlregq" *)
  wire \unsigneddiv.controllerdiv.shlregq ;
  (* hdlname = "unsigneddiv controllerdiv shlregr" *)
  wire \unsigneddiv.controllerdiv.shlregr ;
  (* hdlname = "unsigneddiv controllerdiv shrregq" *)
  wire \unsigneddiv.controllerdiv.shrregq ;
  (* hdlname = "unsigneddiv controllerdiv shrregr" *)
  wire \unsigneddiv.controllerdiv.shrregr ;
  (* hdlname = "unsigneddiv controllerdiv startdiv" *)
  wire \unsigneddiv.controllerdiv.startdiv ;
  (* hdlname = "unsigneddiv controllerdiv sync_rst" *)
  wire \unsigneddiv.controllerdiv.sync_rst ;
  (* hdlname = "unsigneddiv controllerdiv zerocnt" *)
  wire \unsigneddiv.controllerdiv.zerocnt ;
  (* hdlname = "unsigneddiv controllerdiv zeroregm" *)
  wire \unsigneddiv.controllerdiv.zeroregm ;
  (* hdlname = "unsigneddiv controllerdiv zeroregq" *)
  wire \unsigneddiv.controllerdiv.zeroregq ;
  (* hdlname = "unsigneddiv controllerdiv zeroregr" *)
  wire \unsigneddiv.controllerdiv.zeroregr ;
  (* hdlname = "unsigneddiv datapathdiv addresult" *)
  wire [32:0] \unsigneddiv.datapathdiv.addresult ;
  (* hdlname = "unsigneddiv datapathdiv clk" *)
  wire \unsigneddiv.datapathdiv.clk ;
  (* hdlname = "unsigneddiv datapathdiv dividend" *)
  wire [31:0] \unsigneddiv.datapathdiv.dividend ;
  (* hdlname = "unsigneddiv datapathdiv divisor" *)
  wire [31:0] \unsigneddiv.datapathdiv.divisor ;
  (* hdlname = "unsigneddiv datapathdiv divisorp" *)
  wire [32:0] \unsigneddiv.datapathdiv.divisorp ;
  (* hdlname = "unsigneddiv datapathdiv ldregm" *)
  wire \unsigneddiv.datapathdiv.ldregm ;
  (* hdlname = "unsigneddiv datapathdiv ldregq" *)
  wire \unsigneddiv.datapathdiv.ldregq ;
  (* hdlname = "unsigneddiv datapathdiv ldregr" *)
  wire \unsigneddiv.datapathdiv.ldregr ;
  (* hdlname = "unsigneddiv datapathdiv leftbitoutq" *)
  wire \unsigneddiv.datapathdiv.leftbitoutq ;
  (* hdlname = "unsigneddiv datapathdiv line1" *)
  wire [31:0] \unsigneddiv.datapathdiv.line1 ;
  (* hdlname = "unsigneddiv datapathdiv m" *)
  wire [32:0] \unsigneddiv.datapathdiv.m ;
  (* hdlname = "unsigneddiv datapathdiv mux33b a" *)
  wire [31:0] \unsigneddiv.datapathdiv.mux33b.a ;
  (* hdlname = "unsigneddiv datapathdiv mux33b b" *)
  wire [31:0] \unsigneddiv.datapathdiv.mux33b.b ;
  (* hdlname = "unsigneddiv datapathdiv mux33b s0" *)
  wire \unsigneddiv.datapathdiv.mux33b.s0 ;
  (* hdlname = "unsigneddiv datapathdiv mux33b s1" *)
  wire \unsigneddiv.datapathdiv.mux33b.s1 ;
  (* hdlname = "unsigneddiv datapathdiv mux33b w" *)
  wire [31:0] \unsigneddiv.datapathdiv.mux33b.w ;
  (* hdlname = "unsigneddiv datapathdiv mux34b a" *)
  wire [32:0] \unsigneddiv.datapathdiv.mux34b.a ;
  (* hdlname = "unsigneddiv datapathdiv mux34b b" *)
  wire [32:0] \unsigneddiv.datapathdiv.mux34b.b ;
  (* hdlname = "unsigneddiv datapathdiv mux34b s0" *)
  wire \unsigneddiv.datapathdiv.mux34b.s0 ;
  (* hdlname = "unsigneddiv datapathdiv mux34b s1" *)
  wire \unsigneddiv.datapathdiv.mux34b.s1 ;
  (* hdlname = "unsigneddiv datapathdiv mux34b w" *)
  wire [32:0] \unsigneddiv.datapathdiv.mux34b.w ;
  (* hdlname = "unsigneddiv datapathdiv outmux1" *)
  wire [31:0] \unsigneddiv.datapathdiv.outmux1 ;
  (* hdlname = "unsigneddiv datapathdiv q" *)
  wire [31:0] \unsigneddiv.datapathdiv.q ;
  (* hdlname = "unsigneddiv datapathdiv qprev" *)
  wire [31:0] \unsigneddiv.datapathdiv.qprev ;
  (* hdlname = "unsigneddiv datapathdiv qq0" *)
  wire \unsigneddiv.datapathdiv.qq0 ;
  (* hdlname = "unsigneddiv datapathdiv r33" *)
  wire \unsigneddiv.datapathdiv.r33 ;
  (* hdlname = "unsigneddiv datapathdiv regm clk" *)
  wire \unsigneddiv.datapathdiv.regm.clk ;
  (* hdlname = "unsigneddiv datapathdiv regm inreg" *)
  wire [32:0] \unsigneddiv.datapathdiv.regm.inreg ;
  (* hdlname = "unsigneddiv datapathdiv regm load" *)
  wire \unsigneddiv.datapathdiv.regm.load ;
  (* hdlname = "unsigneddiv datapathdiv regm outreg" *)
  wire [32:0] \unsigneddiv.datapathdiv.regm.outreg ;
  (* hdlname = "unsigneddiv datapathdiv regm rst" *)
  wire \unsigneddiv.datapathdiv.regm.rst ;
  (* hdlname = "unsigneddiv datapathdiv regm zero" *)
  wire \unsigneddiv.datapathdiv.regm.zero ;
  (* hdlname = "unsigneddiv datapathdiv remainder" *)
  wire [32:0] \unsigneddiv.datapathdiv.remainder ;
  (* hdlname = "unsigneddiv datapathdiv rprev" *)
  wire [32:0] \unsigneddiv.datapathdiv.rprev ;
  (* hdlname = "unsigneddiv datapathdiv rst" *)
  wire \unsigneddiv.datapathdiv.rst ;
  (* hdlname = "unsigneddiv datapathdiv seldividend" *)
  wire \unsigneddiv.datapathdiv.seldividend ;
  (* hdlname = "unsigneddiv datapathdiv selline1" *)
  wire \unsigneddiv.datapathdiv.selline1 ;
  (* hdlname = "unsigneddiv datapathdiv shlregq" *)
  wire \unsigneddiv.datapathdiv.shlregq ;
  (* hdlname = "unsigneddiv datapathdiv shlregr" *)
  wire \unsigneddiv.datapathdiv.shlregr ;
  (* hdlname = "unsigneddiv datapathdiv shregq 6866.outreg_t" *)
  wire [31:0] \unsigneddiv.datapathdiv.shregq.6866.outreg_t ;
  (* hdlname = "unsigneddiv datapathdiv shregq 6866.seroutp" *)
  wire \unsigneddiv.datapathdiv.shregq.6866.seroutp ;
  (* hdlname = "unsigneddiv datapathdiv shregq clk" *)
  wire \unsigneddiv.datapathdiv.shregq.clk ;
  (* hdlname = "unsigneddiv datapathdiv shregq inreg" *)
  wire [31:0] \unsigneddiv.datapathdiv.shregq.inreg ;
  (* hdlname = "unsigneddiv datapathdiv shregq load" *)
  wire \unsigneddiv.datapathdiv.shregq.load ;
  (* hdlname = "unsigneddiv datapathdiv shregq outreg" *)
  wire [31:0] \unsigneddiv.datapathdiv.shregq.outreg ;
  (* hdlname = "unsigneddiv datapathdiv shregq rst" *)
  wire \unsigneddiv.datapathdiv.shregq.rst ;
  (* hdlname = "unsigneddiv datapathdiv shregq serin" *)
  wire \unsigneddiv.datapathdiv.shregq.serin ;
  (* hdlname = "unsigneddiv datapathdiv shregq serout" *)
  wire \unsigneddiv.datapathdiv.shregq.serout ;
  (* hdlname = "unsigneddiv datapathdiv shregq shiftl" *)
  wire \unsigneddiv.datapathdiv.shregq.shiftl ;
  (* hdlname = "unsigneddiv datapathdiv shregq shiftr" *)
  wire \unsigneddiv.datapathdiv.shregq.shiftr ;
  (* hdlname = "unsigneddiv datapathdiv shregq zero" *)
  wire \unsigneddiv.datapathdiv.shregq.zero ;
  (* hdlname = "unsigneddiv datapathdiv shregr 6833.outreg_t" *)
  wire [32:0] \unsigneddiv.datapathdiv.shregr.6833.outreg_t ;
  (* hdlname = "unsigneddiv datapathdiv shregr clk" *)
  wire \unsigneddiv.datapathdiv.shregr.clk ;
  (* hdlname = "unsigneddiv datapathdiv shregr inreg" *)
  wire [32:0] \unsigneddiv.datapathdiv.shregr.inreg ;
  (* hdlname = "unsigneddiv datapathdiv shregr load" *)
  wire \unsigneddiv.datapathdiv.shregr.load ;
  (* hdlname = "unsigneddiv datapathdiv shregr outreg" *)
  wire [32:0] \unsigneddiv.datapathdiv.shregr.outreg ;
  (* hdlname = "unsigneddiv datapathdiv shregr rst" *)
  wire \unsigneddiv.datapathdiv.shregr.rst ;
  (* hdlname = "unsigneddiv datapathdiv shregr serin" *)
  wire \unsigneddiv.datapathdiv.shregr.serin ;
  (* hdlname = "unsigneddiv datapathdiv shregr shiftl" *)
  wire \unsigneddiv.datapathdiv.shregr.shiftl ;
  (* hdlname = "unsigneddiv datapathdiv shregr shiftr" *)
  wire \unsigneddiv.datapathdiv.shregr.shiftr ;
  (* hdlname = "unsigneddiv datapathdiv shregr zero" *)
  wire \unsigneddiv.datapathdiv.shregr.zero ;
  (* hdlname = "unsigneddiv datapathdiv shrregq" *)
  wire \unsigneddiv.datapathdiv.shrregq ;
  (* hdlname = "unsigneddiv datapathdiv shrregr" *)
  wire \unsigneddiv.datapathdiv.shrregr ;
  (* hdlname = "unsigneddiv datapathdiv smux" *)
  wire \unsigneddiv.datapathdiv.smux ;
  (* hdlname = "unsigneddiv datapathdiv sub" *)
  wire [32:0] \unsigneddiv.datapathdiv.sub ;
  (* hdlname = "unsigneddiv datapathdiv zeroregm" *)
  wire \unsigneddiv.datapathdiv.zeroregm ;
  (* hdlname = "unsigneddiv datapathdiv zeroregq" *)
  wire \unsigneddiv.datapathdiv.zeroregq ;
  (* hdlname = "unsigneddiv datapathdiv zeroregr" *)
  wire \unsigneddiv.datapathdiv.zeroregr ;
  (* hdlname = "unsigneddiv dividend" *)
  wire [31:0] \unsigneddiv.dividend ;
  (* hdlname = "unsigneddiv divisor" *)
  wire [31:0] \unsigneddiv.divisor ;
  (* hdlname = "unsigneddiv donediv" *)
  wire \unsigneddiv.donediv ;
  (* hdlname = "unsigneddiv ldregm" *)
  wire \unsigneddiv.ldregm ;
  (* hdlname = "unsigneddiv ldregq" *)
  wire \unsigneddiv.ldregq ;
  (* hdlname = "unsigneddiv ldregr" *)
  wire \unsigneddiv.ldregr ;
  (* hdlname = "unsigneddiv q" *)
  wire [31:0] \unsigneddiv.q ;
  (* hdlname = "unsigneddiv qq0" *)
  wire \unsigneddiv.qq0 ;
  (* hdlname = "unsigneddiv r33" *)
  wire \unsigneddiv.r33 ;
  (* hdlname = "unsigneddiv remainder" *)
  wire [32:0] \unsigneddiv.remainder ;
  (* hdlname = "unsigneddiv rst" *)
  wire \unsigneddiv.rst ;
  (* hdlname = "unsigneddiv seldividend" *)
  wire \unsigneddiv.seldividend ;
  (* hdlname = "unsigneddiv selline1" *)
  wire \unsigneddiv.selline1 ;
  (* hdlname = "unsigneddiv shlregq" *)
  wire \unsigneddiv.shlregq ;
  (* hdlname = "unsigneddiv shlregr" *)
  wire \unsigneddiv.shlregr ;
  (* hdlname = "unsigneddiv shrregq" *)
  wire \unsigneddiv.shrregq ;
  (* hdlname = "unsigneddiv shrregr" *)
  wire \unsigneddiv.shrregr ;
  (* hdlname = "unsigneddiv startdiv" *)
  wire \unsigneddiv.startdiv ;
  (* hdlname = "unsigneddiv sync_rst" *)
  wire \unsigneddiv.sync_rst ;
  (* hdlname = "unsigneddiv zeroregm" *)
  wire \unsigneddiv.zeroregm ;
  (* hdlname = "unsigneddiv zeroregq" *)
  wire \unsigneddiv.zeroregq ;
  (* hdlname = "unsigneddiv zeroregr" *)
  wire \unsigneddiv.zeroregr ;
  reg [1:0] _40_;
  always @(posedge clk)
    if (_03_) _40_ <= 2'h0;
    else _40_ <= { _25_[5], _25_[0] };
  assign { _21_[5], _21_[0] } = _40_;
  reg [3:0] _41_;
  always @(posedge clk)
    if (rst) _41_ <= 4'h0;
    else _41_ <= _26_[4:1];
  assign _21_[4:1] = _41_;
  always @(posedge clk)
    if (_03_) _29_[32] <= 1'h0;
    else _29_[32] <= \unsigneddiv.datapathdiv.m [32];
  always @(posedge clk)
    if (rst) _29_[31:0] <= 32'd0;
    else _29_[31:0] <= _30_[31:0];
  assign _03_ = | { \unsigneddiv.controllerdiv.counter.initcnt , rst };
  assign \unsigneddiv.controllerdiv.pstate  = rst ? 2'h0 : _12_;
  always @(posedge clk)
    if (_19_) _12_ <= 2'h0;
    else _12_ <= \unsigneddiv.controllerdiv.nstate ;
  assign _19_ = | { sync_rst, rst };
  assign _20_ = | { _14_, _17_ };
  assign \unsigneddiv.controllerdiv.counter.temp  = rst ? 6'h00 : _21_;
  assign \unsigneddiv.datapathdiv.m  = rst ? 33'h000000000 : _29_;
  assign \unsigneddiv.datapathdiv.shregq.6866.seroutp  = rst ? 1'h0 : _31_;
  assign \tclq.ain  = rst ? 32'd0 : _32_;
  always @(posedge clk)
    if (rst) _32_ <= 32'd0;
    else _32_ <= _35_;
  assign \unsigneddiv.datapathdiv.rprev  = rst ? 33'h000000000 : _37_;
  always @(posedge clk)
    if (_03_) _37_ <= 33'h000000000;
    else _37_ <= _39_;
  assign _00_ = ! divisor;
  assign divisorzero = _00_ ? 1'h1 : 1'h0;
  assign dividedbyzeroflag = startsdiv & divisorzero;
  assign _01_ = ~ divisorzero;
  assign safestart = _01_ & startsdiv;
  assign endr = divisor[31] & signedunsignedbar;
  assign _02_ = dividend[31] ^ divisor[31];
  assign enq = _02_ & signedunsignedbar;
  assign endd = dividend[31] & signedunsignedbar;
  assign _04_ = ~ (* hdlname = "tcldividend 6514" *) dividend;
  assign \tcldividend.ainp  = endd ? (* hdlname = "tcldividend 6515" *) _04_ : dividend;
  assign _05_ = \tcldividend.ainp  + (* hdlname = "tcldividend 6517" *) 32'd1;
  assign \tcldividend.aout  = endd ? (* hdlname = "tcldividend 6518" *) _05_ : \tcldividend.ainp ;
  assign _06_ = ~ (* hdlname = "tcldivisor 6514" *) divisor;
  assign \tcldivisor.ainp  = endr ? (* hdlname = "tcldivisor 6515" *) _06_ : divisor;
  assign _07_ = \tcldivisor.ainp  + (* hdlname = "tcldivisor 6517" *) 32'd1;
  assign \tcldivisor.aout  = endr ? (* hdlname = "tcldivisor 6518" *) _07_ : \tcldivisor.ainp ;
  assign _08_ = ~ (* hdlname = "tclq 6514" *) \tclq.ain ;
  assign \tclq.ainp  = enq ? (* hdlname = "tclq 6515" *) _08_ : \tclq.ain ;
  assign _09_ = \tclq.ainp  + (* hdlname = "tclq 6517" *) 32'd1;
  assign \tclq.aout  = enq ? (* hdlname = "tclq 6518" *) _09_ : \tclq.ainp ;
  assign _10_ = ~ (* hdlname = "tclrem 6514" *) \unsigneddiv.datapathdiv.rprev [31:0];
  assign \tclrem.ainp  = endd ? (* hdlname = "tclrem 6515" *) _10_ : \unsigneddiv.datapathdiv.rprev [31:0];
  assign _11_ = \tclrem.ainp  + (* hdlname = "tclrem 6517" *) 32'd1;
  assign \tclrem.aout  = endd ? (* hdlname = "tclrem 6518" *) _11_ : \tclrem.ainp ;
  assign _13_ = safestart ? (* hdlname = "unsigneddiv controllerdiv 6698" *) 2'h1 : 2'h0;
  assign _15_ = \unsigneddiv.controllerdiv.cocnt  ? (* hdlname = "unsigneddiv controllerdiv 6703" *) 2'h0 : 2'h2;
  function [1:0] \unsigneddiv.controllerdiv.6711 ;
    input [1:0] a;
    input [5:0] b;
    input [2:0] s;
    (* hdlname = "unsigneddiv controllerdiv 6711" *)
    (* parallel_case *)
    casez (s)
      3'b??1:
        \unsigneddiv.controllerdiv.6711  = b[1:0];
      3'b?1?:
        \unsigneddiv.controllerdiv.6711  = b[3:2];
      3'b1??:
        \unsigneddiv.controllerdiv.6711  = b[5:4];
      default:
        \unsigneddiv.controllerdiv.6711  = a;
    endcase
  endfunction
  assign \unsigneddiv.controllerdiv.nstate  = \unsigneddiv.controllerdiv.6711 (2'hx, { 2'h1, _15_, _13_ }, { _17_, _16_, _14_ });
  assign _14_ = ! (* hdlname = "unsigneddiv controllerdiv 6717" *) \unsigneddiv.controllerdiv.pstate ;
  assign _18_ = \unsigneddiv.controllerdiv.cocnt  ? (* hdlname = "unsigneddiv controllerdiv 6720" *) 1'h1 : 1'h0;
  assign _16_ = \unsigneddiv.controllerdiv.pstate  == (* hdlname = "unsigneddiv controllerdiv 6722" *) 2'h1;
  assign _17_ = \unsigneddiv.controllerdiv.pstate  == (* hdlname = "unsigneddiv controllerdiv 6724" *) 2'h2;
  assign \unsigneddiv.controllerdiv.donediv  = _16_ ? (* hdlname = "unsigneddiv controllerdiv 6729" *) _18_ : 1'h0;
  assign \unsigneddiv.controllerdiv.shlregq  = _16_ ? (* hdlname = "unsigneddiv controllerdiv 6769" *) 1'h1 : 1'h0;
  assign \unsigneddiv.controllerdiv.ldregq  = _20_ ? (* hdlname = "unsigneddiv controllerdiv 6775" *) 1'h1 : 1'h0;
  assign \unsigneddiv.controllerdiv.counter.inccnt  = _17_ ? (* hdlname = "unsigneddiv controllerdiv 6799" *) 1'h1 : 1'h0;
  assign \unsigneddiv.controllerdiv.counter.initcnt  = _14_ ? (* hdlname = "unsigneddiv controllerdiv 6805" *) 1'h1 : 1'h0;
  assign _22_ = ~ (* hdlname = "unsigneddiv controllerdiv counter 6638" *) \unsigneddiv.controllerdiv.cocnt ;
  assign _23_ = _22_ & (* hdlname = "unsigneddiv controllerdiv counter 6639" *) \unsigneddiv.controllerdiv.counter.inccnt ;
  assign _24_ = \unsigneddiv.controllerdiv.counter.temp  + (* hdlname = "unsigneddiv controllerdiv counter 6641" *) 6'h01;
  assign _25_ = _23_ ? (* hdlname = "unsigneddiv controllerdiv counter 6642" *) _24_ : \unsigneddiv.controllerdiv.counter.temp ;
  assign _26_ = \unsigneddiv.controllerdiv.counter.initcnt  ? (* hdlname = "unsigneddiv controllerdiv counter 6643" *) 6'h1e : _25_;
  assign _27_ = \unsigneddiv.controllerdiv.counter.temp  == (* hdlname = "unsigneddiv controllerdiv counter 6652" *) 6'h3f;
  assign \unsigneddiv.controllerdiv.cocnt  = _27_ ? (* hdlname = "unsigneddiv controllerdiv counter 6653" *) 1'h1 : 1'h0;
  assign { \unsigneddiv.datapathdiv.sub [32], \unsigneddiv.datapathdiv.mux34b.a [31:0] } = \unsigneddiv.datapathdiv.rprev  - (* hdlname = "unsigneddiv datapathdiv 6667" *) \unsigneddiv.datapathdiv.m ;
  assign \unsigneddiv.datapathdiv.smux  = ~ (* hdlname = "unsigneddiv datapathdiv 6672" *) \unsigneddiv.datapathdiv.sub [32];
  assign _28_ = \unsigneddiv.controllerdiv.counter.inccnt  ? (* hdlname = "unsigneddiv datapathdiv mux33b 4834" *) { \tclq.ain [31:1], \unsigneddiv.datapathdiv.smux  } : 32'd0;
  assign \unsigneddiv.datapathdiv.mux33b.w  = \unsigneddiv.controllerdiv.counter.initcnt  ? (* hdlname = "unsigneddiv datapathdiv mux33b 4835" *) \tcldividend.aout  : _28_;
  assign \unsigneddiv.datapathdiv.mux34b.w  = \unsigneddiv.datapathdiv.sub [32] ? (* hdlname = "unsigneddiv datapathdiv mux34b 6902" *) \unsigneddiv.datapathdiv.rprev  : { 1'h0, \unsigneddiv.datapathdiv.mux34b.a [31:0] };
  assign _30_ = \unsigneddiv.controllerdiv.counter.initcnt  ? (* hdlname = "unsigneddiv datapathdiv regm 6584" *) { 1'h0, \tcldivisor.aout  } : \unsigneddiv.datapathdiv.m ;
  assign _33_ = \unsigneddiv.controllerdiv.shlregq  ? (* hdlname = "unsigneddiv datapathdiv shregq 6879" *) { \tclq.ain [30:0], 1'h0 } : \tclq.ain ;
  assign _34_ = \unsigneddiv.controllerdiv.shlregq  ? (* hdlname = "unsigneddiv datapathdiv shregq 6880" *) \tclq.ain [31] : \unsigneddiv.datapathdiv.shregq.6866.seroutp ;
  assign _35_ = \unsigneddiv.controllerdiv.ldregq  ? (* hdlname = "unsigneddiv datapathdiv shregq 6881" *) \unsigneddiv.datapathdiv.mux33b.w  : _33_;
  assign _36_ = \unsigneddiv.controllerdiv.ldregq  ? (* hdlname = "unsigneddiv datapathdiv shregq 6882" *) \unsigneddiv.datapathdiv.shregq.6866.seroutp  : _34_;
  (* hdlname = "unsigneddiv datapathdiv shregq 6896" *)
  always @(posedge clk)
    if (rst) _31_ <= 1'h0;
    else _31_ <= _36_;
  assign _38_ = \unsigneddiv.controllerdiv.shlregq  ? (* hdlname = "unsigneddiv datapathdiv shregr 6846" *) { \unsigneddiv.datapathdiv.rprev [31:0], \unsigneddiv.datapathdiv.shregq.6866.seroutp  } : \unsigneddiv.datapathdiv.rprev ;
  assign _39_ = \unsigneddiv.controllerdiv.counter.inccnt  ? (* hdlname = "unsigneddiv datapathdiv shregr 6848" *) \unsigneddiv.datapathdiv.mux34b.w  : _38_;
  assign ddin = \tcldividend.aout ;
  assign donesdiv = \unsigneddiv.controllerdiv.donediv ;
  assign drin = \tcldivisor.aout ;
  assign enr = endd;
  assign qout = \tclq.aout ;
  assign qp = \tclq.ain ;
  assign remout = \tclrem.aout ;
  assign remp = \unsigneddiv.datapathdiv.rprev ;
  assign \tcldividend.ain  = dividend;
  assign \tcldividend.en  = endd;
  assign \tcldivisor.ain  = divisor;
  assign \tcldivisor.en  = endr;
  assign \tclq.en  = enq;
  assign \tclrem.ain  = \unsigneddiv.datapathdiv.rprev [31:0];
  assign \tclrem.en  = endd;
  assign \unsigneddiv.clk  = clk;
  assign \unsigneddiv.controllerdiv.clk  = clk;
  assign \unsigneddiv.controllerdiv.counter.clk  = clk;
  assign \unsigneddiv.controllerdiv.counter.cocnt  = \unsigneddiv.controllerdiv.cocnt ;
  assign \unsigneddiv.controllerdiv.counter.cocntp  = \unsigneddiv.controllerdiv.cocnt ;
  assign \unsigneddiv.controllerdiv.counter.initvalue  = 6'h1e;
  assign \unsigneddiv.controllerdiv.counter.outcnt  = \unsigneddiv.controllerdiv.counter.temp ;
  assign \unsigneddiv.controllerdiv.counter.rst  = rst;
  assign \unsigneddiv.controllerdiv.counter.zerocnt  = 1'h0;
  assign \unsigneddiv.controllerdiv.inccnt  = \unsigneddiv.controllerdiv.counter.inccnt ;
  assign \unsigneddiv.controllerdiv.initcnt  = \unsigneddiv.controllerdiv.counter.initcnt ;
  assign \unsigneddiv.controllerdiv.ldregm  = \unsigneddiv.controllerdiv.counter.initcnt ;
  assign \unsigneddiv.controllerdiv.ldregr  = \unsigneddiv.controllerdiv.counter.inccnt ;
  assign \unsigneddiv.controllerdiv.qq0  = \unsigneddiv.datapathdiv.smux ;
  assign \unsigneddiv.controllerdiv.r33  = \unsigneddiv.datapathdiv.sub [32];
  assign \unsigneddiv.controllerdiv.rst  = rst;
  assign \unsigneddiv.controllerdiv.seldividend  = \unsigneddiv.controllerdiv.counter.initcnt ;
  assign \unsigneddiv.controllerdiv.selline1  = \unsigneddiv.controllerdiv.counter.inccnt ;
  assign \unsigneddiv.controllerdiv.shlregr  = \unsigneddiv.controllerdiv.shlregq ;
  assign \unsigneddiv.controllerdiv.shrregq  = 1'h0;
  assign \unsigneddiv.controllerdiv.shrregr  = 1'h0;
  assign \unsigneddiv.controllerdiv.startdiv  = safestart;
  assign \unsigneddiv.controllerdiv.sync_rst  = sync_rst;
  assign \unsigneddiv.controllerdiv.zerocnt  = 1'h0;
  assign \unsigneddiv.controllerdiv.zeroregm  = 1'h0;
  assign \unsigneddiv.controllerdiv.zeroregq  = 1'h0;
  assign \unsigneddiv.controllerdiv.zeroregr  = \unsigneddiv.controllerdiv.counter.initcnt ;
  assign \unsigneddiv.datapathdiv.addresult  = \unsigneddiv.datapathdiv.mux34b.w ;
  assign \unsigneddiv.datapathdiv.clk  = clk;
  assign \unsigneddiv.datapathdiv.dividend  = \tcldividend.aout ;
  assign \unsigneddiv.datapathdiv.divisor  = \tcldivisor.aout ;
  assign \unsigneddiv.datapathdiv.divisorp  = { 1'h0, \tcldivisor.aout  };
  assign \unsigneddiv.datapathdiv.ldregm  = \unsigneddiv.controllerdiv.counter.initcnt ;
  assign \unsigneddiv.datapathdiv.ldregq  = \unsigneddiv.controllerdiv.ldregq ;
  assign \unsigneddiv.datapathdiv.ldregr  = \unsigneddiv.controllerdiv.counter.inccnt ;
  assign \unsigneddiv.datapathdiv.leftbitoutq  = \unsigneddiv.datapathdiv.shregq.6866.seroutp ;
  assign \unsigneddiv.datapathdiv.line1  = { \tclq.ain [31:1], \unsigneddiv.datapathdiv.smux  };
  assign \unsigneddiv.datapathdiv.mux33b.a  = \tcldividend.aout ;
  assign \unsigneddiv.datapathdiv.mux33b.b  = { \tclq.ain [31:1], \unsigneddiv.datapathdiv.smux  };
  assign \unsigneddiv.datapathdiv.mux33b.s0  = \unsigneddiv.controllerdiv.counter.initcnt ;
  assign \unsigneddiv.datapathdiv.mux33b.s1  = \unsigneddiv.controllerdiv.counter.inccnt ;
  assign \unsigneddiv.datapathdiv.mux34b.a [32] = \unsigneddiv.datapathdiv.sub [32];
  assign \unsigneddiv.datapathdiv.mux34b.b  = \unsigneddiv.datapathdiv.rprev ;
  assign \unsigneddiv.datapathdiv.mux34b.s0  = \unsigneddiv.datapathdiv.smux ;
  assign \unsigneddiv.datapathdiv.mux34b.s1  = \unsigneddiv.datapathdiv.sub [32];
  assign \unsigneddiv.datapathdiv.outmux1  = \unsigneddiv.datapathdiv.mux33b.w ;
  assign \unsigneddiv.datapathdiv.q  = \tclq.ain ;
  assign \unsigneddiv.datapathdiv.qprev  = \tclq.ain ;
  assign \unsigneddiv.datapathdiv.qq0  = \unsigneddiv.datapathdiv.smux ;
  assign \unsigneddiv.datapathdiv.r33  = \unsigneddiv.datapathdiv.sub [32];
  assign \unsigneddiv.datapathdiv.regm.clk  = clk;
  assign \unsigneddiv.datapathdiv.regm.inreg  = { 1'h0, \tcldivisor.aout  };
  assign \unsigneddiv.datapathdiv.regm.load  = \unsigneddiv.controllerdiv.counter.initcnt ;
  assign \unsigneddiv.datapathdiv.regm.outreg  = \unsigneddiv.datapathdiv.m ;
  assign \unsigneddiv.datapathdiv.regm.rst  = rst;
  assign \unsigneddiv.datapathdiv.regm.zero  = 1'h0;
  assign \unsigneddiv.datapathdiv.remainder  = \unsigneddiv.datapathdiv.rprev ;
  assign \unsigneddiv.datapathdiv.rst  = rst;
  assign \unsigneddiv.datapathdiv.seldividend  = \unsigneddiv.controllerdiv.counter.initcnt ;
  assign \unsigneddiv.datapathdiv.selline1  = \unsigneddiv.controllerdiv.counter.inccnt ;
  assign \unsigneddiv.datapathdiv.shlregq  = \unsigneddiv.controllerdiv.shlregq ;
  assign \unsigneddiv.datapathdiv.shlregr  = \unsigneddiv.controllerdiv.shlregq ;
  assign \unsigneddiv.datapathdiv.shregq.6866.outreg_t  = \tclq.ain ;
  assign \unsigneddiv.datapathdiv.shregq.clk  = clk;
  assign \unsigneddiv.datapathdiv.shregq.inreg  = \unsigneddiv.datapathdiv.mux33b.w ;
  assign \unsigneddiv.datapathdiv.shregq.load  = \unsigneddiv.controllerdiv.ldregq ;
  assign \unsigneddiv.datapathdiv.shregq.outreg  = \tclq.ain ;
  assign \unsigneddiv.datapathdiv.shregq.rst  = rst;
  assign \unsigneddiv.datapathdiv.shregq.serin  = 1'h0;
  assign \unsigneddiv.datapathdiv.shregq.serout  = \unsigneddiv.datapathdiv.shregq.6866.seroutp ;
  assign \unsigneddiv.datapathdiv.shregq.shiftl  = \unsigneddiv.controllerdiv.shlregq ;
  assign \unsigneddiv.datapathdiv.shregq.shiftr  = 1'h0;
  assign \unsigneddiv.datapathdiv.shregq.zero  = 1'h0;
  assign \unsigneddiv.datapathdiv.shregr.6833.outreg_t  = \unsigneddiv.datapathdiv.rprev ;
  assign \unsigneddiv.datapathdiv.shregr.clk  = clk;
  assign \unsigneddiv.datapathdiv.shregr.inreg  = \unsigneddiv.datapathdiv.mux34b.w ;
  assign \unsigneddiv.datapathdiv.shregr.load  = \unsigneddiv.controllerdiv.counter.inccnt ;
  assign \unsigneddiv.datapathdiv.shregr.outreg  = \unsigneddiv.datapathdiv.rprev ;
  assign \unsigneddiv.datapathdiv.shregr.rst  = rst;
  assign \unsigneddiv.datapathdiv.shregr.serin  = \unsigneddiv.datapathdiv.shregq.6866.seroutp ;
  assign \unsigneddiv.datapathdiv.shregr.shiftl  = \unsigneddiv.controllerdiv.shlregq ;
  assign \unsigneddiv.datapathdiv.shregr.shiftr  = 1'h0;
  assign \unsigneddiv.datapathdiv.shregr.zero  = \unsigneddiv.controllerdiv.counter.initcnt ;
  assign \unsigneddiv.datapathdiv.shrregq  = 1'h0;
  assign \unsigneddiv.datapathdiv.shrregr  = 1'h0;
  assign \unsigneddiv.datapathdiv.sub [31:0] = \unsigneddiv.datapathdiv.mux34b.a [31:0];
  assign \unsigneddiv.datapathdiv.zeroregm  = 1'h0;
  assign \unsigneddiv.datapathdiv.zeroregq  = 1'h0;
  assign \unsigneddiv.datapathdiv.zeroregr  = \unsigneddiv.controllerdiv.counter.initcnt ;
  assign \unsigneddiv.dividend  = \tcldividend.aout ;
  assign \unsigneddiv.divisor  = \tcldivisor.aout ;
  assign \unsigneddiv.donediv  = \unsigneddiv.controllerdiv.donediv ;
  assign \unsigneddiv.ldregm  = \unsigneddiv.controllerdiv.counter.initcnt ;
  assign \unsigneddiv.ldregq  = \unsigneddiv.controllerdiv.ldregq ;
  assign \unsigneddiv.ldregr  = \unsigneddiv.controllerdiv.counter.inccnt ;
  assign \unsigneddiv.q  = \tclq.ain ;
  assign \unsigneddiv.qq0  = \unsigneddiv.datapathdiv.smux ;
  assign \unsigneddiv.r33  = \unsigneddiv.datapathdiv.sub [32];
  assign \unsigneddiv.remainder  = \unsigneddiv.datapathdiv.rprev ;
  assign \unsigneddiv.rst  = rst;
  assign \unsigneddiv.seldividend  = \unsigneddiv.controllerdiv.counter.initcnt ;
  assign \unsigneddiv.selline1  = \unsigneddiv.controllerdiv.counter.inccnt ;
  assign \unsigneddiv.shlregq  = \unsigneddiv.controllerdiv.shlregq ;
  assign \unsigneddiv.shlregr  = \unsigneddiv.controllerdiv.shlregq ;
  assign \unsigneddiv.shrregq  = 1'h0;
  assign \unsigneddiv.shrregr  = 1'h0;
  assign \unsigneddiv.startdiv  = safestart;
  assign \unsigneddiv.sync_rst  = sync_rst;
  assign \unsigneddiv.zeroregm  = 1'h0;
  assign \unsigneddiv.zeroregq  = 1'h0;
  assign \unsigneddiv.zeroregr  = \unsigneddiv.controllerdiv.counter.initcnt ;
endmodule

module aftab_sulu_32(loadbytesigned, loadhalfsigned, load, datain, dataout);
  wire [31:0] _0_;
  wire [31:0] _1_;
  input [31:0] datain;
  wire [31:0] datain;
  output [31:0] dataout;
  wire [31:0] dataout;
  input load;
  wire load;
  input loadbytesigned;
  wire loadbytesigned;
  input loadhalfsigned;
  wire loadhalfsigned;
  assign dataout = loadbytesigned ? { datain[7], datain[7], datain[7], datain[7], datain[7], datain[7], datain[7], datain[7], datain[7], datain[7], datain[7], datain[7], datain[7], datain[7], datain[7], datain[7], datain[7], datain[7], datain[7], datain[7], datain[7], datain[7], datain[7], datain[7], datain[7:0] } : _0_;
  assign _0_ = loadhalfsigned ? { datain[15], datain[15], datain[15], datain[15], datain[15], datain[15], datain[15], datain[15], datain[15], datain[15], datain[15], datain[15], datain[15], datain[15], datain[15], datain[15], datain[15:0] } : _1_;
  assign _1_ = load ? datain : 32'd0;
endmodule

module aftab_tcl_32(ain, en, aout);
  wire [31:0] _0_;
  wire [31:0] _1_;
  input [31:0] ain;
  wire [31:0] ain;
  wire [31:0] ainp;
  output [31:0] aout;
  wire [31:0] aout;
  input en;
  wire en;
  assign _0_ = ~ ain;
  assign ainp = en ? _0_ : ain;
  assign _1_ = ainp + 32'd1;
  assign aout = en ? _1_ : ainp;
endmodule
